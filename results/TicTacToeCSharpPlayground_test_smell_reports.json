[
  {
    "Name": "BoardsControllerITests",
    "Message": null,
    "ProjectName": "Tests",
    "Methods": [
      {
        "Name": "ShouldCreateBoardGivenProvidedBoardSetup",
        "Body": "{\r\n    // Arrange\r\n    var antunes = new Player\r\n    {\r\n        Name = \u0022Antunes\u0022\r\n    };\r\n    var rose = new Player\r\n    {\r\n        Name = \u0022Rose\u0022,\r\n        Computer = true\r\n    };\r\n    AppDbContext.Players.AddRange(antunes, rose);\r\n    await AppDbContext.SaveChangesAsync();\r\n    var postData = new\r\n    {\r\n        boardSize = \u00224x4\u0022,\r\n        firstPlayerId = antunes.Id,\r\n        SecondPlayerId = rose.Id\r\n    };\r\n    // Act\r\n    var response = await Client.PostAsJsonAsync(_requestUri, postData);\r\n    // Assert\r\n    response.StatusCode.Should().Be(HttpStatusCode.Created);\r\n    var createdBoard = await response.Content.ReadFromJsonAsync\u003CBoardDTO\u003E();\r\n    createdBoard.Should().NotBe(null);\r\n    createdBoard.NumberOfColumn.Should().Be(4);\r\n    createdBoard.NumberOfRows.Should().Be(4);\r\n    createdBoard.Players.Count.Should().Be(2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreateDefaultBoardWithStandardSetupGivenTwoPlayersProvided",
        "Body": "{\r\n    // Arrange\r\n    var aladdin = new Player\r\n    {\r\n        Name = \u0022Aladdin\u0022\r\n    };\r\n    var jasmine = new Player\r\n    {\r\n        Name = \u0022Jasmine\u0022\r\n    };\r\n    await AppDbContext.Players.AddRangeAsync(aladdin, jasmine);\r\n    await AppDbContext.SaveChangesAsync();\r\n    var postData = new\r\n    {\r\n        firstPlayerId = aladdin.Id.ToString(),\r\n        secondPlayerId = jasmine.Id.ToString()\r\n    };\r\n    // Act\r\n    var response = await Client.PostAsJsonAsync(_requestUri, postData);\r\n    // Assert\r\n    response.StatusCode.Should().Be(HttpStatusCode.Created);\r\n    var createdBoard = await response.Content.ReadFromJsonAsync\u003CBoardDTO\u003E();\r\n    createdBoard.Should().NotBe(null);\r\n    createdBoard.NumberOfColumn.Should().Be(3);\r\n    createdBoard.NumberOfRows.Should().Be(3);\r\n    var playerBoards = createdBoard.Players;\r\n    playerBoards.Count.Should().Be(2);\r\n    playerBoards.FirstOrDefault(p =\u003E p.Id == aladdin.Id).Should().NotBeNull();\r\n    playerBoards.FirstOrDefault(p =\u003E p.Id == jasmine.Id).Should().NotBeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRaise400GivenBoardSetupIsNotValid",
        "Body": "{\r\n    // Arrange\r\n    var postData = new\r\n    {\r\n        boardSize = \u00222x2\u0022\r\n    };\r\n    // Act\r\n    var response = await Client.PostAsJsonAsync(_requestUri, postData);\r\n    // Assert\r\n    response.StatusCode.Should().Be(HttpStatusCode.BadRequest);\r\n    var content = await response.Content.ReadAsStringAsync();\r\n    var expectedMessage = $\u0022Board {postData.boardSize} is not supported. You can try 3x3 \uD83D\uDC4D\u0022;\r\n    content.Should().Be(expectedMessage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "GamesControllerITests",
    "Message": null,
    "ProjectName": "Tests",
    "Methods": [
      {
        "Name": "ShouldCreateGameGivenFirstMovementIsBeingExecuted",
        "Body": "{\r\n    // Arrange\r\n    var aladdin = new Player\r\n    {\r\n        Name = \u0022Aladdin\u0022,\r\n        Computer = false\r\n    };\r\n    var rose = new Player\r\n    {\r\n        Name = \u0022Rose\u0022,\r\n        Computer = true\r\n    };\r\n    var createdBoard = (await new BoardBuilder().WithDbContext(AppDbContext).CreateBoard().WithPlayers(aladdin, rose).Build()).First();\r\n    var movementPosition = 1;\r\n    string requestPath = new BuildUri(_requestPathPlay).AddParam(\u0022BoardId\u0022, createdBoard.Id).AddParam(\u0022PlayerId\u0022, aladdin.Id).AddParam(\u0022MovementPosition\u0022, movementPosition).Build();\r\n    var response = await Client.GetAsync(requestPath);\r\n    // Assert\r\n    response.StatusCode.Should().Be(HttpStatusCode.OK);\r\n    var test = await response.Content.ReadAsStringAsync();\r\n    var gameStatus = await response.Content.ReadFromJsonAsync\u003CGameDTO\u003E();\r\n    gameStatus.Should().NotBe(null);\r\n    gameStatus.Draw.Should().BeFalse();\r\n    gameStatus.Finished.Should().BeFalse();\r\n    gameStatus.Winner.Should().BeNull();\r\n    var boardUsedToPlay = gameStatus.ConfiguredBoard;\r\n    var boardPositions = boardUsedToPlay.NumberOfRows * boardUsedToPlay.NumberOfColumn;\r\n    var expectedFreeFields = boardPositions - AppDbContext.Movements.Count();\r\n    boardUsedToPlay.FreeFields.Count.Should().Be(expectedFreeFields);\r\n    // All board positions\r\n    boardUsedToPlay.FieldsConfiguration[0][0].Name.Should().Be(aladdin.Name);\r\n    boardUsedToPlay.FieldsConfiguration[0][1].Name.Should().Be(rose.Name);\r\n    boardUsedToPlay.FieldsConfiguration[0][2].Should().BeNull();\r\n    for (var position = 1; position \u003C boardUsedToPlay.FieldsConfiguration.Count; position\u002B\u002B)\r\n        foreach (var player in boardUsedToPlay.FieldsConfiguration[position])\r\n            player.Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "ShouldRaise400GivenBoardIsNotFoundToCreateGame",
        "Body": "{\r\n    // Arrange\r\n    var fakeBoardId = 42L;\r\n    var fakePlayerId = 84L;\r\n    var movementPosition = 1;\r\n    string requestPath = new BuildUri(_requestPathPlay).AddParam(\u0022BoardId\u0022, fakeBoardId).AddParam(\u0022PlayerId\u0022, fakePlayerId).AddParam(\u0022MovementPosition\u0022, movementPosition).Build();\r\n    // Act\r\n    var response = await Client.GetAsync(requestPath);\r\n    // Assert\r\n    response.StatusCode.Should().Be(HttpStatusCode.NotFound);\r\n    var content = await response.Content.ReadAsStringAsync();\r\n    content.Should().Be($\u0022The board {fakeBoardId} is not available. Are you sure you are correct? \uD83E\uDD14\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRaise400GivenPlayerIsNotFoundToPlayGame",
        "Body": "{\r\n    // Arrange\r\n    var createdBoard = (await new BoardBuilder().WithDbContext(AppDbContext).CreateBoard().WithPlayers(new Player { Name = \u0022Aladdin\u0022 }, new Player { Name = \u0022Rose\u0022 }).Build()).First();\r\n    var fakePlayerId = 42L;\r\n    var movementPosition = 1;\r\n    string requestPath = new BuildUri(_requestPathPlay).AddParam(\u0022BoardId\u0022, createdBoard.Id).AddParam(\u0022PlayerId\u0022, fakePlayerId).AddParam(\u0022MovementPosition\u0022, movementPosition).Build();\r\n    // Act\r\n    var response = await Client.GetAsync(requestPath);\r\n    // Assert\r\n    response.StatusCode.Should().Be(HttpStatusCode.NotFound);\r\n    var content = await response.Content.ReadAsStringAsync();\r\n    content.Should().Be($\u0022There is no player with ID {fakePlayerId}\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRaise400GivenTheGameIsFinished",
        "Body": "{\r\n    // Arrange\r\n    var aladdin = new Player\r\n    {\r\n        Name = \u0022Aladdin\u0022,\r\n        Computer = false\r\n    };\r\n    var rose = new Player\r\n    {\r\n        Name = \u0022Rose\u0022,\r\n        Computer = true\r\n    };\r\n    var board = await new BoardBuilder().WithDbContext(AppDbContext).CreateBoard().WithPlayers(aladdin, rose).BuildAndGetFirstBoard();\r\n    await new GameBuilder().WithDbContext(AppDbContext).WithBoard(board).WithPlayers(aladdin, rose).PlayerOneWinning().Build();\r\n    var movementPosition = 1;\r\n    string requestPath = new BuildUri(_requestPathPlay).AddParam(\u0022BoardId\u0022, board.Id).AddParam(\u0022PlayerId\u0022, aladdin.Id).AddParam(\u0022MovementPosition\u0022, movementPosition).Build();\r\n    // Act\r\n    var response = await Client.GetAsync(requestPath);\r\n    // Assert\r\n    response.StatusCode.Should().Be(HttpStatusCode.BadRequest);\r\n    var content = await response.Content.ReadAsStringAsync();\r\n    content.Should().Be($\u0022The game associated with the board {board.Id} is finished\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PlayersControllerITests",
    "Message": null,
    "ProjectName": "Tests",
    "Methods": [
      {
        "Name": "ShouldReturn404GivenNoPlayerIsFound",
        "Body": "{\r\n    // Arrange\r\n    var fakePlayerId = 42;\r\n    // Act\r\n    var response = await Client.GetAsync($\u0022{_requestUri}/{fakePlayerId}\u0022);\r\n    response.StatusCode.Should().Be(HttpStatusCode.NotFound);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturn400GivenPlayerIsInvalid",
        "Body": "{\r\n    // When nullable is activated, it can be used to assert if a given body is valid or not\r\n    // Arrange\r\n    var playerToBeCreated = new Player();\r\n    // Act\r\n    var response = await Client.PostAsJsonAsync(_requestUri, playerToBeCreated);\r\n    // Assert\r\n    response.StatusCode.Should().Be(HttpStatusCode.BadRequest);\r\n    var valueAsString = await response.Content.ReadAsStringAsync();\r\n    var responseJson = JObject.Parse(valueAsString);\r\n    var errors = responseJson[\u0022errors\u0022].ToObject\u003CDictionary\u003Cstring, List\u003Cstring\u003E\u003E\u003E();\r\n    errors.Keys.Should().HaveCount(1);\r\n    var errorsRelatedToName = errors[\u0022Name\u0022];\r\n    errorsRelatedToName.Should().HaveCount(1);\r\n    var motive = errorsRelatedToName.First();\r\n    motive.Should().Be(\u0022The Name field is required.\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePlayerGivenValidRequest",
        "Body": "{\r\n    // Arrange\r\n    var playerToBeCreated = new Player\r\n    {\r\n        Name = \u0022Jafar\u0022\r\n    };\r\n    // Act\r\n    var response = await Client.PostAsJsonAsync(_requestUri, playerToBeCreated);\r\n    // Assert\r\n    response.StatusCode.Should().Be(HttpStatusCode.Created);\r\n    var createdPlayer = await response.Content.ReadFromJsonAsync\u003CPlayer\u003E();\r\n    var expectedLocation = $\u0022http://localhost/{_requestUri}/{createdPlayer.Id}\u0022;\r\n    response.Headers.Location.ToString().Should().Be(expectedLocation);\r\n    createdPlayer.Name.Should().Be(playerToBeCreated.Name);\r\n    createdPlayer.Computer.Should().BeFalse();\r\n    createdPlayer.Id.Should().BePositive();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturnPlayerCreatedPreviously",
        "Body": "{\r\n    // Arrange\r\n    var somePlayer = new Player\r\n    {\r\n        Name = \u0022Salted Guy\u0022\r\n    };\r\n    AppDbContext.Players.Add(somePlayer);\r\n    await AppDbContext.SaveChangesAsync();\r\n    // Act\r\n    var response = await Client.GetAsync($\u0022{_requestUri}/{somePlayer.Id}\u0022);\r\n    response.StatusCode.Should().Be(HttpStatusCode.OK);\r\n    var retrievedPlayer = await response.Content.ReadFromJsonAsync\u003CPlayer\u003E();\r\n    retrievedPlayer.Should().BeEquivalentTo(somePlayer);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldDeletePlayer",
        "Body": "{\r\n    // Arrange\r\n    var bear = new Player\r\n    {\r\n        Name = \u0022Bear\u0022\r\n    };\r\n    AppDbContext.Players.AddRange(bear, new Player { Name = \u0022Salted Man\u0022 });\r\n    await AppDbContext.SaveChangesAsync();\r\n    AppDbContext.Players.Count().Should().Be(2);\r\n    // Act\r\n    var response = await Client.DeleteAsync($\u0022{_requestUri}/{bear.Id}\u0022);\r\n    // Assert\r\n    response.StatusCode.Should().Be(HttpStatusCode.OK);\r\n    var player = await response.Content.ReadFromJsonAsync\u003CPlayer\u003E();\r\n    player.Id.Should().Be(bear.Id);\r\n    AppDbContext.Players.Count().Should().Be(1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldUpdatePlayer",
        "Body": "{\r\n    // Arrange\r\n    var bear = new Player\r\n    {\r\n        Name = \u0022Bear\u0022\r\n    };\r\n    AppDbContext.Players.Add(bear);\r\n    await AppDbContext.SaveChangesAsync();\r\n    // This is needed because DbContext is Singleton (only during tests)\r\n    AppDbContext.Entry(bear).State = EntityState.Detached;\r\n    var bearWithNewName = new\r\n    {\r\n        bear.Id,\r\n        Name = \u0022Salted Bear\u0022,\r\n        bear.Computer\r\n    };\r\n    var serializeObject = JsonConvert.SerializeObject(bearWithNewName);\r\n    var contentRequest = new StringContent(serializeObject, Encoding.UTF8, \u0022application/json\u0022);\r\n    // Act\r\n    var response = await Client.PutAsync(_requestUri, contentRequest);\r\n    // Assert\r\n    response.StatusCode.Should().Be(HttpStatusCode.NoContent);\r\n    AppDbContext.Players.Count().Should().Be(1);\r\n    var refreshedBear = AppDbContext.Players.First();\r\n    refreshedBear.Name.Should().Be(bearWithNewName.Name);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturnAllPlayers",
        "Body": "{\r\n    // Arrange\r\n    AppDbContext.Players.AddRange(new Player { Name = \u0022Bear\u0022 }, new Player { Name = \u0022Salted Man\u0022 });\r\n    await AppDbContext.SaveChangesAsync();\r\n    // Act\r\n    var response = await Client.GetAsync(_requestUri);\r\n    // Assert\r\n    response.StatusCode.Should().Be(HttpStatusCode.OK);\r\n    var paginatedPlayer = await response.Content.ReadFromJsonAsync\u003CPaginated\u003CPlayerDTO\u003E\u003E();\r\n    paginatedPlayer.Count.Should().Be(2);\r\n    paginatedPlayer.Results.Should().HaveCount(2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "BoardDealerTest",
    "Message": null,
    "ProjectName": "Tests",
    "Methods": [
      {
        "Name": "ShouldReturnFalseIfBoardSizeDoesNotMatchRegex",
        "Body": "{\r\n    _boardDealer.NotValidOrUnsupportedBoardSize(\u0022Cockatiel\u0022).Should().BeTrue();\r\n    _boardDealer.NotValidOrUnsupportedBoardSize(\u00221\u0022).Should().BeTrue();\r\n    _boardDealer.NotValidOrUnsupportedBoardSize(\u00222\u0022).Should().BeTrue();\r\n    _boardDealer.NotValidOrUnsupportedBoardSize(\u00223\u0022).Should().BeTrue();\r\n    _boardDealer.NotValidOrUnsupportedBoardSize(\u00221v1\u0022).Should().BeTrue();\r\n    _boardDealer.NotValidOrUnsupportedBoardSize(\u00222v2\u0022).Should().BeTrue();\r\n    _boardDealer.NotValidOrUnsupportedBoardSize(\u00223v3\u0022).Should().BeTrue();\r\n    _boardDealer.NotValidOrUnsupportedBoardSize(\u00224x3\u0022).Should().BeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturnTrueIfBoardSizeHasColumnAndRowsGreaterThan2AndAreEqualAndLessThan10",
        "Body": "{\r\n    _boardDealer.NotValidOrUnsupportedBoardSize(\u00220x0\u0022).Should().BeTrue();\r\n    _boardDealer.NotValidOrUnsupportedBoardSize(\u00221x1\u0022).Should().BeTrue();\r\n    _boardDealer.NotValidOrUnsupportedBoardSize(\u00222x2\u0022).Should().BeTrue();\r\n    // Minimum is 3x3\r\n    _boardDealer.NotValidOrUnsupportedBoardSize(\u00223x3\u0022).Should().BeFalse();\r\n    _boardDealer.NotValidOrUnsupportedBoardSize(\u00224x4\u0022).Should().BeFalse();\r\n    _boardDealer.NotValidOrUnsupportedBoardSize(\u00229x9\u0022).Should().BeFalse();\r\n    // Maximum is 9x9\r\n    _boardDealer.NotValidOrUnsupportedBoardSize(\u002210x10\u0022).Should().BeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreateRequestedBoard",
        "Body": "{\r\n    // Arrange\r\n    var boardSetup = new\r\n    {\r\n        columnSize = 4,\r\n        rowSize = 3\r\n    };\r\n    var boardSize = $\u0022{boardSetup.columnSize}x{boardSetup.rowSize}\u0022;\r\n    var playerOne = new Player\r\n    {\r\n        Name = \u0022Bear\u0022\r\n    };\r\n    var playerTwo = new Player\r\n    {\r\n        Name = \u0022Salted Man\u0022\r\n    };\r\n    // Act\r\n    var board = _boardDealer.PrepareBoardWithRequestSetup(boardSize, playerOne, playerTwo);\r\n    // Assert\r\n    board.NumberOfColumn.Should().Be(boardSetup.columnSize);\r\n    board.NumberOfRows.Should().Be(boardSetup.rowSize);\r\n    board.PlayerBoards.Should().HaveCount(2);\r\n    board.FieldsConfiguration.Should().NotBeNull();\r\n    board.FreeFields.Should().NotBeNull();\r\n    var expectedPlayerOne = board.PlayerBoards.First().Player;\r\n    var expectedPlayerTwo = board.PlayerBoards.Last().Player;\r\n    expectedPlayerOne.Should().Be(playerOne);\r\n    expectedPlayerTwo.Should().Be(playerTwo);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCheckIfGivenMovementFinishesTheGame",
        "Body": "{\r\n    // Arrange\r\n    var board = new BoardBuilder().BoardSize(3).WithPlayer(new Player { Name = \u0022Iago\u0022 }).GivenRow(0).FillAllColumnsUntilColumn(2).Build();\r\n    int position = 3;\r\n    // Act\r\n    var boardState = _boardDealer.EvaluateTheSituation(board, position);\r\n    // Assert\r\n    boardState.HasAWinner.Should().BeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreateMovementForPlayer",
        "Body": "{\r\n    // Arrange\r\n    var player = new Player\r\n    {\r\n        Name = \u0022Iago\u0022\r\n    };\r\n    var board = new BoardBuilder().BoardSize(3).Build();\r\n    var freeFieldsCountDuringArrange = board.FreeFields.Count;\r\n    var position = 1;\r\n    // Act\r\n    var movement = _boardDealer.CreateMovementForCustomPlayerOrComputer(board, position, player);\r\n    // Assert\r\n    board.FreeFields.Count.Should().Be(freeFieldsCountDuringArrange - 1);\r\n    board.FieldsConfiguration[0][0].Should().Be(player);\r\n    movement.Position.Should().Be(position);\r\n    movement.WhoMade.Should().Be(player);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreateMovementForRobotPlayer",
        "Body": "{\r\n    // Arrange\r\n    var playerIago = new Player\r\n    {\r\n        Name = \u0022Iago\u0022,\r\n        Computer = false\r\n    };\r\n    var playerRose = new Player\r\n    {\r\n        Name = \u0022Rose\u0022,\r\n        Computer = true\r\n    };\r\n    var board = new BoardBuilder().BoardSize(3).AddPlayers(playerIago, playerRose).Build();\r\n    var freeFieldsCountDuringArrange = board.FreeFields.Count;\r\n    var position = 1;\r\n    // Act\r\n    var movement = _boardDealer.CreateMovementForCustomPlayerOrComputer(board, position);\r\n    // Assert\r\n    board.FreeFields.Count.Should().Be(freeFieldsCountDuringArrange - 1);\r\n    board.FieldsConfiguration[0][0].Should().Be(playerRose);\r\n    movement.Position.Should().Be(position);\r\n    movement.WhoMade.Should().Be(playerRose);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "BoardJudgeTest",
    "Message": null,
    "ProjectName": "Tests",
    "Methods": [
      {
        "Name": "ShouldReturnRowAndColumnGivenSpecificPositionForBoard3X3",
        "Body": "{\r\n    // Arrange\r\n    var board = new Board\r\n    {\r\n        NumberOfColumn = 3,\r\n        NumberOfRows = 3\r\n    };\r\n    // Act\r\n    var(row, col) = _boardJudge.GetRowAndColGivenAPosition(1, board);\r\n    // Assert\r\n    row.Should().Be(0);\r\n    col.Should().Be(0);\r\n    // Act\r\n    (row, col) = _boardJudge.GetRowAndColGivenAPosition(2, board);\r\n    // Assert\r\n    row.Should().Be(0);\r\n    col.Should().Be(1);\r\n    // Act\r\n    (row, col) = _boardJudge.GetRowAndColGivenAPosition(3, board);\r\n    row.Should().Be(0);\r\n    col.Should().Be(2);\r\n    // Act\r\n    (row, col) = _boardJudge.GetRowAndColGivenAPosition(4, board);\r\n    row.Should().Be(1);\r\n    col.Should().Be(0);\r\n    // Act\r\n    (row, col) = _boardJudge.GetRowAndColGivenAPosition(5, board);\r\n    // Assert\r\n    row.Should().Be(1);\r\n    col.Should().Be(1);\r\n    // Act\r\n    (row, col) = _boardJudge.GetRowAndColGivenAPosition(6, board);\r\n    // Assert\r\n    row.Should().Be(1);\r\n    col.Should().Be(2);\r\n    // Act\r\n    (row, col) = _boardJudge.GetRowAndColGivenAPosition(7, board);\r\n    // Assert\r\n    row.Should().Be(2);\r\n    col.Should().Be(0);\r\n    // Act\r\n    (row, col) = _boardJudge.GetRowAndColGivenAPosition(8, board);\r\n    // Assert\r\n    row.Should().Be(2);\r\n    col.Should().Be(1);\r\n    // Act\r\n    (row, col) = _boardJudge.GetRowAndColGivenAPosition(9, board);\r\n    // Assert\r\n    row.Should().Be(2);\r\n    col.Should().Be(2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturnTrueGivenThePlayerIsPresentInAllHorizontalFieldsScenarioBoard3X3Row0Column0",
        "Body": "{\r\n    // Arrange\r\n    var iago = new Player\r\n    {\r\n        Name = \u0022Iago\u0022\r\n    };\r\n    var board = new BoardBuilder().BoardSize(3).WithPlayer(iago).GivenRow(0).FillAllColumnsUntilColumn(2).Build();\r\n    // Act\r\n    var wonDiagonally = _boardJudge.WonHorizontally(board, 1);\r\n    // Assert\r\n    wonDiagonally.Should().BeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturnFalseGivenThePlayerIsNotPresentInAllHorizontalFieldsScenarioBoard3X3Row0Column0",
        "Body": "{\r\n    // Arrange\r\n    var iago = new Player\r\n    {\r\n        Name = \u0022Iago\u0022\r\n    };\r\n    var board = new BoardBuilder().BoardSize(3).WithPlayer(iago).GivenRow(0).FillAllColumnsUntilColumn(1).Build();\r\n    // Act\r\n    var wonDiagonally = _boardJudge.WonHorizontally(board, 1);\r\n    // Assert\r\n    wonDiagonally.Should().BeFalse();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturnTrueGivenThePlayerIsPresentInAllHorizontalFieldsScenarioBoard3X3Row0Column2",
        "Body": "{\r\n    // Arrange\r\n    var jasmine = new Player\r\n    {\r\n        Name = \u0022Jasmine\u0022\r\n    };\r\n    var board = new BoardBuilder().BoardSize(3).WithPlayer(jasmine).GivenRow(0).FillAllColumnsUntilColumn(2).Build();\r\n    // Act\r\n    var wonDiagonally = _boardJudge.WonHorizontally(board, 3);\r\n    // Assert\r\n    wonDiagonally.Should().BeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturnTrueGivenThePlayerIsPresentInAllHorizontalFieldsScenarioBoard3X3Row1Column1",
        "Body": "{\r\n    // Arrange\r\n    var saltedGuy = new Player\r\n    {\r\n        Name = \u0022Salted Guy\u0022\r\n    };\r\n    var board = new BoardBuilder().BoardSize(3).WithPlayer(saltedGuy).GivenRow(1).FillAllColumnsUntilColumn(2).Build();\r\n    // Act\r\n    var wonDiagonally = _boardJudge.WonHorizontally(board, 5);\r\n    // Assert\r\n    wonDiagonally.Should().BeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturnFalseGivenThePlayerIsNotPresentInAllHorizontalFieldsScenarioBoard3X3Row1Column1",
        "Body": "{\r\n    // Arrange\r\n    var saltedGuy = new Player\r\n    {\r\n        Name = \u0022Salted Guy\u0022\r\n    };\r\n    var board = new BoardBuilder().BoardSize(3).WithPlayer(saltedGuy).GivenRow(1).FillAllColumnsUntilColumn(1).Build();\r\n    // Act\r\n    var wonDiagonally = _boardJudge.WonHorizontally(board, 5);\r\n    // Assert\r\n    wonDiagonally.Should().BeFalse();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturnTrueGivenThePlayerIsPresentInAllHorizontalFieldsScenarioBoard3X3Row2Column0",
        "Body": "{\r\n    // Arrange\r\n    var salParadise = new Player();\r\n    var board = new BoardBuilder().BoardSize(3).WithPlayer(salParadise).GivenRow(2).FillAllColumnsUntilColumn(2).Build();\r\n    // Act\r\n    var wonDiagonally = _boardJudge.WonHorizontally(board, 7);\r\n    // Assert\r\n    wonDiagonally.Should().BeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturnTrueGivenThePlayerIsPresentInAllVerticalFieldsScenarioBoard3X3Row0Column0",
        "Body": "{\r\n    // Arrange\r\n    var gandalf = new Player();\r\n    var board = new BoardBuilder().BoardSize(3).WithPlayer(gandalf).GivenRowAndColumn(0, 0).FillAllRowsUntilRows(2).Build();\r\n    // Act\r\n    var wonVertically = _boardJudge.WonVertically(board, 1);\r\n    // Assert\r\n    wonVertically.Should().BeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturnFalseGivenThePlayerIsNotPresentInAllVerticalFieldsScenarioBoard3X3Row0Column0",
        "Body": "{\r\n    // Arrange\r\n    var manwe = new Player();\r\n    var board = new BoardBuilder().BoardSize(3).WithPlayer(manwe).GivenRowAndColumn(0, 0).FillAllRowsUntilRows(1).Build();\r\n    // Act\r\n    var wonVertically = _boardJudge.WonVertically(board, 1);\r\n    // Assert\r\n    wonVertically.Should().BeFalse();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturnTrueGivenThePlayerIsPresentInAllVerticalFieldsScenarioBoard3X3Row0Column1",
        "Body": "{\r\n    // Arrange\r\n    var gandalf = new Player();\r\n    var board = new BoardBuilder().BoardSize(3).WithPlayer(gandalf).GivenRowAndColumn(0, 1).FillAllRowsUntilRows(2).Build();\r\n    // Act\r\n    var wonVertically = _boardJudge.WonVertically(board, 2);\r\n    // Assert\r\n    wonVertically.Should().BeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturnTrueGivenThePlayerIsPresentInAllVerticalFieldsScenarioBoard3X3Row0Column2",
        "Body": "{\r\n    // Arrange\r\n    var gandalf = new Player();\r\n    var board = new BoardBuilder().BoardSize(3).WithPlayer(gandalf).GivenRowAndColumn(0, 2).FillAllRowsUntilRows(2).Build();\r\n    // Act\r\n    var wonVertically = _boardJudge.WonVertically(board, 3);\r\n    // Assert\r\n    wonVertically.Should().BeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturnTrueGivenThePlayerIsPresentInAllVerticalFieldsScenarioBoard3X3Row2Column1",
        "Body": "{\r\n    // Arrange\r\n    var gandalf = new Player();\r\n    var board = new BoardBuilder().BoardSize(3).WithPlayer(gandalf).GivenRowAndColumn(0, 1).FillAllRowsUntilRows(2).Build();\r\n    // Act\r\n    var wonVertically = _boardJudge.WonVertically(board, 8);\r\n    // Assert\r\n    wonVertically.Should().BeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturnTrueGivenThePlayerIsPresentInAllDiagonalFieldsScenarioBoard3X3Row0Column0",
        "Body": "{\r\n    // Arrange\r\n    var faramir = new Player();\r\n    var board = new BoardBuilder().BoardSize(3).WithPlayer(faramir).GivenRowAndColumn(0, 0).FillDiagonallyUntilRow(2).Build();\r\n    // Act\r\n    var wonVertically = _boardJudge.WonDiagonally(board, 1);\r\n    // Assert\r\n    wonVertically.Should().BeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturnFalseGivenThePlayerIsNotPresentInAllDiagonalFieldsScenarioBoard3X3Row0Column0",
        "Body": "{\r\n    // Arrange\r\n    var faramir = new Player();\r\n    var board = new BoardBuilder().BoardSize(3).WithPlayer(faramir).GivenRowAndColumn(0, 0).FillDiagonallyUntilRow(1).Build();\r\n    // Act\r\n    var wonVertically = _boardJudge.WonDiagonally(board, 1);\r\n    // Assert\r\n    wonVertically.Should().BeFalse();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturnTrueGivenThePlayerIsPresentInAllReverseDiagonalFieldsScenarioBoard3X3Row0Column2",
        "Body": "{\r\n    // Arrange\r\n    var boromir = new Player();\r\n    var board = new BoardBuilder().BoardSize(3).WithPlayer(boromir).GivenRowAndColumn(0, 2).FillReverseDiagonallyUntilRow(2).Build();\r\n    // Act\r\n    var wonReverseVertically = _boardJudge.WonReverseDiagonally(board, 3);\r\n    // Assert\r\n    wonReverseVertically.Should().BeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturnFalseGivenThePlayerIsNotPresentInAllReverseDiagonalFieldsScenarioBoard3X3Row0Column2",
        "Body": "{\r\n    // Arrange\r\n    var boromir = new Player();\r\n    var board = new BoardBuilder().BoardSize(3).WithPlayer(boromir).GivenRowAndColumn(0, 2).FillReverseDiagonallyUntilRow(1).Build();\r\n    // Act\r\n    var wonReverseVertically = _boardJudge.WonReverseDiagonally(board, 3);\r\n    // Assert\r\n    wonReverseVertically.Should().BeFalse();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturnFalseGivenNotAllFieldsAreFilled",
        "Body": "{\r\n    // 1: Arrange\r\n    var columnsRowOne = new List\u003CPlayer\u003E\r\n    {\r\n        null,\r\n        null,\r\n        null\r\n    };\r\n    var columnsRowTwo = new List\u003CPlayer\u003E\r\n    {\r\n        null,\r\n        null,\r\n        null\r\n    };\r\n    var columnsRowThree = new List\u003CPlayer\u003E\r\n    {\r\n        null,\r\n        null,\r\n        null\r\n    };\r\n    var rows = new List\u003CIList\u003CPlayer\u003E\u003E\r\n    {\r\n        columnsRowOne,\r\n        columnsRowTwo,\r\n        columnsRowThree\r\n    };\r\n    // 1: Act        \r\n    var drawGameOne = _boardJudge.DrawGame(rows);\r\n    // 1: Assert\r\n    drawGameOne.Should().BeFalse();\r\n    // 2: Arrange\r\n    var jafar = new Player();\r\n    columnsRowOne = new List\u003CPlayer\u003E\r\n    {\r\n        jafar,\r\n        jafar,\r\n        jafar\r\n    };\r\n    columnsRowTwo = new List\u003CPlayer\u003E\r\n    {\r\n        jafar,\r\n        jafar,\r\n        jafar\r\n    };\r\n    columnsRowThree = new List\u003CPlayer\u003E\r\n    {\r\n        jafar,\r\n        jafar,\r\n        null\r\n    };\r\n    rows = new List\u003CIList\u003CPlayer\u003E\u003E\r\n    {\r\n        columnsRowOne,\r\n        columnsRowTwo,\r\n        columnsRowThree\r\n    };\r\n    // 2: Assert\r\n    var drawGameTwo = _boardJudge.DrawGame(rows);\r\n    drawGameTwo.Should().BeFalse();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturnTrueGivenAllFieldsAreFilled",
        "Body": "{\r\n    // Arrange\r\n    var aladdin = new Player();\r\n    var columnsRowOne = new List\u003CPlayer\u003E\r\n    {\r\n        aladdin,\r\n        aladdin,\r\n        aladdin\r\n    };\r\n    var columnsRowTwo = new List\u003CPlayer\u003E\r\n    {\r\n        aladdin,\r\n        aladdin,\r\n        aladdin\r\n    };\r\n    var columnsRowThree = new List\u003CPlayer\u003E\r\n    {\r\n        aladdin,\r\n        aladdin,\r\n        aladdin\r\n    };\r\n    var rows = new List\u003CIList\u003CPlayer\u003E\u003E\r\n    {\r\n        columnsRowOne,\r\n        columnsRowTwo,\r\n        columnsRowThree\r\n    };\r\n    // Act\r\n    var drawGame = _boardJudge.DrawGame(rows);\r\n    // Assert\r\n    drawGame.Should().BeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PositionDeciderTest",
    "Message": null,
    "ProjectName": "Tests",
    "Methods": [
      {
        "Name": "TestScenarioOne",
        "Body": "{\r\n    // Arrange\r\n    IEnumerable\u003Cint\u003E positions = Enumerable.Range(start, count);\r\n    // Act\r\n    var position = _positionDecider.ChooseTheBestAvailablePositionFor(positions);\r\n    // Assert\r\n    position.Should().BeInRange(start, count);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestScenarioTwo",
        "Body": "{\r\n    // Act\r\n    var position = _positionDecider.ChooseTheBestAvailablePositionFor(availablePositions);\r\n    // Assert\r\n    position.Should().BeOneOf(availablePositions);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DomainToDtoITests",
    "Message": null,
    "ProjectName": "Tests",
    "Methods": [
      {
        "Name": "ShouldMapBoardToItsDto",
        "Body": "{\r\n    // Arrange\r\n    var playerOne = new Player\r\n    {\r\n        Id = 1,\r\n        Name = \u0022Jafar\u0022,\r\n        Computer = false\r\n    };\r\n    var playerTwo = new Player\r\n    {\r\n        Id = 2,\r\n        Name = \u0022Rose\u0022,\r\n        Computer = true\r\n    };\r\n    var playerBoardOne = new PlayerBoard\r\n    {\r\n        Player = playerOne\r\n    };\r\n    var playerBoardTwo = new PlayerBoard\r\n    {\r\n        Player = playerTwo\r\n    };\r\n    var movement = new Movement\r\n    {\r\n        Position = 1,\r\n        WhoMade = playerTwo\r\n    };\r\n    var board = new Board\r\n    {\r\n        Id = 1,\r\n        Movements = new List\u003CMovement\u003E\r\n        {\r\n            movement\r\n        },\r\n        PlayerBoards = new List\u003CPlayerBoard\u003E\r\n        {\r\n            playerBoardOne,\r\n            playerBoardTwo\r\n        },\r\n        NumberOfColumn = 3,\r\n        NumberOfRows = 3\r\n    };\r\n    board.InitializeBoardConfiguration();\r\n    // Act\r\n    var boardDto = _mapper.Map\u003CBoard, BoardDTO\u003E(board);\r\n    // Assert\r\n    boardDto.Id.Should().Be(board.Id);\r\n    boardDto.NumberOfColumn.Should().Be(board.NumberOfColumn);\r\n    boardDto.NumberOfRows.Should().Be(board.NumberOfRows);\r\n    boardDto.FieldsConfiguration.Should().HaveCount(board.NumberOfRows);\r\n    foreach (var columns in boardDto.FieldsConfiguration)\r\n        columns.Should().HaveCount(board.NumberOfColumn);\r\n    boardDto.FreeFields.Should().Equal(board.FreeFields);\r\n    boardDto.Players.Should().HaveCount(2);\r\n    var playerOneDto = boardDto.Players.First(p =\u003E p.Name == playerOne.Name);\r\n    playerOneDto.Computer.Should().Be(playerOne.Computer);\r\n    playerOneDto.Id.Should().Be(playerOne.Id);\r\n    var playerTwoDto = boardDto.Players.First(p =\u003E p.Name == playerTwo.Name);\r\n    playerTwoDto.Computer.Should().Be(playerTwo.Computer);\r\n    playerTwoDto.Id.Should().Be(playerTwo.Id);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "BoardTests",
    "Message": null,
    "ProjectName": "Tests",
    "Methods": [
      {
        "Name": "ShouldInitializeScenarioOne",
        "Body": "{\r\n    // Arrange\r\n    var board = new Board\r\n    {\r\n        Movements = new List\u003CMovement\u003E(),\r\n        NumberOfRows = 3,\r\n        NumberOfColumn = 3\r\n    };\r\n    // Act\r\n    board.InitializeBoardConfiguration();\r\n    // Assert\r\n    board.FieldsConfiguration.Should().HaveCount(3);\r\n    board.FieldsConfiguration[0].Should().HaveCount(3);\r\n    foreach (var somePlayer in board.FieldsConfiguration[0])\r\n        somePlayer.Should().BeNull();\r\n    board.FieldsConfiguration[1].Should().HaveCount(3);\r\n    foreach (var somePlayer in board.FieldsConfiguration[1])\r\n        somePlayer.Should().BeNull();\r\n    board.FieldsConfiguration[2].Should().HaveCount(3);\r\n    foreach (var somePlayer in board.FieldsConfiguration[2])\r\n        somePlayer.Should().BeNull();\r\n    board.FreeFields.Count.Should().Be(9);\r\n    for (int position = 1; position \u003C= board.FreeFields.Count; position\u002B\u002B)\r\n        board.FreeFields[position - 1].Should().Be(position);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldInitializeScenarioTwo",
        "Body": "{\r\n    // Arrange\r\n    var player = new Player\r\n    {\r\n        Name = \u0022Jafar\u0022\r\n    };\r\n    var movement = new Movement\r\n    {\r\n        Position = 2,\r\n        WhoMade = player\r\n    };\r\n    var board = new Board\r\n    {\r\n        Movements = new List\u003CMovement\u003E\r\n        {\r\n            movement\r\n        },\r\n        NumberOfRows = 3,\r\n        NumberOfColumn = 3\r\n    };\r\n    // Act\r\n    board.InitializeBoardConfiguration();\r\n    // Assert\r\n    board.FieldsConfiguration.Should().HaveCount(3);\r\n    board.FieldsConfiguration[0].Should().HaveCount(3);\r\n    board.FieldsConfiguration[0][0].Should().BeNull();\r\n    board.FieldsConfiguration[0][1].Should().Be(player);\r\n    board.FieldsConfiguration[0][2].Should().BeNull();\r\n    board.FieldsConfiguration[1].Should().HaveCount(3);\r\n    foreach (var somePlayer in board.FieldsConfiguration[1])\r\n        somePlayer.Should().BeNull();\r\n    board.FieldsConfiguration[2].Should().HaveCount(3);\r\n    foreach (var somePlayer in board.FieldsConfiguration[2])\r\n        somePlayer.Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldInitializeScenarioThree",
        "Body": "{\r\n    // Arrange\r\n    var player = new Player\r\n    {\r\n        Name = \u0022Iago\u0022\r\n    };\r\n    var movement2 = new Movement\r\n    {\r\n        Position = 2,\r\n        WhoMade = player\r\n    };\r\n    var movement3 = new Movement\r\n    {\r\n        Position = 3,\r\n        WhoMade = player\r\n    };\r\n    var movement6 = new Movement\r\n    {\r\n        Position = 6,\r\n        WhoMade = player\r\n    };\r\n    var movement7 = new Movement\r\n    {\r\n        Position = 7,\r\n        WhoMade = player\r\n    };\r\n    var board = new Board\r\n    {\r\n        Movements = new List\u003CMovement\u003E\r\n        {\r\n            movement2,\r\n            movement3,\r\n            movement6,\r\n            movement7\r\n        },\r\n        NumberOfRows = 3,\r\n        NumberOfColumn = 3\r\n    };\r\n    // Act\r\n    board.InitializeBoardConfiguration();\r\n    // Assert\r\n    board.FieldsConfiguration.Should().HaveCount(3);\r\n    board.FieldsConfiguration[0].Should().HaveCount(3);\r\n    board.FieldsConfiguration[0][0].Should().BeNull();\r\n    board.FieldsConfiguration[0][1].Should().Be(player);\r\n    board.FieldsConfiguration[0][2].Should().Be(player);\r\n    board.FieldsConfiguration[1].Should().HaveCount(3);\r\n    board.FieldsConfiguration[1][0].Should().BeNull();\r\n    board.FieldsConfiguration[1][1].Should().BeNull();\r\n    board.FieldsConfiguration[1][2].Should().Be(player);\r\n    board.FieldsConfiguration[2].Should().HaveCount(3);\r\n    board.FieldsConfiguration[2][0].Should().Be(player);\r\n    board.FieldsConfiguration[2][1].Should().BeNull();\r\n    board.FieldsConfiguration[2][2].Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CreatingBoard",
    "Message": null,
    "ProjectName": "Tests",
    "Methods": [
      {
        "Name": "ShouldThrowExceptionScenarioOne",
        "Body": "{\r\n    // Arrange\r\n    var wrongBoardSize = \u00224x3\u0022;\r\n    var firstPlayerId = 1;\r\n    var secondPlayerId = 2;\r\n    // Act\r\n    Func\u003CTask\u003E action = async () =\u003E await _service.CreateNewBoard(wrongBoardSize, firstPlayerId, secondPlayerId);\r\n    // Assert\r\n    await action.Should().ThrowAsync\u003CInvalidBoardConfigurationException\u003E().WithMessage($\u0022Board {wrongBoardSize} is not supported. You can try 3x3 \uD83D\uDC4D\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldThrowExceptionScenarioTwo",
        "Body": "{\r\n    // Arrange\r\n    var wrongBoardSize = \u00223x3\u0022;\r\n    var firstPlayerId = 1;\r\n    var secondPlayerId = 2;\r\n    // Act\r\n    Func\u003CTask\u003E action = async () =\u003E await _service.CreateNewBoard(wrongBoardSize, firstPlayerId, secondPlayerId);\r\n    // Assert\r\n    await action.Should().ThrowAsync\u003CPlayerNotFoundException\u003E().WithMessage($\u0022Both players are required. P1: \u2753 | P2: \u2753\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreateBoard",
        "Body": "{\r\n    // Arrange\r\n    var playerOne = new Player\r\n    {\r\n        Name = \u0022Bear\u0022\r\n    };\r\n    var playerTwo = new Player\r\n    {\r\n        Name = \u0022Salted Man\u0022\r\n    };\r\n    AppDbContext.Players.AddRange(playerOne, playerTwo);\r\n    await AppDbContext.SaveChangesAsync();\r\n    var wrongBoardSize = \u00223x3\u0022;\r\n    // Act\r\n    var board = await _service.CreateNewBoard(wrongBoardSize, playerOne.Id, playerTwo.Id);\r\n    // Assert\r\n    AppDbContext.Boards.Should().HaveCount(1);\r\n    AppDbContext.PlayerBoards.Should().HaveCount(2);\r\n    board.Id.Should().Be(1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldThrowExceptionScenarioOne",
        "Body": "{\r\n    // Arrange\r\n    var boardId = 42;\r\n    var playerId = 6;\r\n    var position = 9;\r\n    // Act\r\n    Func\u003CTask\u003E action = async () =\u003E await _service.ExecuteMovementAndRetrieveGameStatus(boardId, playerId, position);\r\n    // Assert\r\n    var expectedMessage = $\u0022The board {boardId} is not available. Are you sure you are correct? \uD83E\uDD14\u0022;\r\n    await action.Should().ThrowAsync\u003CBoardNotFoundToBePlayedException\u003E().WithMessage(expectedMessage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldThrowExceptionScenarioTwo",
        "Body": "{\r\n    // Arrange\r\n    var createdBoard = await new BoardBuilder().WithDbContext(AppDbContext).CreateBoard().WithPlayers(new Player { Name = \u0022Aladdin\u0022 }, new Player { Name = \u0022Rose\u0022 }).BuildAndGetFirstBoard();\r\n    var playerId = 42;\r\n    var position = 1;\r\n    // Act\r\n    Func\u003CTask\u003E action = async () =\u003E await _service.ExecuteMovementAndRetrieveGameStatus(createdBoard.Id, playerId, position);\r\n    // Assert\r\n    var expectedMessage = $\u0022There is no player with ID {playerId}\u0022;\r\n    await action.Should().ThrowAsync\u003CPlayerNotFoundException\u003E().WithMessage(expectedMessage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldThrowExceptionScenarioThree",
        "Body": "{\r\n    // Arrange\r\n    var robot = new Player\r\n    {\r\n        Name = \u0022Rose\u0022,\r\n        Computer = true\r\n    };\r\n    var createdBoard = await new BoardBuilder().WithDbContext(AppDbContext).CreateBoard().WithPlayers(new Player { Name = \u0022Aladdin\u0022 }, robot).BuildAndGetFirstBoard();\r\n    var position = 1;\r\n    // Act\r\n    Func\u003CTask\u003E action = async () =\u003E await _service.ExecuteMovementAndRetrieveGameStatus(createdBoard.Id, robot.Id, position);\r\n    // Assert\r\n    var expectedMessage = $\u0022{robot.Name} is a robot. Only I can use it!\u0022;\r\n    await action.Should().ThrowAsync\u003CYouAreNotAllowedToPlayWithARobotException\u003E().WithMessage(expectedMessage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldThrowExceptionScenarioFour",
        "Body": "{\r\n    // Arrange\r\n    var aladdin = new Player\r\n    {\r\n        Name = \u0022Aladdin\u0022,\r\n        Computer = false\r\n    };\r\n    var rose = new Player\r\n    {\r\n        Name = \u0022Rose\u0022,\r\n        Computer = true\r\n    };\r\n    var createdBoard = await new BoardBuilder().WithDbContext(AppDbContext).CreateBoard().WithPlayers(aladdin, rose).BuildAndGetFirstBoard();\r\n    var game = new Game\r\n    {\r\n        Draw = false,\r\n        Finished = true,\r\n        Winner = aladdin,\r\n        ConfiguredBoard = createdBoard\r\n    };\r\n    AppDbContext.Games.Add(game);\r\n    await AppDbContext.SaveChangesAsync();\r\n    var position = 1;\r\n    // Act\r\n    Func\u003CTask\u003E action = async () =\u003E await _service.ExecuteMovementAndRetrieveGameStatus(createdBoard.Id, aladdin.Id, position);\r\n    // Assert\r\n    var expectedMessage = $\u0022The game associated with the board {createdBoard.Id} is finished\u0022;\r\n    await action.Should().ThrowAsync\u003CGameIsNotPlayableException\u003E().WithMessage(expectedMessage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldThrowExceptionScenarioFive",
        "Body": "{\r\n    // Arrange\r\n    var aladdin = new Player\r\n    {\r\n        Name = \u0022Aladdin\u0022,\r\n        Computer = false\r\n    };\r\n    var rose = new Player\r\n    {\r\n        Name = \u0022Rose\u0022,\r\n        Computer = true\r\n    };\r\n    var board = await new BoardBuilder().WithDbContext(AppDbContext).CreateBoard().WithPlayers(aladdin, rose).BuildAndGetFirstBoard();\r\n    var position = 42;\r\n    // Act\r\n    Func\u003CTask\u003E action = async () =\u003E await _service.ExecuteMovementAndRetrieveGameStatus(board.Id, aladdin.Id, position);\r\n    // Assert\r\n    var positions = String.Join(\u0022 \u0022, board.FreeFields);\r\n    var expectedMessage = $\u0022Position {position} is not available. The ones you can choose: {positions}\u0022;\r\n    await action.Should().ThrowAsync\u003CPositionNotAvailableException\u003E().WithMessage(expectedMessage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldExecuteMovementScenarioOne",
        "Body": "{\r\n    // Arrange\r\n    var aladdin = new Player\r\n    {\r\n        Name = \u0022Aladdin\u0022,\r\n        Computer = false\r\n    };\r\n    var rose = new Player\r\n    {\r\n        Name = \u0022Rose\u0022,\r\n        Computer = true\r\n    };\r\n    var board = await new BoardBuilder().WithDbContext(AppDbContext).CreateBoard().WithPlayers(aladdin, rose).BuildAndGetFirstBoard();\r\n    var movementsToWin = new[]\r\n    {\r\n        7,\r\n        8,\r\n        9\r\n    };\r\n    // Act\r\n    GameDTO lastGameStatus = null;\r\n    foreach (var movementPosition in movementsToWin)\r\n    {\r\n        lastGameStatus = await _service.ExecuteMovementAndRetrieveGameStatus(board.Id, aladdin.Id, movementPosition);\r\n    }\r\n\r\n    // Assert\r\n    AppDbContext.Boards.Should().HaveCount(1);\r\n    AppDbContext.Games.Should().HaveCount(1);\r\n    AppDbContext.Players.Should().HaveCount(2);\r\n    AppDbContext.PlayerBoards.Should().HaveCount(2);\r\n    AppDbContext.Movements.Should().HaveCount(5);\r\n    lastGameStatus.Draw.Should().BeFalse();\r\n    lastGameStatus.Finished.Should().BeTrue();\r\n    lastGameStatus.Winner.Name.Should().Be(aladdin.Name);\r\n    lastGameStatus.Winner.Id.Should().Be(aladdin.Id);\r\n    var boardUsedToPlay = lastGameStatus.ConfiguredBoard;\r\n    var boardPositions = boardUsedToPlay.NumberOfRows * boardUsedToPlay.NumberOfColumn;\r\n    var expectedFreeFields = boardPositions - AppDbContext.Movements.Count();\r\n    boardUsedToPlay.FreeFields.Count.Should().Be(expectedFreeFields);\r\n    // All board positions\r\n    boardUsedToPlay.FieldsConfiguration[2][0].Name.Should().Be(aladdin.Name);\r\n    boardUsedToPlay.FieldsConfiguration[2][1].Name.Should().Be(aladdin.Name);\r\n    boardUsedToPlay.FieldsConfiguration[2][2].Name.Should().Be(aladdin.Name);\r\n    var availablePositions = 0;\r\n    for (var position = 0; position \u003C 2; position\u002B\u002B)\r\n        foreach (var player in boardUsedToPlay.FieldsConfiguration[position])\r\n        {\r\n            if (player is null)\r\n                availablePositions\u002B\u002B;\r\n        }\r\n\r\n    availablePositions.Should().Be(4);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DealingWithGame",
    "Message": null,
    "ProjectName": "Tests",
    "Methods": [
      {
        "Name": "ShouldThrowExceptionScenarioOne",
        "Body": "{\r\n    // Arrange\r\n    var wrongBoardSize = \u00224x3\u0022;\r\n    var firstPlayerId = 1;\r\n    var secondPlayerId = 2;\r\n    // Act\r\n    Func\u003CTask\u003E action = async () =\u003E await _service.CreateNewBoard(wrongBoardSize, firstPlayerId, secondPlayerId);\r\n    // Assert\r\n    await action.Should().ThrowAsync\u003CInvalidBoardConfigurationException\u003E().WithMessage($\u0022Board {wrongBoardSize} is not supported. You can try 3x3 \uD83D\uDC4D\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldThrowExceptionScenarioTwo",
        "Body": "{\r\n    // Arrange\r\n    var wrongBoardSize = \u00223x3\u0022;\r\n    var firstPlayerId = 1;\r\n    var secondPlayerId = 2;\r\n    // Act\r\n    Func\u003CTask\u003E action = async () =\u003E await _service.CreateNewBoard(wrongBoardSize, firstPlayerId, secondPlayerId);\r\n    // Assert\r\n    await action.Should().ThrowAsync\u003CPlayerNotFoundException\u003E().WithMessage($\u0022Both players are required. P1: \u2753 | P2: \u2753\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreateBoard",
        "Body": "{\r\n    // Arrange\r\n    var playerOne = new Player\r\n    {\r\n        Name = \u0022Bear\u0022\r\n    };\r\n    var playerTwo = new Player\r\n    {\r\n        Name = \u0022Salted Man\u0022\r\n    };\r\n    AppDbContext.Players.AddRange(playerOne, playerTwo);\r\n    await AppDbContext.SaveChangesAsync();\r\n    var wrongBoardSize = \u00223x3\u0022;\r\n    // Act\r\n    var board = await _service.CreateNewBoard(wrongBoardSize, playerOne.Id, playerTwo.Id);\r\n    // Assert\r\n    AppDbContext.Boards.Should().HaveCount(1);\r\n    AppDbContext.PlayerBoards.Should().HaveCount(2);\r\n    board.Id.Should().Be(1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldThrowExceptionScenarioOne",
        "Body": "{\r\n    // Arrange\r\n    var boardId = 42;\r\n    var playerId = 6;\r\n    var position = 9;\r\n    // Act\r\n    Func\u003CTask\u003E action = async () =\u003E await _service.ExecuteMovementAndRetrieveGameStatus(boardId, playerId, position);\r\n    // Assert\r\n    var expectedMessage = $\u0022The board {boardId} is not available. Are you sure you are correct? \uD83E\uDD14\u0022;\r\n    await action.Should().ThrowAsync\u003CBoardNotFoundToBePlayedException\u003E().WithMessage(expectedMessage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldThrowExceptionScenarioTwo",
        "Body": "{\r\n    // Arrange\r\n    var createdBoard = await new BoardBuilder().WithDbContext(AppDbContext).CreateBoard().WithPlayers(new Player { Name = \u0022Aladdin\u0022 }, new Player { Name = \u0022Rose\u0022 }).BuildAndGetFirstBoard();\r\n    var playerId = 42;\r\n    var position = 1;\r\n    // Act\r\n    Func\u003CTask\u003E action = async () =\u003E await _service.ExecuteMovementAndRetrieveGameStatus(createdBoard.Id, playerId, position);\r\n    // Assert\r\n    var expectedMessage = $\u0022There is no player with ID {playerId}\u0022;\r\n    await action.Should().ThrowAsync\u003CPlayerNotFoundException\u003E().WithMessage(expectedMessage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldThrowExceptionScenarioThree",
        "Body": "{\r\n    // Arrange\r\n    var robot = new Player\r\n    {\r\n        Name = \u0022Rose\u0022,\r\n        Computer = true\r\n    };\r\n    var createdBoard = await new BoardBuilder().WithDbContext(AppDbContext).CreateBoard().WithPlayers(new Player { Name = \u0022Aladdin\u0022 }, robot).BuildAndGetFirstBoard();\r\n    var position = 1;\r\n    // Act\r\n    Func\u003CTask\u003E action = async () =\u003E await _service.ExecuteMovementAndRetrieveGameStatus(createdBoard.Id, robot.Id, position);\r\n    // Assert\r\n    var expectedMessage = $\u0022{robot.Name} is a robot. Only I can use it!\u0022;\r\n    await action.Should().ThrowAsync\u003CYouAreNotAllowedToPlayWithARobotException\u003E().WithMessage(expectedMessage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldThrowExceptionScenarioFour",
        "Body": "{\r\n    // Arrange\r\n    var aladdin = new Player\r\n    {\r\n        Name = \u0022Aladdin\u0022,\r\n        Computer = false\r\n    };\r\n    var rose = new Player\r\n    {\r\n        Name = \u0022Rose\u0022,\r\n        Computer = true\r\n    };\r\n    var createdBoard = await new BoardBuilder().WithDbContext(AppDbContext).CreateBoard().WithPlayers(aladdin, rose).BuildAndGetFirstBoard();\r\n    var game = new Game\r\n    {\r\n        Draw = false,\r\n        Finished = true,\r\n        Winner = aladdin,\r\n        ConfiguredBoard = createdBoard\r\n    };\r\n    AppDbContext.Games.Add(game);\r\n    await AppDbContext.SaveChangesAsync();\r\n    var position = 1;\r\n    // Act\r\n    Func\u003CTask\u003E action = async () =\u003E await _service.ExecuteMovementAndRetrieveGameStatus(createdBoard.Id, aladdin.Id, position);\r\n    // Assert\r\n    var expectedMessage = $\u0022The game associated with the board {createdBoard.Id} is finished\u0022;\r\n    await action.Should().ThrowAsync\u003CGameIsNotPlayableException\u003E().WithMessage(expectedMessage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldThrowExceptionScenarioFive",
        "Body": "{\r\n    // Arrange\r\n    var aladdin = new Player\r\n    {\r\n        Name = \u0022Aladdin\u0022,\r\n        Computer = false\r\n    };\r\n    var rose = new Player\r\n    {\r\n        Name = \u0022Rose\u0022,\r\n        Computer = true\r\n    };\r\n    var board = await new BoardBuilder().WithDbContext(AppDbContext).CreateBoard().WithPlayers(aladdin, rose).BuildAndGetFirstBoard();\r\n    var position = 42;\r\n    // Act\r\n    Func\u003CTask\u003E action = async () =\u003E await _service.ExecuteMovementAndRetrieveGameStatus(board.Id, aladdin.Id, position);\r\n    // Assert\r\n    var positions = String.Join(\u0022 \u0022, board.FreeFields);\r\n    var expectedMessage = $\u0022Position {position} is not available. The ones you can choose: {positions}\u0022;\r\n    await action.Should().ThrowAsync\u003CPositionNotAvailableException\u003E().WithMessage(expectedMessage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldExecuteMovementScenarioOne",
        "Body": "{\r\n    // Arrange\r\n    var aladdin = new Player\r\n    {\r\n        Name = \u0022Aladdin\u0022,\r\n        Computer = false\r\n    };\r\n    var rose = new Player\r\n    {\r\n        Name = \u0022Rose\u0022,\r\n        Computer = true\r\n    };\r\n    var board = await new BoardBuilder().WithDbContext(AppDbContext).CreateBoard().WithPlayers(aladdin, rose).BuildAndGetFirstBoard();\r\n    var movementsToWin = new[]\r\n    {\r\n        7,\r\n        8,\r\n        9\r\n    };\r\n    // Act\r\n    GameDTO lastGameStatus = null;\r\n    foreach (var movementPosition in movementsToWin)\r\n    {\r\n        lastGameStatus = await _service.ExecuteMovementAndRetrieveGameStatus(board.Id, aladdin.Id, movementPosition);\r\n    }\r\n\r\n    // Assert\r\n    AppDbContext.Boards.Should().HaveCount(1);\r\n    AppDbContext.Games.Should().HaveCount(1);\r\n    AppDbContext.Players.Should().HaveCount(2);\r\n    AppDbContext.PlayerBoards.Should().HaveCount(2);\r\n    AppDbContext.Movements.Should().HaveCount(5);\r\n    lastGameStatus.Draw.Should().BeFalse();\r\n    lastGameStatus.Finished.Should().BeTrue();\r\n    lastGameStatus.Winner.Name.Should().Be(aladdin.Name);\r\n    lastGameStatus.Winner.Id.Should().Be(aladdin.Id);\r\n    var boardUsedToPlay = lastGameStatus.ConfiguredBoard;\r\n    var boardPositions = boardUsedToPlay.NumberOfRows * boardUsedToPlay.NumberOfColumn;\r\n    var expectedFreeFields = boardPositions - AppDbContext.Movements.Count();\r\n    boardUsedToPlay.FreeFields.Count.Should().Be(expectedFreeFields);\r\n    // All board positions\r\n    boardUsedToPlay.FieldsConfiguration[2][0].Name.Should().Be(aladdin.Name);\r\n    boardUsedToPlay.FieldsConfiguration[2][1].Name.Should().Be(aladdin.Name);\r\n    boardUsedToPlay.FieldsConfiguration[2][2].Name.Should().Be(aladdin.Name);\r\n    var availablePositions = 0;\r\n    for (var position = 0; position \u003C 2; position\u002B\u002B)\r\n        foreach (var player in boardUsedToPlay.FieldsConfiguration[position])\r\n        {\r\n            if (player is null)\r\n                availablePositions\u002B\u002B;\r\n        }\r\n\r\n    availablePositions.Should().Be(4);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "GameServiceITests",
    "Message": null,
    "ProjectName": "Tests",
    "Methods": [
      {
        "Name": "ShouldThrowExceptionScenarioOne",
        "Body": "{\r\n    // Arrange\r\n    var wrongBoardSize = \u00224x3\u0022;\r\n    var firstPlayerId = 1;\r\n    var secondPlayerId = 2;\r\n    // Act\r\n    Func\u003CTask\u003E action = async () =\u003E await _service.CreateNewBoard(wrongBoardSize, firstPlayerId, secondPlayerId);\r\n    // Assert\r\n    await action.Should().ThrowAsync\u003CInvalidBoardConfigurationException\u003E().WithMessage($\u0022Board {wrongBoardSize} is not supported. You can try 3x3 \uD83D\uDC4D\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldThrowExceptionScenarioTwo",
        "Body": "{\r\n    // Arrange\r\n    var wrongBoardSize = \u00223x3\u0022;\r\n    var firstPlayerId = 1;\r\n    var secondPlayerId = 2;\r\n    // Act\r\n    Func\u003CTask\u003E action = async () =\u003E await _service.CreateNewBoard(wrongBoardSize, firstPlayerId, secondPlayerId);\r\n    // Assert\r\n    await action.Should().ThrowAsync\u003CPlayerNotFoundException\u003E().WithMessage($\u0022Both players are required. P1: \u2753 | P2: \u2753\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreateBoard",
        "Body": "{\r\n    // Arrange\r\n    var playerOne = new Player\r\n    {\r\n        Name = \u0022Bear\u0022\r\n    };\r\n    var playerTwo = new Player\r\n    {\r\n        Name = \u0022Salted Man\u0022\r\n    };\r\n    AppDbContext.Players.AddRange(playerOne, playerTwo);\r\n    await AppDbContext.SaveChangesAsync();\r\n    var wrongBoardSize = \u00223x3\u0022;\r\n    // Act\r\n    var board = await _service.CreateNewBoard(wrongBoardSize, playerOne.Id, playerTwo.Id);\r\n    // Assert\r\n    AppDbContext.Boards.Should().HaveCount(1);\r\n    AppDbContext.PlayerBoards.Should().HaveCount(2);\r\n    board.Id.Should().Be(1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldThrowExceptionScenarioOne",
        "Body": "{\r\n    // Arrange\r\n    var boardId = 42;\r\n    var playerId = 6;\r\n    var position = 9;\r\n    // Act\r\n    Func\u003CTask\u003E action = async () =\u003E await _service.ExecuteMovementAndRetrieveGameStatus(boardId, playerId, position);\r\n    // Assert\r\n    var expectedMessage = $\u0022The board {boardId} is not available. Are you sure you are correct? \uD83E\uDD14\u0022;\r\n    await action.Should().ThrowAsync\u003CBoardNotFoundToBePlayedException\u003E().WithMessage(expectedMessage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldThrowExceptionScenarioTwo",
        "Body": "{\r\n    // Arrange\r\n    var createdBoard = await new BoardBuilder().WithDbContext(AppDbContext).CreateBoard().WithPlayers(new Player { Name = \u0022Aladdin\u0022 }, new Player { Name = \u0022Rose\u0022 }).BuildAndGetFirstBoard();\r\n    var playerId = 42;\r\n    var position = 1;\r\n    // Act\r\n    Func\u003CTask\u003E action = async () =\u003E await _service.ExecuteMovementAndRetrieveGameStatus(createdBoard.Id, playerId, position);\r\n    // Assert\r\n    var expectedMessage = $\u0022There is no player with ID {playerId}\u0022;\r\n    await action.Should().ThrowAsync\u003CPlayerNotFoundException\u003E().WithMessage(expectedMessage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldThrowExceptionScenarioThree",
        "Body": "{\r\n    // Arrange\r\n    var robot = new Player\r\n    {\r\n        Name = \u0022Rose\u0022,\r\n        Computer = true\r\n    };\r\n    var createdBoard = await new BoardBuilder().WithDbContext(AppDbContext).CreateBoard().WithPlayers(new Player { Name = \u0022Aladdin\u0022 }, robot).BuildAndGetFirstBoard();\r\n    var position = 1;\r\n    // Act\r\n    Func\u003CTask\u003E action = async () =\u003E await _service.ExecuteMovementAndRetrieveGameStatus(createdBoard.Id, robot.Id, position);\r\n    // Assert\r\n    var expectedMessage = $\u0022{robot.Name} is a robot. Only I can use it!\u0022;\r\n    await action.Should().ThrowAsync\u003CYouAreNotAllowedToPlayWithARobotException\u003E().WithMessage(expectedMessage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldThrowExceptionScenarioFour",
        "Body": "{\r\n    // Arrange\r\n    var aladdin = new Player\r\n    {\r\n        Name = \u0022Aladdin\u0022,\r\n        Computer = false\r\n    };\r\n    var rose = new Player\r\n    {\r\n        Name = \u0022Rose\u0022,\r\n        Computer = true\r\n    };\r\n    var createdBoard = await new BoardBuilder().WithDbContext(AppDbContext).CreateBoard().WithPlayers(aladdin, rose).BuildAndGetFirstBoard();\r\n    var game = new Game\r\n    {\r\n        Draw = false,\r\n        Finished = true,\r\n        Winner = aladdin,\r\n        ConfiguredBoard = createdBoard\r\n    };\r\n    AppDbContext.Games.Add(game);\r\n    await AppDbContext.SaveChangesAsync();\r\n    var position = 1;\r\n    // Act\r\n    Func\u003CTask\u003E action = async () =\u003E await _service.ExecuteMovementAndRetrieveGameStatus(createdBoard.Id, aladdin.Id, position);\r\n    // Assert\r\n    var expectedMessage = $\u0022The game associated with the board {createdBoard.Id} is finished\u0022;\r\n    await action.Should().ThrowAsync\u003CGameIsNotPlayableException\u003E().WithMessage(expectedMessage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldThrowExceptionScenarioFive",
        "Body": "{\r\n    // Arrange\r\n    var aladdin = new Player\r\n    {\r\n        Name = \u0022Aladdin\u0022,\r\n        Computer = false\r\n    };\r\n    var rose = new Player\r\n    {\r\n        Name = \u0022Rose\u0022,\r\n        Computer = true\r\n    };\r\n    var board = await new BoardBuilder().WithDbContext(AppDbContext).CreateBoard().WithPlayers(aladdin, rose).BuildAndGetFirstBoard();\r\n    var position = 42;\r\n    // Act\r\n    Func\u003CTask\u003E action = async () =\u003E await _service.ExecuteMovementAndRetrieveGameStatus(board.Id, aladdin.Id, position);\r\n    // Assert\r\n    var positions = String.Join(\u0022 \u0022, board.FreeFields);\r\n    var expectedMessage = $\u0022Position {position} is not available. The ones you can choose: {positions}\u0022;\r\n    await action.Should().ThrowAsync\u003CPositionNotAvailableException\u003E().WithMessage(expectedMessage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldExecuteMovementScenarioOne",
        "Body": "{\r\n    // Arrange\r\n    var aladdin = new Player\r\n    {\r\n        Name = \u0022Aladdin\u0022,\r\n        Computer = false\r\n    };\r\n    var rose = new Player\r\n    {\r\n        Name = \u0022Rose\u0022,\r\n        Computer = true\r\n    };\r\n    var board = await new BoardBuilder().WithDbContext(AppDbContext).CreateBoard().WithPlayers(aladdin, rose).BuildAndGetFirstBoard();\r\n    var movementsToWin = new[]\r\n    {\r\n        7,\r\n        8,\r\n        9\r\n    };\r\n    // Act\r\n    GameDTO lastGameStatus = null;\r\n    foreach (var movementPosition in movementsToWin)\r\n    {\r\n        lastGameStatus = await _service.ExecuteMovementAndRetrieveGameStatus(board.Id, aladdin.Id, movementPosition);\r\n    }\r\n\r\n    // Assert\r\n    AppDbContext.Boards.Should().HaveCount(1);\r\n    AppDbContext.Games.Should().HaveCount(1);\r\n    AppDbContext.Players.Should().HaveCount(2);\r\n    AppDbContext.PlayerBoards.Should().HaveCount(2);\r\n    AppDbContext.Movements.Should().HaveCount(5);\r\n    lastGameStatus.Draw.Should().BeFalse();\r\n    lastGameStatus.Finished.Should().BeTrue();\r\n    lastGameStatus.Winner.Name.Should().Be(aladdin.Name);\r\n    lastGameStatus.Winner.Id.Should().Be(aladdin.Id);\r\n    var boardUsedToPlay = lastGameStatus.ConfiguredBoard;\r\n    var boardPositions = boardUsedToPlay.NumberOfRows * boardUsedToPlay.NumberOfColumn;\r\n    var expectedFreeFields = boardPositions - AppDbContext.Movements.Count();\r\n    boardUsedToPlay.FreeFields.Count.Should().Be(expectedFreeFields);\r\n    // All board positions\r\n    boardUsedToPlay.FieldsConfiguration[2][0].Name.Should().Be(aladdin.Name);\r\n    boardUsedToPlay.FieldsConfiguration[2][1].Name.Should().Be(aladdin.Name);\r\n    boardUsedToPlay.FieldsConfiguration[2][2].Name.Should().Be(aladdin.Name);\r\n    var availablePositions = 0;\r\n    for (var position = 0; position \u003C 2; position\u002B\u002B)\r\n        foreach (var player in boardUsedToPlay.FieldsConfiguration[position])\r\n        {\r\n            if (player is null)\r\n                availablePositions\u002B\u002B;\r\n        }\r\n\r\n    availablePositions.Should().Be(4);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "WithDatabase",
    "Message": null,
    "ProjectName": "Tests",
    "Methods": [
      {
        "Name": "ShouldDoNothingGivenNoParametersAreProvided",
        "Body": "{\r\n    // Arrange\r\n    using var console = new FakeInMemoryConsole();\r\n    var app = new CliApplicationBuilder().AddCommand\u003CTaskCommand\u003E().UseConsole(console).Build();\r\n    var invokingTaskWithoutArguments = new[]\r\n    {\r\n        \u0022task\u0022\r\n    };\r\n    var envKey = \u0022ConnectionStrings__AppDbContext\u0022;\r\n    var connectionString = \u0022FakeConnectionString\u0022;\r\n    var envVars = new Dictionary\u003Cstring, string\u003E\r\n    {\r\n        {\r\n            envKey,\r\n            connectionString\r\n        }\r\n    };\r\n    // Act\r\n    await app.RunAsync(invokingTaskWithoutArguments, envVars);\r\n    // Assert\r\n    var stdOut = console.ReadOutputString();\r\n    var stdOutError = console.ReadErrorString();\r\n    stdOut.Should().Be(\u0022Nothing to do \uD83E\uDD37\\n\u0022);\r\n    stdOutError.Should().BeEmpty();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldSeedDatabase",
        "Body": "{\r\n    // Arrange\r\n    using var console = new FakeInMemoryConsole();\r\n    var app = new CliApplicationBuilder().AddCommand\u003CTaskCommand\u003E().UseConsole(console).Build();\r\n    var invokingTaskWithSeed = new[]\r\n    {\r\n        \u0022task\u0022,\r\n        \u0022--seed\u0022\r\n    };\r\n    var envKey = \u0022ConnectionStrings__AppDbContext\u0022;\r\n    var connectionString = ConnectionString;\r\n    var envVars = new Dictionary\u003Cstring, string\u003E\r\n    {\r\n        {\r\n            envKey,\r\n            connectionString\r\n        }\r\n    };\r\n    // Act\r\n    await app.RunAsync(invokingTaskWithSeed, envVars);\r\n    // Assert\r\n    AppDbContext.CreateContext(ConnectionString).Players.Count().Should().Be(1000);\r\n    var stdOut = console.ReadOutputString();\r\n    var stdOutError = console.ReadErrorString();\r\n    stdOut.Should().Be(\u0022Seed has been executed!\\nDone \uD83E\uDD19\\n\u0022);\r\n    stdOutError.Should().BeEmpty();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldSeedDatabaseWithCustomAmountOfPlayers",
        "Body": "{\r\n    // Arrange\r\n    using var console = new FakeInMemoryConsole();\r\n    var app = new CliApplicationBuilder().AddCommand\u003CTaskCommand\u003E().UseConsole(console).Build();\r\n    var amountOfPlayersToBeCreated = 10_000;\r\n    var invokingTaskWithSeed = new[]\r\n    {\r\n        \u0022task\u0022,\r\n        \u0022--seed\u0022,\r\n        \u0022--amount-of-players\u0022,\r\n        amountOfPlayersToBeCreated.ToString()\r\n    };\r\n    var envKey = \u0022ConnectionStrings__AppDbContext\u0022;\r\n    var connectionString = ConnectionString;\r\n    var envVars = new Dictionary\u003Cstring, string\u003E\r\n    {\r\n        {\r\n            envKey,\r\n            connectionString\r\n        }\r\n    };\r\n    // Act\r\n    await app.RunAsync(invokingTaskWithSeed, envVars);\r\n    // Assert\r\n    AppDbContext.CreateContext(ConnectionString).Players.Count().Should().Be(amountOfPlayersToBeCreated);\r\n    var stdOut = console.ReadOutputString();\r\n    var stdOutError = console.ReadErrorString();\r\n    stdOut.Should().Be(\u0022Seed has been executed!\\nDone \uD83E\uDD19\\n\u0022);\r\n    stdOutError.Should().BeEmpty();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldApplyMigrate",
        "Body": "{\r\n    // Arrange\r\n    using var console = new FakeInMemoryConsole();\r\n    var app = new CliApplicationBuilder().AddCommand\u003CTaskCommand\u003E().UseConsole(console).Build();\r\n    var amountOfPlayersToBeCreated = 10_000;\r\n    var invokingTaskWithSeed = new[]\r\n    {\r\n        \u0022task\u0022,\r\n        \u0022--migrate\u0022\r\n    };\r\n    var envKey = \u0022ConnectionStrings__AppDbContext\u0022;\r\n    var connectionString = ConnectionString;\r\n    var envVars = new Dictionary\u003Cstring, string\u003E\r\n    {\r\n        {\r\n            envKey,\r\n            connectionString\r\n        }\r\n    };\r\n    // Act\r\n    await app.RunAsync(invokingTaskWithSeed, envVars);\r\n    // Assert\r\n    var stdOut = console.ReadOutputString();\r\n    var stdOutError = console.ReadErrorString();\r\n    stdOut.Should().Be(\u0022Seed has been executed!\\nDone \uD83E\uDD19\\n\u0022);\r\n    stdOutError.Should().BeEmpty();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TaskCommandITests",
    "Message": null,
    "ProjectName": "Tests",
    "Methods": [
      {
        "Name": "ShouldDoNothingGivenNoParametersAreProvided",
        "Body": "{\r\n    // Arrange\r\n    using var console = new FakeInMemoryConsole();\r\n    var app = new CliApplicationBuilder().AddCommand\u003CTaskCommand\u003E().UseConsole(console).Build();\r\n    var invokingTaskWithoutArguments = new[]\r\n    {\r\n        \u0022task\u0022\r\n    };\r\n    var envKey = \u0022ConnectionStrings__AppDbContext\u0022;\r\n    var connectionString = \u0022FakeConnectionString\u0022;\r\n    var envVars = new Dictionary\u003Cstring, string\u003E\r\n    {\r\n        {\r\n            envKey,\r\n            connectionString\r\n        }\r\n    };\r\n    // Act\r\n    await app.RunAsync(invokingTaskWithoutArguments, envVars);\r\n    // Assert\r\n    var stdOut = console.ReadOutputString();\r\n    var stdOutError = console.ReadErrorString();\r\n    stdOut.Should().Be(\u0022Nothing to do \uD83E\uDD37\\n\u0022);\r\n    stdOutError.Should().BeEmpty();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldSeedDatabase",
        "Body": "{\r\n    // Arrange\r\n    using var console = new FakeInMemoryConsole();\r\n    var app = new CliApplicationBuilder().AddCommand\u003CTaskCommand\u003E().UseConsole(console).Build();\r\n    var invokingTaskWithSeed = new[]\r\n    {\r\n        \u0022task\u0022,\r\n        \u0022--seed\u0022\r\n    };\r\n    var envKey = \u0022ConnectionStrings__AppDbContext\u0022;\r\n    var connectionString = ConnectionString;\r\n    var envVars = new Dictionary\u003Cstring, string\u003E\r\n    {\r\n        {\r\n            envKey,\r\n            connectionString\r\n        }\r\n    };\r\n    // Act\r\n    await app.RunAsync(invokingTaskWithSeed, envVars);\r\n    // Assert\r\n    AppDbContext.CreateContext(ConnectionString).Players.Count().Should().Be(1000);\r\n    var stdOut = console.ReadOutputString();\r\n    var stdOutError = console.ReadErrorString();\r\n    stdOut.Should().Be(\u0022Seed has been executed!\\nDone \uD83E\uDD19\\n\u0022);\r\n    stdOutError.Should().BeEmpty();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldSeedDatabaseWithCustomAmountOfPlayers",
        "Body": "{\r\n    // Arrange\r\n    using var console = new FakeInMemoryConsole();\r\n    var app = new CliApplicationBuilder().AddCommand\u003CTaskCommand\u003E().UseConsole(console).Build();\r\n    var amountOfPlayersToBeCreated = 10_000;\r\n    var invokingTaskWithSeed = new[]\r\n    {\r\n        \u0022task\u0022,\r\n        \u0022--seed\u0022,\r\n        \u0022--amount-of-players\u0022,\r\n        amountOfPlayersToBeCreated.ToString()\r\n    };\r\n    var envKey = \u0022ConnectionStrings__AppDbContext\u0022;\r\n    var connectionString = ConnectionString;\r\n    var envVars = new Dictionary\u003Cstring, string\u003E\r\n    {\r\n        {\r\n            envKey,\r\n            connectionString\r\n        }\r\n    };\r\n    // Act\r\n    await app.RunAsync(invokingTaskWithSeed, envVars);\r\n    // Assert\r\n    AppDbContext.CreateContext(ConnectionString).Players.Count().Should().Be(amountOfPlayersToBeCreated);\r\n    var stdOut = console.ReadOutputString();\r\n    var stdOutError = console.ReadErrorString();\r\n    stdOut.Should().Be(\u0022Seed has been executed!\\nDone \uD83E\uDD19\\n\u0022);\r\n    stdOutError.Should().BeEmpty();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldApplyMigrate",
        "Body": "{\r\n    // Arrange\r\n    using var console = new FakeInMemoryConsole();\r\n    var app = new CliApplicationBuilder().AddCommand\u003CTaskCommand\u003E().UseConsole(console).Build();\r\n    var amountOfPlayersToBeCreated = 10_000;\r\n    var invokingTaskWithSeed = new[]\r\n    {\r\n        \u0022task\u0022,\r\n        \u0022--migrate\u0022\r\n    };\r\n    var envKey = \u0022ConnectionStrings__AppDbContext\u0022;\r\n    var connectionString = ConnectionString;\r\n    var envVars = new Dictionary\u003Cstring, string\u003E\r\n    {\r\n        {\r\n            envKey,\r\n            connectionString\r\n        }\r\n    };\r\n    // Act\r\n    await app.RunAsync(invokingTaskWithSeed, envVars);\r\n    // Assert\r\n    var stdOut = console.ReadOutputString();\r\n    var stdOutError = console.ReadErrorString();\r\n    stdOut.Should().Be(\u0022Seed has been executed!\\nDone \uD83E\uDD19\\n\u0022);\r\n    stdOutError.Should().BeEmpty();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TicTacToeRepositoryITests",
    "Message": null,
    "ProjectName": "Tests",
    "Methods": [
      {
        "Name": "ShouldReturnNullGivenNoBoardWasFound",
        "Body": "{\r\n    // Arrange\r\n    var fakeId = 42;\r\n    // Act\r\n    var board = await _ticTacToeRepository.GetBoardByItsId(fakeId);\r\n    // Arrange\r\n    board.Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturnBoardGivenItsId",
        "Body": "{\r\n    // Arrange\r\n    IList\u003CBoard\u003E boards = await new BoardBuilder().WithDbContext(AppDbContext).CreateBoard().Build();\r\n    var createdBoard = boards.First();\r\n    // Act\r\n    var foundBoard = await _ticTacToeRepository.GetBoardByItsId(createdBoard.Id);\r\n    // Assert\r\n    foundBoard.Should().Equals(createdBoard);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturnSomeComputerUser",
        "Body": "{\r\n    // Arrange\r\n    AppDbContext.AddRange(new Player { Name = \u0022Rose\u0022, Computer = true }, new Player { Name = \u0022Z\u0022, Computer = true });\r\n    await AppDbContext.SaveChangesAsync();\r\n    // Act\r\n    var foundBoard = await _ticTacToeRepository.GetSomeComputerPlayer();\r\n    // Assert\r\n    foundBoard.Computer.Should().BeTrue();\r\n    foundBoard.Name.Should().ContainAny(new List\u003Cstring\u003E { \u0022Rose\u0022, \u0022Z\u0022 });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldSaveBoardWithItsPlayerBoards",
        "Body": "{\r\n    // Arrange\r\n    var jafar = new Player\r\n    {\r\n        Name = \u0022Jafar\u0022,\r\n        Computer = false\r\n    };\r\n    var rose = new Player\r\n    {\r\n        Name = \u0022Rose\u0022,\r\n        Computer = true\r\n    };\r\n    AppDbContext.Players.AddRange(jafar, rose);\r\n    await AppDbContext.SaveChangesAsync();\r\n    var boardToBeCreated = new Board\r\n    {\r\n        NumberOfColumn = 3,\r\n        NumberOfRows = 3\r\n    };\r\n    var playerBoardOne = new PlayerBoard\r\n    {\r\n        Player = jafar,\r\n        Board = boardToBeCreated\r\n    };\r\n    boardToBeCreated.PlayerBoards = new List\u003CPlayerBoard\u003E\r\n    {\r\n        playerBoardOne\r\n    };\r\n    // Act\r\n    await _ticTacToeRepository.SaveBoard(boardToBeCreated);\r\n    // Assert\r\n    AppDbContext.Boards.Count().Should().Be(1);\r\n    AppDbContext.Players.Count().Should().Be(2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreateMovementAndRefreshBoardState",
        "Body": "{\r\n    // Arrange\r\n    var aladdin = new Player\r\n    {\r\n        Name = \u0022Aladdin\u0022,\r\n        Computer = false\r\n    };\r\n    var createdBoard = (await new BoardBuilder().WithDbContext(AppDbContext).CreateBoard().WithPlayers(aladdin).Build()).First();\r\n    var movement = new Movement\r\n    {\r\n        Position = 1,\r\n        WhoMade = aladdin\r\n    };\r\n    // Act\r\n    await _ticTacToeRepository.CreateMovementAndRefreshBoard(movement, createdBoard);\r\n    // Assert\r\n    createdBoard.Movements.Count.Should().Be(1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  }
]