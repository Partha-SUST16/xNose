[
  {
    "Name": "MockHttpClientTest",
    "Message": null,
    "ProjectName": "UnitTestEx.Xunit.Test",
    "Methods": [
      {
        "Name": "UriOnly_Single",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://d365test\u0022)).Request(HttpMethod.Get, \u0022products/xyz\u0022).Respond.With(HttpStatusCode.NotFound);\r\n    var hc = mcf.GetHttpClient(\u0022XXX\u0022);\r\n    var res = await hc.GetAsync(\u0022products/xyz\u0022).ConfigureAwait(false);\r\n    Assert.Equal(HttpStatusCode.NotFound, res.StatusCode);\r\n    res = await hc.GetAsync(\u0022products/xyz\u0022).ConfigureAwait(false);\r\n    Assert.Equal(HttpStatusCode.NotFound, res.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UriOnly_Multi",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    var mc = mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://d365test\u0022));\r\n    mc.Request(HttpMethod.Get, \u0022products/xyz\u0022).Respond.With(HttpStatusCode.NotFound);\r\n    mc.Request(HttpMethod.Get, \u0022products/abc\u0022).Respond.With(HttpStatusCode.NoContent);\r\n    var hc = mcf.GetHttpClient(\u0022XXX\u0022);\r\n    var res = await hc.GetAsync(\u0022products/xyz\u0022).ConfigureAwait(false);\r\n    Assert.Equal(HttpStatusCode.NotFound, res.StatusCode);\r\n    res = await hc.GetAsync(\u0022products/abc\u0022).ConfigureAwait(false);\r\n    Assert.Equal(HttpStatusCode.NoContent, res.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UriAndBody_String_Single",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://d365test\u0022)).Request(HttpMethod.Post, \u0022products/xyz\u0022).WithBody(\u0022Bananas\u0022).Respond.With(HttpStatusCode.Accepted);\r\n    var hc = mcf.GetHttpClient(\u0022XXX\u0022);\r\n    var res = await hc.PostAsync(\u0022products/xyz\u0022, new StringContent(\u0022Bananas\u0022)).ConfigureAwait(false);\r\n    Assert.Equal(HttpStatusCode.Accepted, res.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UriAndBody_String_Multi",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    var mc = mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://d365test\u0022));\r\n    mc.Request(HttpMethod.Post, \u0022products/xyz\u0022).WithBody(\u0022Bananas\u0022).Respond.With(HttpStatusCode.Accepted);\r\n    mc.Request(HttpMethod.Post, \u0022products/xyz\u0022).WithBody(\u0022Apples\u0022).Respond.With(HttpStatusCode.NoContent);\r\n    var hc = mcf.GetHttpClient(\u0022XXX\u0022);\r\n    var res = await hc.PostAsync(\u0022products/xyz\u0022, new StringContent(\u0022Bananas\u0022)).ConfigureAwait(false);\r\n    Assert.Equal(HttpStatusCode.Accepted, res.StatusCode);\r\n    res = await hc.PostAsync(\u0022products/xyz\u0022, new StringContent(\u0022Apples\u0022)).ConfigureAwait(false);\r\n    Assert.Equal(HttpStatusCode.NoContent, res.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UriAndBody_Invalid",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://d365test\u0022)).Request(HttpMethod.Post, \u0022products/xyz\u0022).WithBody(\u0022Bananas\u0022).Respond.With(HttpStatusCode.Accepted);\r\n    var hc = mcf.GetHttpClient(\u0022XXX\u0022);\r\n    Assert.ThrowsAsync\u003CMockHttpClientException\u003E(() =\u003E hc.PostAsync(\u0022products/xyz\u0022, new StringContent(\u0022Apples\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UriAndBody_Json_Single",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://d365test\u0022)).Request(HttpMethod.Post, \u0022products/xyz\u0022).WithJsonBody(new Person { FirstName = \u0022Bob\u0022, LastName = \u0022Jane\u0022 }).Respond.With(HttpStatusCode.Accepted);\r\n    var hc = mcf.GetHttpClient(\u0022XXX\u0022);\r\n    var res = await hc.PostAsJsonAsync(\u0022products/xyz\u0022, new Person { LastName = \u0022Jane\u0022, FirstName = \u0022Bob\u0022 }).ConfigureAwait(false);\r\n    Assert.Equal(HttpStatusCode.Accepted, res.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UriAndBody_Json_Multi",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    var mc = mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://d365test\u0022));\r\n    mc.Request(HttpMethod.Post, \u0022products/xyz\u0022).WithJsonBody(\u0022{ \\\u0022firstName\\\u0022: \\\u0022Bob\\\u0022, \\\u0022lastName\\\u0022: \\\u0022Jane\\\u0022 }\u0022).Respond.With(HttpStatusCode.Accepted);\r\n    mc.Request(HttpMethod.Post, \u0022products/xyz\u0022).WithJsonBody(new Person { FirstName = \u0022Jenny\u0022, LastName = \u0022Browne\u0022 }).Respond.With(HttpStatusCode.OK);\r\n    var hc = mcf.GetHttpClient(\u0022XXX\u0022);\r\n    var res = await hc.PostAsJsonAsync(\u0022products/xyz\u0022, new Person { LastName = \u0022Jane\u0022, FirstName = \u0022Bob\u0022 }).ConfigureAwait(false);\r\n    Assert.Equal(HttpStatusCode.Accepted, res.StatusCode);\r\n    res = await hc.PostAsync(\u0022products/xyz\u0022, new StringContent(\u0022{ \\\u0022firstName\\\u0022: \\\u0022Jenny\\\u0022, \\\u0022lastName\\\u0022: \\\u0022Browne\\\u0022 }\u0022, Encoding.UTF8, MediaTypeNames.Application.Json)).ConfigureAwait(false);\r\n    Assert.Equal(HttpStatusCode.OK, res.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UriAndBody_WithJsonResponse",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://d365test\u0022)).Request(HttpMethod.Post, \u0022products/xyz\u0022).WithJsonBody(new Person { FirstName = \u0022Bob\u0022, LastName = \u0022Jane\u0022 }).Respond.WithJson(new Person2 { First = \u0022Bob\u0022, Last = \u0022Jane\u0022 }, HttpStatusCode.Accepted);\r\n    var hc = mcf.GetHttpClient(\u0022XXX\u0022);\r\n    var res = await hc.PostAsJsonAsync(\u0022products/xyz\u0022, new Person { LastName = \u0022Jane\u0022, FirstName = \u0022Bob\u0022 }).ConfigureAwait(false);\r\n    Assert.Equal(HttpStatusCode.Accepted, res.StatusCode);\r\n    Assert.Equal(\u0022{\\\u0022first\\\u0022:\\\u0022Bob\\\u0022,\\\u0022last\\\u0022:\\\u0022Jane\\\u0022}\u0022, await res.Content.ReadAsStringAsync().ConfigureAwait(false));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UriAndBody_WithJsonResponse2",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://d365test\u0022)).Request(HttpMethod.Post, \u0022products/xyz\u0022).WithJsonBody(new Person { FirstName = \u0022Bob\u0022, LastName = \u0022Jane\u0022 }).Respond.WithJson(\u0022{\\\u0022first\\\u0022:\\\u0022Bob\\\u0022,\\\u0022last\\\u0022:\\\u0022Jane\\\u0022}\u0022, HttpStatusCode.Accepted);\r\n    var hc = mcf.GetHttpClient(\u0022XXX\u0022);\r\n    var res = await hc.PostAsJsonAsync(\u0022products/xyz\u0022, new Person { LastName = \u0022Jane\u0022, FirstName = \u0022Bob\u0022 }).ConfigureAwait(false);\r\n    Assert.Equal(HttpStatusCode.Accepted, res.StatusCode);\r\n    Assert.Equal(\u0022{\\\u0022first\\\u0022:\\\u0022Bob\\\u0022,\\\u0022last\\\u0022:\\\u0022Jane\\\u0022}\u0022, await res.Content.ReadAsStringAsync().ConfigureAwait(false));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UriAndBody_WithJsonResponse3",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://d365test\u0022)).Request(HttpMethod.Post, \u0022products/xyz\u0022).WithJsonBody(new Person { FirstName = \u0022Bob\u0022, LastName = \u0022Jane\u0022 }).Respond.WithJsonResource(\u0022MockHttpClientTest-UriAndBody_WithJsonResponse3.json\u0022, HttpStatusCode.Accepted);\r\n    var hc = mcf.GetHttpClient(\u0022XXX\u0022);\r\n    var res = await hc.PostAsJsonAsync(\u0022products/xyz\u0022, new Person { LastName = \u0022Jane\u0022, FirstName = \u0022Bob\u0022 }).ConfigureAwait(false);\r\n    Assert.Equal(HttpStatusCode.Accepted, res.StatusCode);\r\n    Assert.Equal(\u0022{\\\u0022first\\\u0022:\\\u0022Bob\\\u0022,\\\u0022last\\\u0022:\\\u0022Jane\\\u0022}\u0022, await res.Content.ReadAsStringAsync().ConfigureAwait(false));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "VerifyMock_NotExecuted",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://d365test\u0022)).Request(HttpMethod.Post, \u0022products/xyz\u0022).WithJsonBody(new Person { FirstName = \u0022Bob\u0022, LastName = \u0022Jane\u0022 }).Respond.WithJsonResource(\u0022MockHttpClientTest-UriAndBody_WithJsonResponse3.json\u0022, HttpStatusCode.Accepted);\r\n    try\r\n    {\r\n        mcf.VerifyAll();\r\n        throw new InvalidOperationException();\r\n    }\r\n    catch (MockHttpClientException mhcex)\r\n    {\r\n        Assert.Equal(\u0022The request was invoked 0 times; expected AtLeastOnce. Request: \u003CXXX\u003E POST https://d365test/products/xyz {\\\u0022firstName\\\u0022:\\\u0022Bob\\\u0022,\\\u0022lastName\\\u0022:\\\u0022Jane\\\u0022} (application/json)\u0022, mhcex.Message);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "VerifyMock_NotExecuted_Multi",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    var mc = mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://d365test\u0022));\r\n    mc.Request(HttpMethod.Post, \u0022products/xyz\u0022).WithJsonBody(new Person { FirstName = \u0022Bob\u0022, LastName = \u0022Jane\u0022 }).Respond.WithJsonResource(\u0022MockHttpClientTest-UriAndBody_WithJsonResponse3.json\u0022, HttpStatusCode.Accepted);\r\n    mc.Request(HttpMethod.Post, \u0022products/abc\u0022).WithJsonBody(new Person { FirstName = \u0022David\u0022, LastName = \u0022Jane\u0022 }).Respond.WithJsonResource(\u0022MockHttpClientTest-UriAndBody_WithJsonResponse3.json\u0022, HttpStatusCode.Accepted);\r\n    try\r\n    {\r\n        var hc = mcf.GetHttpClient(\u0022XXX\u0022);\r\n        var res = await hc.PostAsJsonAsync(\u0022products/xyz\u0022, new Person { LastName = \u0022Jane\u0022, FirstName = \u0022Bob\u0022 }).ConfigureAwait(false);\r\n        Assert.Equal(HttpStatusCode.Accepted, res.StatusCode);\r\n        mcf.VerifyAll();\r\n        throw new InvalidOperationException();\r\n    }\r\n    catch (MockHttpClientException mhcex)\r\n    {\r\n        Assert.Equal(\u0022The request was invoked 0 times; expected AtLeastOnce. Request: \u003CXXX\u003E POST https://d365test/products/abc {\\\u0022firstName\\\u0022:\\\u0022David\\\u0022,\\\u0022lastName\\\u0022:\\\u0022Jane\\\u0022} (application/json)\u0022, mhcex.Message);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "VerifyMock_NotExecuted_Times",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    var mc = mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://d365test\u0022));\r\n    mc.Request(HttpMethod.Post, \u0022products/xyz\u0022).Times(Times.Exactly(2)).WithJsonBody(new Person { FirstName = \u0022Bob\u0022, LastName = \u0022Jane\u0022 }).Respond.WithJsonResource(\u0022MockHttpClientTest-UriAndBody_WithJsonResponse3.json\u0022, HttpStatusCode.Accepted);\r\n    try\r\n    {\r\n        var hc = mcf.GetHttpClient(\u0022XXX\u0022);\r\n        var res = await hc.PostAsJsonAsync(\u0022products/xyz\u0022, new Person { LastName = \u0022Jane\u0022, FirstName = \u0022Bob\u0022 }).ConfigureAwait(false);\r\n        Assert.Equal(HttpStatusCode.Accepted, res.StatusCode);\r\n        res = await hc.PostAsJsonAsync(\u0022products/xyz\u0022, new Person { LastName = \u0022Jane\u0022, FirstName = \u0022Bob\u0022 }).ConfigureAwait(false);\r\n        Assert.Equal(HttpStatusCode.Accepted, res.StatusCode);\r\n        res = await hc.PostAsJsonAsync(\u0022products/xyz\u0022, new Person { LastName = \u0022Jane\u0022, FirstName = \u0022Bob\u0022 }).ConfigureAwait(false);\r\n        Assert.Equal(HttpStatusCode.Accepted, res.StatusCode);\r\n        mcf.VerifyAll();\r\n        throw new InvalidOperationException();\r\n    }\r\n    catch (MockHttpClientException mhcex)\r\n    {\r\n        Assert.Equal(\u0022The request was invoked 3 times; expected Exactly(2). Request: \u003CXXX\u003E POST https://d365test/products/xyz {\\\u0022firstName\\\u0022:\\\u0022Bob\\\u0022,\\\u0022lastName\\\u0022:\\\u0022Jane\\\u0022} (application/json)\u0022, mhcex.Message);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "VerifyMock_Executed",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://d365test\u0022)).Request(HttpMethod.Post, \u0022products/xyz\u0022).WithJsonBody(new Person { FirstName = \u0022Bob\u0022, LastName = \u0022Jane\u0022 }).Respond.WithJsonResource(\u0022MockHttpClientTest-UriAndBody_WithJsonResponse3.json\u0022, HttpStatusCode.Accepted);\r\n    var hc = mcf.GetHttpClient(\u0022XXX\u0022);\r\n    await hc.PostAsJsonAsync(\u0022products/xyz\u0022, new Person { LastName = \u0022Jane\u0022, FirstName = \u0022Bob\u0022 }).ConfigureAwait(false);\r\n    mcf.VerifyAll();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UriAndAnyBody",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://d365test\u0022)).Request(HttpMethod.Post, \u0022products/xyz\u0022).WithAnyBody().Respond.WithJson(\u0022{\\\u0022first\\\u0022:\\\u0022Bob\\\u0022,\\\u0022last\\\u0022:\\\u0022Jane\\\u0022}\u0022, HttpStatusCode.Accepted);\r\n    var hc = mcf.GetHttpClient(\u0022XXX\u0022);\r\n    var res = await hc.PostAsJsonAsync(\u0022products/xyz\u0022, new Person { LastName = \u0022Jane\u0022, FirstName = \u0022Bob\u0022 }).ConfigureAwait(false);\r\n    Assert.Equal(HttpStatusCode.Accepted, res.StatusCode);\r\n    Assert.Equal(\u0022{\\\u0022first\\\u0022:\\\u0022Bob\\\u0022,\\\u0022last\\\u0022:\\\u0022Jane\\\u0022}\u0022, await res.Content.ReadAsStringAsync().ConfigureAwait(false));\r\n    await Assert.ThrowsAsync\u003CMockHttpClientException\u003E(async () =\u003E await hc.SendAsync(new HttpRequestMessage(HttpMethod.Post, \u0022products/xyz\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "MockSequence_Body",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    var mc = mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://d365test\u0022));\r\n    mc.Request(HttpMethod.Post, \u0022products/xyz\u0022).WithAnyBody().Respond.WithSequence(s =\u003E\r\n    {\r\n        s.Respond().With(HttpStatusCode.Accepted);\r\n        s.Respond().With(HttpStatusCode.OK);\r\n    });\r\n    var hc = mcf.GetHttpClient(\u0022XXX\u0022);\r\n    var res = await hc.PostAsJsonAsync(\u0022products/xyz\u0022, new Person { LastName = \u0022Jane\u0022, FirstName = \u0022Bob\u0022 }).ConfigureAwait(false);\r\n    Assert.Equal(HttpStatusCode.Accepted, res.StatusCode);\r\n    res = await hc.PostAsJsonAsync(\u0022products/xyz\u0022, new Person { LastName = \u0022Jane\u0022, FirstName = \u0022Bob\u0022 }).ConfigureAwait(false);\r\n    Assert.Equal(HttpStatusCode.OK, res.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "MockSequence",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    var mc = mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://d365test\u0022));\r\n    mc.Request(HttpMethod.Get, \u0022products/xyz\u0022).Respond.WithSequence(s =\u003E\r\n    {\r\n        s.Respond().With(HttpStatusCode.NotModified);\r\n        s.Respond().With(HttpStatusCode.NotFound);\r\n    });\r\n    var hc = mcf.GetHttpClient(\u0022XXX\u0022);\r\n    var res = await hc.GetAsync(\u0022products/xyz\u0022).ConfigureAwait(false);\r\n    Assert.Equal(HttpStatusCode.NotModified, res.StatusCode);\r\n    res = await hc.GetAsync(\u0022products/xyz\u0022).ConfigureAwait(false);\r\n    Assert.Equal(HttpStatusCode.NotFound, res.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "MockDelay",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://d365test\u0022)).Request(HttpMethod.Get, \u0022products/xyz\u0022).Respond.Delay(500).With(HttpStatusCode.NotFound);\r\n    var hc = mcf.GetHttpClient(\u0022XXX\u0022);\r\n    var sw = Stopwatch.StartNew();\r\n    var res = await hc.GetAsync(\u0022products/xyz\u0022).ConfigureAwait(false);\r\n    sw.Stop();\r\n    Assert.Equal(HttpStatusCode.NotFound, res.StatusCode);\r\n    Assert.True(sw.ElapsedMilliseconds \u003E= 495, $\u0022Actual elapsed milliseconds {sw.ElapsedMilliseconds}.\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "MockSequenceDelay",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    var mc = mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://d365test\u0022));\r\n    mc.Request(HttpMethod.Get, \u0022products/xyz\u0022).Respond.WithSequence(s =\u003E\r\n    {\r\n        s.Respond().Delay(250).With(HttpStatusCode.NotModified);\r\n        s.Respond().Delay(100, 150).With(HttpStatusCode.NotFound);\r\n    });\r\n    var hc = mcf.GetHttpClient(\u0022XXX\u0022);\r\n    var sw = Stopwatch.StartNew();\r\n    var res = await hc.GetAsync(\u0022products/xyz\u0022).ConfigureAwait(false);\r\n    sw.Stop();\r\n    Assert.Equal(HttpStatusCode.NotModified, res.StatusCode);\r\n    Assert.True(sw.ElapsedMilliseconds \u003E= 245, $\u0022Actual elapsed milliseconds {sw.ElapsedMilliseconds}.\u0022);\r\n    sw.Restart();\r\n    res = await hc.GetAsync(\u0022products/xyz\u0022).ConfigureAwait(false);\r\n    sw.Stop();\r\n    Assert.Equal(HttpStatusCode.NotFound, res.StatusCode);\r\n    Assert.True(sw.ElapsedMilliseconds \u003E= 95, $\u0022Actual elapsed milliseconds {sw.ElapsedMilliseconds}.\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UriAndBody_WithXmlRequest",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://d365test\u0022)).Request(HttpMethod.Post, \u0022products/xyz\u0022).WithBody(\u0022\u003CPerson xmlns:i=\\\u0022http://www.w3.org/2001/XMLSchema-instance\\\u0022 xmlns=\\\u0022http://schemas.datacontract.org/2004/07/UnitTestEx.Xunit.Test.Model\\\u0022\u003E\u003CFirstName\u003EBob\u003C/FirstName\u003E\u003CLastName\u003EJane\u003C/LastName\u003E\u003C/Person\u003E\u0022, MediaTypeNames.Application.Xml).Respond.With(new StringContent(\u0022\u003Cperson\u003E\u003Cfirst\u003EBob\u003C/first\u003E\u003Clast\u003EJane\u003C/last\u003E\u003C/person\u003E\u0022, Encoding.UTF8, MediaTypeNames.Application.Xml), HttpStatusCode.Accepted);\r\n    var hc = mcf.GetHttpClient(\u0022XXX\u0022);\r\n    var res = await hc.PostAsXmlAsync(\u0022products/xyz\u0022, new Person { LastName = \u0022Jane\u0022, FirstName = \u0022Bob\u0022 }).ConfigureAwait(false);\r\n    Assert.Equal(HttpStatusCode.Accepted, res.StatusCode);\r\n    Assert.Equal(\u0022\u003Cperson\u003E\u003Cfirst\u003EBob\u003C/first\u003E\u003Clast\u003EJane\u003C/last\u003E\u003C/person\u003E\u0022, await res.Content.ReadAsStringAsync().ConfigureAwait(false));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UriAndBody_WithAnyTypeRequest",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://d365test\u0022)).Request(HttpMethod.Post, \u0022testing\u0022).WithBody(\u0022--my--custom--format--\u0022, \u0022application/custom-format\u0022).Respond.With(new StringContent(\u0022--ok--\u0022, Encoding.UTF8, \u0022application/custom-format\u0022), HttpStatusCode.Accepted);\r\n    var hc = mcf.GetHttpClient(\u0022XXX\u0022);\r\n    var res = await hc.PostAsync(\u0022testing\u0022, new StringContent(\u0022--my--custom--format--\u0022, Encoding.UTF8, \u0022application/custom-format\u0022)).ConfigureAwait(false);\r\n    Assert.Equal(HttpStatusCode.Accepted, res.StatusCode);\r\n    Assert.Equal(\u0022--ok--\u0022, await res.Content.ReadAsStringAsync().ConfigureAwait(false));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "GenericTest",
    "Message": "This class has Lack of Cohesion of Test Cases",
    "ProjectName": "UnitTestEx.Xunit.Test",
    "Methods": [
      {
        "Name": "Run_Success",
        "Body": "{\r\n    using var test = CreateGenericTester();\r\n    test.Run(() =\u003E 1).AssertSuccess().Assert(1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Run_Exception",
        "Body": "{\r\n    using var test = CreateGenericTester();\r\n    test.ExpectErrorType(CoreEx.Abstractions.ErrorType.ValidationError, \u0022Badness.\u0022).Run(() =\u003E throw new CoreEx.ValidationException(\u0022Badness.\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "LoggerTest",
    "Message": null,
    "ProjectName": "UnitTestEx.Xunit.Test",
    "Methods": [
      {
        "Name": "Test",
        "Body": "{\r\n    var l = new XunitTestImplementor(Output).CreateLoggerProvider().CreateLogger(\u0022LoggerTest\u0022);\r\n    var scope = l.BeginScope(new Dictionary\u003Cstring, object\u003E() { { \u0022CorrelationId\u0022, \u0022abc\u0022 }, { \u0022AltCode\u0022, 1234 } });\r\n    l.LogInformation(\u0022A single line of {Text}.\u0022, \u0022text\u0022);\r\n    var scope2 = l.BeginScope(new Dictionary\u003Cstring, object\u003E() { { \u0022Other\u0022, \u0022bananas\u0022 } });\r\n    l.LogWarning($\u0022First line of text.{Environment.NewLine}Second line of text.{Environment.NewLine}Third line of text.\u0022);\r\n    l.LogInformation(\u0022A single line of text.\u0022);\r\n    scope2.Dispose();\r\n    l.LogWarning($\u0022First line of text.{Environment.NewLine}Second line of text.{Environment.NewLine}Third line of text.\u0022);\r\n    scope.Dispose();\r\n    l.LogInformation(\u0022A single line of text.\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ObjectComparerTest",
    "Message": null,
    "ProjectName": "UnitTestEx.Xunit.Test",
    "Methods": [
      {
        "Name": "Test",
        "Body": "{\r\n    var p1 = new Person\r\n    {\r\n        FirstName = \u0022Wendy\u0022,\r\n        LastName = \u0022Brown\u0022\r\n    };\r\n    var p2 = new Person\r\n    {\r\n        FirstName = \u0022Wendy\u0022,\r\n        LastName = \u0022Brown\u0022\r\n    };\r\n    ObjectComparer.Assert(p1, p2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ValidationTest",
    "Message": null,
    "ProjectName": "UnitTestEx.Xunit.Test",
    "Methods": [
      {
        "Name": "Validate_Success",
        "Body": "{\r\n    using var test = CreateValidationTester();\r\n    test.ReplaceScoped\u003CIValidator\u003CPerson\u003E, PersonValidator\u003E().Run\u003CIValidator\u003CPerson\u003E, Person\u003E(new Person { Id = 1, FirstName = \u0022Bob\u0022 }).AssertSuccess();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Validate_Success2",
        "Body": "{\r\n    using var test = CreateValidationTester();\r\n    test.ReplaceScoped\u003CIValidator\u003CPerson\u003E, PersonValidator\u003E().ExpectSuccess().Run\u003CIValidator\u003CPerson\u003E, Person\u003E(new Person { Id = 1, FirstName = \u0022Bob\u0022 });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Validate_Error",
        "Body": "{\r\n    using var test = CreateValidationTester();\r\n    test.ReplaceScoped\u003CIValidator\u003CPerson\u003E, PersonValidator\u003E().Run\u003CIValidator\u003CPerson\u003E, Person\u003E(new Person()).AssertErrors(\u0022Identifier is required.\u0022, \u0022First Name is required.\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Validate_Error2",
        "Body": "{\r\n    using var test = CreateValidationTester();\r\n    test.ReplaceScoped\u003CIValidator\u003CPerson\u003E, PersonValidator\u003E().ExpectErrors(\u0022Identifier is required.\u0022, \u0022First Name is required.\u0022).Run\u003CIValidator\u003CPerson\u003E, Person\u003E(new Person());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PersonValidator",
    "Message": null,
    "ProjectName": "UnitTestEx.Xunit.Test",
    "Methods": [
      {
        "Name": "Validate_Success",
        "Body": "{\r\n    using var test = CreateValidationTester();\r\n    test.ReplaceScoped\u003CIValidator\u003CPerson\u003E, PersonValidator\u003E().Run\u003CIValidator\u003CPerson\u003E, Person\u003E(new Person { Id = 1, FirstName = \u0022Bob\u0022 }).AssertSuccess();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Validate_Success2",
        "Body": "{\r\n    using var test = CreateValidationTester();\r\n    test.ReplaceScoped\u003CIValidator\u003CPerson\u003E, PersonValidator\u003E().ExpectSuccess().Run\u003CIValidator\u003CPerson\u003E, Person\u003E(new Person { Id = 1, FirstName = \u0022Bob\u0022 });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Validate_Error",
        "Body": "{\r\n    using var test = CreateValidationTester();\r\n    test.ReplaceScoped\u003CIValidator\u003CPerson\u003E, PersonValidator\u003E().Run\u003CIValidator\u003CPerson\u003E, Person\u003E(new Person()).AssertErrors(\u0022Identifier is required.\u0022, \u0022First Name is required.\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Validate_Error2",
        "Body": "{\r\n    using var test = CreateValidationTester();\r\n    test.ReplaceScoped\u003CIValidator\u003CPerson\u003E, PersonValidator\u003E().ExpectErrors(\u0022Identifier is required.\u0022, \u0022First Name is required.\u0022).Run\u003CIValidator\u003CPerson\u003E, Person\u003E(new Person());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PersonControllerTest",
    "Message": null,
    "ProjectName": "UnitTestEx.Xunit.Test",
    "Methods": [
      {
        "Name": "Get_Test1",
        "Body": "{\r\n    using var test = CreateApiTester\u003CStartup\u003E();\r\n    (await test.Controller\u003CPersonController\u003E().RunAsync(c =\u003E c.Get(1))).AssertOK().Assert(new Person { Id = 1, FirstName = \u0022Bob\u0022, LastName = \u0022Smith\u0022 });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_Test2",
        "Body": "{\r\n    int id = 2;\r\n    using var test = CreateApiTester\u003CStartup\u003E();\r\n    test.Controller\u003CPersonController\u003E().Run(c =\u003E c.Get(id)).AssertOK().Assert(new Person { Id = id, FirstName = \u0022Jane\u0022, LastName = \u0022Jones\u0022 });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_Test3",
        "Body": "{\r\n    var p = new Person\r\n    {\r\n        Id = 3,\r\n        FirstName = \u0022Brad\u0022,\r\n        LastName = \u0022Davies\u0022\r\n    };\r\n    using var test = CreateApiTester\u003CStartup\u003E();\r\n    test.Controller\u003CPersonController\u003E().Run(c =\u003E c.Get(p.Id)).AssertOK().Assert(p);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_Test4",
        "Body": "{\r\n    using var test = CreateApiTester\u003CStartup\u003E();\r\n    test.Controller\u003CPersonController\u003E().Run(c =\u003E c.Get(4)).AssertNotFound();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetByArgs_Test1",
        "Body": "{\r\n    using var test = CreateApiTester\u003CStartup\u003E();\r\n    test.Controller\u003CPersonController\u003E().Run(c =\u003E c.GetByArgs(\u0022Mary\u0022, \u0022Brown\u0022, new List\u003Cint\u003E { 88, 99 })).AssertOK().Assert(\u0022Mary-Brown-88,99\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetByArgs_Test2",
        "Body": "{\r\n    using var test = CreateApiTester\u003CStartup\u003E();\r\n    test.Controller\u003CPersonController\u003E().Run(c =\u003E c.GetByArgs(null, null, null)).AssertOK().Assert(\u0022--\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Update_Test1",
        "Body": "{\r\n    using var test = CreateApiTester\u003CStartup\u003E();\r\n    test.Controller\u003CPersonController\u003E().Run(c =\u003E c.Update(1, new Person { FirstName = \u0022Bob\u0022, LastName = \u0022Smith\u0022 })).AssertOK().Assert(new Person { Id = 1, FirstName = \u0022Bob\u0022, LastName = \u0022Smith\u0022 });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Update_Test2",
        "Body": "{\r\n    using var test = CreateApiTester\u003CStartup\u003E();\r\n    test.Controller\u003CPersonController\u003E().Run(c =\u003E c.Update(1, new Person { FirstName = null, LastName = null })).AssertBadRequest().AssertErrors(\u0022First name is required.\u0022, \u0022Last name is required.\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Update_Test3",
        "Body": "{\r\n    using var test = CreateApiTester\u003CStartup\u003E();\r\n    test.Controller\u003CPersonController\u003E().Run(c =\u003E c.Update(1, new Person { FirstName = null, LastName = null })).AssertBadRequest().AssertErrors(new ApiError(\u0022firstName\u0022, \u0022First name is required.\u0022), new ApiError(\u0022lastName\u0022, \u0022Last name is required.\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PersonFunctionTest",
    "Message": null,
    "ProjectName": "UnitTestEx.Xunit.Test",
    "Methods": [
      {
        "Name": "NoData",
        "Body": "{\r\n    using var test = CreateFunctionTester\u003CStartup\u003E();\r\n    (await test.HttpTrigger\u003CPersonFunction\u003E().RunAsync(f =\u003E f.Run(test.CreateHttpRequest(HttpMethod.Get, \u0022person\u0022), test.Logger))).AssertOK().Assert(\u0022This HTTP triggered function executed successfully. Pass a name in the query string or in the request body for a personalized response.\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "QueryString",
        "Body": "{\r\n    using var test = CreateFunctionTester\u003CStartup\u003E();\r\n    test.HttpTrigger\u003CPersonFunction\u003E().Run(f =\u003E f.Run(test.CreateHttpRequest(HttpMethod.Get, \u0022person?name=Trevor\u0022), test.Logger)).AssertOK().Assert(\u0022Hello, Trevor. This HTTP triggered function executed successfully.\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "WithBody",
        "Body": "{\r\n    using var test = CreateFunctionTester\u003CStartup\u003E();\r\n    test.HttpTrigger\u003CPersonFunction\u003E().Run(f =\u003E f.Run(test.CreateJsonHttpRequest(HttpMethod.Get, \u0022person\u0022, new { name = \u0022Jane\u0022 }), test.Logger)).AssertOK().Assert(\u0022Hello, Jane. This HTTP triggered function executed successfully.\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "BadRequest1",
        "Body": "{\r\n    using var test = CreateFunctionTester\u003CStartup\u003E();\r\n    test.HttpTrigger\u003CPersonFunction\u003E().Run(f =\u003E f.Run(test.CreateJsonHttpRequest(HttpMethod.Post, \u0022person\u0022, new { name = \u0022Brian\u0022 }), test.Logger)).AssertBadRequest().AssertErrors(\u0022Name cannot be Brian.\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "BadRequest2",
        "Body": "{\r\n    using var test = CreateFunctionTester\u003CStartup\u003E();\r\n    test.HttpTrigger\u003CPersonFunction\u003E().Run(f =\u003E f.Run(test.CreateJsonHttpRequest(HttpMethod.Post, \u0022person\u0022, new { name = \u0022Brian\u0022 }), test.Logger)).AssertBadRequest().AssertErrors(new ApiError(\u0022name\u0022, \u0022Name cannot be Brian.\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "BadRequest3",
        "Body": "{\r\n    using var test = CreateFunctionTester\u003CStartup\u003E();\r\n    test.HttpTrigger\u003CPersonFunction\u003E().Run(f =\u003E f.Run(test.CreateJsonHttpRequest(HttpMethod.Post, \u0022person\u0022, new { name = \u0022Damien\u0022 }), test.Logger)).AssertException\u003CCoreEx.ValidationException\u003E(\u0022Name cannot be Damien.\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "BadRequest4",
        "Body": "{\r\n    using var test = CreateFunctionTester\u003CStartup\u003E();\r\n    test.HttpTrigger\u003CPersonFunction\u003E().Run(f =\u003E f.Run(test.CreateJsonHttpRequest(HttpMethod.Post, \u0022person\u0022, new { name = \u0022Bruce\u0022 }), test.Logger)).AssertBadRequest().AssertErrors(\u0022Name cannot be Bruce.\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "BadRequestWebApi",
        "Body": "{\r\n    using var test = CreateFunctionTester\u003CStartup\u003E().ConfigureServices(sc =\u003E sc.AddWebApi().AddExecutionContext().AddDefaultSettings().AddJsonSerializer());\r\n    test.HttpTrigger\u003CPersonFunction\u003E().Run(f =\u003E f.RunWebApi(test.CreateJsonHttpRequest(HttpMethod.Get, \u0022person\u0022, new { name = \u0022Damien\u0022 }), test.Logger)).AssertBadRequest().AssertErrors(\u0022Name cannot be Damien.\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ValidJson",
        "Body": "{\r\n    using var test = CreateFunctionTester\u003CStartup\u003E();\r\n    test.HttpTrigger\u003CPersonFunction\u003E().Run(f =\u003E f.Run(test.CreateJsonHttpRequest(HttpMethod.Get, \u0022person\u0022, new { name = \u0022Rachel\u0022 }), test.Logger)).AssertOK().Assert(new { FirstName = \u0022Rachel\u0022, LastName = \u0022Smith\u0022 });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ValidJsonResource",
        "Body": "{\r\n    using var test = CreateFunctionTester\u003CStartup\u003E();\r\n    test.HttpTrigger\u003CPersonFunction\u003E().Run(f =\u003E f.Run(test.CreateJsonHttpRequest(HttpMethod.Get, \u0022person\u0022, new { name = \u0022Rachel\u0022 }), test.Logger)).AssertOK().AssertFromJsonResource\u003CPerson\u003E(\u0022FunctionTest-ValidJsonResource.json\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ValueVsHttpRequestObject",
        "Body": "{\r\n    using var test = CreateFunctionTester\u003CStartup\u003E();\r\n    test.HttpTrigger\u003CPersonFunction\u003E().Run(f =\u003E f.RunWithValue(new Person { FirstName = \u0022Rachel\u0022, LastName = \u0022Smith\u0022 }, test.Logger)).AssertOK().Assert(new { first = \u0022Rachel\u0022, last = \u0022Smith\u0022 });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ValueVsHttpRequestContent",
        "Body": "{\r\n    using var test = CreateFunctionTester\u003CStartup\u003E();\r\n    test.HttpTrigger\u003CPersonFunction\u003E().Run(f =\u003E f.RunWithContent(new Person { FirstName = \u0022Rachel\u0022, LastName = \u0022Smith\u0022 }, test.Logger)).AssertOK().Assert(new { first = \u0022Rachel\u0022, last = \u0022Smith\u0022 });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ProductControllerTest",
    "Message": null,
    "ProjectName": "UnitTestEx.Xunit.Test",
    "Methods": [
      {
        "Name": "Notfound",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://somesys/\u0022)).Request(HttpMethod.Get, \u0022products/xyz\u0022).Respond.With(HttpStatusCode.NotFound);\r\n    using var test = CreateApiTester\u003CStartup\u003E();\r\n    test.ReplaceHttpClientFactory(mcf).Controller\u003CProductController\u003E().Run(c =\u003E c.Get(\u0022xyz\u0022)).AssertNotFound();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Success",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://somesys\u0022)).Request(HttpMethod.Get, \u0022products/abc\u0022).Respond.WithJson(new { id = \u0022Abc\u0022, description = \u0022A blue carrot\u0022 });\r\n    using var test = CreateApiTester\u003CStartup\u003E();\r\n    test.ReplaceHttpClientFactory(mcf).Controller\u003CProductController\u003E().Run(c =\u003E c.Get(\u0022abc\u0022)).AssertOK().Assert(new { id = \u0022Abc\u0022, description = \u0022A blue carrot\u0022 });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ServiceProvider",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://somesys\u0022)).Request(HttpMethod.Get, \u0022test\u0022).Respond.With(\u0022test output\u0022);\r\n    using var test = CreateApiTester\u003CStartup\u003E();\r\n    var hc = test.ReplaceHttpClientFactory(mcf).Services.GetService\u003CIHttpClientFactory\u003E().CreateClient(\u0022XXX\u0022);\r\n    var r = hc.GetAsync(\u0022test\u0022).Result;\r\n    Assert.NotNull(r);\r\n    Assert.Equal(\u0022test output\u0022, r.Content.ReadAsStringAsync().Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ProductFunctionTest",
    "Message": null,
    "ProjectName": "UnitTestEx.Xunit.Test",
    "Methods": [
      {
        "Name": "Notfound",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://d365test\u0022)).Request(HttpMethod.Get, \u0022products/xyz\u0022).Respond.With(HttpStatusCode.NotFound);\r\n    using var test = CreateFunctionTester\u003CStartup\u003E();\r\n    test.ReplaceHttpClientFactory(mcf).HttpTrigger\u003CProductFunction\u003E().Run(f =\u003E f.Run(test.CreateHttpRequest(HttpMethod.Get, \u0022person/xyz\u0022), \u0022xyz\u0022, test.Logger)).AssertNotFound();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Success",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://d365test\u0022)).Request(HttpMethod.Get, \u0022products/abc\u0022).Respond.WithJson(new { id = \u0022Abc\u0022, description = \u0022A blue carrot\u0022 });\r\n    using var test = CreateFunctionTester\u003CStartup\u003E();\r\n    test.ReplaceHttpClientFactory(mcf).HttpTrigger\u003CProductFunction\u003E().Run(f =\u003E f.Run(test.CreateHttpRequest(HttpMethod.Get, \u0022person/abc\u0022), \u0022abc\u0022, test.Logger)).AssertOK().Assert(new { id = \u0022Abc\u0022, description = \u0022A blue carrot\u0022 });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Success2",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://d365test\u0022)).Request(HttpMethod.Get, \u0022products/abc\u0022).Respond.WithJson(new { id = \u0022Abc\u0022, description = \u0022A blue carrot\u0022 });\r\n    using var test = CreateFunctionTester\u003CStartup\u003E();\r\n    test.ReplaceHttpClientFactory(mcf).Type\u003CProductFunction\u003E().Run(f =\u003E f.Run(test.CreateHttpRequest(HttpMethod.Get, \u0022person/abc\u0022), \u0022abc\u0022, test.Logger)).ToActionResultAssertor().AssertOK().Assert(new { id = \u0022Abc\u0022, description = \u0022A blue carrot\u0022 });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Exception",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    using var test = CreateFunctionTester\u003CStartup\u003E();\r\n    test.ReplaceHttpClientFactory(mcf).HttpTrigger\u003CProductFunction\u003E().Run(f =\u003E f.Run(test.CreateHttpRequest(HttpMethod.Get, \u0022person/exception\u0022), \u0022exception\u0022, test.Logger)).AssertException\u003CInvalidOperationException\u003E(\u0022An unexpected exception occured.\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ServiceBusFunctionTest",
    "Message": null,
    "ProjectName": "UnitTestEx.Xunit.Test",
    "Methods": [
      {
        "Name": "Object_Success",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://somesys\u0022)).Request(HttpMethod.Post, \u0022person\u0022).WithJsonBody(new { firstName = \u0022Bob\u0022, lastName = \u0022Smith\u0022 }).Respond.With(HttpStatusCode.OK);\r\n    using var test = CreateFunctionTester\u003CStartup\u003E();\r\n    test.ReplaceHttpClientFactory(mcf).ServiceBusTrigger\u003CServiceBusFunction\u003E().Run(f =\u003E f.Run(new Person { FirstName = \u0022Bob\u0022, LastName = \u0022Smith\u0022 }, test.Logger)).AssertSuccess();\r\n    mcf.VerifyAll();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Object_HttpClientError",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://somesys\u0022)).Request(HttpMethod.Post, \u0022person\u0022).WithJsonBody(new { firstName = \u0022Bob\u0022, lastName = (string)null }).Respond.With(HttpStatusCode.InternalServerError);\r\n    using var test = CreateFunctionTester\u003CStartup\u003E();\r\n    var r = test.ReplaceHttpClientFactory(mcf).Type\u003CServiceBusFunction\u003E().Run(f =\u003E f.Run(new Person { FirstName = \u0022Bob\u0022, LastName = (string)null }, test.Logger)).AssertException\u003CHttpRequestException\u003E(\u0022Response status code does not indicate success: 500 (Internal Server Error).\u0022);\r\n    mcf.VerifyAll();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Object_ThrowsException",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    using var test = CreateFunctionTester\u003CStartup\u003E();\r\n    test.ReplaceHttpClientFactory(mcf).ServiceBusTrigger\u003CServiceBusFunction\u003E().Run(f =\u003E f.Run(new Person { FirstName = null, LastName = \u0022Smith\u0022 }, test.Logger)).AssertException\u003CInvalidOperationException\u003E(\u0022First name is required.\u0022);\r\n    mcf.VerifyAll();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ServiceBusMessage_Success",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://somesys\u0022)).Request(HttpMethod.Post, \u0022person\u0022).WithJsonBody(new { firstName = \u0022Bob\u0022, lastName = \u0022Smith\u0022 }).Respond.With(HttpStatusCode.OK);\r\n    using var test = CreateFunctionTester\u003CStartup\u003E();\r\n    test.ReplaceHttpClientFactory(mcf).ServiceBusTrigger\u003CServiceBusFunction\u003E().Run(f =\u003E f.Run2(test.CreateServiceBusMessage(new Person { FirstName = \u0022Bob\u0022, LastName = \u0022Smith\u0022 }), test.Logger)).AssertSuccess();\r\n    mcf.VerifyAll();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ServiceBusMessage_HttpClientError",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://somesys\u0022)).Request(HttpMethod.Post, \u0022person\u0022).WithJsonBody(new { firstName = \u0022Bob\u0022, lastName = (string)null }).Respond.With(HttpStatusCode.InternalServerError);\r\n    using var test = CreateFunctionTester\u003CStartup\u003E();\r\n    test.ReplaceHttpClientFactory(mcf).ServiceBusTrigger\u003CServiceBusFunction\u003E().Run(f =\u003E f.Run2(test.CreateServiceBusMessage(new Person { FirstName = \u0022Bob\u0022, LastName = (string)null }), test.Logger)).AssertException\u003CHttpRequestException\u003E(\u0022Response status code does not indicate success: 500 (Internal Server Error).\u0022);\r\n    mcf.VerifyAll();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ServiceBusMessage_ThrowsException",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    using var test = CreateFunctionTester\u003CStartup\u003E();\r\n    test.ReplaceHttpClientFactory(mcf).ServiceBusTrigger\u003CServiceBusFunction\u003E().Run(f =\u003E f.Run2(test.CreateServiceBusMessage(new Person { FirstName = null, LastName = \u0022Smith\u0022 }), test.Logger)).AssertException\u003CInvalidOperationException\u003E(\u0022First name is required.\u0022);\r\n    mcf.VerifyAll();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ServiceProvider",
        "Body": "{\r\n    var mcf = CreateMockHttpClientFactory();\r\n    mcf.CreateClient(\u0022XXX\u0022, new Uri(\u0022https://somesys\u0022)).Request(HttpMethod.Get, \u0022test\u0022).Respond.With(\u0022test output\u0022);\r\n    using var test = CreateFunctionTester\u003CStartup\u003E();\r\n    var hc = test.ReplaceHttpClientFactory(mcf).Services.GetService\u003CIHttpClientFactory\u003E().CreateClient(\u0022XXX\u0022);\r\n    var r = hc.GetAsync(\u0022test\u0022).Result;\r\n    Assert.NotNull(r);\r\n    Assert.Equal(\u0022test output\u0022, r.Content.ReadAsStringAsync().Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  }
]