[
  {
    "Name": "ProductServiceTests",
    "Message": null,
    "ProjectName": "CommonFixtures.Tests",
    "Methods": [
      {
        "Name": "Should_Created_Product",
        "Body": "{\r\n    // Given\r\n    var givenTitle = Random\u003Cstring\u003E();\r\n    var givenPrice = Random\u003Cdecimal\u003E();\r\n    var expectedId = Random\u003Cint\u003E();\r\n    StubAsync(() =\u003E _mockRepository.CreateProduct(ArgMatches\u003CProduct\u003E(x =\u003E x.Title == givenTitle \u0026\u0026 x.Price == givenPrice), ArgIgnore\u003CCancellationToken\u003E()), expectedId);\r\n    // When\r\n    var id = await _sut.CreateProduct(givenTitle, givenPrice);\r\n    // Then\r\n    Assert.Equal(expectedId, id);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Call_Repo",
        "Body": "{\r\n    // Given\r\n    var givenTitle = Random\u003Cstring\u003E();\r\n    var givenPrice = Random\u003Cdecimal\u003E();\r\n    // When\r\n    await _sut.CreateProduct(givenTitle, givenPrice);\r\n    // Then\r\n    Verify(() =\u003E _mockRepository.CreateProduct(ArgMatches\u003CProduct\u003E(x =\u003E x.Title == givenTitle \u0026\u0026 x.Price == givenPrice), ArgIgnore\u003CCancellationToken\u003E()), numberOfTimes: 1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ProductRepositoryTest",
    "Message": null,
    "ProjectName": "CommonFixtures.Tests",
    "Methods": [
      {
        "Name": "Should_Persist_New_Created_Product",
        "Body": "{\r\n    // Arrange\r\n    Arrange(dbContext =\u003E\r\n    {\r\n    // Arrange is a helper that pull the database to desired state before acting (optional)\r\n    });\r\n    var productRepo = new ProductRepository(DbContext);\r\n    // Act\r\n    var id = await productRepo.CreateProduct(Random\u003CProduct\u003E(), CancellationToken.None);\r\n    // Assert\r\n    NewServiceScope(); // dispose all of services and recreate new one to simulate new scope like new http request\r\n    Assert.IsType\u003Cint\u003E(id);\r\n    Assert.NotEqual(default, id);\r\n    var createdProduct = Get\u003CProduct\u003E(id);\r\n    Assert.NotNull(createdProduct);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "QueuedJobHostedServiceTests",
    "Message": null,
    "ProjectName": "CommonFixtures.Tests",
    "Methods": [
      {
        "Name": "It_should_execute_queued_task",
        "Body": "{\r\n    // Arrange\r\n    var queueManager = GetService\u003CQueueManager\u003E();\r\n    var counter = 0;\r\n    queueManager.EnqueueJob(() =\u003E\r\n    {\r\n        Interlocked.Increment(ref counter);\r\n    });\r\n    // Assert\r\n    await Task.Delay(400);\r\n    Assert.Equal(1, counter);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ProductServiceTests",
    "Message": null,
    "ProjectName": "CommonFixtures.Tests",
    "Methods": [
      {
        "Name": "Should_Created_Product",
        "Body": "{\r\n    // Given\r\n    var givenTitle = Random\u003Cstring\u003E();\r\n    var givenPrice = Random\u003Cdecimal\u003E();\r\n    var mockRepository = GetService\u003CIProductRepository\u003E();\r\n    var sut = GetService\u003CProductService\u003E();\r\n    // When\r\n    await sut.CreateProduct(givenTitle, givenPrice);\r\n    // Then\r\n    Verify(() =\u003E mockRepository.CreateProduct(ArgMatches\u003CProduct\u003E(x =\u003E x.Title == givenTitle \u0026\u0026 x.Price == givenPrice), ArgIgnore\u003CCancellationToken\u003E()), numberOfTimes: 1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CreateProductCommandHandlerTest",
    "Message": null,
    "ProjectName": "CommonFixtures.Tests",
    "Methods": [
      {
        "Name": "Should_Created_New_Product",
        "Body": "{\r\n    // Arrange\r\n    Arrange(dbContext =\u003E\r\n    {\r\n    // you can use pull the database to desired state before acting\r\n    // dbContext.Categories.Add(Random\u003CCategory\u003E());\r\n    });\r\n    var mediator = GetService\u003CIMediator\u003E();\r\n    // Act\r\n    var id = await mediator.Send(Random\u003CCreateProductCommand\u003E());\r\n    // Assert\r\n    NewServiceScope(); // dispose all of services and recreate new one to simulate new scope like new http request\r\n    Assert.IsType\u003Cint\u003E(id);\r\n    Assert.NotNull(Get\u003CProduct\u003E(id));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MvcIntegrationTest",
    "Message": null,
    "ProjectName": "CommonFixtures.Tests",
    "Methods": [
      {
        "Name": "Get_EndpointsReturnSuccessAndCorrectContentType",
        "Body": "{\r\n    // Arrange\r\n    var client = HttpClient;\r\n    // Act\r\n    var response = await client.GetAsync(\u0022/weatherforecast\u0022);\r\n    // Assert\r\n    response.EnsureSuccessStatusCode();\r\n    Assert.Equal(\u0022application/json; charset=utf-8\u0022, response.Content.Headers.ContentType.ToString());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MvcViewIntegrationTest",
    "Message": null,
    "ProjectName": "CommonFixtures.Tests",
    "Methods": [
      {
        "Name": "Counter_Test",
        "Body": "{\r\n    // Arrange\r\n    var waitForElement = new WebDriverWait(Selenium, TimeSpan.FromSeconds(10));\r\n    waitForElement.Until(WaitUntilElementIsEnabled(By.Id(\u0022counter\u0022)));\r\n    var button = Selenium.FindElement(By.Id(\u0022btn\u0022));\r\n    var counterSpan = Selenium.FindElement(By.Id(\u0022counter\u0022));\r\n    // Act\r\n    Assert.Equal(0, int.Parse(counterSpan.Text));\r\n    button.Click();\r\n    // Assert\r\n    counterSpan = Selenium.FindElement(By.Id(\u0022counter\u0022));\r\n    Assert.Equal(1, int.Parse(counterSpan.Text));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  }
]