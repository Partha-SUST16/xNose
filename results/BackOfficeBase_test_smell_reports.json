[
  {
    "Name": "PermissionAppServiceTests",
    "Message": null,
    "ProjectName": "BackOfficeBase.Tests.Application",
    "Methods": [
      {
        "Name": "Should_Permission_Granted_To_User",
        "Body": "{\r\n    var isPermissionGranted = await _permissionAppService.IsUserGrantedToPermissionAsync(_testUser.UserName, TestPermissionClaimForUser);\r\n    Assert.True(isPermissionGranted);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Permission_Granted_To_User_Role",
        "Body": "{\r\n    var isPermissionGranted = await _permissionAppService.IsUserGrantedToPermissionAsync(_testUser.UserName, TestPermissionClaimForRole);\r\n    Assert.True(isPermissionGranted);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Not_Permission_Granted_To_User",
        "Body": "{\r\n    var isPermissionNotGranted = await _permissionAppService.IsUserGrantedToPermissionAsync(_testUser.UserName, \u0022NotGrantedPermissionClaim\u0022);\r\n    Assert.False(isPermissionNotGranted);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RoleAppServiceTests",
    "Message": null,
    "ProjectName": "BackOfficeBase.Tests.Application",
    "Methods": [
      {
        "Name": "Should_Get_Async",
        "Body": "{\r\n    var testRole = GetTestRole(\u0022test_role_for_role_app_service_get\u0022);\r\n    await _dbContext.Roles.AddAsync(testRole);\r\n    await _dbContext.RoleClaims.AddAsync(new RoleClaim { RoleId = testRole.Id, ClaimType = CustomClaimTypes.Permission, ClaimValue = AppPermissions.Roles.Read });\r\n    await _dbContext.SaveChangesAsync();\r\n    var roleOutput = await _roleAppService.GetAsync(testRole.Id);\r\n    Assert.NotNull(roleOutput);\r\n    Assert.True(roleOutput.SelectedPermissions != null \u0026\u0026 roleOutput.SelectedPermissions.Any());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Create_Async",
        "Body": "{\r\n    var testRole = GetTestRole(\u0022test_role_for_role_app_service_create\u0022);\r\n    await _dbContext.Roles.AddAsync(testRole);\r\n    await _dbContext.SaveChangesAsync();\r\n    var createRoleInput = new CreateRoleInput\r\n    {\r\n        Name = \u0022test_role_for_role_app_service_create\u0022,\r\n        SelectedPermissions = new[]\r\n        {\r\n            AppPermissions.Roles.Read\r\n        }\r\n    };\r\n    var roleOutput = await _roleAppService.CreateAsync(createRoleInput);\r\n    await _dbContext.SaveChangesAsync();\r\n    var insertedRole = await GetDefaultTestDbContext().Roles.FindAsync(roleOutput.Id);\r\n    Assert.NotNull(roleOutput);\r\n    Assert.True(roleOutput.SelectedPermissions != null \u0026\u0026 roleOutput.SelectedPermissions.Any(x =\u003E x == AppPermissions.Roles.Read));\r\n    Assert.NotNull(insertedRole);\r\n    Assert.True(insertedRole.RoleClaims != null \u0026\u0026 insertedRole.RoleClaims.Any(x =\u003E x.ClaimValue == AppPermissions.Roles.Read));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Update",
        "Body": "{\r\n    var testRole = GetTestRole(\u0022test_role_for_role_app_service_update\u0022);\r\n    await _dbContext.RoleClaims.AddAsync(new RoleClaim { Role = testRole, ClaimType = CustomClaimTypes.Permission, ClaimValue = AppPermissions.Roles.Read });\r\n    await _dbContext.Roles.AddAsync(testRole);\r\n    await _dbContext.SaveChangesAsync();\r\n    var updateRoleInput = new UpdateRoleInput\r\n    {\r\n        Name = \u0022test_role_for_role_app_service_update_updated\u0022,\r\n        SelectedPermissions = new[]\r\n        {\r\n            AppPermissions.Roles.Create\r\n        }\r\n    };\r\n    var roleOutput = _roleAppService.Update(updateRoleInput);\r\n    _dbContext.SaveChanges();\r\n    var updatedRole = await GetDefaultTestDbContext().Roles.FindAsync(roleOutput.Id);\r\n    Assert.NotNull(roleOutput);\r\n    Assert.True(roleOutput.SelectedPermissions != null \u0026\u0026 roleOutput.SelectedPermissions.Any(x =\u003E x == AppPermissions.Roles.Create));\r\n    Assert.NotNull(updatedRole);\r\n    Assert.True(updatedRole.RoleClaims != null \u0026\u0026 updatedRole.RoleClaims.Any(x =\u003E x.ClaimValue == AppPermissions.Roles.Create));\r\n    Assert.Null(updatedRole.RoleClaims.FirstOrDefault(x =\u003E x.ClaimValue == AppPermissions.Roles.Read));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Delete_Async",
        "Body": "{\r\n    var testRole = GetTestRole(\u0022test_role_for_role_app_service_delete\u0022);\r\n    await _dbContext.Roles.AddAsync(testRole);\r\n    await _dbContext.SaveChangesAsync();\r\n    var roleOutput = await _roleAppService.DeleteAsync(testRole.Id);\r\n    await _dbContext.SaveChangesAsync();\r\n    var deletedRole = await GetDefaultTestDbContext().Roles.FindAsync(roleOutput.Id);\r\n    Assert.NotNull(roleOutput);\r\n    Assert.Null(deletedRole);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UserAppServiceTests",
    "Message": null,
    "ProjectName": "BackOfficeBase.Tests.Application",
    "Methods": [
      {
        "Name": "Should_Get_Async",
        "Body": "{\r\n    var testUser = GetTestUser(\u0022test_user_for_user_app_service_get\u0022, \u0022test_user_for_user_app_service_get@mail.com\u0022);\r\n    var testRole = GetTestRole(\u0022test_role_for_user_app_service_get\u0022);\r\n    AddUserToRole(testUser, testRole);\r\n    await _dbContext.Users.AddAsync(testUser);\r\n    await _dbContext.Roles.AddAsync(testRole);\r\n    await _dbContext.UserClaims.AddAsync(new UserClaim { UserId = testUser.Id, ClaimType = CustomClaimTypes.Permission, ClaimValue = AppPermissions.Users.Read });\r\n    await _dbContext.SaveChangesAsync();\r\n    var userOutput = await _userAppService.GetAsync(testUser.Id);\r\n    Assert.NotNull(userOutput);\r\n    Assert.True(userOutput.AllRoles != null \u0026\u0026 userOutput.AllRoles.Any());\r\n    Assert.True(userOutput.SelectedPermissions != null \u0026\u0026 userOutput.SelectedPermissions.Any());\r\n    Assert.True(userOutput.SelectedRoleIds != null \u0026\u0026 userOutput.SelectedRoleIds.Any());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Create_Async",
        "Body": "{\r\n    var testRole = GetTestRole(\u0022test_role_for_user_app_service_create\u0022);\r\n    await _dbContext.Roles.AddAsync(testRole);\r\n    await _dbContext.SaveChangesAsync();\r\n    var createUserInput = new CreateUserInput\r\n    {\r\n        UserName = \u0022test_user_for_user_app_service_create\u0022,\r\n        Email = \u0022test_user_for_user_app_service_create@mail.com\u0022,\r\n        SelectedRoleIds = new List\u003CGuid\u003E\r\n        {\r\n            testRole.Id\r\n        },\r\n        SelectedPermissions = new List\u003Cstring\u003E\r\n        {\r\n            AppPermissions.Users.Read\r\n        }\r\n    };\r\n    var userOutput = await _userAppService.CreateAsync(createUserInput);\r\n    await _dbContext.SaveChangesAsync();\r\n    var insertedUser = await GetDefaultTestDbContext().Users.FindAsync(userOutput.Id);\r\n    Assert.NotNull(userOutput);\r\n    Assert.True(userOutput.SelectedRoleIds != null \u0026\u0026 userOutput.SelectedRoleIds.Any(x =\u003E x == testRole.Id));\r\n    Assert.True(userOutput.SelectedPermissions != null \u0026\u0026 userOutput.SelectedPermissions.Any(x =\u003E x == AppPermissions.Users.Read));\r\n    Assert.NotNull(insertedUser);\r\n    Assert.True(insertedUser.UserRoles != null \u0026\u0026 insertedUser.UserRoles.Any(x =\u003E x.RoleId == testRole.Id));\r\n    Assert.True(insertedUser.UserClaims != null \u0026\u0026 insertedUser.UserClaims.Any(x =\u003E x.ClaimValue == AppPermissions.Users.Read));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Update",
        "Body": "{\r\n    var testUser = GetTestUser(\u0022test_user_for_user_app_service_update\u0022, \u0022test_user_for_user_app_service_update@mail.com\u0022);\r\n    var grantedRole = GetTestRole(\u0022test_role_for_user_app_service_update1\u0022);\r\n    var roleToGrant = GetTestRole(\u0022test_role_for_user_app_service_update2\u0022);\r\n    await _dbContext.UserRoles.AddAsync(new UserRole { Role = grantedRole, User = testUser });\r\n    await _dbContext.UserClaims.AddAsync(new UserClaim { User = testUser, ClaimType = CustomClaimTypes.Permission, ClaimValue = AppPermissions.Users.Read });\r\n    await _dbContext.Users.AddAsync(testUser);\r\n    await _dbContext.Roles.AddAsync(grantedRole);\r\n    await _dbContext.Roles.AddAsync(roleToGrant);\r\n    await _dbContext.SaveChangesAsync();\r\n    var updateUserInput = new UpdateUserInput\r\n    {\r\n        UserName = \u0022test_user_for_user_app_service_update_updated\u0022,\r\n        Email = \u0022test_user_for_user_app_service_update_updated@mail.com\u0022,\r\n        SelectedRoleIds = new List\u003CGuid\u003E\r\n        {\r\n            roleToGrant.Id\r\n        },\r\n        SelectedPermissions = new List\u003Cstring\u003E\r\n        {\r\n            AppPermissions.Users.Create\r\n        }\r\n    };\r\n    var userOutput = _userAppService.Update(updateUserInput);\r\n    _dbContext.SaveChanges();\r\n    var updatedUser = await GetDefaultTestDbContext().Users.FindAsync(userOutput.Id);\r\n    Assert.NotNull(userOutput);\r\n    Assert.True(userOutput.SelectedRoleIds != null \u0026\u0026 userOutput.SelectedRoleIds.Any(x =\u003E x == roleToGrant.Id));\r\n    Assert.True(userOutput.SelectedPermissions != null \u0026\u0026 userOutput.SelectedPermissions.Any(x =\u003E x == AppPermissions.Users.Create));\r\n    Assert.NotNull(updatedUser);\r\n    Assert.True(updatedUser.UserRoles != null \u0026\u0026 updatedUser.UserRoles.Any(x =\u003E x.RoleId == roleToGrant.Id));\r\n    Assert.Null(updatedUser.UserRoles.FirstOrDefault(x =\u003E x.RoleId == grantedRole.Id));\r\n    Assert.True(updatedUser.UserClaims != null \u0026\u0026 updatedUser.UserClaims.Any(x =\u003E x.ClaimValue == AppPermissions.Users.Create));\r\n    Assert.Null(updatedUser.UserClaims.FirstOrDefault(x =\u003E x.ClaimValue == AppPermissions.Users.Read));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Delete_Async",
        "Body": "{\r\n    var testUser = GetTestUser(\u0022test_user_for_user_app_service_delete\u0022, \u0022test_user_for_user_app_service_delete@mail.com\u0022);\r\n    await _dbContext.Users.AddAsync(testUser);\r\n    await _dbContext.SaveChangesAsync();\r\n    var userOutput = await _userAppService.DeleteAsync(testUser.Id);\r\n    await _dbContext.SaveChangesAsync();\r\n    var deletedUser = await GetDefaultTestDbContext().Users.FindAsync(userOutput.Id);\r\n    Assert.NotNull(userOutput);\r\n    Assert.Null(deletedUser);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CrudAppServiceTests",
    "Message": null,
    "ProjectName": "BackOfficeBase.Tests.Application",
    "Methods": [
      {
        "Name": "Should_Get_Async",
        "Body": "{\r\n    var result = DefaultTestDbContext.Products.Add(new Product { Name = \u0022Product Name\u0022, Code = \u0022product_code\u0022 });\r\n    DefaultTestDbContext.SaveChanges();\r\n    var productDto = await _productCrudAppService.GetAsync(result.Entity.Id);\r\n    Assert.NotNull(productDto);\r\n    Assert.Equal(\u0022product_code\u0022, productDto.Code);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Get_List_Async",
        "Body": "{\r\n    DefaultTestDbContext.Products.Add(new Product { Name = \u0022E Product Name\u0022, Code = \u0022e_product_code_for_get_list_with_filter_and_sort_async\u0022 });\r\n    DefaultTestDbContext.Products.Add(new Product { Name = \u0022A Product Name\u0022, Code = \u0022a_product_code_for_get_list_with_filter_and_sort_async\u0022 });\r\n    DefaultTestDbContext.Products.Add(new Product { Name = \u0022B Product Name 1\u0022, Code = \u0022b_product_code_1_for_get_list_with_filter_and_sort_async\u0022 });\r\n    DefaultTestDbContext.Products.Add(new Product { Name = \u0022B Product Name 1\u0022, Code = \u0022b_product_code_2_for_get_list_with_filter_and_sort_async\u0022 });\r\n    DefaultTestDbContext.SaveChanges();\r\n    var pagedListInput = new PagedListInput\r\n    {\r\n        Filters = new List\u003Cstring\u003E\r\n        {\r\n            \u0022Name.Contains(\\\u0022Product\\\u0022)\u0022,\r\n            \u0022CreationTime \u003E DateTime.Now.AddMinutes(-1)\u0022,\r\n            \u0022Code.Contains(\\\u0022for_get_list_with_filter_and_sort_async\\\u0022)\u0022\r\n        },\r\n        Sorts = new List\u003Cstring\u003E\r\n        {\r\n            \u0022Name\u0022,\r\n            \u0022Code desc\u0022\r\n        }\r\n    };\r\n    var pagedProductList = await _productCrudAppService.GetListAsync(pagedListInput);\r\n    Assert.NotNull(pagedProductList);\r\n    Assert.Equal(4, pagedProductList.TotalCount);\r\n    Assert.Equal(\u0022b_product_code_2_for_get_list_with_filter_and_sort_async\u0022, pagedProductList.Items.ToArray()[1].Code);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Get_List_With_No_Filter_And_Sort_Async",
        "Body": "{\r\n    var dbContext = GetNewTestDbContext(Guid.NewGuid().ToString());\r\n    dbContext.Products.Add(new Product { Name = \u0022E Product Name\u0022, Code = \u0022e_product_code_for_get_list_with_no_filter_and_sort_async\u0022 });\r\n    dbContext.Products.Add(new Product { Name = \u0022A Product Name\u0022, Code = \u0022a_product_code_for_get_list_with_no_filter_and_sort_async\u0022 });\r\n    dbContext.Products.Add(new Product { Name = \u0022B Product Name 1\u0022, Code = \u0022b_product_code_1_for_get_list_with_no_filter_and_sort_async\u0022 });\r\n    dbContext.Products.Add(new Product { Name = \u0022B Product Name 1\u0022, Code = \u0022b_product_code_2_for_get_list_with_no_filter_and_sort_async\u0022 });\r\n    dbContext.SaveChanges();\r\n    var pagedListInput = new PagedListInput();\r\n    var productCrudAppService = new ProductCrudAppService(dbContext, _mapper);\r\n    var pagedProductList = await productCrudAppService.GetListAsync(pagedListInput);\r\n    Assert.NotNull(pagedProductList);\r\n    Assert.Equal(4, pagedProductList.TotalCount);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Create_Async",
        "Body": "{\r\n    var userOutput = await _productCrudAppService.CreateAsync(new CreateProductInput { Code = \u0022create_async_product_code\u0022, Name = \u0022Create Async Product Name\u0022 });\r\n    await DefaultTestDbContext.SaveChangesAsync();\r\n    var anotherScopeDbContext = GetDefaultTestDbContext();\r\n    var insertedProductDto = await anotherScopeDbContext.Products.FindAsync(userOutput.Id);\r\n    Assert.NotNull(userOutput);\r\n    Assert.NotNull(insertedProductDto);\r\n    Assert.Equal(userOutput.Code, insertedProductDto.Code);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Update_Async",
        "Body": "{\r\n    var dbContextForAddEntity = GetDefaultTestDbContext();\r\n    var productDto = await dbContextForAddEntity.Products.AddAsync(new Product { Code = \u0022update_product_code\u0022, Name = \u0022Update Product Name\u0022 });\r\n    await dbContextForAddEntity.SaveChangesAsync();\r\n    var userOutput = _productCrudAppService.Update(new UpdateProductInput { Id = productDto.Entity.Id, Code = \u0022update_product_code_updated\u0022, Name = \u0022Update Product Name Updated\u0022 });\r\n    await DefaultTestDbContext.SaveChangesAsync();\r\n    var dbContextForGetEntity = GetDefaultTestDbContext();\r\n    var updatedProductDto = await dbContextForGetEntity.Products.FindAsync(productDto.Entity.Id);\r\n    Assert.NotNull(userOutput);\r\n    Assert.NotNull(productDto);\r\n    Assert.NotNull(updatedProductDto);\r\n    Assert.Equal(\u0022update_product_code_updated\u0022, updatedProductDto.Code);\r\n    Assert.Equal(\u0022Update Product Name Updated\u0022, updatedProductDto.Name);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Delete_Async",
        "Body": "{\r\n    var dbContextForAddEntity = GetDefaultTestDbContext();\r\n    var productDto = await dbContextForAddEntity.Products.AddAsync(new Product { Code = \u0022delete_product_code\u0022, Name = \u0022Delete Product Name\u0022 });\r\n    await dbContextForAddEntity.SaveChangesAsync();\r\n    var userOutput = await _productCrudAppService.DeleteAsync(productDto.Entity.Id);\r\n    await DefaultTestDbContext.SaveChangesAsync();\r\n    var dbContextForGetEntity = GetDefaultTestDbContext();\r\n    var deletedProductDto = await dbContextForGetEntity.Products.FindAsync(productDto.Entity.Id);\r\n    Assert.NotNull(userOutput);\r\n    Assert.Null(deletedProductDto);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "OrganizationUnitAppServiceTests",
    "Message": null,
    "ProjectName": "BackOfficeBase.Tests.Application",
    "Methods": [
      {
        "Name": "Should_Add_Users_To_OrganizationUnit_Async",
        "Body": "{\r\n    var testOrganizationUnit = new OrganizationUnit\r\n    {\r\n        Name = \u0022test organization unit to add users\u0022\r\n    };\r\n    var testUser1 = GetTestUser(\u0022test_user_for_add_or_remove_ou1\u0022);\r\n    var testUser2 = GetTestUser(\u0022test_user_for_add_or_remove_ou2\u0022);\r\n    await _dbContext.OrganizationUnits.AddAsync(testOrganizationUnit);\r\n    await _dbContext.Users.AddAsync(testUser1);\r\n    await _dbContext.Users.AddAsync(testUser2);\r\n    await _dbContext.SaveChangesAsync();\r\n    await _organizationUnitAppService.AddUsersToOrganizationUnitAsync(new AddOrRemoveUsersToOrganizationUnitInput { OrganizationUnitId = testOrganizationUnit.Id, SelectedUserIds = new List\u003CGuid\u003E { testUser1.Id, testUser2.Id } });\r\n    await _dbContext.SaveChangesAsync();\r\n    var organizationUnitUsers = _dbContext.OrganizationUnitUsers.Where(x =\u003E x.OrganizationUnitId == testOrganizationUnit.Id);\r\n    Assert.NotNull(organizationUnitUsers);\r\n    Assert.Equal(2, organizationUnitUsers.Count());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Remove_Users_To_OrganizationUnit_Async",
        "Body": "{\r\n    var testOrganizationUnit = new OrganizationUnit\r\n    {\r\n        Name = \u0022test organization unit to remove users\u0022\r\n    };\r\n    var testUser1 = GetTestUser(\u0022test_user_for_add_or_remove_ou1\u0022);\r\n    var testUser2 = GetTestUser(\u0022test_user_for_add_or_remove_ou2\u0022);\r\n    await _dbContext.OrganizationUnits.AddAsync(testOrganizationUnit);\r\n    await _dbContext.Users.AddAsync(testUser1);\r\n    await _dbContext.Users.AddAsync(testUser2);\r\n    await _dbContext.SaveChangesAsync();\r\n    await AddUsersToOrganizationUnit(testOrganizationUnit, testUser1, testUser2);\r\n    _organizationUnitAppService.RemoveUsersFromOrganizationUnit(new AddOrRemoveUsersToOrganizationUnitInput { OrganizationUnitId = testOrganizationUnit.Id, SelectedUserIds = new List\u003CGuid\u003E { testUser2.Id } });\r\n    await _dbContext.SaveChangesAsync();\r\n    var organizationUnitUsers = _dbContext.OrganizationUnitUsers.Where(x =\u003E x.OrganizationUnitId == testOrganizationUnit.Id);\r\n    Assert.NotNull(organizationUnitUsers);\r\n    Assert.Equal(1, organizationUnitUsers.Count());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Add_Roles_To_OrganizationUnit_Async",
        "Body": "{\r\n    var testOrganizationUnit = new OrganizationUnit\r\n    {\r\n        Name = \u0022test organization unit to add role\u0022\r\n    };\r\n    var testRole1 = GetTestUser(\u0022test_role_for_add_or_remove_ou1\u0022);\r\n    var testRole2 = GetTestUser(\u0022test_role_for_add_or_remove_ou2\u0022);\r\n    await _dbContext.OrganizationUnits.AddAsync(testOrganizationUnit);\r\n    await _dbContext.Users.AddAsync(testRole1);\r\n    await _dbContext.Users.AddAsync(testRole2);\r\n    await _dbContext.SaveChangesAsync();\r\n    await _organizationUnitAppService.AddRolesToOrganizationUnitAsync(new AddOrRemoveRolesToOrganizationUnitInput { OrganizationUnitId = testOrganizationUnit.Id, SelectedRoleIds = new List\u003CGuid\u003E { testRole1.Id, testRole1.Id } });\r\n    await _dbContext.SaveChangesAsync();\r\n    var organizationUnitRoles = _dbContext.OrganizationUnitRoles.Where(x =\u003E x.OrganizationUnitId == testOrganizationUnit.Id);\r\n    Assert.NotNull(organizationUnitRoles);\r\n    Assert.Equal(2, organizationUnitRoles.Count());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Remove_Roles_To_OrganizationUnit_Async",
        "Body": "{\r\n    var testOrganizationUnit = new OrganizationUnit\r\n    {\r\n        Name = \u0022test organization unit to remove role\u0022\r\n    };\r\n    var testRole1 = GetTestUser(\u0022test_role_for_add_or_remove_ou1\u0022);\r\n    var testRole2 = GetTestUser(\u0022test_role_for_add_or_remove_ou2\u0022);\r\n    await _dbContext.OrganizationUnits.AddAsync(testOrganizationUnit);\r\n    await _dbContext.Users.AddAsync(testRole1);\r\n    await _dbContext.Users.AddAsync(testRole2);\r\n    await _dbContext.SaveChangesAsync();\r\n    await AddRolesToOrganizationUnit(testOrganizationUnit, testRole1, testRole2);\r\n    var organizationUnitRoles = _dbContext.OrganizationUnitRoles.Where(x =\u003E x.OrganizationUnitId == testOrganizationUnit.Id);\r\n    Assert.NotNull(organizationUnitRoles);\r\n    Assert.Equal(1, organizationUnitRoles.Count());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "GlobalQueryFiltersTests",
    "Message": null,
    "ProjectName": "BackOfficeBase.Tests.DataAccess",
    "Methods": [
      {
        "Name": "Should_Add_Creation_Auditing_Properties",
        "Body": "{\r\n    var result = await DefaultTestDbContext.Products.AddAsync(new Product { Name = \u0022Product Name\u0022, Code = \u0022product_code\u0022 });\r\n    await DefaultTestDbContext.SaveChangesAsync();\r\n    Assert.NotNull(result.Entity.CreatorUserId);\r\n    Assert.NotEqual(Guid.Empty, result.Entity.CreatorUserId);\r\n    Assert.Equal(DateTime.Today.ToShortDateString(), result.Entity.CreationTime.ToShortDateString());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Add_Modification_Auditing_Properties",
        "Body": "{\r\n    var result = await DefaultTestDbContext.Products.AddAsync(new Product { Name = \u0022Product Name\u0022, Code = \u0022product_code\u0022 });\r\n    await DefaultTestDbContext.SaveChangesAsync();\r\n    DefaultTestDbContext.Products.Update(result.Entity);\r\n    await DefaultTestDbContext.SaveChangesAsync();\r\n    var dbContextToGetUpdatedEntity = GetDefaultTestDbContext();\r\n    var updatedEntity = await dbContextToGetUpdatedEntity.Products.FindAsync(result.Entity.Id);\r\n    Assert.NotNull(updatedEntity.ModifierUserId);\r\n    Assert.NotEqual(Guid.Empty, updatedEntity.ModifierUserId);\r\n    Assert.NotNull(updatedEntity.ModificationTime);\r\n    Assert.Equal(DateTime.Today.ToShortDateString(), updatedEntity.ModificationTime.Value.ToShortDateString());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Add_Deletion_Auditing_Properties",
        "Body": "{\r\n    var result = await DefaultTestDbContext.Products.AddAsync(new Product { Name = \u0022Product Name\u0022, Code = \u0022product_code\u0022 });\r\n    await DefaultTestDbContext.SaveChangesAsync();\r\n    var deletedEntity = DefaultTestDbContext.Products.Remove(result.Entity);\r\n    await DefaultTestDbContext.SaveChangesAsync();\r\n    Assert.NotNull(deletedEntity.Entity.DeleterUserId);\r\n    Assert.NotEqual(Guid.Empty, deletedEntity.Entity.DeleterUserId);\r\n    Assert.NotNull(deletedEntity.Entity.DeletionTime);\r\n    Assert.Equal(DateTime.Today.ToShortDateString(), deletedEntity.Entity.DeletionTime.Value.ToShortDateString());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Add_Soft_Delete_Query_Filter",
        "Body": "{\r\n    await DefaultTestDbContext.Products.AddAsync(new Product { Name = \u0022Product Name 1\u0022, Code = \u0022soft_deleted_product_code_1\u0022 });\r\n    await DefaultTestDbContext.Products.AddAsync(new Product { Name = \u0022Product Name 2\u0022, Code = \u0022soft_deleted_product_code_2\u0022, IsDeleted = true });\r\n    await DefaultTestDbContext.SaveChangesAsync();\r\n    var productList = DefaultTestDbContext.Products.Where(x =\u003E x.Code.Contains(\u0022soft_deleted_product_code\u0022));\r\n    Assert.NotNull(productList);\r\n    Assert.Equal(1, productList.Count());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UnitOfWorkFilterTest",
    "Message": null,
    "ProjectName": "BackOfficeBase.Tests.Web.Core",
    "Methods": [
      {
        "Name": "Should_UnitOfWork_Action_Filter_Save_Changes",
        "Body": "{\r\n    var product = new Product\r\n    {\r\n        Name = \u0022A Product Name\u0022,\r\n        Code = \u0022a_product_name\u0022\r\n    };\r\n    var addedProduct = await DefaultTestDbContext.Products.AddAsync(product);\r\n    var dbContextFromAnotherScope = GetDefaultTestDbContext();\r\n    var insertedTestRole = await dbContextFromAnotherScope.Products.FindAsync(addedProduct.Entity.Id);\r\n    Assert.Null(insertedTestRole);\r\n    var actionContext = new ActionContext(new DefaultHttpContext { Request = { Method = \u0022Post\u0022 } }, new RouteData(), new ActionDescriptor());\r\n    var actionExecutedContext = new ActionExecutedContext(actionContext, new List\u003CIFilterMetadata\u003E(), null);\r\n    var unitOfWorkActionFilter = new UnitOfWorkActionFilter(DefaultTestDbContext);\r\n    unitOfWorkActionFilter.OnActionExecuted(actionExecutedContext);\r\n    insertedTestRole = await dbContextFromAnotherScope.Products.FindAsync(addedProduct.Entity.Id);\r\n    Assert.NotNull(insertedTestRole);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PermissionHandlerTest",
    "Message": null,
    "ProjectName": "BackOfficeBase.Tests.Web.Core",
    "Methods": [
      {
        "Name": "Should_User_Has_Permission",
        "Body": "{\r\n    var requirements = new List\u003CPermissionRequirement\u003E\r\n    {\r\n        new PermissionRequirement(TestPermissionClaimForUser)\r\n    };\r\n    var claimsPrincipal = new ClaimsPrincipal(new ClaimsIdentity(new List\u003CClaim\u003E { new Claim(ClaimTypes.Name, _testUser.UserName) }, \u0022TestAuthorizationType\u0022));\r\n    var authorizationHandlerContext = new AuthorizationHandlerContext(requirements, claimsPrincipal, null);\r\n    var permissionHandler = new PermissionHandler(_permissionAppService);\r\n    await permissionHandler.HandleAsync(authorizationHandlerContext);\r\n    Assert.True(authorizationHandlerContext.HasSucceeded);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Not_User_Has_Permission",
        "Body": "{\r\n    var requirements = new List\u003CPermissionRequirement\u003E\r\n    {\r\n        new PermissionRequirement(\u0022NotGrantedPermissionClaim\u0022)\r\n    };\r\n    var claimsPrincipal = new ClaimsPrincipal(new ClaimsIdentity(new List\u003CClaim\u003E { new Claim(ClaimTypes.Name, _testUser.UserName) }, \u0022TestAuthorizationType\u0022));\r\n    var authorizationHandlerContext = new AuthorizationHandlerContext(requirements, claimsPrincipal, null);\r\n    var permissionHandler = new PermissionHandler(_permissionAppService);\r\n    await permissionHandler.HandleAsync(authorizationHandlerContext);\r\n    Assert.False(authorizationHandlerContext.HasSucceeded);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AccountControllerTests",
    "Message": null,
    "ProjectName": "BackOfficeBase.Tests.Web.Api",
    "Methods": [
      {
        "Name": "Should_Login_Async",
        "Body": "{\r\n    var identityAppServiceMock = new Mock\u003CIIdentityAppService\u003E();\r\n    identityAppServiceMock.Setup(x =\u003E x.FindUserByUserNameOrEmailAsync(It.IsAny\u003Cstring\u003E())).ReturnsAsync(_testUser);\r\n    identityAppServiceMock.Setup(x =\u003E x.CheckPasswordAsync(It.IsAny\u003CUser\u003E(), It.IsAny\u003Cstring\u003E())).ReturnsAsync(true);\r\n    var accountController = new AccountController(identityAppServiceMock.Object, _jwtTokenConfiguration, _configurationMock.Object, _emailSenderMock.Object);\r\n    var actionResult = await accountController.Login(new LoginInput { Password = \u0022123qwe\u0022, UserNameOrEmail = _testUser.UserName });\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(actionResult.Result);\r\n    var loginOutput = Assert.IsType\u003CLoginOutput\u003E(okObjectResult.Value);\r\n    Assert.Equal((int)HttpStatusCode.OK, okObjectResult.StatusCode);\r\n    Assert.True(!string.IsNullOrEmpty(loginOutput.Token));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Register_Async",
        "Body": "{\r\n    var identityAppServiceMock = new Mock\u003CIIdentityAppService\u003E();\r\n    identityAppServiceMock.Setup(x =\u003E x.FindUserByEmailAsync(It.IsAny\u003Cstring\u003E())).ReturnsAsync((User)null);\r\n    identityAppServiceMock.Setup(x =\u003E x.FindUserByUserNameAsync(It.IsAny\u003Cstring\u003E())).ReturnsAsync((User)null);\r\n    identityAppServiceMock.Setup(x =\u003E x.CreateUserAsync(It.IsAny\u003CUser\u003E(), It.IsAny\u003Cstring\u003E())).ReturnsAsync(IdentityResult.Success);\r\n    identityAppServiceMock.Setup(x =\u003E x.GenerateEmailConfirmationTokenAsync(It.IsAny\u003CUser\u003E())).ReturnsAsync(Guid.NewGuid().ToString);\r\n    var accountController = new AccountController(identityAppServiceMock.Object, _jwtTokenConfiguration, _configurationMock.Object, _emailSenderMock.Object);\r\n    var actionResult = await accountController.Register(new RegisterInput { UserName = _testUser.UserName, Email = _testUser.Email, Password = \u0022123qwe\u0022 });\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(actionResult);\r\n    var registerOutput = Assert.IsType\u003CRegisterOutput\u003E(okObjectResult.Value);\r\n    Assert.Equal((int)HttpStatusCode.OK, okObjectResult.StatusCode);\r\n    Assert.True(!string.IsNullOrEmpty(registerOutput.ResetToken));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Confirm_Email_Async",
        "Body": "{\r\n    var identityAppServiceMock = new Mock\u003CIIdentityAppService\u003E();\r\n    identityAppServiceMock.Setup(x =\u003E x.FindUserByEmailAsync(It.IsAny\u003Cstring\u003E())).ReturnsAsync(_testUser);\r\n    identityAppServiceMock.Setup(x =\u003E x.ConfirmEmailAsync(It.IsAny\u003CUser\u003E(), It.IsAny\u003Cstring\u003E())).ReturnsAsync(IdentityResult.Success);\r\n    var accountController = new AccountController(identityAppServiceMock.Object, _jwtTokenConfiguration, _configurationMock.Object, _emailSenderMock.Object);\r\n    var actionResult = await accountController.ConfirmEmail(new ConfirmEmailInput { Token = Guid.NewGuid().ToString(), Email = _testUser.Email });\r\n    var okResult = Assert.IsType\u003COkResult\u003E(actionResult);\r\n    Assert.Equal((int)HttpStatusCode.OK, okResult.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Change_Password_Async",
        "Body": "{\r\n    var identityAppServiceMock = new Mock\u003CIIdentityAppService\u003E();\r\n    identityAppServiceMock.Setup(x =\u003E x.FindUserByUserNameAsync(It.IsAny\u003Cstring\u003E())).ReturnsAsync(_testUser);\r\n    identityAppServiceMock.Setup(x =\u003E x.ChangePasswordAsync(It.IsAny\u003CUser\u003E(), It.IsAny\u003Cstring\u003E(), It.IsAny\u003Cstring\u003E())).ReturnsAsync(IdentityResult.Success);\r\n    var accountController = new AccountController(identityAppServiceMock.Object, _jwtTokenConfiguration, _configurationMock.Object, _emailSenderMock.Object)\r\n    {\r\n        ControllerContext = new ControllerContext\r\n        {\r\n            HttpContext = new DefaultHttpContext\r\n            {\r\n                User = new ClaimsPrincipal(new ClaimsIdentity(new[] { new Claim(ClaimTypes.Name, _testUser.UserName) }, \u0022TestAuthTypeName\u0022))\r\n            }\r\n        }\r\n    };\r\n    var actionResult = await accountController.ChangePassword(new ChangePasswordInput { CurrentPassword = \u0022123qwe\u0022, NewPassword = \u0022123qwe123qwe\u0022, PasswordRepeat = \u0022123qwe123qwe\u0022 });\r\n    var okResult = Assert.IsType\u003COkResult\u003E(actionResult);\r\n    Assert.Equal((int)HttpStatusCode.OK, okResult.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Forgot_Password_Async",
        "Body": "{\r\n    var identityAppServiceMock = new Mock\u003CIIdentityAppService\u003E();\r\n    identityAppServiceMock.Setup(x =\u003E x.FindUserByEmailAsync(It.IsAny\u003Cstring\u003E())).ReturnsAsync(_testUser);\r\n    identityAppServiceMock.Setup(x =\u003E x.GeneratePasswordResetTokenAsync(It.IsAny\u003CUser\u003E())).ReturnsAsync(Guid.NewGuid().ToString);\r\n    var accountController = new AccountController(identityAppServiceMock.Object, _jwtTokenConfiguration, _configurationMock.Object, _emailSenderMock.Object);\r\n    var actionResult = await accountController.ForgotPassword(new ForgotPasswordInput { Email = _testUser.Email });\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(actionResult.Result);\r\n    var forgotPasswordOutput = Assert.IsType\u003CForgotPasswordOutput\u003E(okObjectResult.Value);\r\n    Assert.Equal((int)HttpStatusCode.OK, okObjectResult.StatusCode);\r\n    Assert.True(!string.IsNullOrEmpty(forgotPasswordOutput.ResetToken));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Reset_Password_Async",
        "Body": "{\r\n    var identityAppServiceMock = new Mock\u003CIIdentityAppService\u003E();\r\n    identityAppServiceMock.Setup(x =\u003E x.FindUserByUserNameOrEmailAsync(It.IsAny\u003Cstring\u003E())).ReturnsAsync(_testUser);\r\n    identityAppServiceMock.Setup(x =\u003E x.ResetPasswordAsync(It.IsAny\u003CUser\u003E(), It.IsAny\u003Cstring\u003E(), It.IsAny\u003Cstring\u003E())).ReturnsAsync(IdentityResult.Success);\r\n    var accountController = new AccountController(identityAppServiceMock.Object, _jwtTokenConfiguration, _configurationMock.Object, _emailSenderMock.Object);\r\n    var actionResult = await accountController.ResetPassword(new ResetPasswordInput { Token = Guid.NewGuid().ToString(), Password = \u0022123qwe\u0022, UserNameOrEmail = _testUser.UserName });\r\n    var okResult = Assert.IsType\u003COkResult\u003E(actionResult);\r\n    Assert.Equal((int)HttpStatusCode.OK, okResult.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RolesControllerTests",
    "Message": null,
    "ProjectName": "BackOfficeBase.Tests.Web.Api",
    "Methods": [
      {
        "Name": "Should_Get_Role_Async",
        "Body": "{\r\n    var roleAppServiceMock = new Mock\u003CIRoleAppService\u003E();\r\n    roleAppServiceMock.Setup(x =\u003E x.GetAsync(It.IsAny\u003CGuid\u003E())).ReturnsAsync(new RoleOutput { Name = \u0022test_role\u0022, Id = Guid.NewGuid() });\r\n    var rolesController = new RolesController(roleAppServiceMock.Object, new Mock\u003CIIdentityAppService\u003E().Object);\r\n    var actionResult = await rolesController.GetRoles(Guid.NewGuid());\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(actionResult.Result);\r\n    var roleOutput = Assert.IsType\u003CRoleOutput\u003E(okObjectResult.Value);\r\n    Assert.Equal((int)HttpStatusCode.OK, okObjectResult.StatusCode);\r\n    Assert.Equal(\u0022test_role\u0022, roleOutput.Name);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Get_Role_List_Async",
        "Body": "{\r\n    var roleAppServiceMock = new Mock\u003CIRoleAppService\u003E();\r\n    roleAppServiceMock.Setup(x =\u003E x.GetListAsync(It.IsAny\u003CPagedListInput\u003E())).ReturnsAsync(new PagedListResult\u003CRoleListOutput\u003E { Items = new List\u003CRoleListOutput\u003E { new RoleListOutput { Name = \u0022test_role_1\u0022, Id = Guid.NewGuid() }, new RoleListOutput { Name = \u0022test_role_2\u0022, Id = Guid.NewGuid() }, new RoleListOutput { Name = \u0022test_role_3\u0022, Id = Guid.NewGuid() }, new RoleListOutput { Name = \u0022test_role_4\u0022, Id = Guid.NewGuid() }, new RoleListOutput { Name = \u0022test_role_5\u0022, Id = Guid.NewGuid() } }, TotalCount = 10 });\r\n    var rolesController = new RolesController(roleAppServiceMock.Object, new Mock\u003CIIdentityAppService\u003E().Object);\r\n    var actionResult = await rolesController.GetRoles(new PagedListInput());\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(actionResult.Result);\r\n    var rolePagedListResult = Assert.IsType\u003CPagedListResult\u003CRoleListOutput\u003E\u003E(okObjectResult.Value);\r\n    Assert.Equal((int)HttpStatusCode.OK, okObjectResult.StatusCode);\r\n    Assert.Equal(10, rolePagedListResult.TotalCount);\r\n    Assert.Equal(5, rolePagedListResult.Items.Count());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Create_Role_Async",
        "Body": "{\r\n    var roleAppServiceMock = new Mock\u003CIRoleAppService\u003E();\r\n    roleAppServiceMock.Setup(x =\u003E x.CreateAsync(It.IsAny\u003CCreateRoleInput\u003E())).ReturnsAsync(new RoleOutput { Name = \u0022test_role\u0022, Id = Guid.NewGuid() });\r\n    var rolesController = new RolesController(roleAppServiceMock.Object, new Mock\u003CIIdentityAppService\u003E().Object);\r\n    var actionResult = await rolesController.PostRoles(new CreateRoleInput());\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(actionResult.Result);\r\n    var roleOutput = Assert.IsType\u003CRoleOutput\u003E(okObjectResult.Value);\r\n    Assert.Equal((int)HttpStatusCode.OK, okObjectResult.StatusCode);\r\n    Assert.Equal(\u0022test_role\u0022, roleOutput.Name);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Not_Create_Role_Async",
        "Body": "{\r\n    var roleAppServiceMock = new Mock\u003CIRoleAppService\u003E();\r\n    roleAppServiceMock.Setup(x =\u003E x.CreateAsync(It.IsAny\u003CCreateRoleInput\u003E())).ReturnsAsync(new RoleOutput { Name = \u0022test_role\u0022, Id = Guid.NewGuid() });\r\n    var identityAppServiceMock = new Mock\u003CIIdentityAppService\u003E();\r\n    identityAppServiceMock.Setup(x =\u003E x.FindRoleByNameAsync(It.IsAny\u003Cstring\u003E())).ReturnsAsync(GetTestRole(\u0022test_role\u0022 \u002B Guid.NewGuid()));\r\n    var rolesController = new RolesController(roleAppServiceMock.Object, identityAppServiceMock.Object);\r\n    var actionResult = await rolesController.PostRoles(new CreateRoleInput());\r\n    var conflictObjectResult = Assert.IsType\u003CConflictObjectResult\u003E(actionResult.Result);\r\n    var message = Assert.IsType\u003Cstring\u003E(conflictObjectResult.Value);\r\n    Assert.Equal((int)HttpStatusCode.Conflict, conflictObjectResult.StatusCode);\r\n    Assert.Equal(UserFriendlyMessages.RoleNameAlreadyExist, message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Update_Role",
        "Body": "{\r\n    var roleAppServiceMock = new Mock\u003CIRoleAppService\u003E();\r\n    roleAppServiceMock.Setup(x =\u003E x.Update(It.IsAny\u003CUpdateRoleInput\u003E())).Returns(new RoleOutput { Name = \u0022test_role\u0022, Id = Guid.NewGuid() });\r\n    var rolesController = new RolesController(roleAppServiceMock.Object, new Mock\u003CIIdentityAppService\u003E().Object);\r\n    var actionResult = await rolesController.PutRoles(new UpdateRoleInput());\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(actionResult.Result);\r\n    var roleOutput = Assert.IsType\u003CRoleOutput\u003E(okObjectResult.Value);\r\n    Assert.Equal((int)HttpStatusCode.OK, okObjectResult.StatusCode);\r\n    Assert.Equal(\u0022test_role\u0022, roleOutput.Name);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Not_Update_Role",
        "Body": "{\r\n    var roleAppServiceMock = new Mock\u003CIRoleAppService\u003E();\r\n    roleAppServiceMock.Setup(x =\u003E x.Update(It.IsAny\u003CUpdateRoleInput\u003E())).Returns(new RoleOutput { Name = \u0022test_role\u0022, Id = Guid.NewGuid() });\r\n    var identityAppServiceMock = new Mock\u003CIIdentityAppService\u003E();\r\n    identityAppServiceMock.Setup(x =\u003E x.FindRoleByNameAsync(It.IsAny\u003Cstring\u003E())).ReturnsAsync(GetTestRole(\u0022test_role_\u0022 \u002B Guid.NewGuid()));\r\n    var rolesController = new RolesController(roleAppServiceMock.Object, identityAppServiceMock.Object);\r\n    var actionResult = await rolesController.PutRoles(new UpdateRoleInput());\r\n    var conflictObjectResult = Assert.IsType\u003CConflictObjectResult\u003E(actionResult.Result);\r\n    var message = Assert.IsType\u003Cstring\u003E(conflictObjectResult.Value);\r\n    Assert.Equal((int)HttpStatusCode.Conflict, conflictObjectResult.StatusCode);\r\n    Assert.Equal(UserFriendlyMessages.RoleNameAlreadyExist, message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Delete_Role_Async",
        "Body": "{\r\n    var roleAppServiceMock = new Mock\u003CIRoleAppService\u003E();\r\n    roleAppServiceMock.Setup(x =\u003E x.DeleteAsync(It.IsAny\u003CGuid\u003E())).ReturnsAsync(new RoleOutput { Name = \u0022test_role\u0022, Id = Guid.NewGuid() });\r\n    var rolesController = new RolesController(roleAppServiceMock.Object, new Mock\u003CIIdentityAppService\u003E().Object);\r\n    var actionResult = await rolesController.DeleteRoles(Guid.NewGuid());\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(actionResult.Result);\r\n    var roleOutput = Assert.IsType\u003CRoleOutput\u003E(okObjectResult.Value);\r\n    Assert.Equal((int)HttpStatusCode.OK, okObjectResult.StatusCode);\r\n    Assert.Equal(\u0022test_role\u0022, roleOutput.Name);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UsersControllerTests",
    "Message": null,
    "ProjectName": "BackOfficeBase.Tests.Web.Api",
    "Methods": [
      {
        "Name": "Should_Get_User_Async",
        "Body": "{\r\n    var userAppServiceMock = new Mock\u003CIUserAppService\u003E();\r\n    userAppServiceMock.Setup(x =\u003E x.GetAsync(It.IsAny\u003CGuid\u003E())).ReturnsAsync(new UserOutput { UserName = \u0022test_user\u0022, Email = \u0022test_user@mail.com\u0022, Id = Guid.NewGuid() });\r\n    var usersController = new UsersController(userAppServiceMock.Object, new Mock\u003CIIdentityAppService\u003E().Object);\r\n    var actionResult = await usersController.GetUsers(Guid.NewGuid());\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(actionResult.Result);\r\n    var userOutput = Assert.IsType\u003CUserOutput\u003E(okObjectResult.Value);\r\n    Assert.Equal((int)HttpStatusCode.OK, okObjectResult.StatusCode);\r\n    Assert.Equal(\u0022test_user\u0022, userOutput.UserName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Get_User_List_Async",
        "Body": "{\r\n    var userAppServiceMock = new Mock\u003CIUserAppService\u003E();\r\n    userAppServiceMock.Setup(x =\u003E x.GetListAsync(It.IsAny\u003CPagedListInput\u003E())).ReturnsAsync(new PagedListResult\u003CUserListOutput\u003E { Items = new List\u003CUserListOutput\u003E { new UserListOutput { UserName = \u0022test_user_1\u0022, Email = \u0022test_user_mail_1@mail\u0022, Id = Guid.NewGuid() }, new UserListOutput { UserName = \u0022test_user_2\u0022, Email = \u0022test_user_mail_2@mail\u0022, Id = Guid.NewGuid() }, new UserListOutput { UserName = \u0022test_user_3\u0022, Email = \u0022test_user_mail_3@mail\u0022, Id = Guid.NewGuid() }, new UserListOutput { UserName = \u0022test_user_4\u0022, Email = \u0022test_user_mail_4@mail\u0022, Id = Guid.NewGuid() }, new UserListOutput { UserName = \u0022test_user_5\u0022, Email = \u0022test_user_mail_5@mail\u0022, Id = Guid.NewGuid() } }, TotalCount = 10 });\r\n    var usersController = new UsersController(userAppServiceMock.Object, new Mock\u003CIIdentityAppService\u003E().Object);\r\n    var actionResult = await usersController.GetUsers(new PagedListInput());\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(actionResult.Result);\r\n    var userPagedListResult = Assert.IsType\u003CPagedListResult\u003CUserListOutput\u003E\u003E(okObjectResult.Value);\r\n    Assert.Equal((int)HttpStatusCode.OK, okObjectResult.StatusCode);\r\n    Assert.Equal(10, userPagedListResult.TotalCount);\r\n    Assert.Equal(5, userPagedListResult.Items.Count());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Create_User_Async",
        "Body": "{\r\n    var userAppServiceMock = new Mock\u003CIUserAppService\u003E();\r\n    userAppServiceMock.Setup(x =\u003E x.CreateAsync(It.IsAny\u003CCreateUserInput\u003E())).ReturnsAsync(new UserOutput { UserName = \u0022test_user\u0022, Email = \u0022test_user@mail.com\u0022, Id = Guid.NewGuid() });\r\n    var usersController = new UsersController(userAppServiceMock.Object, new Mock\u003CIIdentityAppService\u003E().Object);\r\n    var actionResult = await usersController.PostUsers(new CreateUserInput());\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(actionResult.Result);\r\n    var userOutput = Assert.IsType\u003CUserOutput\u003E(okObjectResult.Value);\r\n    Assert.Equal((int)HttpStatusCode.OK, okObjectResult.StatusCode);\r\n    Assert.Equal(\u0022test_user\u0022, userOutput.UserName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Not_Create_User_Async",
        "Body": "{\r\n    var userAppServiceMock = new Mock\u003CIUserAppService\u003E();\r\n    userAppServiceMock.Setup(x =\u003E x.CreateAsync(It.IsAny\u003CCreateUserInput\u003E())).ReturnsAsync(new UserOutput { UserName = \u0022test_user\u0022, Email = \u0022test_user@mail.com\u0022, Id = Guid.NewGuid() });\r\n    var identityAppServiceMock = new Mock\u003CIIdentityAppService\u003E();\r\n    identityAppServiceMock.Setup(x =\u003E x.FindUserByEmailAsync(It.IsAny\u003Cstring\u003E())).ReturnsAsync(GetTestUser(\u0022test_user\u0022 \u002B Guid.NewGuid()));\r\n    var usersController = new UsersController(userAppServiceMock.Object, identityAppServiceMock.Object);\r\n    var actionResult = await usersController.PostUsers(new CreateUserInput());\r\n    var conflictObjectResult = Assert.IsType\u003CConflictObjectResult\u003E(actionResult.Result);\r\n    var message = Assert.IsType\u003Cstring\u003E(conflictObjectResult.Value);\r\n    Assert.Equal((int)HttpStatusCode.Conflict, conflictObjectResult.StatusCode);\r\n    Assert.Equal(UserFriendlyMessages.EmailAlreadyExist, message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Update_User",
        "Body": "{\r\n    var userAppServiceMock = new Mock\u003CIUserAppService\u003E();\r\n    userAppServiceMock.Setup(x =\u003E x.Update(It.IsAny\u003CUpdateUserInput\u003E())).Returns(new UserOutput { UserName = \u0022test_user\u0022, Email = \u0022test_user@mail.com\u0022, Id = Guid.NewGuid() });\r\n    var identityAppServiceMock = new Mock\u003CIIdentityAppService\u003E();\r\n    identityAppServiceMock.Setup(x =\u003E x.FindUserByEmailAsync(It.IsAny\u003Cstring\u003E())).ReturnsAsync(GetTestUser(\u0022test_user\u0022 \u002B Guid.NewGuid()));\r\n    var usersController = new UsersController(userAppServiceMock.Object, identityAppServiceMock.Object);\r\n    var actionResult = await usersController.PutUsers(new UpdateUserInput());\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(actionResult.Result);\r\n    var userOutput = Assert.IsType\u003CUserOutput\u003E(okObjectResult.Value);\r\n    Assert.Equal((int)HttpStatusCode.OK, okObjectResult.StatusCode);\r\n    Assert.Equal(\u0022test_user\u0022, userOutput.UserName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Not_Update_User",
        "Body": "{\r\n    var userAppServiceMock = new Mock\u003CIUserAppService\u003E();\r\n    userAppServiceMock.Setup(x =\u003E x.Update(It.IsAny\u003CUpdateUserInput\u003E())).Returns(new UserOutput { UserName = \u0022test_user\u0022, Email = \u0022test_user@mail.com\u0022, Id = Guid.NewGuid() });\r\n    var usersController = new UsersController(userAppServiceMock.Object, new Mock\u003CIIdentityAppService\u003E().Object);\r\n    var actionResult = await usersController.PutUsers(new UpdateUserInput());\r\n    var notFoundObjectResult = Assert.IsType\u003CNotFoundObjectResult\u003E(actionResult.Result);\r\n    var message = Assert.IsType\u003Cstring\u003E(notFoundObjectResult.Value);\r\n    Assert.Equal((int)HttpStatusCode.NotFound, notFoundObjectResult.StatusCode);\r\n    Assert.Equal(UserFriendlyMessages.UserIsNotFound, message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Delete_User_Async",
        "Body": "{\r\n    var userAppServiceMock = new Mock\u003CIUserAppService\u003E();\r\n    userAppServiceMock.Setup(x =\u003E x.DeleteAsync(It.IsAny\u003CGuid\u003E())).ReturnsAsync(new UserOutput { UserName = \u0022test_user\u0022, Email = \u0022test_user@mail.com\u0022, Id = Guid.NewGuid() });\r\n    var usersController = new UsersController(userAppServiceMock.Object, new Mock\u003CIIdentityAppService\u003E().Object);\r\n    var actionResult = await usersController.DeleteUsers(Guid.NewGuid());\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(actionResult.Result);\r\n    var userOutput = Assert.IsType\u003CUserOutput\u003E(okObjectResult.Value);\r\n    Assert.Equal((int)HttpStatusCode.OK, okObjectResult.StatusCode);\r\n    Assert.Equal(\u0022test_user\u0022, userOutput.UserName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "OrganizationUnitsControllerTests",
    "Message": null,
    "ProjectName": "BackOfficeBase.Tests.Web.Api",
    "Methods": [
      {
        "Name": "Should_Get_OrganizationUnit_Async",
        "Body": "{\r\n    var organizationUnitAppServiceMock = new Mock\u003CIOrganizationUnitAppService\u003E();\r\n    organizationUnitAppServiceMock.Setup(x =\u003E x.GetAsync(It.IsAny\u003CGuid\u003E())).ReturnsAsync(new OrganizationUnitOutput { Id = Guid.NewGuid(), SelectedUsers = new[] { GetTestUserOutput(\u0022test_user_for_get_ou\u0022) }, SelectedRoles = new[] { GetTestRoleOutput(\u0022test_role_for_get_ou\u0022) } });\r\n    var organizationUnitsController = new OrganizationUnitsController(organizationUnitAppServiceMock.Object);\r\n    var actionResult = await organizationUnitsController.GetOrganizationUnits(Guid.NewGuid());\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(actionResult.Result);\r\n    var organizationUnitOutput = Assert.IsType\u003COrganizationUnitOutput\u003E(okObjectResult.Value);\r\n    Assert.Equal((int)HttpStatusCode.OK, okObjectResult.StatusCode);\r\n    Assert.True(organizationUnitOutput.SelectedUsers.Any());\r\n    Assert.True(organizationUnitOutput.SelectedRoles.Any());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Get_OrganizationUnit_List_Async",
        "Body": "{\r\n    var organizationUnitAppServiceMock = new Mock\u003CIOrganizationUnitAppService\u003E();\r\n    organizationUnitAppServiceMock.Setup(x =\u003E x.GetListAsync(It.IsAny\u003CPagedListInput\u003E())).ReturnsAsync(new PagedListResult\u003COrganizationUnitListOutput\u003E { Items = new List\u003COrganizationUnitListOutput\u003E { new OrganizationUnitListOutput { Name = \u0022test_organizationUnit_1\u0022, Id = Guid.NewGuid() }, new OrganizationUnitListOutput { Name = \u0022test_organizationUnit_2\u0022, Id = Guid.NewGuid() }, new OrganizationUnitListOutput { Name = \u0022test_organizationUnit_3\u0022, Id = Guid.NewGuid() }, new OrganizationUnitListOutput { Name = \u0022test_organizationUnit_4\u0022, Id = Guid.NewGuid() }, new OrganizationUnitListOutput { Name = \u0022test_organizationUnit_5\u0022, Id = Guid.NewGuid() } }, TotalCount = 10 });\r\n    var organizationUnitsController = new OrganizationUnitsController(organizationUnitAppServiceMock.Object);\r\n    var actionResult = await organizationUnitsController.GetOrganizationUnits(new PagedListInput());\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(actionResult.Result);\r\n    var organizationUnitPagedListResult = Assert.IsType\u003CPagedListResult\u003COrganizationUnitListOutput\u003E\u003E(okObjectResult.Value);\r\n    Assert.Equal((int)HttpStatusCode.OK, okObjectResult.StatusCode);\r\n    Assert.Equal(10, organizationUnitPagedListResult.TotalCount);\r\n    Assert.Equal(5, organizationUnitPagedListResult.Items.Count());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Create_OrganizationUnit_Async",
        "Body": "{\r\n    var organizationUnitAppServiceMock = new Mock\u003CIOrganizationUnitAppService\u003E();\r\n    organizationUnitAppServiceMock.Setup(x =\u003E x.CreateAsync(It.IsAny\u003CCreateOrganizationUnitInput\u003E())).ReturnsAsync(new OrganizationUnitOutput { Id = Guid.NewGuid(), SelectedUsers = new[] { GetTestUserOutput(\u0022test_user_for_insert_ou\u0022) }, SelectedRoles = new[] { GetTestRoleOutput(\u0022test_role_for_insert_ou\u0022) } });\r\n    var organizationUnitsController = new OrganizationUnitsController(organizationUnitAppServiceMock.Object);\r\n    var actionResult = await organizationUnitsController.PostOrganizationUnits(new CreateOrganizationUnitInput());\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(actionResult.Result);\r\n    var organizationUnitOutput = Assert.IsType\u003COrganizationUnitOutput\u003E(okObjectResult.Value);\r\n    Assert.Equal((int)HttpStatusCode.OK, okObjectResult.StatusCode);\r\n    Assert.True(organizationUnitOutput.SelectedUsers.Any());\r\n    Assert.True(organizationUnitOutput.SelectedRoles.Any());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Update_OrganizationUnit",
        "Body": "{\r\n    var organizationUnitAppServiceMock = new Mock\u003CIOrganizationUnitAppService\u003E();\r\n    organizationUnitAppServiceMock.Setup(x =\u003E x.Update(It.IsAny\u003CUpdateOrganizationUnitInput\u003E())).Returns(new OrganizationUnitOutput { Id = Guid.NewGuid(), SelectedUsers = new[] { GetTestUserOutput(\u0022test_user_for_update_ou\u0022) }, SelectedRoles = new[] { GetTestRoleOutput(\u0022test_role_for_update_ou\u0022) } });\r\n    var organizationUnitsController = new OrganizationUnitsController(organizationUnitAppServiceMock.Object);\r\n    var actionResult = await organizationUnitsController.PutOrganizationUnits(new UpdateOrganizationUnitInput());\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(actionResult.Result);\r\n    var organizationUnitOutput = Assert.IsType\u003COrganizationUnitOutput\u003E(okObjectResult.Value);\r\n    Assert.Equal((int)HttpStatusCode.OK, okObjectResult.StatusCode);\r\n    Assert.True(organizationUnitOutput.SelectedUsers.Any());\r\n    Assert.True(organizationUnitOutput.SelectedRoles.Any());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Delete_OrganizationUnit_Async",
        "Body": "{\r\n    var organizationUnitAppServiceMock = new Mock\u003CIOrganizationUnitAppService\u003E();\r\n    organizationUnitAppServiceMock.Setup(x =\u003E x.DeleteAsync(It.IsAny\u003CGuid\u003E())).ReturnsAsync(new OrganizationUnitOutput { Id = Guid.NewGuid(), SelectedUsers = new[] { GetTestUserOutput(\u0022test_user_for_delete_ou\u0022) }, SelectedRoles = new[] { GetTestRoleOutput(\u0022test_role_for_delete_ou\u0022) } });\r\n    var organizationUnitsController = new OrganizationUnitsController(organizationUnitAppServiceMock.Object);\r\n    var actionResult = await organizationUnitsController.DeleteOrganizationUnits(Guid.NewGuid());\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(actionResult.Result);\r\n    var organizationUnitOutput = Assert.IsType\u003COrganizationUnitOutput\u003E(okObjectResult.Value);\r\n    Assert.Equal((int)HttpStatusCode.OK, okObjectResult.StatusCode);\r\n    Assert.True(organizationUnitOutput.SelectedUsers.Any());\r\n    Assert.True(organizationUnitOutput.SelectedRoles.Any());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Add_Users_To_OrganizationUnit_Async",
        "Body": "{\r\n    var organizationUnitAppServiceMock = new Mock\u003CIOrganizationUnitAppService\u003E();\r\n    organizationUnitAppServiceMock.Setup(x =\u003E x.AddUsersToOrganizationUnitAsync(It.IsAny\u003CAddOrRemoveUsersToOrganizationUnitInput\u003E()));\r\n    var organizationUnitsController = new OrganizationUnitsController(organizationUnitAppServiceMock.Object);\r\n    var actionResult = await organizationUnitsController.AddUsersToOrganizationUnit(new AddOrRemoveUsersToOrganizationUnitInput());\r\n    var okResult = Assert.IsType\u003COkResult\u003E(actionResult);\r\n    Assert.Equal((int)HttpStatusCode.OK, okResult.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Remove_Users_From_OrganizationUnit_Async",
        "Body": "{\r\n    var organizationUnitAppServiceMock = new Mock\u003CIOrganizationUnitAppService\u003E();\r\n    organizationUnitAppServiceMock.Setup(x =\u003E x.RemoveUsersFromOrganizationUnit(It.IsAny\u003CAddOrRemoveUsersToOrganizationUnitInput\u003E()));\r\n    var organizationUnitsController = new OrganizationUnitsController(organizationUnitAppServiceMock.Object);\r\n    var actionResult = await organizationUnitsController.RemoveUsersFromOrganizationUnit(new AddOrRemoveUsersToOrganizationUnitInput());\r\n    var okResult = Assert.IsType\u003COkResult\u003E(actionResult);\r\n    Assert.Equal((int)HttpStatusCode.OK, okResult.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Add_Roles_To_OrganizationUnit_Async",
        "Body": "{\r\n    var organizationUnitAppServiceMock = new Mock\u003CIOrganizationUnitAppService\u003E();\r\n    organizationUnitAppServiceMock.Setup(x =\u003E x.AddRolesToOrganizationUnitAsync(It.IsAny\u003CAddOrRemoveRolesToOrganizationUnitInput\u003E()));\r\n    var organizationUnitsController = new OrganizationUnitsController(organizationUnitAppServiceMock.Object);\r\n    var actionResult = await organizationUnitsController.AddRolesToOrganizationUnit(new AddOrRemoveRolesToOrganizationUnitInput());\r\n    var okResult = Assert.IsType\u003COkResult\u003E(actionResult);\r\n    Assert.Equal((int)HttpStatusCode.OK, okResult.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Remove_Roles_From_OrganizationUnit_Async",
        "Body": "{\r\n    var organizationUnitAppServiceMock = new Mock\u003CIOrganizationUnitAppService\u003E();\r\n    organizationUnitAppServiceMock.Setup(x =\u003E x.RemoveRolesFromOrganizationUnit(It.IsAny\u003CAddOrRemoveRolesToOrganizationUnitInput\u003E()));\r\n    var organizationUnitsController = new OrganizationUnitsController(organizationUnitAppServiceMock.Object);\r\n    var actionResult = await organizationUnitsController.RemoveRolesFromOrganizationUnit(new AddOrRemoveRolesToOrganizationUnitInput());\r\n    var okResult = Assert.IsType\u003COkResult\u003E(actionResult);\r\n    Assert.Equal((int)HttpStatusCode.OK, okResult.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "EnumerableExtensionsTests",
    "Message": null,
    "ProjectName": "BackOfficeBase.Tests.Utilities",
    "Methods": [
      {
        "Name": "Should_Paged_By",
        "Body": "{\r\n    var pagedList = _testList.PagedBy(0, 10);\r\n    Assert.Equal(10, pagedList.Count());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_To_Paged_List_Result",
        "Body": "{\r\n    var pagedList = _testList.ToPagedListResult(_testList.Count);\r\n    Assert.Equal(_testList.Count, pagedList.TotalCount);\r\n    Assert.Equal(_testList.Count, pagedList.Items.Count());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AccountIntegrationTests",
    "Message": null,
    "ProjectName": "BackOfficeBase.Tests.IntegrationTests",
    "Methods": [
      {
        "Name": "Should_Not_Access_Authorized_Controller",
        "Body": "{\r\n    var responseUsers = await _httpClient.GetAsync(\u0022/api/users\u0022);\r\n    Assert.Equal(HttpStatusCode.Unauthorized, responseUsers.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Not_Login_With_Wrong_Credentials",
        "Body": "{\r\n    var token = await LoginHelper.LoginAndGetTokenAsync(\u0022wrongUserName\u0022, \u0022wrongPassword\u0022, _httpClient);\r\n    Assert.Null(token);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Access_Authorized_Controller",
        "Body": "{\r\n    var requestMessage = new HttpRequestMessage(HttpMethod.Get, \u0022/api/users\u0022);\r\n    requestMessage.Headers.Authorization = new AuthenticationHeaderValue(\u0022Bearer\u0022, await LoginHelper.LoginAsAdminUserAndGetTokenAsync(_httpClient));\r\n    var responseGetUsers = await _httpClient.SendAsync(requestMessage);\r\n    Assert.Equal(HttpStatusCode.OK, responseGetUsers.StatusCode);\r\n    var users = await responseGetUsers.Content.ReadAsAsync\u003CPagedListResult\u003CUserListOutput\u003E\u003E();\r\n    Assert.True(users.Items.Any());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Register",
        "Body": "{\r\n    var registerInput = new RegisterInput\r\n    {\r\n        Email = \u0022TestUserEmail_\u0022 \u002B Guid.NewGuid() \u002B \u0022@mail.com\u0022,\r\n        UserName = \u0022TestUserName_\u0022 \u002B Guid.NewGuid(),\r\n        Password = \u0022aA!121212\u0022\r\n    };\r\n    var responseRegister = await _httpClient.PostAsync(\u0022/api/register\u0022, registerInput.ToStringContent(Encoding.UTF8, \u0022application/json\u0022));\r\n    Assert.Equal(HttpStatusCode.OK, responseRegister.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Not_Register_With_Existing_User",
        "Body": "{\r\n    var registerInput = new RegisterInput\r\n    {\r\n        Email = DbContextDataBuilderHelper.AdminUserEmail,\r\n        UserName = DbContextDataBuilderHelper.AdminUserName,\r\n        Password = \u0022aA!121212\u0022\r\n    };\r\n    var responseRegister = await _httpClient.PostAsync(\u0022/api/register\u0022, registerInput.ToStringContent(Encoding.UTF8, \u0022application/json\u0022));\r\n    Assert.Equal(HttpStatusCode.Conflict, responseRegister.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Not_Register_With_Invalid_User",
        "Body": "{\r\n    var input = new RegisterInput\r\n    {\r\n        Email = new string (\u0027*\u0027, 300),\r\n        UserName = new string (\u0027*\u0027, 300),\r\n        Password = \u0022aA!121212\u0022\r\n    };\r\n    var response = await _httpClient.PostAsync(\u0022/api/register\u0022, input.ToStringContent(Encoding.UTF8, \u0022application/json\u0022));\r\n    Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Change_Password",
        "Body": "{\r\n    var token = await LoginHelper.LoginAndGetTokenAsync(TestDataBuilderForAccount.TestUserForChangePassword.UserName, \u0022123qwe\u0022, _httpClient);\r\n    var input = new ChangePasswordInput\r\n    {\r\n        CurrentPassword = \u0022123qwe\u0022,\r\n        NewPassword = \u0022aA!121212\u0022,\r\n        PasswordRepeat = \u0022aA!121212\u0022\r\n    };\r\n    var requestMessage = new HttpRequestMessage(HttpMethod.Post, \u0022/api/changePassword\u0022);\r\n    requestMessage.Headers.Authorization = new AuthenticationHeaderValue(\u0022Bearer\u0022, token);\r\n    requestMessage.Content = input.ToStringContent(Encoding.UTF8, \u0022application/json\u0022);\r\n    var response = await _httpClient.SendAsync(requestMessage);\r\n    Assert.Equal(HttpStatusCode.OK, response.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Reset_Password",
        "Body": "{\r\n    var testUser = TestDataBuilderForAccount.TestUserForResetPassword;\r\n    var token = await LoginHelper.LoginAndGetTokenAsync(testUser.UserName, \u0022123qwe\u0022, _httpClient);\r\n    var input = new ForgotPasswordInput\r\n    {\r\n        Email = testUser.Email\r\n    };\r\n    var requestMessage = new HttpRequestMessage(HttpMethod.Post, \u0022/api/forgotPassword\u0022);\r\n    requestMessage.Headers.Authorization = new AuthenticationHeaderValue(\u0022Bearer\u0022, token);\r\n    requestMessage.Content = input.ToStringContent(Encoding.UTF8, \u0022application/json\u0022);\r\n    var response = await _httpClient.SendAsync(requestMessage);\r\n    var result = await response.Content.ReadAsAsync\u003CForgotPasswordOutput\u003E();\r\n    var inputResetPassword = new ResetPasswordInput\r\n    {\r\n        UserNameOrEmail = testUser.Email,\r\n        Token = result.ResetToken,\r\n        Password = \u0022aA!123456_123123\u0022\r\n    };\r\n    var requestMessageResetPassword = new HttpRequestMessage(HttpMethod.Post, \u0022/api/resetPassword\u0022);\r\n    requestMessageResetPassword.Headers.Authorization = new AuthenticationHeaderValue(\u0022Bearer\u0022, token);\r\n    requestMessageResetPassword.Content = inputResetPassword.ToStringContent(Encoding.UTF8, \u0022application/json\u0022);\r\n    var responseResetPassword = await _httpClient.SendAsync(requestMessageResetPassword);\r\n    Assert.Equal(HttpStatusCode.OK, responseResetPassword.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RolesIntegrationTests",
    "Message": null,
    "ProjectName": "BackOfficeBase.Tests.IntegrationTests",
    "Methods": [
      {
        "Name": "Should_Get_Role",
        "Body": "{\r\n    var request = new HttpRequestMessage(HttpMethod.Get, $\u0022/api/roles/{TestDataBuilderForRoles.TestRoleForGet.Id}\u0022);\r\n    request.Headers.Authorization = new AuthenticationHeaderValue(\u0022Bearer\u0022, await LoginHelper.LoginAsAdminUserAndGetTokenAsync(_httpClient));\r\n    var response = await _httpClient.SendAsync(request);\r\n    var role = await response.Content.ReadAsAsync\u003CRoleOutput\u003E();\r\n    Assert.Equal(HttpStatusCode.OK, response.StatusCode);\r\n    Assert.Equal(TestDataBuilderForRoles.TestRoleForGet.Id, role.Id);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Get_Roles",
        "Body": "{\r\n    var request = new HttpRequestMessage(HttpMethod.Get, $\u0022/api/roles\u0022);\r\n    request.Headers.Authorization = new AuthenticationHeaderValue(\u0022Bearer\u0022, await LoginHelper.LoginAsAdminUserAndGetTokenAsync(_httpClient));\r\n    var response = await _httpClient.SendAsync(request);\r\n    var roles = await response.Content.ReadAsAsync\u003CPagedListResult\u003CRoleListOutput\u003E\u003E();\r\n    Assert.Equal(HttpStatusCode.OK, response.StatusCode);\r\n    Assert.True(roles.Items.Any());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Create_Role",
        "Body": "{\r\n    var input = new CreateRoleInput\r\n    {\r\n        Name = \u0022CreateTestRoleName_\u0022 \u002B Guid.NewGuid(),\r\n        SelectedPermissions = new List\u003Cstring\u003E\r\n        {\r\n            \u0022permission1\u0022,\r\n            \u0022permission2\u0022\r\n        }\r\n    };\r\n    var request = new HttpRequestMessage(HttpMethod.Post, $\u0022/api/roles\u0022);\r\n    request.Headers.Authorization = new AuthenticationHeaderValue(\u0022Bearer\u0022, await LoginHelper.LoginAsAdminUserAndGetTokenAsync(_httpClient));\r\n    request.Content = input.ToStringContent(Encoding.UTF8, \u0022application/json\u0022);\r\n    var response = await _httpClient.SendAsync(request);\r\n    Assert.Equal(HttpStatusCode.OK, response.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Update_Role",
        "Body": "{\r\n    // TODO: insert before update\r\n    var input = new UpdateRoleInput\r\n    {\r\n        Name = \u0022UpdateTestRoleName_\u0022 \u002B Guid.NewGuid(),\r\n        SelectedPermissions = new List\u003Cstring\u003E\r\n        {\r\n            \u0022permission1\u0022,\r\n            \u0022permission2\u0022\r\n        }\r\n    };\r\n    var request = new HttpRequestMessage(HttpMethod.Put, $\u0022/api/roles\u0022);\r\n    request.Headers.Authorization = new AuthenticationHeaderValue(\u0022Bearer\u0022, await LoginHelper.LoginAsAdminUserAndGetTokenAsync(_httpClient));\r\n    request.Content = input.ToStringContent(Encoding.UTF8, \u0022application/json\u0022);\r\n    var response = await _httpClient.SendAsync(request);\r\n    Assert.Equal(HttpStatusCode.OK, response.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Delete_Role",
        "Body": "{\r\n    var request = new HttpRequestMessage(HttpMethod.Delete, $\u0022/api/roles/{TestDataBuilderForRoles.TestRoleForDelete.Id}\u0022);\r\n    request.Headers.Authorization = new AuthenticationHeaderValue(\u0022Bearer\u0022, await LoginHelper.LoginAsAdminUserAndGetTokenAsync(_httpClient));\r\n    var response = await _httpClient.SendAsync(request);\r\n    Assert.Equal(HttpStatusCode.OK, response.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UsersIntegrationTests",
    "Message": null,
    "ProjectName": "BackOfficeBase.Tests.IntegrationTests",
    "Methods": [
      {
        "Name": "Should_Get_User",
        "Body": "{\r\n    var request = new HttpRequestMessage(HttpMethod.Get, $\u0022/api/users/{TestDataBuilderForUsers.TestUserForGet.Id}\u0022);\r\n    request.Headers.Authorization = new AuthenticationHeaderValue(\u0022Bearer\u0022, await LoginHelper.LoginAsAdminUserAndGetTokenAsync(_httpClient));\r\n    var response = await _httpClient.SendAsync(request);\r\n    var user = await response.Content.ReadAsAsync\u003CUserOutput\u003E();\r\n    Assert.Equal(HttpStatusCode.OK, response.StatusCode);\r\n    Assert.Equal(TestDataBuilderForUsers.TestUserForGet.Id, user.Id);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Get_Users",
        "Body": "{\r\n    var request = new HttpRequestMessage(HttpMethod.Get, $\u0022/api/users\u0022);\r\n    request.Headers.Authorization = new AuthenticationHeaderValue(\u0022Bearer\u0022, await LoginHelper.LoginAsAdminUserAndGetTokenAsync(_httpClient));\r\n    var response = await _httpClient.SendAsync(request);\r\n    var users = await response.Content.ReadAsAsync\u003CPagedListResult\u003CUserListOutput\u003E\u003E();\r\n    Assert.Equal(HttpStatusCode.OK, response.StatusCode);\r\n    Assert.True(users.Items.Any());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Create_User",
        "Body": "{\r\n    var input = new CreateUserInput\r\n    {\r\n        Email = \u0022CreateTestUserEmail_\u0022 \u002B Guid.NewGuid() \u002B \u0022@mail.com\u0022,\r\n        UserName = \u0022CreateTestUserName_\u0022 \u002B Guid.NewGuid(),\r\n        SelectedPermissions = new List\u003Cstring\u003E\r\n        {\r\n            \u0022permission1\u0022,\r\n            \u0022permission2\u0022\r\n        }\r\n    };\r\n    var request = new HttpRequestMessage(HttpMethod.Post, $\u0022/api/users\u0022);\r\n    request.Headers.Authorization = new AuthenticationHeaderValue(\u0022Bearer\u0022, await LoginHelper.LoginAsAdminUserAndGetTokenAsync(_httpClient));\r\n    request.Content = input.ToStringContent(Encoding.UTF8, \u0022application/json\u0022);\r\n    var response = await _httpClient.SendAsync(request);\r\n    Assert.Equal(HttpStatusCode.OK, response.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Update_User",
        "Body": "{\r\n    var input = new UpdateUserInput\r\n    {\r\n        Email = TestDataBuilderForUsers.TestUserForUpdate.Email,\r\n        UserName = TestDataBuilderForUsers.TestUserForUpdate.UserName,\r\n        SelectedPermissions = new List\u003Cstring\u003E\r\n        {\r\n            \u0022permission1\u0022,\r\n            \u0022permission2\u0022\r\n        },\r\n        FirstName = \u0022Update FirstName\u0022,\r\n        LastName = \u0022Updated LastName\u0022\r\n    };\r\n    var request = new HttpRequestMessage(HttpMethod.Put, $\u0022/api/users\u0022);\r\n    request.Headers.Authorization = new AuthenticationHeaderValue(\u0022Bearer\u0022, await LoginHelper.LoginAsAdminUserAndGetTokenAsync(_httpClient));\r\n    request.Content = input.ToStringContent(Encoding.UTF8, \u0022application/json\u0022);\r\n    var response = await _httpClient.SendAsync(request);\r\n    Assert.Equal(HttpStatusCode.OK, response.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Delete_User",
        "Body": "{\r\n    var request = new HttpRequestMessage(HttpMethod.Delete, $\u0022/api/users/{TestDataBuilderForUsers.TestUserForDelete.Id}\u0022);\r\n    request.Headers.Authorization = new AuthenticationHeaderValue(\u0022Bearer\u0022, await LoginHelper.LoginAsAdminUserAndGetTokenAsync(_httpClient));\r\n    var response = await _httpClient.SendAsync(request);\r\n    Assert.Equal(HttpStatusCode.OK, response.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  }
]