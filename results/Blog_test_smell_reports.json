[
  {
    "Name": "PostServiceTests",
    "Message": null,
    "ProjectName": "Blog.Services.Tests",
    "Methods": [
      {
        "Name": "search_posts_by_title_and_paging",
        "Body": "{\r\n    var postPageResult = _postService.SearchPosts(title: \u0022po\u0022, pageIndex: 0, pageSize: 2);\r\n    Assert.NotNull(postPageResult);\r\n    Assert.True(postPageResult.TotalPages == 2);\r\n    Assert.True(postPageResult.TotalCount == 3);\r\n    Assert.True(postPageResult.Items.Count == 2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SignInManagerTests",
    "Message": null,
    "ProjectName": "Blog.Services.Tests",
    "Methods": [
      {
        "Name": "create_user_hashed_password_and_salt",
        "Body": "{\r\n    var user = new User\r\n    {\r\n        FirstName = \u0022fn test\u0022,\r\n        LastName = \u0022ln test\u0022,\r\n        UserName = \u0022user_test\u0022,\r\n        Email = \u0022user@test.com\u0022,\r\n        Active = true,\r\n        CreatedOnUtc = DateTime.UtcNow\r\n    };\r\n    _signInManager.CreatePassword(user, \u0022123\u0022);\r\n    Assert.NotEmpty(user.HashedPassword);\r\n    Assert.NotEmpty(user.Salt);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "user_sign_in",
        "Body": "{\r\n    var user = new User\r\n    {\r\n        FirstName = \u0022fn test\u0022,\r\n        LastName = \u0022ln test\u0022,\r\n        UserName = \u0022user_test\u0022,\r\n        Email = \u0022user@test.com\u0022,\r\n        Active = true,\r\n        CreatedOnUtc = DateTime.UtcNow\r\n    };\r\n    _signInManager.CreatePassword(user, \u0022123\u0022);\r\n    _repositoryUser.Setup(x =\u003E x.Table).Returns(new List\u003CUser\u003E { user }.AsQueryable());\r\n    _signInManager = new SignInManager(_repositoryUser.Object);\r\n    Assert.True(_signInManager.SignIn(\u0022user_test\u0022, \u0022123\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "BasicTests",
    "Message": null,
    "ProjectName": "Blog.API.IntegrationTests",
    "Methods": [
      {
        "Name": "Get_EndpointsReturnSuccessAndCorrectContentType",
        "Body": "{\r\n    // Arrange\r\n    var client = _factory.CreateClient();\r\n    // Act\r\n    var response = await client.GetAsync(url);\r\n    // Assert\r\n    response.EnsureSuccessStatusCode(); // Status Code 200-299\r\n    Assert.Equal(\u0022text/html; charset=utf-8\u0022, response.Content.Headers.ContentType.ToString());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigureTests",
    "Message": null,
    "ProjectName": "Blog.API.IntegrationTests",
    "Methods": [
      {
        "Name": "ConfigureServices_RegistersDependenciesCorrectly",
        "Body": "{\r\n    var connectionStrings = new Dictionary\u003Cstring, string\u003E\r\n    {\r\n        [\u0022ConnectionStrings:DefaultConnection\u0022] = \u0022test.connection.strings\u0022,\r\n    };\r\n    var jwt = new Dictionary\u003Cstring, string\u003E\r\n    {\r\n        [\u0022Jwt:IssuerSigningKey\u0022] = \u0022testSuperSecretKey@365\u0022,\r\n        [\u0022Jwt:ValidIssuer\u0022] = \u0022http://localhost:1111\u0022,\r\n        [\u0022Jwt:ValidAudience\u0022] = \u0022http://localhost:1111\u0022,\r\n        [\u0022Jwt:Expires\u0022] = \u0022300\u0022\r\n    };\r\n    var builder = new ConfigurationBuilder();\r\n    builder.AddInMemoryCollection(connectionStrings);\r\n    builder.AddInMemoryCollection(jwt);\r\n    var configuration = (IConfiguration)builder.Build();\r\n    var services = new ServiceCollection();\r\n    var target = new FakeStartup(configuration);\r\n    target.ConfigureServices(services);\r\n    services.AddTransient\u003CAPI.Controllers.V1.PostsController\u003E();\r\n    var serviceProvider = services.BuildServiceProvider();\r\n    var controller = serviceProvider.GetService\u003CAPI.Controllers.V1.PostsController\u003E();\r\n    Assert.NotNull(controller);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AuthControllerTests",
    "Message": null,
    "ProjectName": "Blog.API.IntegrationTests",
    "Methods": [
      {
        "Name": "Get_Token_Authorized",
        "Body": "{\r\n    // Arrange\r\n    var user = new LoginModel\r\n    {\r\n        UserName = \u0022user1\u0022,\r\n        Password = \u0022123\u0022\r\n    };\r\n    var userContent = new StringContent(JsonConvert.SerializeObject(user), System.Text.Encoding.UTF8, \u0022application/json\u0022);\r\n    var httpResponse = await _client.PostAsync($\u0022/{version}/auth/token\u0022, userContent);\r\n    // Must be successful.\r\n    httpResponse.EnsureSuccessStatusCode();\r\n    // Deserialize and examine results.\r\n    var stringResponse = await httpResponse.Content.ReadAsStringAsync();\r\n    var tokenModel = JsonConvert.DeserializeObject\u003CTokenModel\u003E(stringResponse);\r\n    //Assert\r\n    Assert.True(httpResponse.StatusCode == HttpStatusCode.OK);\r\n    Assert.NotNull(tokenModel.access_token);\r\n    Assert.True(tokenModel.expires_in \u003E 0);\r\n    Assert.True(tokenModel.token_type == \u0022bearer\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_Token_Unauthorized",
        "Body": "{\r\n    // Arrange\r\n    var user = new LoginModel\r\n    {\r\n        UserName = \u0022user1\u0022,\r\n        Password = \u0022111\u0022\r\n    };\r\n    var userContent = new StringContent(JsonConvert.SerializeObject(user), System.Text.Encoding.UTF8, \u0022application/json\u0022);\r\n    var httpResponse = await _client.PostAsync($\u0022/{version}/auth/token\u0022, userContent);\r\n    // Must be error.\r\n    //httpResponse.EnsureSuccessStatusCode();\r\n    //Assert\r\n    Assert.Throws\u003CHttpRequestException\u003E(() =\u003E httpResponse.EnsureSuccessStatusCode());\r\n    Assert.True(httpResponse.StatusCode == HttpStatusCode.Unauthorized);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PostsControllerTests",
    "Message": null,
    "ProjectName": "Blog.API.IntegrationTests",
    "Methods": [
      {
        "Name": "Get_Posts_Paging",
        "Body": "{\r\n    // Arrange\r\n    var queryString = ToQueryString(new PostPageOptionsModel { Title = \u0022pos\u0022, Page = 1, Count = 2 });\r\n    var httpResponse = await _client.GetAsync($\u0022/{version}/Posts?{queryString}\u0022);\r\n    // Must be successful.\r\n    httpResponse.EnsureSuccessStatusCode();\r\n    // Deserialize and examine results.\r\n    var stringResponse = await httpResponse.Content.ReadAsStringAsync();\r\n    var postPageResult = JsonConvert.DeserializeObject\u003CPostPageResultModel\u003E(stringResponse);\r\n    //Assert\r\n    Assert.True(httpResponse.StatusCode == HttpStatusCode.OK);\r\n    //Add_Post_Authorized_With_Token\r\n    ///Assert.True(postPageResult.TotalPages == 2);\n    ///Assert.True(postPageResult.TotalCount == 3);\n    Assert.True(postPageResult.Items.Count == 2);\r\n    Assert.False(postPageResult.HasPreviousPage);\r\n    Assert.True(postPageResult.HasNextPage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Add_Post_Unauthorized",
        "Body": "{\r\n    // Arrange\r\n    var post = new PostModel\r\n    {\r\n        Title = \u0022t post4\u0022,\r\n        Body = \u0022b post4\u0022,\r\n        BodyOverview = \u0022bo post4\u0022,\r\n        Tags = \u0022tg post4\u0022,\r\n        MetaTitle = \u0022mt post4\u0022,\r\n        MetaKeywords = \u0022mk post4\u0022,\r\n        MetaDescription = \u0022md post4\u0022,\r\n        StartDateUtc = DateTime.UtcNow.AddHours(2),\r\n        CreatedOnUtc = DateTime.UtcNow,\r\n        EndDateUtc = DateTime.UtcNow.AddYears(5),\r\n        AllowComments = true\r\n    };\r\n    var postContent = new StringContent(JsonConvert.SerializeObject(post), System.Text.Encoding.UTF8, \u0022application/json\u0022);\r\n    var httpResponse = await _client.PostAsync($\u0022/{version}/Posts\u0022, postContent);\r\n    // Must be error.\r\n    //httpResponse.EnsureSuccessStatusCode();\r\n    //Assert\r\n    Assert.Throws\u003CHttpRequestException\u003E(() =\u003E\r\n    {\r\n        try\r\n        {\r\n            httpResponse.EnsureSuccessStatusCode();\r\n        }\r\n        catch (HttpRequestException ex)when (ex.Message.Contains(\u0022401 (Unauthorized)\u0022))\r\n        {\r\n            //expected error for ok test\r\n            throw ex;\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            throw new Exception($\u0022other error message:{ex.Message}\u0022, ex);\r\n        }\r\n    });\r\n    Assert.Throws\u003CHttpRequestException\u003E(() =\u003E httpResponse.EnsureSuccessStatusCode());\r\n    Assert.True(httpResponse.StatusCode == HttpStatusCode.Unauthorized);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Add_Post_Authorized_With_Token",
        "Body": "{\r\n    // Arrange\r\n    var post = new PostModel\r\n    {\r\n        Title = \u0022t post4\u0022,\r\n        Body = \u0022b post4\u0022,\r\n        BodyOverview = \u0022bo post4\u0022,\r\n        Tags = \u0022tg post4\u0022,\r\n        MetaTitle = \u0022mt post4\u0022,\r\n        MetaKeywords = \u0022mk post4\u0022,\r\n        MetaDescription = \u0022md post4\u0022,\r\n        StartDateUtc = DateTime.UtcNow.AddHours(2),\r\n        CreatedOnUtc = DateTime.UtcNow,\r\n        EndDateUtc = DateTime.UtcNow.AddYears(5),\r\n        AllowComments = true\r\n    };\r\n    var postContent = new StringContent(JsonConvert.SerializeObject(post), System.Text.Encoding.UTF8, \u0022application/json\u0022);\r\n    _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\u0022Bearer\u0022, await GetToken(\u0022user1\u0022, \u0022123\u0022));\r\n    var httpResponse = await _client.PostAsync($\u0022/{version}/Posts\u0022, postContent);\r\n    // Must be successful.\r\n    httpResponse.EnsureSuccessStatusCode();\r\n    //Assert\r\n    Assert.True(httpResponse.StatusCode == HttpStatusCode.OK);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  }
]