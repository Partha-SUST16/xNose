[
  {
    "Name": "Calculator",
    "Message": null,
    "ProjectName": "MartinCostello.Logging.XUnit.Tests",
    "Methods": [
      {
        "Name": "Calculator_Sums_Two_Equal_Integers",
        "Body": "{\r\n    // Arrange using conversion to a logger\r\n    var calculator = new Calculator(OutputHelper.ToLogger\u003CCalculator\u003E());\r\n    // Act\r\n    int actual = calculator.Sum(2, 2);\r\n    // Assert\r\n    actual.ShouldBe(4);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Calculator_Sums_Two_Different_Integers",
        "Body": "{\r\n    // Arrange using the logging provider\r\n    var services = new ServiceCollection().AddLogging((builder) =\u003E builder.AddXUnit(OutputHelper)).AddSingleton\u003CCalculator\u003E();\r\n    IServiceProvider provider = services.BuildServiceProvider();\r\n    var calculator = provider.GetRequiredService\u003CCalculator\u003E();\r\n    // Act\r\n    int actual = calculator.Sum(1, 2);\r\n    // Assert\r\n    actual.ShouldBe(3);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Examples",
    "Message": null,
    "ProjectName": "MartinCostello.Logging.XUnit.Tests",
    "Methods": [
      {
        "Name": "Calculator_Sums_Two_Equal_Integers",
        "Body": "{\r\n    // Arrange using conversion to a logger\r\n    var calculator = new Calculator(OutputHelper.ToLogger\u003CCalculator\u003E());\r\n    // Act\r\n    int actual = calculator.Sum(2, 2);\r\n    // Assert\r\n    actual.ShouldBe(4);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Calculator_Sums_Two_Different_Integers",
        "Body": "{\r\n    // Arrange using the logging provider\r\n    var services = new ServiceCollection().AddLogging((builder) =\u003E builder.AddXUnit(OutputHelper)).AddSingleton\u003CCalculator\u003E();\r\n    IServiceProvider provider = services.BuildServiceProvider();\r\n    var calculator = provider.GetRequiredService\u003CCalculator\u003E();\r\n    // Act\r\n    int actual = calculator.Sum(1, 2);\r\n    // Assert\r\n    actual.ShouldBe(3);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "IntegrationTests",
    "Message": null,
    "ProjectName": "MartinCostello.Logging.XUnit.Tests",
    "Methods": [
      {
        "Name": "Can_Configure_xunit_For_ILoggerBuilder_TestOutputHelper",
        "Body": "{\r\n    // Arrange\r\n    var mock = new Mock\u003CITestOutputHelper\u003E();\r\n    var logger = BootstrapBuilder((builder) =\u003E builder.AddXUnit(mock.Object));\r\n    // Act\r\n    logger.LogError(\u0022This is a brand new problem, a problem without any clues.\u0022);\r\n    logger.LogInformation(\u0022If you know the clues, it\u0027s easy to get through.\u0022);\r\n    // Assert\r\n    mock.Verify((p) =\u003E p.WriteLine(It.IsNotNull\u003Cstring\u003E()), Times.Exactly(2));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Can_Configure_xunit_For_ILoggerBuilder_TestOutputHelper_With_Configuration",
        "Body": "{\r\n    // Arrange\r\n    var mock = new Mock\u003CITestOutputHelper\u003E();\r\n    var logger = BootstrapBuilder((builder) =\u003E\r\n    {\r\n        builder.AddXUnit(mock.Object, (options) =\u003E options.Filter = (_, level) =\u003E level \u003E= LogLevel.Error);\r\n    });\r\n    // Act\r\n    logger.LogError(\u0022This is a brand new problem, a problem without any clues.\u0022);\r\n    logger.LogTrace(\u0022If you know the clues, it\u0027s easy to get through.\u0022);\r\n    // Assert\r\n    mock.Verify((p) =\u003E p.WriteLine(It.IsNotNull\u003Cstring\u003E()), Times.Once());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Can_Configure_xunit_For_ILoggerBuilderAccessor_TestOutputHelper",
        "Body": "{\r\n    // Arrange\r\n    var mockOutputHelper = new Mock\u003CITestOutputHelper\u003E();\r\n    var outputHelper = mockOutputHelper.Object;\r\n    var mockAccessor = new Mock\u003CITestOutputHelperAccessor\u003E();\r\n    mockAccessor.Setup((p) =\u003E p.OutputHelper).Returns(outputHelper);\r\n    var accessor = mockAccessor.Object;\r\n    var logger = BootstrapBuilder((builder) =\u003E builder.AddXUnit(accessor));\r\n    // Act\r\n    logger.LogError(\u0022This is a brand new problem, a problem without any clues.\u0022);\r\n    logger.LogInformation(\u0022If you know the clues, it\u0027s easy to get through.\u0022);\r\n    // Assert\r\n    mockOutputHelper.Verify((p) =\u003E p.WriteLine(It.IsNotNull\u003Cstring\u003E()), Times.Exactly(2));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Can_Configure_xunit_For_ILoggerBuilder_TestOutputHelperAccessor_With_Configuration",
        "Body": "{\r\n    // Arrange\r\n    var mockOutputHelper = new Mock\u003CITestOutputHelper\u003E();\r\n    var outputHelper = mockOutputHelper.Object;\r\n    var mockAccessor = new Mock\u003CITestOutputHelperAccessor\u003E();\r\n    mockAccessor.Setup((p) =\u003E p.OutputHelper).Returns(outputHelper);\r\n    var accessor = mockAccessor.Object;\r\n    var logger = BootstrapBuilder((builder) =\u003E\r\n    {\r\n        builder.AddXUnit(mockOutputHelper.Object, (options) =\u003E options.Filter = (_, level) =\u003E level \u003E= LogLevel.Error);\r\n    });\r\n    // Act\r\n    logger.LogError(\u0022This is a brand new problem, a problem without any clues.\u0022);\r\n    logger.LogTrace(\u0022If you know the clues, it\u0027s easy to get through.\u0022);\r\n    // Assert\r\n    mockOutputHelper.Verify((p) =\u003E p.WriteLine(It.IsNotNull\u003Cstring\u003E()), Times.Once());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Can_Configure_xunit_For_ILoggerFactory",
        "Body": "{\r\n    // Arrange\r\n    var mock = new Mock\u003CITestOutputHelper\u003E();\r\n    var logger = BootstrapFactory((builder) =\u003E builder.AddXUnit(mock.Object));\r\n    // Act\r\n    logger.LogError(\u0022This is a brand new problem, a problem without any clues.\u0022);\r\n    logger.LogInformation(\u0022If you know the clues, it\u0027s easy to get through.\u0022);\r\n    // Assert\r\n    mock.Verify((p) =\u003E p.WriteLine(It.IsNotNull\u003Cstring\u003E()), Times.Exactly(2));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Can_Configure_xunit_For_ILoggerFactory_With_Filter",
        "Body": "{\r\n    // Arrange\r\n    var mock = new Mock\u003CITestOutputHelper\u003E();\r\n    var logger = BootstrapFactory((builder) =\u003E builder.AddXUnit(mock.Object, (_, level) =\u003E level \u003E= LogLevel.Error));\r\n    // Act\r\n    logger.LogError(\u0022This is a brand new problem, a problem without any clues.\u0022);\r\n    logger.LogWarning(\u0022If you know the clues, it\u0027s easy to get through.\u0022);\r\n    // Assert\r\n    mock.Verify((p) =\u003E p.WriteLine(It.IsNotNull\u003Cstring\u003E()), Times.Once());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Can_Configure_xunit_For_ILoggerFactory_With_Minimum_Level",
        "Body": "{\r\n    // Arrange\r\n    var mock = new Mock\u003CITestOutputHelper\u003E();\r\n    var logger = BootstrapFactory((builder) =\u003E builder.AddXUnit(mock.Object, LogLevel.Information));\r\n    // Act\r\n    logger.LogError(\u0022This is a brand new problem, a problem without any clues.\u0022);\r\n    logger.LogTrace(\u0022If you know the clues, it\u0027s easy to get through.\u0022);\r\n    // Assert\r\n    mock.Verify((p) =\u003E p.WriteLine(It.IsNotNull\u003Cstring\u003E()), Times.Once());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Can_Configure_xunit_For_ILoggerFactory_With_Options",
        "Body": "{\r\n    // Arrange\r\n    var mock = new Mock\u003CITestOutputHelper\u003E();\r\n    var options = new XUnitLoggerOptions()\r\n    {\r\n        Filter = (_, level) =\u003E level \u003E= LogLevel.Error,\r\n    };\r\n    var logger = BootstrapFactory((builder) =\u003E builder.AddXUnit(mock.Object, options));\r\n    // Act\r\n    logger.LogError(\u0022This is a brand new problem, a problem without any clues.\u0022);\r\n    logger.LogWarning(\u0022If you know the clues, it\u0027s easy to get through.\u0022);\r\n    // Assert\r\n    mock.Verify((p) =\u003E p.WriteLine(It.IsNotNull\u003Cstring\u003E()), Times.Once());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Can_Configure_xunit_For_ILoggerFactory_With_Options_Factory",
        "Body": "{\r\n    // Arrange\r\n    var mock = new Mock\u003CITestOutputHelper\u003E();\r\n    var options = new XUnitLoggerOptions()\r\n    {\r\n        Filter = (_, level) =\u003E level \u003E= LogLevel.Error,\r\n        TimestampFormat = \u0022yyyy-MM-dd HH:mm:ss.fff\u0022,\r\n    };\r\n    var logger = BootstrapFactory((builder) =\u003E builder.AddXUnit(mock.Object, () =\u003E options));\r\n    // Act\r\n    logger.LogError(\u0022This is a brand new problem, a problem without any clues.\u0022);\r\n    logger.LogWarning(\u0022If you know the clues, it\u0027s easy to get through.\u0022);\r\n    // Assert\r\n    mock.Verify((p) =\u003E p.WriteLine(It.IsNotNull\u003Cstring\u003E()), Times.Once());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Can_Configure_xunit_For_ILoggerFactory_With_Configure_Options",
        "Body": "{\r\n    // Arrange\r\n    var mock = new Mock\u003CITestOutputHelper\u003E();\r\n    var logger = BootstrapFactory((builder) =\u003E\r\n    {\r\n        builder.AddXUnit(mock.Object, (options) =\u003E options.Filter = (_, level) =\u003E level \u003E= LogLevel.Error);\r\n    });\r\n    // Act\r\n    logger.LogError(\u0022This is a brand new problem, a problem without any clues.\u0022);\r\n    logger.LogWarning(\u0022If you know the clues, it\u0027s easy to get through.\u0022);\r\n    // Assert\r\n    mock.Verify((p) =\u003E p.WriteLine(It.IsNotNull\u003Cstring\u003E()), Times.Once());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Can_Configure_xunit_For_ILoggerBuilder",
        "Body": "{\r\n    // Arrange\r\n    var serviceProvider = new ServiceCollection().AddLogging((builder) =\u003E builder.AddXUnit()).BuildServiceProvider();\r\n    var mock = new Mock\u003CITestOutputHelper\u003E();\r\n    serviceProvider.GetRequiredService\u003CITestOutputHelperAccessor\u003E().OutputHelper = mock.Object;\r\n    var logger = serviceProvider.GetRequiredService\u003CILogger\u003CXUnitLogger\u003E\u003E();\r\n    // Act\r\n    logger.LogError(\u0022This is a brand new problem, a problem without any clues.\u0022);\r\n    logger.LogInformation(\u0022If you know the clues, it\u0027s easy to get through.\u0022);\r\n    // Assert\r\n    mock.Verify((p) =\u003E p.WriteLine(It.IsNotNull\u003Cstring\u003E()), Times.Exactly(2));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DatabaseTests",
    "Message": null,
    "ProjectName": "MartinCostello.Logging.XUnit.Tests",
    "Methods": [
      {
        "Name": "Run_Database_Test",
        "Body": "{\r\n    DatabaseFixture.ConnectionString.ShouldNotBeEmpty();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HttpApplicationTests",
    "Message": null,
    "ProjectName": "MartinCostello.Logging.XUnit.Tests",
    "Methods": [
      {
        "Name": "Http_Get_Many",
        "Body": "{\r\n    // Arrange\r\n    using var httpClient = Fixture.CreateClient();\r\n    // Act\r\n    using var response = await httpClient.GetAsync(\u0022api/values\u0022);\r\n    // Assert\r\n    response.IsSuccessStatusCode.ShouldBeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Http_Get_Single",
        "Body": "{\r\n    // Arrange\r\n    using var httpClient = Fixture.CreateClient();\r\n    // Act\r\n    using var response = await httpClient.GetAsync(\u0022api/values/a\u0022);\r\n    // Assert\r\n    response.IsSuccessStatusCode.ShouldBeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Http_Post",
        "Body": "{\r\n    // Arrange\r\n    using var httpClient = Fixture.CreateClient();\r\n    // Act\r\n    using var response = await httpClient.PostAsJsonAsync(\u0022api/values\u0022, new { });\r\n    // Assert\r\n    response.IsSuccessStatusCode.ShouldBeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Http_Put",
        "Body": "{\r\n    // Arrange\r\n    using var httpClient = Fixture.CreateClient();\r\n    // Act\r\n    using var content = new StringContent(@\u0022\u0022\u0022d\u0022\u0022\u0022, Encoding.UTF8, MediaTypeNames.Application.Json);\r\n    using var response = await httpClient.PutAsync(\u0022api/values/d\u0022, content);\r\n    // Assert\r\n    response.IsSuccessStatusCode.ShouldBeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Http_Delete",
        "Body": "{\r\n    // Arrange\r\n    using var httpClient = Fixture.CreateClient();\r\n    // Act\r\n    using var response = await httpClient.DeleteAsync(\u0022api/values/d\u0022);\r\n    // Assert\r\n    response.IsSuccessStatusCode.ShouldBeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "XUnitLoggerExtensionsTests",
    "Message": null,
    "ProjectName": "MartinCostello.Logging.XUnit.Tests",
    "Methods": [
      {
        "Name": "AddXUnit_TestOutputHelper_For_ILoggerBuilder_Validates_Parameters",
        "Body": "{\r\n    // Arrange\r\n    var builder = Mock.Of\u003CILoggingBuilder\u003E();\r\n    var outputHelper = Mock.Of\u003CITestOutputHelper\u003E();\r\n    var accessor = Mock.Of\u003CITestOutputHelperAccessor\u003E();\r\n    // Act and Assert\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022builder\u0022, () =\u003E (null as ILoggingBuilder)!.AddXUnit());\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022builder\u0022, () =\u003E (null as ILoggingBuilder)!.AddXUnit(outputHelper));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022builder\u0022, () =\u003E (null as ILoggingBuilder)!.AddXUnit(outputHelper, ConfigureAction));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022builder\u0022, () =\u003E (null as ILoggingBuilder)!.AddXUnit(accessor));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022builder\u0022, () =\u003E (null as ILoggingBuilder)!.AddXUnit(accessor, ConfigureAction));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022accessor\u0022, () =\u003E builder.AddXUnit((null as ITestOutputHelperAccessor)!));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022accessor\u0022, () =\u003E builder.AddXUnit((null as ITestOutputHelperAccessor)!, ConfigureAction));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022outputHelper\u0022, () =\u003E builder.AddXUnit((null as ITestOutputHelper)!));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022outputHelper\u0022, () =\u003E builder.AddXUnit((null as ITestOutputHelper)!, ConfigureAction));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022configure\u0022, () =\u003E builder.AddXUnit(outputHelper, (null as Action\u003CXUnitLoggerOptions\u003E)!));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022configure\u0022, () =\u003E builder.AddXUnit(accessor, (null as Action\u003CXUnitLoggerOptions\u003E)!));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddXUnit_MessageSink_For_ILoggerBuilder_Validates_Parameters",
        "Body": "{\r\n    // Arrange\r\n    var builder = Mock.Of\u003CILoggingBuilder\u003E();\r\n    var messageSink = Mock.Of\u003CIMessageSink\u003E();\r\n    var accessor = Mock.Of\u003CIMessageSinkAccessor\u003E();\r\n    // Act and Assert\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022builder\u0022, () =\u003E (null as ILoggingBuilder)!.AddXUnit(messageSink));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022builder\u0022, () =\u003E (null as ILoggingBuilder)!.AddXUnit(messageSink, ConfigureAction));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022builder\u0022, () =\u003E (null as ILoggingBuilder)!.AddXUnit(accessor));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022builder\u0022, () =\u003E (null as ILoggingBuilder)!.AddXUnit(accessor, ConfigureAction));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022accessor\u0022, () =\u003E builder.AddXUnit((null as IMessageSinkAccessor)!));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022accessor\u0022, () =\u003E builder.AddXUnit((null as IMessageSinkAccessor)!, ConfigureAction));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022messageSink\u0022, () =\u003E builder.AddXUnit((null as IMessageSink)!));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022messageSink\u0022, () =\u003E builder.AddXUnit((null as IMessageSink)!, ConfigureAction));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022configure\u0022, () =\u003E builder.AddXUnit(messageSink, (null as Action\u003CXUnitLoggerOptions\u003E)!));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022configure\u0022, () =\u003E builder.AddXUnit(accessor, (null as Action\u003CXUnitLoggerOptions\u003E)!));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddXUnit_TestOutputHelper_For_ILoggerFactory_Validates_Parameters",
        "Body": "{\r\n    // Arrange\r\n    ILoggerFactory factory = NullLoggerFactory.Instance;\r\n    var logLevel = LogLevel.Information;\r\n    var outputHelper = Mock.Of\u003CITestOutputHelper\u003E();\r\n    var options = new XUnitLoggerOptions();\r\n    // Act and Assert\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022factory\u0022, () =\u003E (null as ILoggerFactory)!.AddXUnit(outputHelper));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022factory\u0022, () =\u003E (null as ILoggerFactory)!.AddXUnit(outputHelper, options));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022factory\u0022, () =\u003E (null as ILoggerFactory)!.AddXUnit(outputHelper, ConfigureAction));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022factory\u0022, () =\u003E (null as ILoggerFactory)!.AddXUnit(outputHelper, ConfigureFunction));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022factory\u0022, () =\u003E (null as ILoggerFactory)!.AddXUnit(outputHelper, Filter));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022factory\u0022, () =\u003E (null as ILoggerFactory)!.AddXUnit(outputHelper, logLevel));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022outputHelper\u0022, () =\u003E factory.AddXUnit((null as ITestOutputHelper)!));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022outputHelper\u0022, () =\u003E factory.AddXUnit((null as ITestOutputHelper)!, ConfigureAction));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022outputHelper\u0022, () =\u003E factory.AddXUnit((null as ITestOutputHelper)!, ConfigureFunction));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022outputHelper\u0022, () =\u003E factory.AddXUnit((null as ITestOutputHelper)!, Filter));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022outputHelper\u0022, () =\u003E factory.AddXUnit((null as ITestOutputHelper)!, logLevel));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022outputHelper\u0022, () =\u003E factory.AddXUnit((null as ITestOutputHelper)!, options));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022options\u0022, () =\u003E factory.AddXUnit(outputHelper, (null as XUnitLoggerOptions)!));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022configure\u0022, () =\u003E factory.AddXUnit(outputHelper, (null as Action\u003CXUnitLoggerOptions\u003E)!));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022configure\u0022, () =\u003E factory.AddXUnit(outputHelper, (null as Func\u003CXUnitLoggerOptions\u003E)!));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022filter\u0022, () =\u003E factory.AddXUnit(outputHelper, (null as Func\u003Cstring, LogLevel, bool\u003E)!));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddXUnit_MessageSink_For_ILoggerFactory_Validates_Parameters",
        "Body": "{\r\n    // Arrange\r\n    ILoggerFactory factory = NullLoggerFactory.Instance;\r\n    var logLevel = LogLevel.Information;\r\n    var messageSink = Mock.Of\u003CIMessageSink\u003E();\r\n    var options = new XUnitLoggerOptions();\r\n    // Act and Assert\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022factory\u0022, () =\u003E (null as ILoggerFactory)!.AddXUnit(messageSink));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022factory\u0022, () =\u003E (null as ILoggerFactory)!.AddXUnit(messageSink, options));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022factory\u0022, () =\u003E (null as ILoggerFactory)!.AddXUnit(messageSink, ConfigureAction));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022factory\u0022, () =\u003E (null as ILoggerFactory)!.AddXUnit(messageSink, ConfigureFunction));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022factory\u0022, () =\u003E (null as ILoggerFactory)!.AddXUnit(messageSink, Filter));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022factory\u0022, () =\u003E (null as ILoggerFactory)!.AddXUnit(messageSink, logLevel));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022messageSink\u0022, () =\u003E factory.AddXUnit((null as IMessageSink)!));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022messageSink\u0022, () =\u003E factory.AddXUnit((null as IMessageSink)!, ConfigureAction));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022messageSink\u0022, () =\u003E factory.AddXUnit((null as IMessageSink)!, ConfigureFunction));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022messageSink\u0022, () =\u003E factory.AddXUnit((null as IMessageSink)!, Filter));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022messageSink\u0022, () =\u003E factory.AddXUnit((null as IMessageSink)!, logLevel));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022messageSink\u0022, () =\u003E factory.AddXUnit((null as IMessageSink)!, options));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022options\u0022, () =\u003E factory.AddXUnit(messageSink, (null as XUnitLoggerOptions)!));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022configure\u0022, () =\u003E factory.AddXUnit(messageSink, (null as Action\u003CXUnitLoggerOptions\u003E)!));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022configure\u0022, () =\u003E factory.AddXUnit(messageSink, (null as Func\u003CXUnitLoggerOptions\u003E)!));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022filter\u0022, () =\u003E factory.AddXUnit(messageSink, (null as Func\u003Cstring, LogLevel, bool\u003E)!));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ToLoggerFactory_Validates_Parameters",
        "Body": "{\r\n    // Arrange\r\n    ITestOutputHelper? outputHelper = null;\r\n    IMessageSink? messageSink = null;\r\n    // Act and Assert\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022outputHelper\u0022, () =\u003E outputHelper!.ToLoggerFactory());\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022messageSink\u0022, () =\u003E messageSink!.ToLoggerFactory());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddXUnit_Registers_Services",
        "Body": "{\r\n    // Arrange\r\n    var services = new ServiceCollection();\r\n    // Act\r\n    services.AddLogging(c =\u003E c.AddXUnit());\r\n    // Assert\r\n    var serviceProvider = services.BuildServiceProvider();\r\n    serviceProvider.GetService\u003CILoggerProvider\u003E().ShouldBeOfType\u003CXUnitLoggerProvider\u003E();\r\n    serviceProvider.GetService\u003CITestOutputHelperAccessor\u003E().ShouldBeOfType\u003CAmbientTestOutputHelperAccessor\u003E();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddXUnit_ITestOutputHelperAccessor_Registers_Services",
        "Body": "{\r\n    // Arrange\r\n    var services = new ServiceCollection();\r\n    var accessor = Mock.Of\u003CITestOutputHelperAccessor\u003E();\r\n    // Act\r\n    services.AddLogging(c =\u003E c.AddXUnit(accessor));\r\n    // Assert\r\n    var serviceProvider = services.BuildServiceProvider();\r\n    serviceProvider.GetService\u003CILoggerProvider\u003E().ShouldBeOfType\u003CXUnitLoggerProvider\u003E();\r\n    serviceProvider.GetService\u003CITestOutputHelperAccessor\u003E().ShouldBe(accessor);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddXUnit_IMessageSinkAccessor_Registers_Services",
        "Body": "{\r\n    // Arrange\r\n    var services = new ServiceCollection();\r\n    var accessor = Mock.Of\u003CIMessageSinkAccessor\u003E();\r\n    // Act\r\n    services.AddLogging(c =\u003E c.AddXUnit(accessor));\r\n    // Assert\r\n    var serviceProvider = services.BuildServiceProvider();\r\n    serviceProvider.GetService\u003CILoggerProvider\u003E().ShouldBeOfType\u003CXUnitLoggerProvider\u003E();\r\n    serviceProvider.GetService\u003CIMessageSinkAccessor\u003E().ShouldBe(accessor);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddXUnit_ITestOutputHelper_Registers_Services",
        "Body": "{\r\n    // Arrange\r\n    var services = new ServiceCollection();\r\n    var testOutputHelper = Mock.Of\u003CITestOutputHelper\u003E();\r\n    // Act\r\n    services.AddLogging(c =\u003E c.AddXUnit(testOutputHelper));\r\n    // Assert\r\n    var serviceProvider = services.BuildServiceProvider();\r\n    serviceProvider.GetService\u003CILoggerProvider\u003E().ShouldBeOfType\u003CXUnitLoggerProvider\u003E();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddXUnit_IMessageSink_Registers_Services",
        "Body": "{\r\n    // Arrange\r\n    var services = new ServiceCollection();\r\n    var messageSink = Mock.Of\u003CIMessageSink\u003E();\r\n    // Act\r\n    services.AddLogging(c =\u003E c.AddXUnit(messageSink));\r\n    // Assert\r\n    var serviceProvider = services.BuildServiceProvider();\r\n    serviceProvider.GetService\u003CILoggerProvider\u003E().ShouldBeOfType\u003CXUnitLoggerProvider\u003E();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddXUnit_IMessageSink_With_LogLevel_Works",
        "Body": "{\r\n    // Arrange\r\n    var factory = NullLoggerFactory.Instance;\r\n    var messageSink = Mock.Of\u003CIMessageSink\u003E();\r\n    var minLevel = LogLevel.Debug;\r\n    // Act\r\n    factory.AddXUnit(messageSink, minLevel);\r\n    // Assert\r\n    ILogger logger = factory.CreateLogger(\u0022SomeLogger\u0022);\r\n    logger.LogInformation(\u0022Some message\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddXUnit_IMessageSink_With_Filter_Works",
        "Body": "{\r\n    // Arrange\r\n    var factory = NullLoggerFactory.Instance;\r\n    var messageSink = Mock.Of\u003CIMessageSink\u003E();\r\n    // Act\r\n    factory.AddXUnit(messageSink, (_) =\u003E\r\n    {\r\n    });\r\n    // Assert\r\n    ILogger logger = factory.CreateLogger(\u0022SomeLogger\u0022);\r\n    logger.LogInformation(\u0022Some message\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddXUnit_IMessageSink_With_Options_Works",
        "Body": "{\r\n    // Arrange\r\n    var factory = NullLoggerFactory.Instance;\r\n    var messageSink = Mock.Of\u003CIMessageSink\u003E();\r\n    var options = new XUnitLoggerOptions();\r\n    // Act\r\n    factory.AddXUnit(messageSink, options);\r\n    // Assert\r\n    ILogger logger = factory.CreateLogger(\u0022SomeLogger\u0022);\r\n    logger.LogInformation(\u0022Some message\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "XUnitLoggerProviderTests",
    "Message": null,
    "ProjectName": "MartinCostello.Logging.XUnit.Tests",
    "Methods": [
      {
        "Name": "XUnitLoggerProvider_TestOutputHelper_Constructor_Validates_Parameters",
        "Body": "{\r\n    // Arrange\r\n    var outputHelper = Mock.Of\u003CITestOutputHelper\u003E();\r\n    var accessor = Mock.Of\u003CITestOutputHelperAccessor\u003E();\r\n    var options = new XUnitLoggerOptions();\r\n    // Act and Assert\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022outputHelper\u0022, () =\u003E new XUnitLoggerProvider((null as ITestOutputHelper)!, options));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022accessor\u0022, () =\u003E new XUnitLoggerProvider((null as ITestOutputHelperAccessor)!, options));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022options\u0022, () =\u003E new XUnitLoggerProvider(outputHelper, null !));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022options\u0022, () =\u003E new XUnitLoggerProvider(accessor, null !));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XUnitLoggerProvider_MessageSink_Constructor_Validates_Parameters",
        "Body": "{\r\n    // Arrange\r\n    var messageSink = Mock.Of\u003CIMessageSink\u003E();\r\n    var accessor = Mock.Of\u003CIMessageSinkAccessor\u003E();\r\n    var options = new XUnitLoggerOptions();\r\n    // Act and Assert\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022messageSink\u0022, () =\u003E new XUnitLoggerProvider((null as IMessageSink)!, options));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022accessor\u0022, () =\u003E new XUnitLoggerProvider((null as IMessageSinkAccessor)!, options));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022options\u0022, () =\u003E new XUnitLoggerProvider(messageSink, null !));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022options\u0022, () =\u003E new XUnitLoggerProvider(accessor, null !));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XUnitLoggerProvider_Creates_Logger",
        "Body": "{\r\n    // Arrange\r\n    var testOutputHelper = Mock.Of\u003CITestOutputHelper\u003E();\r\n    var messageSink = Mock.Of\u003CIMessageSink\u003E();\r\n    var options = new XUnitLoggerOptions();\r\n    string categoryName = \u0022MyLogger\u0022;\r\n    using var target = constructor switch\r\n    {\r\n        Constructor.ITestOutputHelper =\u003E new XUnitLoggerProvider(testOutputHelper, options),\r\n        Constructor.IMessageSink =\u003E new XUnitLoggerProvider(messageSink, options),\r\n        _ =\u003E throw new ArgumentOutOfRangeException(nameof(constructor), constructor, null),\r\n    };\r\n    // Act\r\n    ILogger actual = target.CreateLogger(categoryName);\r\n    // Assert\r\n    actual.ShouldNotBeNull();\r\n    var xunit = actual.ShouldBeOfType\u003CXUnitLogger\u003E();\r\n    xunit.Name.ShouldBe(categoryName);\r\n    xunit.Filter.ShouldBeSameAs(options.Filter);\r\n    xunit.MessageSinkMessageFactory.ShouldBeSameAs(options.MessageSinkMessageFactory);\r\n    xunit.IncludeScopes.ShouldBeFalse();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "XUnitLoggerTests",
    "Message": null,
    "ProjectName": "MartinCostello.Logging.XUnit.Tests",
    "Methods": [
      {
        "Name": "XUnitLogger_Validates_Parameters",
        "Body": "{\r\n    // Arrange\r\n    string name = \u0022MyName\u0022;\r\n    var outputHelper = Mock.Of\u003CITestOutputHelper\u003E();\r\n    var options = new XUnitLoggerOptions()\r\n    {\r\n        Filter = FilterFalse,\r\n    };\r\n    // Act and Assert\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022name\u0022, () =\u003E new XUnitLogger(null !, outputHelper, options));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022outputHelper\u0022, () =\u003E new XUnitLogger(name, (null as ITestOutputHelper)!, options));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022messageSink\u0022, () =\u003E new XUnitLogger(name, (null as IMessageSink)!, options));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022accessor\u0022, () =\u003E new XUnitLogger(name, (null as ITestOutputHelperAccessor)!, options));\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022accessor\u0022, () =\u003E new XUnitLogger(name, (null as IMessageSinkAccessor)!, options));\r\n    // Arrange\r\n    var logger = new XUnitLogger(name, outputHelper, options);\r\n    // Act and Assert\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022value\u0022, () =\u003E logger.Filter = null !);\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022value\u0022, () =\u003E logger.MessageSinkMessageFactory = null !);\r\n    // Arrange\r\n    Func\u003Cstring?, LogLevel, bool\u003E filter = (_, _) =\u003E true;\r\n    // Act\r\n    logger.Filter = filter;\r\n    // Assert\r\n    logger.Filter.ShouldBeSameAs(filter);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XUnitLogger_Constructor_Initializes_Instance",
        "Body": "{\r\n    // Arrange\r\n    string name = \u0022MyName\u0022;\r\n    var testOutputHelper = Mock.Of\u003CITestOutputHelper\u003E();\r\n    var messageSink = Mock.Of\u003CIMessageSink\u003E();\r\n    var options = new XUnitLoggerOptions()\r\n    {\r\n        Filter = FilterTrue,\r\n        MessageSinkMessageFactory = DiagnosticMessageFactory,\r\n        IncludeScopes = true,\r\n    };\r\n    XUnitLogger CreateLogger(XUnitLoggerOptions? opts)\r\n    {\r\n        return constructor switch\r\n        {\r\n            Constructor.ITestOutputHelper =\u003E new XUnitLogger(name, testOutputHelper, opts),\r\n            Constructor.IMessageSink =\u003E new XUnitLogger(name, messageSink, opts),\r\n            _ =\u003E throw new ArgumentOutOfRangeException(nameof(constructor), constructor, null),\r\n        };\r\n    }\r\n\r\n    // Act\r\n    var actual = CreateLogger(options);\r\n    // Assert\r\n    actual.Filter.ShouldBeSameAs(options.Filter);\r\n    actual.MessageSinkMessageFactory.ShouldBeSameAs(options.MessageSinkMessageFactory);\r\n    actual.IncludeScopes.ShouldBeTrue();\r\n    actual.Name.ShouldBe(name);\r\n    // Act\r\n    actual = CreateLogger(null);\r\n    // Assert\r\n    actual.Filter.ShouldNotBeNull();\r\n    actual.Filter(null, LogLevel.None).ShouldBeTrue();\r\n    actual.MessageSinkMessageFactory.ShouldNotBeNull();\r\n    actual.MessageSinkMessageFactory(\u0022message\u0022).ShouldBeOfType\u003CDiagnosticMessage\u003E();\r\n    actual.IncludeScopes.ShouldBeFalse();\r\n    actual.Name.ShouldBe(name);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XUnitLogger_BeginScope_Returns_Value",
        "Body": "{\r\n    // Arrange\r\n    string name = \u0022MyName\u0022;\r\n    var outputHelper = Mock.Of\u003CITestOutputHelper\u003E();\r\n    var options = new XUnitLoggerOptions();\r\n    var logger = new XUnitLogger(name, outputHelper, options);\r\n    // Act\r\n    using IDisposable actual = logger.BeginScope(true);\r\n    // Assert\r\n    actual.ShouldNotBeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XUnitLogger_BeginScope_Throws_If_State_Is_Null",
        "Body": "{\r\n    // Arrange\r\n    string name = \u0022MyName\u0022;\r\n    var outputHelper = Mock.Of\u003CITestOutputHelper\u003E();\r\n    var options = new XUnitLoggerOptions();\r\n    var logger = new XUnitLogger(name, outputHelper, options);\r\n    // Act\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022state\u0022, () =\u003E logger.BeginScope(null as string));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XUnitLogger_IsEnabled_Returns_Correct_Result",
        "Body": "{\r\n    // Arrange\r\n    string name = \u0022MyName\u0022;\r\n    var outputHelper = Mock.Of\u003CITestOutputHelper\u003E();\r\n    bool CustomFilter(string? categoryName, LogLevel level)\r\n    {\r\n        categoryName.ShouldBe(name);\r\n        level.ShouldBe(logLevel);\r\n        return level \u003E LogLevel.Information;\r\n    }\r\n\r\n    var options = new XUnitLoggerOptions()\r\n    {\r\n        Filter = CustomFilter,\r\n    };\r\n    var logger = new XUnitLogger(name, outputHelper, options);\r\n    // Act\r\n    bool actual = logger.IsEnabled(logLevel);\r\n    // Assert\r\n    actual.ShouldBe(expected);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XUnitLogger_Log_Throws_If_Formatter_Is_Null",
        "Body": "{\r\n    // Arrange\r\n    string name = \u0022MyName\u0022;\r\n    var outputHelper = Mock.Of\u003CITestOutputHelper\u003E();\r\n    var options = new XUnitLoggerOptions();\r\n    var logger = new XUnitLogger(name, outputHelper, options);\r\n    // Act and Assert\r\n    Assert.Throws\u003CArgumentNullException\u003E(\u0022formatter\u0022, () =\u003E logger.Log(LogLevel.Information, new EventId(2), true, null, null !));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XUnitLogger_Log_Throws_If_LogLevel_Is_Invalid",
        "Body": "{\r\n    // Arrange\r\n    string name = \u0022MyName\u0022;\r\n    var outputHelper = Mock.Of\u003CITestOutputHelper\u003E();\r\n    var options = new XUnitLoggerOptions();\r\n    var logger = new XUnitLogger(name, outputHelper, options);\r\n    // Act and Assert\r\n    Assert.Throws\u003CArgumentOutOfRangeException\u003E(\u0022logLevel\u0022, () =\u003E logger.Log((LogLevel)int.MaxValue, 0, \u0022state\u0022, null, Formatter));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XUnitLogger_Log_Does_Nothing_If_Not_Enabled",
        "Body": "{\r\n    // Arrange\r\n    var mock = new Mock\u003CITestOutputHelper\u003E();\r\n    string name = \u0022MyName\u0022;\r\n    var outputHelper = mock.Object;\r\n    var options = new XUnitLoggerOptions()\r\n    {\r\n        Filter = FilterFalse,\r\n    };\r\n    var logger = new XUnitLogger(name, outputHelper, options);\r\n    // Act\r\n    logger.Log(LogLevel.Information, new EventId(2), \u0022state\u0022, null, Formatter);\r\n    // Assert\r\n    mock.Verify((p) =\u003E p.WriteLine(It.IsAny\u003Cstring\u003E()), Times.Never());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XUnitLogger_Log_Does_Nothing_If_Null_Message_And_No_Exception",
        "Body": "{\r\n    // Arrange\r\n    var mock = new Mock\u003CITestOutputHelper\u003E();\r\n    string name = \u0022MyName\u0022;\r\n    var outputHelper = mock.Object;\r\n    var options = new XUnitLoggerOptions()\r\n    {\r\n        Filter = FilterTrue,\r\n    };\r\n    var logger = new XUnitLogger(name, outputHelper, options);\r\n    // Act\r\n    logger.Log(LogLevel.Information, new EventId(2), \u0022state\u0022, null, FormatterNull);\r\n    // Assert\r\n    mock.Verify((p) =\u003E p.WriteLine(It.IsAny\u003Cstring\u003E()), Times.Never());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XUnitLogger_Log_Does_Nothing_If_Empty_Message_And_No_Exception",
        "Body": "{\r\n    // Arrange\r\n    var mock = new Mock\u003CITestOutputHelper\u003E();\r\n    string name = \u0022MyName\u0022;\r\n    var outputHelper = mock.Object;\r\n    var options = new XUnitLoggerOptions()\r\n    {\r\n        Filter = FilterTrue,\r\n    };\r\n    var logger = new XUnitLogger(name, outputHelper, options);\r\n    // Act\r\n    logger.Log(LogLevel.Information, new EventId(2), \u0022state\u0022, null, FormatterEmpty);\r\n    // Assert\r\n    mock.Verify((p) =\u003E p.WriteLine(It.IsAny\u003Cstring\u003E()), Times.Never());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XUnitLogger_Log_Does_Nothing_If_No_OutputHelper",
        "Body": "{\r\n    // Arrange\r\n    string name = \u0022MyName\u0022;\r\n    var accessor = Mock.Of\u003CITestOutputHelperAccessor\u003E();\r\n    var options = new XUnitLoggerOptions()\r\n    {\r\n        Filter = FilterTrue,\r\n    };\r\n    var logger = new XUnitLogger(name, accessor, options);\r\n    // Act (no Assert)\r\n    logger.Log(LogLevel.Information, new EventId(2), \u0022state\u0022, null, Formatter);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XUnitLogger_Log_Logs_Message_If_Only_Exception",
        "Body": "{\r\n    // Arrange\r\n    var mock = new Mock\u003CITestOutputHelper\u003E();\r\n    string name = \u0022MyName\u0022;\r\n    var outputHelper = mock.Object;\r\n    var options = new XUnitLoggerOptions()\r\n    {\r\n        Filter = FilterTrue,\r\n    };\r\n    var logger = new XUnitLogger(name, outputHelper, options)\r\n    {\r\n        Clock = StaticClock,\r\n    };\r\n    var exception = new InvalidOperationException(\u0022Invalid\u0022);\r\n    string expected = string.Join(Environment.NewLine, new[] { \u0022[2018-08-19 16:12:16Z] info: MyName[2]\u0022, \u0022System.InvalidOperationException: Invalid\u0022 });\r\n    // Act\r\n    logger.Log(LogLevel.Information, new EventId(2), \u0022state\u0022, exception, FormatterNull);\r\n    // Assert\r\n    mock.Verify((p) =\u003E p.WriteLine(expected), Times.Once());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XUnitLogger_Log_Logs_Message_If_Message_And_Exception",
        "Body": "{\r\n    // Arrange\r\n    var mock = new Mock\u003CITestOutputHelper\u003E();\r\n    string name = \u0022MyName\u0022;\r\n    var outputHelper = mock.Object;\r\n    var options = new XUnitLoggerOptions()\r\n    {\r\n        Filter = FilterTrue,\r\n    };\r\n    var logger = new XUnitLogger(name, outputHelper, options)\r\n    {\r\n        Clock = StaticClock,\r\n    };\r\n    var exception = new InvalidOperationException(\u0022Invalid\u0022);\r\n    string expected = string.Join(Environment.NewLine, new[] { \u0022[2018-08-19 16:12:16Z] warn: MyName[3]\u0022, \u0022      Message|False|True\u0022, \u0022System.InvalidOperationException: Invalid\u0022 });\r\n    // Act\r\n    logger.Log\u003Cstring\u003E(LogLevel.Warning, new EventId(3), null, exception, Formatter);\r\n    // Assert\r\n    mock.Verify((p) =\u003E p.WriteLine(expected), Times.Once());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XUnitLogger_Log_Logs_Message_If_Message_And_No_Exception",
        "Body": "{\r\n    // Arrange\r\n    var mock = new Mock\u003CITestOutputHelper\u003E();\r\n    string name = \u0022MyName\u0022;\r\n    var outputHelper = mock.Object;\r\n    var options = new XUnitLoggerOptions()\r\n    {\r\n        Filter = FilterTrue,\r\n    };\r\n    var logger = new XUnitLogger(name, outputHelper, options)\r\n    {\r\n        Clock = StaticClock,\r\n    };\r\n    string expected = string.Join(Environment.NewLine, new[] { \u0022[2018-08-19 16:12:16Z] fail: MyName[4]\u0022, \u0022      Message|False|False\u0022 });\r\n    // Act\r\n    logger.Log\u003Cstring\u003E(LogLevel.Error, new EventId(4), null, null, Formatter);\r\n    // Assert\r\n    mock.Verify((p) =\u003E p.WriteLine(expected), Times.Once());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XUnitLogger_Log_Logs_Messages",
        "Body": "{\r\n    // Arrange\r\n    var mock = new Mock\u003CITestOutputHelper\u003E();\r\n    string name = \u0022Your Name\u0022;\r\n    var outputHelper = mock.Object;\r\n    var options = new XUnitLoggerOptions()\r\n    {\r\n        Filter = FilterTrue,\r\n    };\r\n    var logger = new XUnitLogger(name, outputHelper, options)\r\n    {\r\n        Clock = StaticClock,\r\n    };\r\n    string expected = string.Join(Environment.NewLine, new[] { $\u0022[2018-08-19 16:12:16Z] {shortLevel}: Your Name[85]\u0022, \u0022      Message|True|False\u0022 });\r\n    // Act\r\n    logger.Log(logLevel, new EventId(85), \u0022Martin\u0022, null, Formatter);\r\n    // Assert\r\n    mock.Verify((p) =\u003E p.WriteLine(expected), Times.Once());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XUnitLogger_Log_Logs_Very_Long_Messages",
        "Body": "{\r\n    // Arrange\r\n    var mock = new Mock\u003CITestOutputHelper\u003E();\r\n    string name = \u0022MyName\u0022;\r\n    var outputHelper = mock.Object;\r\n    var options = new XUnitLoggerOptions()\r\n    {\r\n        Filter = FilterTrue,\r\n    };\r\n    var logger = new XUnitLogger(name, outputHelper, options);\r\n    // Act\r\n    logger.Log(LogLevel.Information, 1, \u0022state\u0022, null, FormatterLong);\r\n    // Assert\r\n    mock.Verify((p) =\u003E p.WriteLine(It.Is\u003Cstring\u003E((r) =\u003E r.Length \u003E 1024)), Times.Once());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XUnitLogger_Log_Logs_Message_If_Scopes_Included_But_There_Are_No_Scopes",
        "Body": "{\r\n    // Arrange\r\n    var mock = new Mock\u003CITestOutputHelper\u003E();\r\n    string name = \u0022MyName\u0022;\r\n    var outputHelper = mock.Object;\r\n    var options = new XUnitLoggerOptions()\r\n    {\r\n        Filter = FilterTrue,\r\n        IncludeScopes = true,\r\n    };\r\n    var logger = new XUnitLogger(name, outputHelper, options)\r\n    {\r\n        Clock = StaticClock,\r\n    };\r\n    string expected = string.Join(Environment.NewLine, new[] { \u0022[2018-08-19 16:12:16Z] info: MyName[0]\u0022, \u0022      Message|False|False\u0022 });\r\n    // Act\r\n    logger.Log\u003Cstring\u003E(LogLevel.Information, 0, null, null, Formatter);\r\n    // Assert\r\n    mock.Verify((p) =\u003E p.WriteLine(expected), Times.Once());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XUnitLogger_Log_Logs_Message_If_Scopes_Included_And_There_Are_Scopes",
        "Body": "{\r\n    // Arrange\r\n    var mock = new Mock\u003CITestOutputHelper\u003E();\r\n    string name = \u0022MyName\u0022;\r\n    var outputHelper = mock.Object;\r\n    var options = new XUnitLoggerOptions()\r\n    {\r\n        Filter = FilterTrue,\r\n        IncludeScopes = true,\r\n    };\r\n    var logger = new XUnitLogger(name, outputHelper, options)\r\n    {\r\n        Clock = StaticClock,\r\n    };\r\n    string expected = string.Join(Environment.NewLine, \u0022[2018-08-19 16:12:16Z] info: MyName[0]\u0022, \u0022      =\u003E _\u0022, \u0022        =\u003E __\u0022, \u0022          =\u003E ___\u0022, \u0022            =\u003E {OriginalFormat}: [null]\u0022, \u0022      Message|False|False\u0022);\r\n    // Act\r\n    using (logger.BeginScope(\u0022_\u0022))\r\n    {\r\n        using (logger.BeginScope(\u0022__\u0022))\r\n        {\r\n            using (logger.BeginScope(\u0022___\u0022))\r\n            {\r\n#pragma warning disable CA2254\r\n                using (logger.BeginScope(null !))\r\n#pragma warning restore CA2254\r\n                {\r\n                    logger.Log\u003Cstring\u003E(LogLevel.Information, 0, null, null, Formatter);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    mock.Verify((p) =\u003E p.WriteLine(expected), Times.Once());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XUnitLogger_Log_Logs_Message_If_Scopes_Included_And_There_Is_Scope_Of_KeyValuePair",
        "Body": "{\r\n    // Arrange\r\n    var mock = new Mock\u003CITestOutputHelper\u003E();\r\n    string name = \u0022MyName\u0022;\r\n    var outputHelper = mock.Object;\r\n    var options = new XUnitLoggerOptions()\r\n    {\r\n        Filter = FilterTrue,\r\n        IncludeScopes = true,\r\n    };\r\n    var logger = new XUnitLogger(name, outputHelper, options)\r\n    {\r\n        Clock = StaticClock,\r\n    };\r\n    string expected = string.Join(Environment.NewLine, \u0022[2018-08-19 16:12:16Z] info: MyName[0]\u0022, \u0022      =\u003E ScopeKey: ScopeValue\u0022, \u0022      Message|False|False\u0022);\r\n    // Act\r\n    using (logger.BeginScope(new[] { new KeyValuePair\u003Cstring, object\u003E(\u0022ScopeKey\u0022, \u0022ScopeValue\u0022), }))\r\n    {\r\n        logger.Log\u003Cstring\u003E(LogLevel.Information, 0, null, null, Formatter);\r\n    }\r\n\r\n    // Assert\r\n    mock.Verify((p) =\u003E p.WriteLine(expected), Times.Once());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XUnitLogger_Log_Logs_Message_If_Scopes_Included_And_There_Is_Scope_Of_KeyValuePairs",
        "Body": "{\r\n    // Arrange\r\n    var mock = new Mock\u003CITestOutputHelper\u003E();\r\n    string name = \u0022MyName\u0022;\r\n    var outputHelper = mock.Object;\r\n    var options = new XUnitLoggerOptions()\r\n    {\r\n        Filter = FilterTrue,\r\n        IncludeScopes = true,\r\n    };\r\n    var logger = new XUnitLogger(name, outputHelper, options)\r\n    {\r\n        Clock = StaticClock,\r\n    };\r\n    string expected = string.Join(Environment.NewLine, \u0022[2018-08-19 16:12:16Z] info: MyName[0]\u0022, \u0022      =\u003E ScopeKeyOne: ScopeValueOne\u0022, \u0022      =\u003E ScopeKeyTwo: ScopeValueTwo\u0022, \u0022      =\u003E ScopeKeyThree: ScopeValueThree\u0022, \u0022      Message|False|False\u0022);\r\n    // Act\r\n    using (logger.BeginScope(new[] { new KeyValuePair\u003Cstring, object\u003E(\u0022ScopeKeyOne\u0022, \u0022ScopeValueOne\u0022), new KeyValuePair\u003Cstring, object\u003E(\u0022ScopeKeyTwo\u0022, \u0022ScopeValueTwo\u0022), new KeyValuePair\u003Cstring, object\u003E(\u0022ScopeKeyThree\u0022, \u0022ScopeValueThree\u0022), }))\r\n    {\r\n        logger.Log\u003Cstring\u003E(LogLevel.Information, 0, null, null, Formatter);\r\n    }\r\n\r\n    // Assert\r\n    mock.Verify((p) =\u003E p.WriteLine(expected), Times.Once());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XUnitLogger_Log_Logs_Message_If_Scopes_Included_And_There_Are_Scopes_Of_KeyValuePairs",
        "Body": "{\r\n    // Arrange\r\n    var mock = new Mock\u003CITestOutputHelper\u003E();\r\n    string name = \u0022MyName\u0022;\r\n    var outputHelper = mock.Object;\r\n    var options = new XUnitLoggerOptions()\r\n    {\r\n        Filter = FilterTrue,\r\n        IncludeScopes = true,\r\n    };\r\n    var logger = new XUnitLogger(name, outputHelper, options)\r\n    {\r\n        Clock = StaticClock,\r\n    };\r\n    string expected = string.Join(Environment.NewLine, \u0022[2018-08-19 16:12:16Z] info: MyName[0]\u0022, \u0022      =\u003E ScopeKeyOne: ScopeValueOne\u0022, \u0022      =\u003E ScopeKeyTwo: ScopeValueTwo\u0022, \u0022      =\u003E ScopeKeyThree: ScopeValueThree\u0022, \u0022        =\u003E ScopeKeyFour: ScopeValueFour\u0022, \u0022        =\u003E ScopeKeyFive: ScopeValueFive\u0022, \u0022        =\u003E ScopeKeySix: ScopeValueSix\u0022, \u0022      Message|False|False\u0022);\r\n    // Act\r\n    using (logger.BeginScope(new[] { new KeyValuePair\u003Cstring, object\u003E(\u0022ScopeKeyOne\u0022, \u0022ScopeValueOne\u0022), new KeyValuePair\u003Cstring, object\u003E(\u0022ScopeKeyTwo\u0022, \u0022ScopeValueTwo\u0022), new KeyValuePair\u003Cstring, object\u003E(\u0022ScopeKeyThree\u0022, \u0022ScopeValueThree\u0022), }))\r\n    {\r\n        using (logger.BeginScope(new[] { new KeyValuePair\u003Cstring, object\u003E(\u0022ScopeKeyFour\u0022, \u0022ScopeValueFour\u0022), new KeyValuePair\u003Cstring, object\u003E(\u0022ScopeKeyFive\u0022, \u0022ScopeValueFive\u0022), new KeyValuePair\u003Cstring, object\u003E(\u0022ScopeKeySix\u0022, \u0022ScopeValueSix\u0022), }))\r\n        {\r\n            logger.Log\u003Cstring\u003E(LogLevel.Information, 0, null, null, Formatter);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    mock.Verify((p) =\u003E p.WriteLine(expected), Times.Once());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XUnitLogger_Log_Logs_Message_If_Scopes_Included_And_There_Is_Scope_Of_IEnumerable",
        "Body": "{\r\n    // Arrange\r\n    var mock = new Mock\u003CITestOutputHelper\u003E();\r\n    string name = \u0022MyName\u0022;\r\n    var outputHelper = mock.Object;\r\n    var options = new XUnitLoggerOptions()\r\n    {\r\n        Filter = FilterTrue,\r\n        IncludeScopes = true,\r\n    };\r\n    var logger = new XUnitLogger(name, outputHelper, options)\r\n    {\r\n        Clock = StaticClock,\r\n    };\r\n    string expected = string.Join(Environment.NewLine, \u0022[2018-08-19 16:12:16Z] info: MyName[0]\u0022, \u0022      =\u003E ScopeKeyOne\u0022, \u0022      =\u003E ScopeKeyTwo\u0022, \u0022      =\u003E ScopeKeyThree\u0022, \u0022      Message|False|False\u0022);\r\n    // Act\r\n    using (logger.BeginScope(new[] { \u0022ScopeKeyOne\u0022, \u0022ScopeKeyTwo\u0022, \u0022ScopeKeyThree\u0022 }))\r\n    {\r\n        logger.Log\u003Cstring\u003E(LogLevel.Information, 0, null, null, Formatter);\r\n    }\r\n\r\n    // Assert\r\n    mock.Verify((p) =\u003E p.WriteLine(expected), Times.Once());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  }
]