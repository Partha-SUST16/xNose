[
  {
    "Name": "JobCategoryControllerTests",
    "Message": null,
    "ProjectName": "BulletinBoard.Tests",
    "Methods": [
      {
        "Name": "Index_Given_ThreeResultsFromService_Should_ReturnCorrectNumberOfViewModels",
        "Body": "{\r\n    // Arrange\r\n    var items = new List\u003CJobCategory\u003E\r\n    {\r\n        new JobCategory(),\r\n        new JobCategory(),\r\n        new JobCategory()\r\n    };\r\n    var serviceMock = new Mock\u003CIJobCategoryService\u003E();\r\n    serviceMock.Setup(x =\u003E x.GetAllCategories()).ReturnsAsync(items);\r\n    var controller = new JobCategoryController(serviceMock.Object, _mapper);\r\n    // Act\r\n    var result = await controller.Index();\r\n    // Assert\r\n    var viewResult = (ViewResult)result;\r\n    var model = (IList\u003CJobCategoryViewModel\u003E)viewResult.Model;\r\n    Assert.Equal(3, model.Count);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Index_Given_NoResultsFromService_Should_ReturnEmptyModel",
        "Body": "{\r\n    // Arrange\r\n    var serviceMock = new Mock\u003CIJobCategoryService\u003E();\r\n    serviceMock.Setup(x =\u003E x.GetAllCategories()).ReturnsAsync(new List\u003CJobCategory\u003E());\r\n    var controller = new JobCategoryController(serviceMock.Object, _mapper);\r\n    // Act\r\n    var result = await controller.Index();\r\n    // Assert\r\n    var viewResult = (ViewResult)result;\r\n    var model = (IList\u003CJobCategoryViewModel\u003E)viewResult.Model;\r\n    Assert.Empty(model);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Index_Given_ResultFromService_Should_ReturnViewModelWithExpectedName",
        "Body": "{\r\n    // Arrange\r\n    const string expectedName = \u0022Example\u0022;\r\n    var items = new List\u003CJobCategory\u003E\r\n    {\r\n        new JobCategory\r\n        {\r\n            Name = expectedName\r\n        }\r\n    };\r\n    var serviceMock = new Mock\u003CIJobCategoryService\u003E();\r\n    serviceMock.Setup(x =\u003E x.GetAllCategories()).ReturnsAsync(items);\r\n    var controller = new JobCategoryController(serviceMock.Object, _mapper);\r\n    // Act\r\n    var result = await controller.Index();\r\n    // Assert\r\n    var viewResult = (ViewResult)result;\r\n    var model = (IList\u003CJobCategoryViewModel\u003E)viewResult.Model;\r\n    var actualName = model.First().Name;\r\n    Assert.Equal(expectedName, actualName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Details_Given_NullId_Should_ReturnNotFoundView",
        "Body": "{\r\n    // Arrange\r\n    var serviceMock = new Mock\u003CIJobCategoryService\u003E();\r\n    serviceMock.Setup(x =\u003E x.GetCategoryById(It.IsAny\u003Cstring\u003E())).ReturnsAsync((JobCategory)null);\r\n    var controller = new JobCategoryController(serviceMock.Object, _mapper);\r\n    // Act\r\n    var result = await controller.Details(null);\r\n    // Assert\r\n    var viewResult = (ViewResult)result;\r\n    Assert.Equal(\u0022NotFound\u0022, viewResult.ViewName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Details_Given_IdThatDoesNotExist_Should_ReturnNotFoundView",
        "Body": "{\r\n    // Arrange\r\n    var item1 = new JobCategory\r\n    {\r\n        Name = \u0022Item1\u0022\r\n    };\r\n    var item2 = new JobCategory\r\n    {\r\n        Name = \u0022Item2\u0022\r\n    };\r\n    var item3 = new JobCategory\r\n    {\r\n        Name = \u0022Item3\u0022\r\n    };\r\n    var serviceMock = new Mock\u003CIJobCategoryService\u003E();\r\n    serviceMock.Setup(x =\u003E x.GetCategoryById(\u00221\u0022)).ReturnsAsync(item1);\r\n    serviceMock.Setup(x =\u003E x.GetCategoryById(\u00222\u0022)).ReturnsAsync(item2);\r\n    serviceMock.Setup(x =\u003E x.GetCategoryById(\u00223\u0022)).ReturnsAsync(item3);\r\n    var controller = new JobCategoryController(serviceMock.Object, _mapper);\r\n    // Act\r\n    var result = await controller.Details(\u00229\u0022);\r\n    // Assert\r\n    var viewResult = (ViewResult)result;\r\n    Assert.Equal(\u0022NotFound\u0022, viewResult.ViewName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Details_Given_ExistingItemId_Should_ReturnCorrectViewModel",
        "Body": "{\r\n    // Arrange\r\n    var item1 = new JobCategory\r\n    {\r\n        Name = \u0022Item1\u0022\r\n    };\r\n    var item2 = new JobCategory\r\n    {\r\n        Name = \u0022Item2\u0022\r\n    };\r\n    var item3 = new JobCategory\r\n    {\r\n        Name = \u0022Item3\u0022\r\n    };\r\n    var expectedName = item2.Name;\r\n    var serviceMock = new Mock\u003CIJobCategoryService\u003E();\r\n    serviceMock.Setup(x =\u003E x.GetCategoryById(\u00221\u0022)).ReturnsAsync(item1);\r\n    serviceMock.Setup(x =\u003E x.GetCategoryById(\u00222\u0022)).ReturnsAsync(item2);\r\n    serviceMock.Setup(x =\u003E x.GetCategoryById(\u00223\u0022)).ReturnsAsync(item3);\r\n    var controller = new JobCategoryController(serviceMock.Object, _mapper);\r\n    // Act\r\n    var result = await controller.Details(\u00222\u0022);\r\n    // Assert\r\n    var viewResult = (ViewResult)result;\r\n    var model = (DetailsJobCategoryViewModel)viewResult.Model;\r\n    Assert.Equal(expectedName, model.Name);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Create_Given_NoModel_Should_ReturnViewResultType",
        "Body": "{\r\n    // Arrange\r\n    var serviceMock = new Mock\u003CIJobCategoryService\u003E();\r\n    var controller = new JobCategoryController(serviceMock.Object, _mapper);\r\n    // Act\r\n    var result = controller.Create();\r\n    // Assert\r\n    Assert.IsType\u003CViewResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Create_Given_ModelWithInvalidState_Should_ReturnSameModel",
        "Body": "{\r\n    // Arrange\r\n    const string expectedName = \u0022ExampleName\u0022;\r\n    var vm = new CreateJobCategoryViewModel\r\n    {\r\n        Name = expectedName\r\n    };\r\n    var serviceMock = new Mock\u003CIJobCategoryService\u003E();\r\n    var controller = new JobCategoryController(serviceMock.Object, _mapper);\r\n    controller.ModelState.AddModelError(\u0022Key\u0022, \u0022Message\u0022);\r\n    // Act\r\n    var result = await controller.Create(vm);\r\n    // Assert\r\n    var viewResult = (ViewResult)result;\r\n    var model = (CreateJobCategoryViewModel)viewResult.Model;\r\n    Assert.Equal(expectedName, model.Name);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Create_Given_ServiceAddFailure_Should_ReturnNotFoundView",
        "Body": "{\r\n    // Arrange\r\n    var vm = new CreateJobCategoryViewModel();\r\n    var serviceMock = new Mock\u003CIJobCategoryService\u003E();\r\n    serviceMock.Setup(x =\u003E x.Add(It.IsAny\u003CJobCategory\u003E())).ReturnsAsync(false);\r\n    var controller = new JobCategoryController(serviceMock.Object, _mapper);\r\n    // Act\r\n    var result = await controller.Create(vm);\r\n    // Assert\r\n    var viewResult = (ViewResult)result;\r\n    Assert.Equal(\u0022NotFound\u0022, viewResult.ViewName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Create_Given_ServiceAddSuccess_Should_ReturnRedirectToActionResult",
        "Body": "{\r\n    // Arrange\r\n    var vm = new CreateJobCategoryViewModel();\r\n    var serviceMock = new Mock\u003CIJobCategoryService\u003E();\r\n    serviceMock.Setup(x =\u003E x.Add(It.IsAny\u003CJobCategory\u003E())).ReturnsAsync(true);\r\n    var controller = new JobCategoryController(serviceMock.Object, _mapper);\r\n    // Act\r\n    var result = await controller.Create(vm);\r\n    // Assert\r\n    Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Create_Given_ServiceAddSuccess_Should_RedirectToIndex",
        "Body": "{\r\n    // Arrange\r\n    var vm = new CreateJobCategoryViewModel();\r\n    var serviceMock = new Mock\u003CIJobCategoryService\u003E();\r\n    serviceMock.Setup(x =\u003E x.Add(It.IsAny\u003CJobCategory\u003E())).ReturnsAsync(true);\r\n    var controller = new JobCategoryController(serviceMock.Object, _mapper);\r\n    // Act\r\n    var result = await controller.Create(vm);\r\n    var redirectResult = (RedirectToActionResult)result;\r\n    // Assert\r\n    Assert.Equal(\u0022Index\u0022, redirectResult.ActionName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AutoMapperConfigurationTests",
    "Message": null,
    "ProjectName": "BulletinBoard.Tests",
    "Methods": [
      {
        "Name": "Configuration_IsValid",
        "Body": "{\r\n    var config = new MapperConfiguration(cfg =\u003E cfg.AddProfile(new DefaultProfile()));\r\n    config.AssertConfigurationIsValid();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "JobCategoryServiceTests",
    "Message": null,
    "ProjectName": "BulletinBoard.Tests",
    "Methods": [
      {
        "Name": "GetAllCategories_Given_EmptyRepository_Should_ReturnEmptyResult",
        "Body": "{\r\n    // Arrange\r\n    var repoMock = new Mock\u003CIJobCategoryRepository\u003E();\r\n    repoMock.Setup(x =\u003E x.GetAll()).ReturnsAsync(new List\u003CJobCategory\u003E());\r\n    var unitOfWorkMock = new Mock\u003CIUnitOfWork\u003E();\r\n    var service = new JobCategoryService(repoMock.Object, unitOfWorkMock.Object);\r\n    // Act\r\n    var result = await service.GetAllCategories();\r\n    // Assert\r\n    Assert.Empty(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetAllCategories_Given_RepositoryWithItems_Should_ReturnCorrectNumberOfItems",
        "Body": "{\r\n    // Arrange\r\n    var items = new List\u003CJobCategory\u003E\r\n    {\r\n        new JobCategory(),\r\n        new JobCategory(),\r\n        new JobCategory()\r\n    };\r\n    var repoMock = new Mock\u003CIJobCategoryRepository\u003E();\r\n    repoMock.Setup(x =\u003E x.GetAll()).ReturnsAsync(items);\r\n    var unitOfWorkMock = new Mock\u003CIUnitOfWork\u003E();\r\n    var service = new JobCategoryService(repoMock.Object, unitOfWorkMock.Object);\r\n    // Act\r\n    var result = await service.GetAllCategories();\r\n    // Assert\r\n    var list = result.ToList();\r\n    Assert.Equal(3, list.Count);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetAllCategories_Given_RepositoryWithItem_Should_ReturnResultThatContainsIt",
        "Body": "{\r\n    // Arrange\r\n    const string expectedName = \u0022Category2\u0022;\r\n    var items = new List\u003CJobCategory\u003E\r\n    {\r\n        new JobCategory\r\n        {\r\n            Name = \u0022Category1\u0022\r\n        },\r\n        new JobCategory\r\n        {\r\n            Name = expectedName\r\n        },\r\n        new JobCategory\r\n        {\r\n            Name = \u0022Category3\u0022\r\n        }\r\n    };\r\n    var repoMock = new Mock\u003CIJobCategoryRepository\u003E();\r\n    repoMock.Setup(x =\u003E x.GetAll()).ReturnsAsync(items);\r\n    var unitOfWorkMock = new Mock\u003CIUnitOfWork\u003E();\r\n    var service = new JobCategoryService(repoMock.Object, unitOfWorkMock.Object);\r\n    // Act\r\n    var result = await service.GetAllCategories();\r\n    // Assert\r\n    Assert.Contains(result, x =\u003E x.Name == expectedName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "LoginViewModelTests",
    "Message": null,
    "ProjectName": "BulletinBoard.Tests",
    "Methods": [
      {
        "Name": "Given_ValidModel_Should_Validate",
        "Body": "{\r\n    // Arrange\r\n    var model = new LoginViewModel\r\n    {\r\n        Email = \u0022valid@email.com\u0022,\r\n        Password = \u0022validPassword1\u0022\r\n    };\r\n    var context = new ValidationContext(model, null, null);\r\n    var result = new List\u003CValidationResult\u003E();\r\n    // Act\r\n    var valid = Validator.TryValidateObject(model, context, result, true);\r\n    // Assert\r\n    Assert.True(valid);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Given_ValidModel_Should_ContainNoErrors",
        "Body": "{\r\n    // Arrange\r\n    var model = new LoginViewModel\r\n    {\r\n        Email = \u0022valid@email.com\u0022,\r\n        Password = \u0022validPassword1\u0022\r\n    };\r\n    var context = new ValidationContext(model, null, null);\r\n    var result = new List\u003CValidationResult\u003E();\r\n    // Act\r\n    Validator.TryValidateObject(model, context, result, true);\r\n    // Assert\r\n    Assert.Empty(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Given_ModelWithInvalidEmail_Should_NotValidate",
        "Body": "{\r\n    // Arrange\r\n    var model = new LoginViewModel\r\n    {\r\n        Email = \u0022wrong.email.com\u0022,\r\n        Password = \u0022validPassword1\u0022\r\n    };\r\n    var context = new ValidationContext(model, null, null);\r\n    var result = new List\u003CValidationResult\u003E();\r\n    // Act\r\n    var valid = Validator.TryValidateObject(model, context, result, true);\r\n    // Assert\r\n    Assert.False(valid);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Given_ModelWithInvalidEmail_Should_ContainCorrectErrorMessage",
        "Body": "{\r\n    // Arrange\r\n    var model = new LoginViewModel\r\n    {\r\n        Email = \u0022wrong.email.com\u0022,\r\n        Password = \u0022validPassword1\u0022\r\n    };\r\n    var context = new ValidationContext(model, null, null);\r\n    var result = new List\u003CValidationResult\u003E();\r\n    // Act\r\n    Validator.TryValidateObject(model, context, result, true);\r\n    // Assert\r\n    var errorMessage = string.Format(\u0022The {0} field is not a valid e-mail address.\u0022, nameof(model.Email));\r\n    Assert.Contains(result, x =\u003E x.ErrorMessage == errorMessage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Given_ModelWithEmptyPassword_Should_NotValidate",
        "Body": "{\r\n    // Arrange\r\n    var model = new LoginViewModel\r\n    {\r\n        Email = \u0022valid@email.com\u0022,\r\n        Password = string.Empty\r\n    };\r\n    var context = new ValidationContext(model, null, null);\r\n    var result = new List\u003CValidationResult\u003E();\r\n    // Act\r\n    var valid = Validator.TryValidateObject(model, context, result, true);\r\n    // Assert\r\n    Assert.False(valid);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Given_ModelWithEmptyPassword_Should_ContainCorrectErrorMessage",
        "Body": "{\r\n    // Arrange\r\n    var model = new LoginViewModel\r\n    {\r\n        Email = \u0022valid@email.com\u0022,\r\n        Password = string.Empty\r\n    };\r\n    var context = new ValidationContext(model, null, null);\r\n    var result = new List\u003CValidationResult\u003E();\r\n    // Act\r\n    Validator.TryValidateObject(model, context, result, true);\r\n    // Assert\r\n    var errorMessage = string.Format(\u0022The {0} field is required.\u0022, nameof(model.Password));\r\n    Assert.Contains(result, x =\u003E x.ErrorMessage == errorMessage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Given_ModelWithSingleError_Should_ContainSingleValidationResult",
        "Body": "{\r\n    // Arrange\r\n    var model = new LoginViewModel\r\n    {\r\n        Email = \u0022valid@email.com\u0022,\r\n        Password = string.Empty\r\n    };\r\n    var context = new ValidationContext(model, null, null);\r\n    var result = new List\u003CValidationResult\u003E();\r\n    // Act\r\n    Validator.TryValidateObject(model, context, result, true);\r\n    // Assert\r\n    Assert.Single(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Given_ModelWithTwoErrors_Should_ContainTwoValidationResults",
        "Body": "{\r\n    // Arrange\r\n    var model = new LoginViewModel\r\n    {\r\n        Email = \u0022wrong.email.com\u0022,\r\n        Password = string.Empty\r\n    };\r\n    var context = new ValidationContext(model, null, null);\r\n    var result = new List\u003CValidationResult\u003E();\r\n    // Act\r\n    Validator.TryValidateObject(model, context, result, true);\r\n    // Assert\r\n    Assert.Equal(2, result.Count);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RegisterViewModelTests",
    "Message": null,
    "ProjectName": "BulletinBoard.Tests",
    "Methods": [
      {
        "Name": "Given_ValidModel_Should_Validate",
        "Body": "{\r\n    // Arrange\r\n    var model = new RegisterViewModel\r\n    {\r\n        Email = \u0022valid@email.com\u0022,\r\n        Password = \u0022validPassword1\u0022,\r\n        ConfirmPassword = \u0022validPassword1\u0022\r\n    };\r\n    var context = new ValidationContext(model, null, null);\r\n    var result = new List\u003CValidationResult\u003E();\r\n    // Act\r\n    var valid = Validator.TryValidateObject(model, context, result, true);\r\n    // Assert\r\n    Assert.True(valid);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Given_ModelWithInvalidConfirmPassword_Should_NotValidate",
        "Body": "{\r\n    // Arrange\r\n    var model = new RegisterViewModel\r\n    {\r\n        Email = \u0022valid@email.com\u0022,\r\n        Password = \u0022validPassword1\u0022,\r\n        ConfirmPassword = \u0022otherPassword2\u0022\r\n    };\r\n    var context = new ValidationContext(model, null, null);\r\n    var result = new List\u003CValidationResult\u003E();\r\n    // Act\r\n    var valid = Validator.TryValidateObject(model, context, result, true);\r\n    // Assert\r\n    Assert.False(valid);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Given_ModelWithInvalidConfirmPassword_Should_ContainCorrectErrorMessage",
        "Body": "{\r\n    // Arrange\r\n    var model = new RegisterViewModel\r\n    {\r\n        Email = \u0022valid@email.com\u0022,\r\n        Password = \u0022validPassword1\u0022,\r\n        ConfirmPassword = \u0022otherPassword2\u0022\r\n    };\r\n    var context = new ValidationContext(model, null, null);\r\n    var result = new List\u003CValidationResult\u003E();\r\n    // Act\r\n    Validator.TryValidateObject(model, context, result, true);\r\n    // Assert\r\n    var errorMessage = \u0022The password and confirmation password do not match.\u0022;\r\n    Assert.Contains(result, x =\u003E x.ErrorMessage == errorMessage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CreateJobCategoryViewModelTests",
    "Message": null,
    "ProjectName": "BulletinBoard.Tests",
    "Methods": [
      {
        "Name": "Given_ValidModel_Should_Validate",
        "Body": "{\r\n    // Arrange\r\n    var model = new CreateJobCategoryViewModel\r\n    {\r\n        Name = \u0022Example\u0022\r\n    };\r\n    var context = new ValidationContext(model, null, null);\r\n    var result = new List\u003CValidationResult\u003E();\r\n    // Act\r\n    var valid = Validator.TryValidateObject(model, context, result, true);\r\n    // Assert\r\n    Assert.True(valid);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Given_ModelWithNonCapitalizedName_Should_NotValidate",
        "Body": "{\r\n    // Arrange\r\n    var model = new CreateJobCategoryViewModel\r\n    {\r\n        Name = \u0022example\u0022\r\n    };\r\n    var context = new ValidationContext(model, null, null);\r\n    var result = new List\u003CValidationResult\u003E();\r\n    // Act\r\n    var valid = Validator.TryValidateObject(model, context, result, true);\r\n    // Assert\r\n    Assert.False(valid);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Given_ModelWithNonCapitalizedName_Should_ContainCorrectError",
        "Body": "{\r\n    // Arrange\r\n    var model = new CreateJobCategoryViewModel\r\n    {\r\n        Name = \u0022example\u0022\r\n    };\r\n    var context = new ValidationContext(model, null, null);\r\n    var result = new List\u003CValidationResult\u003E();\r\n    // Act\r\n    Validator.TryValidateObject(model, context, result, true);\r\n    // Assert\r\n    var errorMessage = string.Format(\u0022{0} must start with capital letter.\u0022, nameof(model.Name));\r\n    Assert.Contains(result, x =\u003E x.ErrorMessage == errorMessage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  }
]