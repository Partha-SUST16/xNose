[
  {
    "Name": "FluentExpectationBuilderTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "Should_Set_Times",
        "Body": "{\r\n    // Arrange\r\n    Action\u003CIFluentExpectationBuilder\u003E fac = expectationBuilder =\u003E expectationBuilder.OnHandling(HttpMethod.Post, request =\u003E request.WithPath(\u0022/\u0022)).RespondOnce(HttpStatusCode.Created, resp =\u003E resp.WithDelay(1, TimeUnit.Milliseconds));\r\n    var setup = new MockServerSetup();\r\n    var builder = new FluentExpectationBuilder(setup);\r\n    // Act\r\n    fac(builder);\r\n    var expectation = builder.Setup().Expectations.First();\r\n    var result = Serializer.Serialize(expectation);\r\n    // Assert\r\n    _outputHelper.WriteLine(result);\r\n    result.Should().MatchRegex(@\u0022(?m)\\s*\u0022\u0022times\u0022\u0022:\\s*\\{\\s*\u0022\u0022remainingTimes\u0022\u0022:\\s*1,\\s*\u0022\u0022unlimited\u0022\u0022:\\s*false\\s*}\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Set_Times_Always",
        "Body": "{\r\n    // Arrange\r\n    var builder = new FluentExpectationBuilder();\r\n    var setup = builder.RespondTimes(() =\u003E Times.Always, 200).Setup();\r\n    // Act\r\n    var result = Serializer.Serialize(setup.Expectations.First());\r\n    // Assert\r\n    _outputHelper.WriteLine(result);\r\n    result.Should().MatchRegex($@\u0022(?m)\\s*\u0022\u0022times\u0022\u0022:\\s*\\{{\\s*\u0022\u0022remainingTimes\u0022\u0022:\\s*0,\\s*\u0022\u0022unlimited\u0022\u0022:\\s*true\\s*}}\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Set_Times_Limited",
        "Body": "{\r\n    // Arrange\r\n    var builder = new FluentExpectationBuilder();\r\n    // Act\r\n    var result = Serializer.Serialize((builder.RespondTimes(times, 200).Setup().Expectations.First()));\r\n    // Assert\r\n    _outputHelper.WriteLine(result);\r\n    result.Should().MatchRegex($@\u0022(?m)\\s*\u0022\u0022times\u0022\u0022:\\s*\\{{\\s*\u0022\u0022remainingTimes\u0022\u0022:\\s*{times},\\s*\u0022\u0022unlimited\u0022\u0022:\\s*false\\s*}}\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Set_TimeToLive",
        "Body": "{\r\n    // Arrange\r\n    var builder = new FluentExpectationBuilder();\r\n    // Act\r\n    var result = Serializer.Serialize(builder.OnHandlingAny().RespondWith(HttpStatusCode.OK).WhichIsValidFor(10).Setup().Expectations.First());\r\n    // Assert\r\n    _outputHelper.WriteLine(result);\r\n    result.Should().MatchRegex(@\u0022(?m)\\s*\u0022\u0022timeToLive\u0022\u0022:\\s*\\{\\s*\u0022\u0022timeUnit\u0022\u0022:\\s*\u0022\u0022SECONDS\u0022\u0022\\s*,\\s*\u0022\u0022timeToLive\u0022\u0022:\\s*10\\s*,\\s*\u0022\u0022unlimited\u0022\u0022\\s*:\\s*false\\s*}\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Match_Any_Request",
        "Body": "{\r\n    // Arrange\r\n    var builder = new FluentExpectationBuilder();\r\n    builder.OnHandlingAny().RespondWith(HttpStatusCode.Created);\r\n    // Act\r\n    var expectation = builder.Setup().Expectations.First();\r\n    var result = Serializer.Serialize(expectation);\r\n    // Assert\r\n    _outputHelper.WriteLine(result);\r\n    result.Should().MatchRegex(@\u0022(?s)^((?!httpRequest).)*$\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Match_Any_Request_With_HttpMethod",
        "Body": "{\r\n    // Arrange\r\n    var httpMethod = HttpMethod.Post;\r\n    var builder = new FluentExpectationBuilder();\r\n    builder.OnHandlingAny(httpMethod).RespondWith(HttpStatusCode.Created);\r\n    // Act\r\n    var expectation = builder.Setup().Expectations.First();\r\n    var result = Serializer.Serialize(expectation);\r\n    // Assert\r\n    _outputHelper.WriteLine(result);\r\n    result.Should().MatchRegex($@\u0022(?smi)\u0022\u0022httpRequest\u0022\u0022:.*{{.*\u0022\u0022method\u0022\u0022.*:.*\u0022\u0022{httpMethod.Method}\u0022\u0022.*}}.*,\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Match_Any_Request_With_Method",
        "Body": "{\r\n    // Arrange\r\n    var builder = new FluentExpectationBuilder();\r\n    // Act\r\n    builder.OnHandling(new HttpMethod(method)).RespondWith(HttpStatusCode.Created);\r\n    var expectation = builder.Setup().Expectations.First();\r\n    var result = Serializer.Serialize(expectation);\r\n    // Assert\r\n    _outputHelper.WriteLine(result);\r\n    result.Should().MatchRegex($@\u0022(?smi)\u0022\u0022httpRequest\u0022\u0022:.*{{.*\u0022\u0022method\u0022\u0022.*:.*\u0022\u0022{method}\u0022\u0022.*}}.*,\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Build_Expectation",
        "Body": "{\r\n    // Arrange\r\n    var handler = new MockHandler(_outputHelper);\r\n    var mockServerClient = new MockServerClient(new HttpClient(handler), \u0022http://localhost:9000\u0022, NullMockServerLogger.Instance);\r\n    // Act\r\n    await mockServerClient.SetupAsync(builder =\u003E builder.OnHandling(HttpMethod.Post, request =\u003E request.WithPath(\u0022some/path\u0022).EnableEncryption()).RespondWith(HttpStatusCode.Accepted, response =\u003E response.WithDelay(10, TimeUnit.Seconds)).Setup());\r\n    // Assert\r\n    handler.Expectations.Should().ContainSingle(e =\u003E e.HttpRequest.Path == \u0022/some/path\u0022 \u0026\u0026 e.HttpRequest.Method == \u0022POST\u0022 \u0026\u0026 e.HttpRequest.Secure == true \u0026\u0026 e.HttpResponse.Delay.Value == 10 \u0026\u0026 e.HttpResponse.Delay.TimeUnit == TimeUnit.Seconds);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FluentVerificationBuilderTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "Should_Verify_HttpRequest",
        "Body": "{\r\n    // Arrange\r\n    var expected = Serializer.Serialize(new JObject { [\u0022httpRequest\u0022] = new JObject { [\u0022path\u0022] = \u0022/some/path\u0022 } });\r\n    var builder = new FluentVerificationBuilder();\r\n    // Act\r\n    builder.Verify(request =\u003E request.WithPath(\u0022some/path\u0022));\r\n    var result = Serializer.Serialize(builder.Build());\r\n    // Assert\r\n    _outputHelper.WriteLine(result);\r\n    result.Should().Be(expected);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Verify_Once",
        "Body": "{\r\n    // Arrange\r\n    var expected = new JObject\r\n    {\r\n        [\u0022httpRequest\u0022] = new JObject\r\n        {\r\n            [\u0022path\u0022] = \u0022/some/path\u0022\r\n        },\r\n        [\u0022times\u0022] = new JObject\r\n        {\r\n            [\u0022atLeast\u0022] = 1,\r\n            [\u0022atMost\u0022] = 1\r\n        }\r\n    }.ToString(Formatting.Indented);\r\n    var builder = new FluentVerificationBuilder();\r\n    // Act\r\n    builder.Verify(request =\u003E request.WithPath(\u0022some/path\u0022)).Once();\r\n    var result = Serializer.Serialize(builder.Build());\r\n    // Assert\r\n    _outputHelper.WriteLine(result);\r\n    result.Should().Be(expected);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Verify_Twice",
        "Body": "{\r\n    // Arrange\r\n    var expected = new JObject\r\n    {\r\n        [\u0022httpRequest\u0022] = new JObject\r\n        {\r\n            [\u0022path\u0022] = \u0022/some/path\u0022\r\n        },\r\n        [\u0022times\u0022] = new JObject\r\n        {\r\n            [\u0022atLeast\u0022] = 2,\r\n            [\u0022atMost\u0022] = 2\r\n        }\r\n    }.ToString(Formatting.Indented);\r\n    var builder = new FluentVerificationBuilder();\r\n    // Act\r\n    builder.Verify(request =\u003E request.WithPath(\u0022some/path\u0022)).Twice();\r\n    var result = Serializer.Serialize(builder.Build());\r\n    // Assert\r\n    _outputHelper.WriteLine(result);\r\n    result.Should().Be(expected);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Verify_Between",
        "Body": "{\r\n    var ex = new JObject(new JProperty(\u0022httpRequest\u0022, new JObject(new JProperty(\u0022path\u0022, \u0022/some/path\u0022))), new JProperty(\u0022times\u0022, new JObject(new JProperty(\u0022atLeast\u0022, 1), new JProperty(\u0022atMost\u0022, 2))));\r\n    var expected = ex.ToString(Formatting.Indented);\r\n    _outputHelper.WriteLine(expected);\r\n    var builder = new FluentVerificationBuilder();\r\n    // Act\r\n    builder.Verify(request =\u003E request.WithPath(\u0022some/path\u0022)).Between(1, 2);\r\n    var result = Serializer.Serialize(builder.Build());\r\n    // Assert\r\n    _outputHelper.WriteLine(result);\r\n    result.Should().Be(expected);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Verify_AtMost",
        "Body": "{\r\n    var expected = new JObject\r\n    {\r\n        [\u0022httpRequest\u0022] = new JObject\r\n        {\r\n            [\u0022path\u0022] = \u0022/some/path\u0022\r\n        },\r\n        [\u0022times\u0022] = new JObject\r\n        {\r\n            [\u0022atLeast\u0022] = 0,\r\n            [\u0022atMost\u0022] = 5\r\n        }\r\n    }.ToString(Formatting.Indented);\r\n    var builder = new FluentVerificationBuilder();\r\n    // Act\r\n    builder.Verify(request =\u003E request.WithPath(\u0022some/path\u0022)).AtMost(5);\r\n    var result = Serializer.Serialize(builder.Build());\r\n    // Assert\r\n    _outputHelper.WriteLine(result);\r\n    result.Should().Be(expected);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Verify_AtLeast",
        "Body": "{\r\n    var expected = Serializer.Serialize(new JObject { [\u0022httpRequest\u0022] = new JObject { [\u0022path\u0022] = \u0022/some/path\u0022 }, [\u0022times\u0022] = new JObject { [\u0022atLeast\u0022] = 5 } });\r\n    var builder = new FluentVerificationBuilder();\r\n    // Act\r\n    builder.Verify(request =\u003E request.WithPath(\u0022some/path\u0022)).AtLeast(5);\r\n    var result = Serializer.Serialize(builder.Build());\r\n    // Assert\r\n    _outputHelper.WriteLine(result);\r\n    result.Should().Be(expected);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FluentRequestBuilderTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "Should_Use_Encryption",
        "Body": "{\r\n    // Arrange\r\n    var builder = new FluentHttpRequestBuilder();\r\n    // Act\r\n    var result = Serializer.Serialize(builder.EnableEncryption().Build());\r\n    Logger.LogResult(\u0022JSON\u0022, result);\r\n    // Assert\r\n    result.Should().MatchRegex(@\u0022(?ms){.*\u0022\u0022secure\u0022\u0022: true.*}.*\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Set_Content_Type_Header",
        "Body": "{\r\n    // Arrange\r\n    var builder = new FluentHttpRequestBuilder();\r\n    // Act\r\n    var result = builder.AddContentType(CommonContentType.Soap12).Build();\r\n    Logger.LogResult(\u0022JSON \u0022, Serializer.Serialize(result));\r\n// Assert\r\n// TODO:reactive\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Keep_Alive",
        "Body": "{\r\n    // Arrange\r\n    var builder = new FluentHttpRequestBuilder();\r\n    // Act\r\n    var result = Serializer.Serialize(builder.KeepConnectionAlive().Build());\r\n    Logger.LogResult(\u0022JSON\u0022, result);\r\n    // Assert\r\n    result.Should().MatchRegex(@\u0022(?ms){.*\u0022\u0022keepAlive\u0022\u0022: true.*}.*\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Set_Path",
        "Body": "{\r\n    // Arrange\r\n    var builder = new FluentHttpRequestBuilder();\r\n    // Act\r\n    var result = Serializer.Serialize(builder.WithPath(inputPath).Build());\r\n    Logger.LogResult(\u0022JSON\u0022, result);\r\n    // Assert\r\n    result.Should().MatchRegex($@\u0022(?ms){{.*\u0022\u0022path\u0022\u0022:.*\u0022\u0022{expectedPath}\u0022\u0022.*}}.*\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FluentResponseBuilderTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "Should_Add_Header",
        "Body": "{\r\n    // Arrange\r\n    var builder = new FluentHttpResponseBuilder();\r\n    // Act\r\n    var response = builder.ConfigureHeaders(opt =\u003E opt.AddContentType(\u0022text/xml charset=UTF-8;\u0022)).Build();\r\n    // Assert\r\n    response.Headers.GetValueOrDefault(\u0022Content-Type\u0022).Should().ContainSingle(\u0022text/xml charset=UTF-8;\u0022).And.HaveCount(1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Add_Body_Literal",
        "Body": "{\r\n    // Arrange\r\n    var builder = new FluentHttpResponseBuilder();\r\n    // Act\r\n    var response = Serializer.SerializeJObject(builder.WithBody(\u0022Hello World!\u0022).Build());\r\n    // Assert\r\n    response.Value\u003Cstring\u003E(\u0022body\u0022).Should().Be(\u0022Hello World!\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "WithLiteralResponse_Creates_LiteralBody",
        "Body": "{\r\n    // Arrange\r\n    var builder = new FluentHttpResponseBuilder();\r\n    // Act\r\n    var response = Serializer.SerializeJObject(builder.WithBody(\u0022Hello World!\u0022).Build());\r\n    // Assert\r\n    response.Value\u003Cstring\u003E(\u0022body\u0022).Should().Be(\u0022Hello World!\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Add_Multiple_Header_Values",
        "Body": "{\r\n    // Arrange\r\n    IFluentHttpResponseBuilder builder = new FluentHttpResponseBuilder();\r\n    // Act\r\n    var response = Serializer.SerializeJObject(builder.AddContentType(\u0022text/xml charset=UTF-8;\u0022).WithHeader(\u0022Header-name 2\u0022, \u0022true\u0022).Build());\r\n    Dump(\u0022JSON\u0022, response.ToString(Formatting.Indented));\r\n    // Assert\r\n    response[\u0022headers\u0022][\u0022Content-Type\u0022][0].Value\u003Cstring\u003E().Should().Be(\u0022text/xml charset=UTF-8;\u0022);\r\n    response[\u0022headers\u0022][\u0022Header-name 2\u0022][0].Value\u003Cstring\u003E().Should().Be(\u0022true\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FluentBodyBuilderTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "WithoutExactJson",
        "Body": "{\r\n    // Arrange\r\n    const string content = \u0022{ \\\u0022id\\\u0022: 1, \\\u0022name\\\u0022: \\\u0022A green door\\\u0022, \\\u0022price\\\u0022: 12.50, \\\u0022tags\\\u0022: [\\\u0022home\\\u0022, \\\u0022green\\\u0022] }\u0022;\r\n    const string expected = @\u0022{\n    \u0022\u0022body\u0022\u0022: {\n        \u0022\u0022not\u0022\u0022: true,\n        \u0022\u0022type\u0022\u0022: \u0022\u0022JSON\u0022\u0022,\n        \u0022\u0022json\u0022\u0022: \u0022\u0022{ \\\u0022\u0022id\\\u0022\u0022: 1, \\\u0022\u0022name\\\u0022\u0022: \\\u0022\u0022A green door\\\u0022\u0022, \\\u0022\u0022price\\\u0022\u0022: 12.50, \\\u0022\u0022tags\\\u0022\u0022: [\\\u0022\u0022home\\\u0022\u0022, \\\u0022\u0022green\\\u0022\u0022] }\u0022\u0022,\n        \u0022\u0022matchType\u0022\u0022: \u0022\u0022STRICT\u0022\u0022\n    }\n}\u0022;\r\n    Assert(expected, builder =\u003E builder.WithoutExactJson(content));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NotContainingJson",
        "Body": "{\r\n    // Arrange\r\n    const string content = \u0022{ \\\u0022id\\\u0022: 1, \\\u0022name\\\u0022: \\\u0022A green door\\\u0022, \\\u0022price\\\u0022: 12.50, \\\u0022tags\\\u0022: [\\\u0022home\\\u0022, \\\u0022green\\\u0022] }\u0022;\r\n    const string expected = @\u0022{\n    \u0022\u0022body\u0022\u0022: {\n        \u0022\u0022not\u0022\u0022: true,\n        \u0022\u0022type\u0022\u0022: \u0022\u0022JSON\u0022\u0022,\n        \u0022\u0022json\u0022\u0022 : \u0022\u0022{ \\\u0022\u0022id\\\u0022\u0022: 1, \\\u0022\u0022name\\\u0022\u0022: \\\u0022\u0022A green door\\\u0022\u0022, \\\u0022\u0022price\\\u0022\u0022: 12.50, \\\u0022\u0022tags\\\u0022\u0022: [\\\u0022\u0022home\\\u0022\u0022, \\\u0022\u0022green\\\u0022\u0022] }\u0022\u0022\n    }\n}\u0022;\r\n    // Act \u0026 Assert\r\n    Assert(expected, builder =\u003E builder.NotContainingJson(content));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NotMatchingJsonSchema",
        "Body": "{\r\n    // Arrange\r\n    const string content = @\u0022{\u0022\u0022$schema\u0022\u0022: \u0022\u0022http://json-schema.org/draft-04/schema#\u0022\u0022, \u0022\u0022title\u0022\u0022: \u0022\u0022Product\u0022\u0022, \u0022\u0022description\u0022\u0022: \u0022\u0022A product from Acme\u0027s catalog\u0022\u0022, \u0022\u0022type\u0022\u0022: \u0022\u0022object\u0022\u0022, \u0022\u0022properties\u0022\u0022: { \u0022\u0022id\u0022\u0022: { \u0022\u0022description\u0022\u0022: \u0022\u0022The unique identifier for a product\u0022\u0022, \u0022\u0022type\u0022\u0022: \u0022\u0022integer\u0022\u0022 }, \u0022\u0022name\u0022\u0022: { \u0022\u0022description\u0022\u0022: \u0022\u0022Name of the product\u0022\u0022, \u0022\u0022type\u0022\u0022: \u0022\u0022string\u0022\u0022}, \u0022\u0022price\u0022\u0022: { \u0022\u0022type\u0022\u0022: \u0022\u0022number\u0022\u0022, \u0022\u0022minimum\u0022\u0022: 0, \u0022\u0022exclusiveMinimum\u0022\u0022: true }, \u0022\u0022tags\u0022\u0022: { \u0022\u0022type\u0022\u0022: \u0022\u0022array\u0022\u0022, \u0022\u0022items\u0022\u0022: { \u0022\u0022type\u0022\u0022: \u0022\u0022string\u0022\u0022 }, \u0022\u0022minItems\u0022\u0022: 1, \u0022\u0022uniqueItems\u0022\u0022: true } }, \u0022\u0022required\u0022\u0022: [\u0022\u0022id\u0022\u0022, \u0022\u0022name\u0022\u0022, \u0022\u0022price\u0022\u0022] }\u0022;\r\n    const string expected = @\u0022{\n            \u0022\u0022body\u0022\u0022: {\n            \u0022\u0022not\u0022\u0022: true,\n            \u0022\u0022type\u0022\u0022: \u0022\u0022JSON_SCHEMA\u0022\u0022,\n            \u0022\u0022jsonSchema\u0022\u0022 : \u0022\u0022{\\\u0022\u0022$schema\\\u0022\u0022: \\\u0022\u0022http://json-schema.org/draft-04/schema#\\\u0022\u0022, \\\u0022\u0022title\\\u0022\u0022: \\\u0022\u0022Product\\\u0022\u0022, \\\u0022\u0022description\\\u0022\u0022: \\\u0022\u0022A product from Acme\u0027s catalog\\\u0022\u0022, \\\u0022\u0022type\\\u0022\u0022: \\\u0022\u0022object\\\u0022\u0022, \\\u0022\u0022properties\\\u0022\u0022: { \\\u0022\u0022id\\\u0022\u0022: { \\\u0022\u0022description\\\u0022\u0022: \\\u0022\u0022The unique identifier for a product\\\u0022\u0022, \\\u0022\u0022type\\\u0022\u0022: \\\u0022\u0022integer\\\u0022\u0022 }, \\\u0022\u0022name\\\u0022\u0022: { \\\u0022\u0022description\\\u0022\u0022: \\\u0022\u0022Name of the product\\\u0022\u0022, \\\u0022\u0022type\\\u0022\u0022: \\\u0022\u0022string\\\u0022\u0022}, \\\u0022\u0022price\\\u0022\u0022: { \\\u0022\u0022type\\\u0022\u0022: \\\u0022\u0022number\\\u0022\u0022, \\\u0022\u0022minimum\\\u0022\u0022: 0, \\\u0022\u0022exclusiveMinimum\\\u0022\u0022: true }, \\\u0022\u0022tags\\\u0022\u0022: { \\\u0022\u0022type\\\u0022\u0022: \\\u0022\u0022array\\\u0022\u0022, \\\u0022\u0022items\\\u0022\u0022: { \\\u0022\u0022type\\\u0022\u0022: \\\u0022\u0022string\\\u0022\u0022 }, \\\u0022\u0022minItems\\\u0022\u0022: 1, \\\u0022\u0022uniqueItems\\\u0022\u0022: true } }, \\\u0022\u0022required\\\u0022\u0022: [\\\u0022\u0022id\\\u0022\u0022, \\\u0022\u0022name\\\u0022\u0022, \\\u0022\u0022price\\\u0022\u0022] }\u0022\u0022    }\n            }\u0022;\r\n    // Act \u0026 Assert\r\n    Assert(expected, builder =\u003E builder.NotMatchingJsonSchema(content));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NotMatchingJsonPath",
        "Body": "{\r\n    // Arrange\r\n    const string content = \u0022$.store.book[?(@.price \u003C 10)]\u0022;\r\n    const string expected = @\u0022{\n    \u0022\u0022body\u0022\u0022: {\n        \u0022\u0022not\u0022\u0022: true,\n        \u0022\u0022type\u0022\u0022: \u0022\u0022JSON_PATH\u0022\u0022,\n        \u0022\u0022jsonPath\u0022\u0022: \u0022\u0022$.store.book[?(@.price \u003C 10)]\u0022\u0022\n    }\n}\u0022;\r\n    // Act \u0026 Assert\r\n    Assert(expected, builder =\u003E builder.NotMatchingJsonPath(content));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NotMatchingXPath",
        "Body": "{\r\n    // Arrange\r\n    const string content = \u0022/bookstore/book[price\u003E30]/price\u0022;\r\n    const string expected = @\u0022{\n    \u0022\u0022body\u0022\u0022: {\n        \u0022\u0022not\u0022\u0022: true,\n        \u0022\u0022type\u0022\u0022: \u0022\u0022XPATH\u0022\u0022,\n        \u0022\u0022xpath\u0022\u0022: \u0022\u0022/bookstore/book[price\u003E30]/price\u0022\u0022\n    }\n}\u0022;\r\n    // Act \u0026 Assert\r\n    Assert(expected, builder =\u003E builder.NotMatchingXPath(content));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "WithoutXmlContent",
        "Body": "{\r\n    // Arrange\r\n    const string content = \u0022\u003Cbookstore\u003E \u003Cbook nationality=\\\u0022ITALIAN\\\u0022 category=\\\u0022COOKING\\\u0022\u003E\u003Ctitle lang=\\\u0022en\\\u0022\u003EEveryday Italian\u003C/title\u003E\u003Cauthor\u003EGiada De Laurentiis\u003C/author\u003E\u003Cyear\u003E2005\u003C/year\u003E\u003Cprice\u003E30.00\u003C/price\u003E\u003C/book\u003E \u003C/bookstore\u003E\u0022;\r\n    const string expected = @\u0022{\n    \u0022\u0022body\u0022\u0022: {\n        \u0022\u0022not\u0022\u0022: true,\n        \u0022\u0022type\u0022\u0022: \u0022\u0022XML\u0022\u0022,\n        \u0022\u0022xml\u0022\u0022: \u0022\u0022\u003Cbookstore\u003E \u003Cbook nationality=\\\u0022\u0022ITALIAN\\\u0022\u0022 category=\\\u0022\u0022COOKING\\\u0022\u0022\u003E\u003Ctitle lang=\\\u0022\u0022en\\\u0022\u0022\u003EEveryday Italian\u003C/title\u003E\u003Cauthor\u003EGiada De Laurentiis\u003C/author\u003E\u003Cyear\u003E2005\u003C/year\u003E\u003Cprice\u003E30.00\u003C/price\u003E\u003C/book\u003E \u003C/bookstore\u003E\u0022\u0022\n    }\n}\u0022;\r\n    // Act \u0026 Assert\r\n    Assert(expected, builder =\u003E builder.WithoutXmlContent(content));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NotMatchingXmlSchema",
        "Body": "{\r\n    // Arrange\r\n    const string content = \u0022\u003C?xml version=\\\u00221.0\\\u0022 encoding=\\\u0022UTF-8\\\u0022?\u003E \u003Cxs:schema xmlns:xs=\\\u0022http://www.w3.org/2001/XMLSchema\\\u0022 elementFormDefault=\\\u0022qualified\\\u0022 attributeFormDefault=\\\u0022unqualified\\\u0022\u003E \u003Cxs:element name=\\\u0022notes\\\u0022\u003E \u003Cxs:complexType\u003E \u003Cxs:sequence\u003E \u003Cxs:element name=\\\u0022note\\\u0022 maxOccurs=\\\u0022unbounded\\\u0022\u003E \u003Cxs:complexType\u003E \u003Cxs:sequence\u003E \u003Cxs:element name=\\\u0022to\\\u0022 minOccurs=\\\u00221\\\u0022 maxOccurs=\\\u00221\\\u0022 type=\\\u0022xs:string\\\u0022\u003E\u003C/xs:element\u003E \u003Cxs:element name=\\\u0022from\\\u0022 minOccurs=\\\u00221\\\u0022 maxOccurs=\\\u00221\\\u0022 type=\\\u0022xs:string\\\u0022\u003E\u003C/xs:element\u003E \u003Cxs:element name=\\\u0022heading\\\u0022 minOccurs=\\\u00221\\\u0022 maxOccurs=\\\u00221\\\u0022 type=\\\u0022xs:string\\\u0022\u003E\u003C/xs:element\u003E \u003Cxs:element name=\\\u0022body\\\u0022 minOccurs=\\\u00221\\\u0022 maxOccurs=\\\u00221\\\u0022 type=\\\u0022xs:string\\\u0022\u003E\u003C/xs:element\u003E \u003C/xs:sequence\u003E \u003C/xs:complexType\u003E \u003C/xs:element\u003E \u003C/xs:sequence\u003E \u003C/xs:complexType\u003E \u003C/xs:element\u003E \u003C/xs:schema\u003E\u0022;\r\n    const string expected = @\u0022{\n    \u0022\u0022body\u0022\u0022: {\n        \u0022\u0022not\u0022\u0022: true,\n        \u0022\u0022type\u0022\u0022: \u0022\u0022XML_SCHEMA\u0022\u0022,\n        \u0022\u0022xmlSchema\u0022\u0022: \u0022\u0022\u003C?xml version=\\\u0022\u00221.0\\\u0022\u0022 encoding=\\\u0022\u0022UTF-8\\\u0022\u0022?\u003E \u003Cxs:schema xmlns:xs=\\\u0022\u0022http://www.w3.org/2001/XMLSchema\\\u0022\u0022 elementFormDefault=\\\u0022\u0022qualified\\\u0022\u0022 attributeFormDefault=\\\u0022\u0022unqualified\\\u0022\u0022\u003E \u003Cxs:element name=\\\u0022\u0022notes\\\u0022\u0022\u003E \u003Cxs:complexType\u003E \u003Cxs:sequence\u003E \u003Cxs:element name=\\\u0022\u0022note\\\u0022\u0022 maxOccurs=\\\u0022\u0022unbounded\\\u0022\u0022\u003E \u003Cxs:complexType\u003E \u003Cxs:sequence\u003E \u003Cxs:element name=\\\u0022\u0022to\\\u0022\u0022 minOccurs=\\\u0022\u00221\\\u0022\u0022 maxOccurs=\\\u0022\u00221\\\u0022\u0022 type=\\\u0022\u0022xs:string\\\u0022\u0022\u003E\u003C/xs:element\u003E \u003Cxs:element name=\\\u0022\u0022from\\\u0022\u0022 minOccurs=\\\u0022\u00221\\\u0022\u0022 maxOccurs=\\\u0022\u00221\\\u0022\u0022 type=\\\u0022\u0022xs:string\\\u0022\u0022\u003E\u003C/xs:element\u003E \u003Cxs:element name=\\\u0022\u0022heading\\\u0022\u0022 minOccurs=\\\u0022\u00221\\\u0022\u0022 maxOccurs=\\\u0022\u00221\\\u0022\u0022 type=\\\u0022\u0022xs:string\\\u0022\u0022\u003E\u003C/xs:element\u003E \u003Cxs:element name=\\\u0022\u0022body\\\u0022\u0022 minOccurs=\\\u0022\u00221\\\u0022\u0022 maxOccurs=\\\u0022\u00221\\\u0022\u0022 type=\\\u0022\u0022xs:string\\\u0022\u0022\u003E\u003C/xs:element\u003E \u003C/xs:sequence\u003E \u003C/xs:complexType\u003E \u003C/xs:element\u003E \u003C/xs:sequence\u003E \u003C/xs:complexType\u003E \u003C/xs:element\u003E \u003C/xs:schema\u003E\u0022\u0022\n    }\n}\u0022;\r\n    // Act \u0026 Assert\r\n    Assert(expected, builder =\u003E builder.NotMatchingXmlSchema(content));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NotContainingSubstring",
        "Body": "{\r\n    // Arrange\r\n    const string content = \u0022some_string\u0022;\r\n    const string expected = @\u0022{\n    \u0022\u0022body\u0022\u0022: {\n        \u0022\u0022not\u0022\u0022: true,\n        \u0022\u0022type\u0022\u0022: \u0022\u0022STRING\u0022\u0022,\n        \u0022\u0022string\u0022\u0022: \u0022\u0022some_string\u0022\u0022,\n        \u0022\u0022subString\u0022\u0022: true\n    }\n}\u0022;\r\n    // Act \u0026 Assert\r\n    Assert(expected, builder =\u003E builder.NotContainingSubstring(content));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "WithoutExactContent",
        "Body": "{\r\n    // Arrange\r\n    const string content = \u0022some_string\u0022;\r\n    const string expected = @\u0022{\n    \u0022\u0022body\u0022\u0022: {\n        \u0022\u0022not\u0022\u0022: true,\n        \u0022\u0022type\u0022\u0022: \u0022\u0022STRING\u0022\u0022,\n        \u0022\u0022string\u0022\u0022: \u0022\u0022some_string\u0022\u0022\n    }\n}\u0022;\r\n    // Act \u0026 Assert\r\n    Assert(expected, builder =\u003E builder.WithoutExactContent(content));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Without_String_And_Content_Type",
        "Body": "{\r\n    // Arrange\r\n    const string content = \u0022some_string\u0022;\r\n    const string contentType = \u0022text/xml\u0022;\r\n    const string expected = @\u0022{\n    \u0027body\u0027: {\n        \u0027not\u0027: true,\n        \u0027type\u0027: \u0027STRING\u0027,\n        \u0027string\u0027: \u0027some_string\u0027,\n        \u0027contentType\u0027: \u0027text/xml\u0027\n    }\n}\u0022;\r\n    // Act \u0026 Assert\r\n    Assert(expected, bodyBuilder =\u003E bodyBuilder.WithoutExactContent(content, contentType));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "WithExactJson",
        "Body": "{\r\n    // Arrange\r\n    const string content = \u0022{ \\\u0022id\\\u0022: 1, \\\u0022name\\\u0022: \\\u0022A green door\\\u0022, \\\u0022price\\\u0022: 12.50, \\\u0022tags\\\u0022: [\\\u0022home\\\u0022, \\\u0022green\\\u0022] }\u0022;\r\n    const string expected = @\u0022{\n    \u0022\u0022body\u0022\u0022: {\n        \u0022\u0022type\u0022\u0022: \u0022\u0022JSON\u0022\u0022,\n        \u0022\u0022json\u0022\u0022: \u0022\u0022{ \\\u0022\u0022id\\\u0022\u0022: 1, \\\u0022\u0022name\\\u0022\u0022: \\\u0022\u0022A green door\\\u0022\u0022, \\\u0022\u0022price\\\u0022\u0022: 12.50, \\\u0022\u0022tags\\\u0022\u0022: [\\\u0022\u0022home\\\u0022\u0022, \\\u0022\u0022green\\\u0022\u0022] }\u0022\u0022,\n        \u0022\u0022matchType\u0022\u0022: \u0022\u0022STRICT\u0022\u0022\n    }\n}\u0022;\r\n    // Act \u0026 Assert\r\n    Assert(expected, builder =\u003E builder.WithExactJson(content));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ContainingJson",
        "Body": "{\r\n    // Arrange\r\n    const string content = \u0022{ \\\u0022id\\\u0022: 1, \\\u0022name\\\u0022: \\\u0022A green door\\\u0022, \\\u0022price\\\u0022: 12.50, \\\u0022tags\\\u0022: [\\\u0022home\\\u0022, \\\u0022green\\\u0022] }\u0022;\r\n    const string expected = @\u0022{\n    \u0022\u0022body\u0022\u0022: {\n        \u0022\u0022type\u0022\u0022: \u0022\u0022JSON\u0022\u0022,\n        \u0022\u0022json\u0022\u0022 : \u0022\u0022{ \\\u0022\u0022id\\\u0022\u0022: 1, \\\u0022\u0022name\\\u0022\u0022: \\\u0022\u0022A green door\\\u0022\u0022, \\\u0022\u0022price\\\u0022\u0022: 12.50, \\\u0022\u0022tags\\\u0022\u0022: [\\\u0022\u0022home\\\u0022\u0022, \\\u0022\u0022green\\\u0022\u0022] }\u0022\u0022\n    }\n}\u0022;\r\n    // Act \u0026 Assert\r\n    Assert(expected, builder =\u003E builder.ContainingJson(content));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "MatchingJsonSchema",
        "Body": "{\r\n    // Arrange\r\n    const string content = @\u0022{\u0022\u0022$schema\u0022\u0022: \u0022\u0022http://json-schema.org/draft-04/schema#\u0022\u0022, \u0022\u0022title\u0022\u0022: \u0022\u0022Product\u0022\u0022, \u0022\u0022description\u0022\u0022: \u0022\u0022A product from Acme\u0027s catalog\u0022\u0022, \u0022\u0022type\u0022\u0022: \u0022\u0022object\u0022\u0022, \u0022\u0022properties\u0022\u0022: { \u0022\u0022id\u0022\u0022: { \u0022\u0022description\u0022\u0022: \u0022\u0022The unique identifier for a product\u0022\u0022, \u0022\u0022type\u0022\u0022: \u0022\u0022integer\u0022\u0022 }, \u0022\u0022name\u0022\u0022: { \u0022\u0022description\u0022\u0022: \u0022\u0022Name of the product\u0022\u0022, \u0022\u0022type\u0022\u0022: \u0022\u0022string\u0022\u0022}, \u0022\u0022price\u0022\u0022: { \u0022\u0022type\u0022\u0022: \u0022\u0022number\u0022\u0022, \u0022\u0022minimum\u0022\u0022: 0, \u0022\u0022exclusiveMinimum\u0022\u0022: true }, \u0022\u0022tags\u0022\u0022: { \u0022\u0022type\u0022\u0022: \u0022\u0022array\u0022\u0022, \u0022\u0022items\u0022\u0022: { \u0022\u0022type\u0022\u0022: \u0022\u0022string\u0022\u0022 }, \u0022\u0022minItems\u0022\u0022: 1, \u0022\u0022uniqueItems\u0022\u0022: true } }, \u0022\u0022required\u0022\u0022: [\u0022\u0022id\u0022\u0022, \u0022\u0022name\u0022\u0022, \u0022\u0022price\u0022\u0022] }\u0022;\r\n    const string expected = @\u0022{\n            \u0022\u0022body\u0022\u0022: {\n            \u0022\u0022type\u0022\u0022: \u0022\u0022JSON_SCHEMA\u0022\u0022,\n            \u0022\u0022jsonSchema\u0022\u0022 : \u0022\u0022{\\\u0022\u0022$schema\\\u0022\u0022: \\\u0022\u0022http://json-schema.org/draft-04/schema#\\\u0022\u0022, \\\u0022\u0022title\\\u0022\u0022: \\\u0022\u0022Product\\\u0022\u0022, \\\u0022\u0022description\\\u0022\u0022: \\\u0022\u0022A product from Acme\u0027s catalog\\\u0022\u0022, \\\u0022\u0022type\\\u0022\u0022: \\\u0022\u0022object\\\u0022\u0022, \\\u0022\u0022properties\\\u0022\u0022: { \\\u0022\u0022id\\\u0022\u0022: { \\\u0022\u0022description\\\u0022\u0022: \\\u0022\u0022The unique identifier for a product\\\u0022\u0022, \\\u0022\u0022type\\\u0022\u0022: \\\u0022\u0022integer\\\u0022\u0022 }, \\\u0022\u0022name\\\u0022\u0022: { \\\u0022\u0022description\\\u0022\u0022: \\\u0022\u0022Name of the product\\\u0022\u0022, \\\u0022\u0022type\\\u0022\u0022: \\\u0022\u0022string\\\u0022\u0022}, \\\u0022\u0022price\\\u0022\u0022: { \\\u0022\u0022type\\\u0022\u0022: \\\u0022\u0022number\\\u0022\u0022, \\\u0022\u0022minimum\\\u0022\u0022: 0, \\\u0022\u0022exclusiveMinimum\\\u0022\u0022: true }, \\\u0022\u0022tags\\\u0022\u0022: { \\\u0022\u0022type\\\u0022\u0022: \\\u0022\u0022array\\\u0022\u0022, \\\u0022\u0022items\\\u0022\u0022: { \\\u0022\u0022type\\\u0022\u0022: \\\u0022\u0022string\\\u0022\u0022 }, \\\u0022\u0022minItems\\\u0022\u0022: 1, \\\u0022\u0022uniqueItems\\\u0022\u0022: true } }, \\\u0022\u0022required\\\u0022\u0022: [\\\u0022\u0022id\\\u0022\u0022, \\\u0022\u0022name\\\u0022\u0022, \\\u0022\u0022price\\\u0022\u0022] }\u0022\u0022    }\n            }\u0022;\r\n    // Act \u0026 Assert\r\n    Assert(expected, builder =\u003E builder.MatchingJsonSchema(content));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "MatchingJsonPath",
        "Body": "{\r\n    // Arrange\r\n    const string content = \u0022$.store.book[?(@.price \u003C 10)]\u0022;\r\n    const string expected = @\u0022{\n    \u0022\u0022body\u0022\u0022: {\n        \u0022\u0022type\u0022\u0022: \u0022\u0022JSON_PATH\u0022\u0022,\n        \u0022\u0022jsonPath\u0022\u0022: \u0022\u0022$.store.book[?(@.price \u003C 10)]\u0022\u0022\n    }\n}\u0022;\r\n    // Act \u0026 Assert\r\n    Assert(expected, builder =\u003E builder.MatchingJsonPath(content));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "MatchingXPath",
        "Body": "{\r\n    // Arrange\r\n    const string content = \u0022/bookstore/book[price\u003E30]/price\u0022;\r\n    const string expected = @\u0022{\n    \u0022\u0022body\u0022\u0022: {\n        \u0022\u0022type\u0022\u0022: \u0022\u0022XPATH\u0022\u0022,\n        \u0022\u0022xpath\u0022\u0022: \u0022\u0022/bookstore/book[price\u003E30]/price\u0022\u0022\n    }\n}\u0022;\r\n    // Act \u0026 Assert\r\n    Assert(expected, builder =\u003E builder.MatchingXPath(content));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "WithXmlContent",
        "Body": "{\r\n    // Arrange\r\n    const string content = \u0022\u003Cbookstore\u003E \u003Cbook nationality=\\\u0022ITALIAN\\\u0022 category=\\\u0022COOKING\\\u0022\u003E\u003Ctitle lang=\\\u0022en\\\u0022\u003EEveryday Italian\u003C/title\u003E\u003Cauthor\u003EGiada De Laurentiis\u003C/author\u003E\u003Cyear\u003E2005\u003C/year\u003E\u003Cprice\u003E30.00\u003C/price\u003E\u003C/book\u003E \u003C/bookstore\u003E\u0022;\r\n    const string expected = @\u0022{\n    \u0022\u0022body\u0022\u0022: {\n        \u0022\u0022type\u0022\u0022: \u0022\u0022XML\u0022\u0022,\n        \u0022\u0022xml\u0022\u0022: \u0022\u0022\u003Cbookstore\u003E \u003Cbook nationality=\\\u0022\u0022ITALIAN\\\u0022\u0022 category=\\\u0022\u0022COOKING\\\u0022\u0022\u003E\u003Ctitle lang=\\\u0022\u0022en\\\u0022\u0022\u003EEveryday Italian\u003C/title\u003E\u003Cauthor\u003EGiada De Laurentiis\u003C/author\u003E\u003Cyear\u003E2005\u003C/year\u003E\u003Cprice\u003E30.00\u003C/price\u003E\u003C/book\u003E \u003C/bookstore\u003E\u0022\u0022\n    }\n}\u0022;\r\n    // Act \u0026 Assert\r\n    Assert(expected, builder =\u003E builder.WithXmlContent(content));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "MatchingXmlSchema",
        "Body": "{\r\n    // Arrange\r\n    const string content = \u0022\u003C?xml version=\\\u00221.0\\\u0022 encoding=\\\u0022UTF-8\\\u0022?\u003E \u003Cxs:schema xmlns:xs=\\\u0022http://www.w3.org/2001/XMLSchema\\\u0022 elementFormDefault=\\\u0022qualified\\\u0022 attributeFormDefault=\\\u0022unqualified\\\u0022\u003E \u003Cxs:element name=\\\u0022notes\\\u0022\u003E \u003Cxs:complexType\u003E \u003Cxs:sequence\u003E \u003Cxs:element name=\\\u0022note\\\u0022 maxOccurs=\\\u0022unbounded\\\u0022\u003E \u003Cxs:complexType\u003E \u003Cxs:sequence\u003E \u003Cxs:element name=\\\u0022to\\\u0022 minOccurs=\\\u00221\\\u0022 maxOccurs=\\\u00221\\\u0022 type=\\\u0022xs:string\\\u0022\u003E\u003C/xs:element\u003E \u003Cxs:element name=\\\u0022from\\\u0022 minOccurs=\\\u00221\\\u0022 maxOccurs=\\\u00221\\\u0022 type=\\\u0022xs:string\\\u0022\u003E\u003C/xs:element\u003E \u003Cxs:element name=\\\u0022heading\\\u0022 minOccurs=\\\u00221\\\u0022 maxOccurs=\\\u00221\\\u0022 type=\\\u0022xs:string\\\u0022\u003E\u003C/xs:element\u003E \u003Cxs:element name=\\\u0022body\\\u0022 minOccurs=\\\u00221\\\u0022 maxOccurs=\\\u00221\\\u0022 type=\\\u0022xs:string\\\u0022\u003E\u003C/xs:element\u003E \u003C/xs:sequence\u003E \u003C/xs:complexType\u003E \u003C/xs:element\u003E \u003C/xs:sequence\u003E \u003C/xs:complexType\u003E \u003C/xs:element\u003E \u003C/xs:schema\u003E\u0022;\r\n    const string expected = @\u0022{\n    \u0022\u0022body\u0022\u0022: {\n        \u0022\u0022type\u0022\u0022: \u0022\u0022XML_SCHEMA\u0022\u0022,\n        \u0022\u0022xmlSchema\u0022\u0022: \u0022\u0022\u003C?xml version=\\\u0022\u00221.0\\\u0022\u0022 encoding=\\\u0022\u0022UTF-8\\\u0022\u0022?\u003E \u003Cxs:schema xmlns:xs=\\\u0022\u0022http://www.w3.org/2001/XMLSchema\\\u0022\u0022 elementFormDefault=\\\u0022\u0022qualified\\\u0022\u0022 attributeFormDefault=\\\u0022\u0022unqualified\\\u0022\u0022\u003E \u003Cxs:element name=\\\u0022\u0022notes\\\u0022\u0022\u003E \u003Cxs:complexType\u003E \u003Cxs:sequence\u003E \u003Cxs:element name=\\\u0022\u0022note\\\u0022\u0022 maxOccurs=\\\u0022\u0022unbounded\\\u0022\u0022\u003E \u003Cxs:complexType\u003E \u003Cxs:sequence\u003E \u003Cxs:element name=\\\u0022\u0022to\\\u0022\u0022 minOccurs=\\\u0022\u00221\\\u0022\u0022 maxOccurs=\\\u0022\u00221\\\u0022\u0022 type=\\\u0022\u0022xs:string\\\u0022\u0022\u003E\u003C/xs:element\u003E \u003Cxs:element name=\\\u0022\u0022from\\\u0022\u0022 minOccurs=\\\u0022\u00221\\\u0022\u0022 maxOccurs=\\\u0022\u00221\\\u0022\u0022 type=\\\u0022\u0022xs:string\\\u0022\u0022\u003E\u003C/xs:element\u003E \u003Cxs:element name=\\\u0022\u0022heading\\\u0022\u0022 minOccurs=\\\u0022\u00221\\\u0022\u0022 maxOccurs=\\\u0022\u00221\\\u0022\u0022 type=\\\u0022\u0022xs:string\\\u0022\u0022\u003E\u003C/xs:element\u003E \u003Cxs:element name=\\\u0022\u0022body\\\u0022\u0022 minOccurs=\\\u0022\u00221\\\u0022\u0022 maxOccurs=\\\u0022\u00221\\\u0022\u0022 type=\\\u0022\u0022xs:string\\\u0022\u0022\u003E\u003C/xs:element\u003E \u003C/xs:sequence\u003E \u003C/xs:complexType\u003E \u003C/xs:element\u003E \u003C/xs:sequence\u003E \u003C/xs:complexType\u003E \u003C/xs:element\u003E \u003C/xs:schema\u003E\u0022\u0022\n    }\n}\u0022;\r\n    // Act \u0026 Assert\r\n    Assert(expected, builder =\u003E builder.MatchingXmlSchema(content));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ContainingSubstring",
        "Body": "{\r\n    // Arrange\r\n    const string content = \u0022some_string\u0022;\r\n    const string expected = @\u0022{\n    \u0022\u0022body\u0022\u0022: {\n        \u0022\u0022type\u0022\u0022: \u0022\u0022STRING\u0022\u0022,\n        \u0022\u0022string\u0022\u0022: \u0022\u0022some_string\u0022\u0022,\n        \u0022\u0022subString\u0022\u0022: true\n    }\n}\u0022;\r\n    // Act \u0026 Assert\r\n    Assert(expected, builder =\u003E builder.ContainingSubstring(content));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "WithExactContent",
        "Body": "{\r\n    // Arrange\r\n    const string content = \u0022some_string\u0022;\r\n    const string expected = @\u0022{\n    \u0022\u0022body\u0022\u0022: {\n        \u0022\u0022type\u0022\u0022: \u0022\u0022STRING\u0022\u0022,\n        \u0022\u0022string\u0022\u0022: \u0022\u0022some_string\u0022\u0022\n    }\n}\u0022;\r\n    // Act \u0026 Assert\r\n    Assert(expected, builder =\u003E builder.WithExactContent(content));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "WithExactStringAndContentType",
        "Body": "{\r\n    // Arrange\r\n    const string content = \u0022some_string\u0022;\r\n    const string expected = @\u0022{\n    \u0022\u0022body\u0022\u0022: {\n        \u0022\u0022type\u0022\u0022: \u0022\u0022STRING\u0022\u0022,\n        \u0022\u0022string\u0022\u0022: \u0022\u0022some_string\u0022\u0022,\n        \u0022\u0022contentType\u0022\u0022: \u0022\u0022application/json\u0022\u0022\n    }\n}\u0022;\r\n    // Act \u0026 Assert\r\n    Assert(expected, builder =\u003E builder.WithExactContent(content, \u0022application/json\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FluentConnectionBuilderTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "Should_Set_When_KeepAliveOverride",
        "Body": "{\r\n    // Arrange\r\n    var sut = CreateSubject();\r\n    // Act\r\n    sut.WithKeepAliveOverride(keepAliveOverride);\r\n    var result = sut.Build();\r\n    // Assert\r\n    result.KeepAliveOverride.Should().Be(keepAliveOverride);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Set_SuppressConnectionHeader",
        "Body": "{\r\n    // Arrange\r\n    var sut = CreateSubject();\r\n    // Act\r\n    sut.WithSuppressConnectionHeader(suppressConnectionHeader);\r\n    var result = sut.Build();\r\n    // Assert\r\n    result.SuppressConnectionHeader.Should().Be(suppressConnectionHeader);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Set_SuppressContentLengthHeader",
        "Body": "{\r\n    // Arrange\r\n    var sut = CreateSubject();\r\n    // Act\r\n    sut.WithSuppressContentLengthHeader(suppressContentLengthHeader);\r\n    var result = sut.Build();\r\n    // Assert\r\n    result.SuppressContentLengthHeader.Should().Be(suppressContentLengthHeader);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Set_ContentLengthHeaderOverride",
        "Body": "{\r\n    // Arrange\r\n    var sut = CreateSubject();\r\n    // Act\r\n    sut.WithContentLengthHeaderOverride(contentLengthHeaderOverride);\r\n    var result = sut.Build();\r\n    // Assert\r\n    result.ContentLengthHeaderOverride.Should().Be(contentLengthHeaderOverride);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Set_CloseSocket",
        "Body": "{\r\n    // Arrange\r\n    var sut = CreateSubject();\r\n    // Act\r\n    sut.WithCloseSocket(closeSocket);\r\n    var result = sut.Build();\r\n    // Assert\r\n    result.CloseSocket.Should().Be(closeSocket);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FluentDelayBuilderTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "Should_Set_Delay",
        "Body": "{\r\n    // Arrange\r\n    var sut = CreateSubject();\r\n    // Act\r\n    switch (timeUnit)\r\n    {\r\n        case TimeUnit.Nanoseconds:\r\n        case TimeUnit.Microseconds:\r\n        case TimeUnit.Hours:\r\n        case TimeUnit.Days:\r\n            throw new NotSupportedException($\u0022The {nameof(TimeUnit)} \u0027{timeUnit.ToString()}\u0027 s not yet implemented.\u0022);\r\n        case TimeUnit.Milliseconds:\r\n            sut.FromMilliSeconds(value);\r\n            break;\r\n        case TimeUnit.Seconds:\r\n            sut.FromSeconds(value);\r\n            break;\r\n        case TimeUnit.Minutes:\r\n            sut.FromMinutes(value);\r\n            break;\r\n        default:\r\n            throw new ArgumentOutOfRangeException(nameof(timeUnit), timeUnit, null);\r\n    }\r\n\r\n    var result = sut.Build();\r\n    // Assert\r\n    result.Value.Should().Be(value);\r\n    result.TimeUnit.Should().Be(timeUnit);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "JsonParserData",
    "Message": "This class has Lack of Cohesion of Test Cases",
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "Should_Serialize_Binary_Content",
        "Body": "{\r\n    // Arrange\r\n    var httpResponse = new HttpResponse\r\n    {\r\n        Body = new BinaryContent(\u0022iVBORw0KGgoAAAANSUhEUgAAAqwAAAApCAIAAAB\u0022),\r\n        Delay = new Delay(TimeUnit.Milliseconds, 50)\r\n    };\r\n    // Act\r\n    Serializer.SerializeJObject(httpResponse);\r\n    var json = Serializer.Serialize(httpResponse);\r\n    Output.WriteLine(json);\r\n    const string expected = @\u0022\n{\n    \u0022\u0022delay\u0022\u0022: {\n        \u0022\u0022timeUnit\u0022\u0022: \u0022\u0022MILLISECONDS\u0022\u0022,\n        \u0022\u0022value\u0022\u0022: 50\n    },\n    \u0022\u0022body\u0022\u0022: {\n        \u0022\u0022base64Bytes\u0022\u0022: \u0022\u0022iVBORw0KGgoAAAANSUhEUgAAAqwAAAApCAIAAAB\u0022\u0022,\n        \u0022\u0022type\u0022\u0022: \u0022\u0022BINARY\u0022\u0022\n    }\n}\u0022;\r\n    // Assert\r\n    var expectedJObject = JObject.Parse(expected);\r\n    var actualJObject = JObject.Parse(json);\r\n    JToken.EqualityComparer.Equals(actualJObject, expectedJObject).Should().BeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Parse_Strings",
        "Body": "{\r\n    // Act\r\n    if (!Parser.TryParsePartialJson(json, out var result, out var exceptionPath))\r\n    {\r\n        Output.WriteLine(exceptionPath);\r\n        throw new XunitException($\u0022Parsing the input {json} failed.\u0022);\r\n    }\r\n\r\n    Output.WriteLine(result.ToString(Formatting.Indented));\r\n    result.ToString().Should().Be(jToken.ToString());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ContentSerializationTests",
    "Message": "This class has Lack of Cohesion of Test Cases",
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "Should_Serialize_Binary_Content",
        "Body": "{\r\n    // Arrange\r\n    var httpResponse = new HttpResponse\r\n    {\r\n        Body = new BinaryContent(\u0022iVBORw0KGgoAAAANSUhEUgAAAqwAAAApCAIAAAB\u0022),\r\n        Delay = new Delay(TimeUnit.Milliseconds, 50)\r\n    };\r\n    // Act\r\n    Serializer.SerializeJObject(httpResponse);\r\n    var json = Serializer.Serialize(httpResponse);\r\n    Output.WriteLine(json);\r\n    const string expected = @\u0022\n{\n    \u0022\u0022delay\u0022\u0022: {\n        \u0022\u0022timeUnit\u0022\u0022: \u0022\u0022MILLISECONDS\u0022\u0022,\n        \u0022\u0022value\u0022\u0022: 50\n    },\n    \u0022\u0022body\u0022\u0022: {\n        \u0022\u0022base64Bytes\u0022\u0022: \u0022\u0022iVBORw0KGgoAAAANSUhEUgAAAqwAAAApCAIAAAB\u0022\u0022,\n        \u0022\u0022type\u0022\u0022: \u0022\u0022BINARY\u0022\u0022\n    }\n}\u0022;\r\n    // Assert\r\n    var expectedJObject = JObject.Parse(expected);\r\n    var actualJObject = JObject.Parse(json);\r\n    JToken.EqualityComparer.Equals(actualJObject, expectedJObject).Should().BeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Parse_Strings",
        "Body": "{\r\n    // Act\r\n    if (!Parser.TryParsePartialJson(json, out var result, out var exceptionPath))\r\n    {\r\n        Output.WriteLine(exceptionPath);\r\n        throw new XunitException($\u0022Parsing the input {json} failed.\u0022);\r\n    }\r\n\r\n    Output.WriteLine(result.ToString(Formatting.Indented));\r\n    result.ToString().Should().Be(jToken.ToString());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Parser",
    "Message": "This class has Lack of Cohesion of Test Cases",
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "Should_Serialize_Binary_Content",
        "Body": "{\r\n    // Arrange\r\n    var httpResponse = new HttpResponse\r\n    {\r\n        Body = new BinaryContent(\u0022iVBORw0KGgoAAAANSUhEUgAAAqwAAAApCAIAAAB\u0022),\r\n        Delay = new Delay(TimeUnit.Milliseconds, 50)\r\n    };\r\n    // Act\r\n    Serializer.SerializeJObject(httpResponse);\r\n    var json = Serializer.Serialize(httpResponse);\r\n    Output.WriteLine(json);\r\n    const string expected = @\u0022\n{\n    \u0022\u0022delay\u0022\u0022: {\n        \u0022\u0022timeUnit\u0022\u0022: \u0022\u0022MILLISECONDS\u0022\u0022,\n        \u0022\u0022value\u0022\u0022: 50\n    },\n    \u0022\u0022body\u0022\u0022: {\n        \u0022\u0022base64Bytes\u0022\u0022: \u0022\u0022iVBORw0KGgoAAAANSUhEUgAAAqwAAAApCAIAAAB\u0022\u0022,\n        \u0022\u0022type\u0022\u0022: \u0022\u0022BINARY\u0022\u0022\n    }\n}\u0022;\r\n    // Assert\r\n    var expectedJObject = JObject.Parse(expected);\r\n    var actualJObject = JObject.Parse(json);\r\n    JToken.EqualityComparer.Equals(actualJObject, expectedJObject).Should().BeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Parse_Strings",
        "Body": "{\r\n    // Act\r\n    if (!Parser.TryParsePartialJson(json, out var result, out var exceptionPath))\r\n    {\r\n        Output.WriteLine(exceptionPath);\r\n        throw new XunitException($\u0022Parsing the input {json} failed.\u0022);\r\n    }\r\n\r\n    Output.WriteLine(result.ToString(Formatting.Indented));\r\n    result.ToString().Should().Be(jToken.ToString());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "InternalMember",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "Should_SetValueProvider_For_Each_BuildableBaseMember",
        "Body": "{\r\n    // Arrange\r\n    var sut = new Response(100);\r\n    sut.Headers.Add(\u0022Content-Type\u0022, \u0022application/json\u0022);\r\n    // Act\r\n    var jo = Serializer.SerializeJObject(sut);\r\n    Output.Dump(jo);\r\n    TraceWriter.GetTraceMessages().ToList().ForEach(m =\u003E Output.Dump(m));\r\n    // Assert\r\n    jo.Should().NotBeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Response",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "Should_SetValueProvider_For_Each_BuildableBaseMember",
        "Body": "{\r\n    // Arrange\r\n    var sut = new Response(100);\r\n    sut.Headers.Add(\u0022Content-Type\u0022, \u0022application/json\u0022);\r\n    // Act\r\n    var jo = Serializer.SerializeJObject(sut);\r\n    Output.Dump(jo);\r\n    TraceWriter.GetTraceMessages().ToList().ForEach(m =\u003E Output.Dump(m));\r\n    // Assert\r\n    jo.Should().NotBeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ContractResolverTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "Should_SetValueProvider_For_Each_BuildableBaseMember",
        "Body": "{\r\n    // Arrange\r\n    var sut = new Response(100);\r\n    sut.Headers.Add(\u0022Content-Type\u0022, \u0022application/json\u0022);\r\n    // Act\r\n    var jo = Serializer.SerializeJObject(sut);\r\n    Output.Dump(jo);\r\n    TraceWriter.GetTraceMessages().ToList().ForEach(m =\u003E Output.Dump(m));\r\n    // Assert\r\n    jo.Should().NotBeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ExpectationConverterTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "Should_Use_ExpectationConverter_When_Using_Standard_Deserializer",
        "Body": "{\r\n    // Arrange\r\n    const string json = @\u0022{\n  \u0022\u0022httpRequest\u0022\u0022: {\n    \u0022\u0022path\u0022\u0022: \u0022\u0022/some/path\u0022\u0022\n  }\n}\u0022;\r\n    var builder = new FluentHttpRequestBuilder().WithPath(\u0022/some/path\u0022);\r\n    // Act\r\n    var unused = new Verify(builder.Build(), VerificationTimes.Once);\r\n    var expected = FluentExpectationBuilder.Create(httpRequest: builder.Build());\r\n    // Act\r\n    var result = JsonConvert.DeserializeObject\u003CExpectation\u003E(json);\r\n    // Assert\r\n    result.Should().BeOfType\u003CExpectation\u003E().Which.HttpRequest.Path.Should().Be(expected.HttpRequest.Path);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Convert_To_Expectation_When_Converting_From_String",
        "Body": "{\r\n    // Arrange\r\n    const string json = @\u0022{\n  \u0022\u0022httpRequest\u0022\u0022: {\n    \u0022\u0022path\u0022\u0022: \u0022\u0022/some/path\u0022\u0022\n  },\n \u0022\u0022httpResponse\u0022\u0022: {\n    \u0022\u0022statusCode\u0022\u0022: 201,\n    \u0022\u0022delay\u0022\u0022: {\n      \u0022\u0022timeUnit\u0022\u0022: \u0022\u0022MILLISECONDS\u0022\u0022,\n      \u0022\u0022value\u0022\u0022: 1\n    }\n  },\n  \u0022\u0022times\u0022\u0022: {\n    \u0022\u0022remainingTimes\u0022\u0022: 1,\n    \u0022\u0022unlimited\u0022\u0022: false\n  }\n}\u0022;\r\n    var builder = new FluentHttpRequestBuilder().WithPath(\u0022/some/path\u0022);\r\n    var expected = FluentExpectationBuilder.Create(builder.Build(), new HttpResponse { StatusCode = 201, Delay = new Delay(TimeUnit.Milliseconds, 1), }, times: Times.Once);\r\n    // Act\r\n    var jsonReader = new JsonTextReader(new StringReader(json));\r\n    var sut = new ExpectationConverter();\r\n    var result = sut.ReadJson(jsonReader, typeof(Expectation), null, JsonSerializer.Create(Serializer.SerializerSettings)) as Expectation;\r\n    // Assert\r\n    result.Should().BeOfType\u003CExpectation\u003E().Which.HttpRequest.Path.Should().Be(expected.HttpRequest.Path);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Use_ExpectationConverter_When_Using_Standard_Serializer",
        "Body": "{\r\n    // Arrange\r\n    var expected = JObject.Parse(@\u0022{\n  \u0022\u0022httpRequest\u0022\u0022: {\n    \u0022\u0022path\u0022\u0022: \u0022\u0022/some/path\u0022\u0022\n  }\n}\u0022).ToString(Formatting.Indented);\r\n    var builder = new FluentHttpRequestBuilder().WithPath(\u0022/some/path\u0022);\r\n    var expectation = FluentExpectationBuilder.Create(httpRequest: builder.Build());\r\n    // Act\r\n    var json = JsonConvert.SerializeObject(expectation);\r\n    // Assert\r\n    json.Should().Be(expected);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Convert_Expectation_To_Json",
        "Body": "{\r\n    // Arrange\r\n    var expected = JObject.Parse(@\u0022{\n  \u0022\u0022httpRequest\u0022\u0022: {\n    \u0022\u0022path\u0022\u0022: \u0022\u0022/some/path\u0022\u0022\n  }\n}\u0022).ToString(Formatting.Indented);\r\n    var builder = new FluentHttpRequestBuilder().WithPath(\u0022/some/path\u0022);\r\n    var expectation = FluentExpectationBuilder.Create(httpRequest: builder.Build());\r\n    var subject = CreateSubject(out var sb, out var writer);\r\n    // Act\r\n    subject.WriteJson(writer, expectation, JsonSerializer.CreateDefault());\r\n    // Assert\r\n    var json = sb.ToString();\r\n    json.Should().Be(expected);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ExpectationSerializationTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "SerializeJObject_Should_Use_SerializeJObject_Of_Properties",
        "Body": "{\r\n    // Arrange\r\n    var builder = new FluentHttpRequestBuilder().WithPath(\u0022\u0022).WithMethod(HttpMethod.Post).WithContent(body =\u003E body.WithoutXmlContent(\u0022\u003Cxml here\u003E\u0022));\r\n    var expectation = FluentExpectationBuilder.Create(builder.Build(), new HttpResponse { Headers = new Dictionary\u003Cstring, string[]\u003E { { \u0022Content-Type\u0022, new[] { \u0022xml\u0022 } } }, Body = new JValue(\u0022some xml response\u0022), Delay = new Delay(TimeUnit.Milliseconds, 50), StatusCode = 200 });\r\n    // Act\r\n    var jo = Serializer.SerializeJObject(expectation);\r\n    var json = Serializer.Serialize(expectation);\r\n    Logger.LogInformation(\u0022JSON\u0022, json);\r\n    // Assert\r\n    jo[\u0022httpResponse\u0022][\u0022body\u0022].ToObject\u003Cstring\u003E().Should().Be(\u0022some xml response\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HttpRequestSerializationTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "Should_Serialize_HttpRequests_As_Expected",
        "Body": "{\r\n    // Act \u0026 Assert\r\n    var json = JsonConvert.SerializeObject(request, Formatting.Indented);\r\n    Output.WriteLine(json);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HttpResponseSerializationTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "Get_Body_Returns_Null_If_Content_Is_Null",
        "Body": "{\r\n    // Arrange\r\n    var response = new HttpResponse();\r\n    // Act \u0026 Assert\u003C\r\n    response.Body.Should().BeNull($\u0022{nameof(HttpResponse.Body)} is null.\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_Body_Returns_JProperty_When_Set_To_Literal",
        "Body": "{\r\n    // Arrange\r\n    var expected = new JObject(new JProperty(\u0022body\u0022, \u0022Hello World!\u0022));\r\n    // Act\r\n    var response = new HttpResponse\r\n    {\r\n        Body = new JValue(\u0022Hello World!\u0022)\r\n    };\r\n    // Assert\r\n    var jo = Serializer.SerializeJObject(response);\r\n    Output.Dump(jo);\r\n    jo.Should().BeEquivalentTo(expected);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UpperCaseEnumConverterTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "Should_TESTNAME",
        "Body": "{\r\n    // Act\r\n    var result = JsonConvert.SerializeObject(timeUnit);\r\n    _outputHelper.WriteLine(result);\r\n    // Assert\r\n    result.Should().Be($@\u0022 \u0022\u0022{expected}\u0022\u0022\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ProsaTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "Should_Setup_Multiple_Expectationst_At_Once",
        "Body": "{\r\n    var builder = new FluentExpectationBuilder();\r\n    var setup = builder.OnHandling(HttpMethod.Delete, request =\u003E request.WithContent(content =\u003E content.MatchingXPath(\u0022//id\u0022)).WithPath(\u0022post\u0022).EnableEncryption().KeepConnectionAlive()).RespondWith(HttpStatusCode.Accepted, response =\u003E response.ConfigureConnection(opt =\u003E opt.Build()).ConfigureHeaders(opt =\u003E\r\n    {\r\n        opt.AddContentType(CommonContentType.Json);\r\n        opt.Add(\u0022Basic\u0022, \u0022cqwr\u0022);\r\n    }).WithStatusCode(100).WithBody(\u0022hello world!\u0022).WithDelay(1, TimeUnit.Minutes)).And.OnHandling(HttpMethod.Delete, request =\u003E request.WithPath(\u0022post\u0022).EnableEncryption().KeepConnectionAlive()).RespondWith(HttpStatusCode.Accepted, response =\u003E response.WithBody(Encoding.UTF8.GetBytes(\u0022ewogICAgIk5hbWUiOiAiQWxleCIKfQ==\u0022))).Setup();\r\n    var json = setup.ToString();\r\n    _output.WriteLine(json);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "LoggerTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "Should_Log_Messages",
        "Body": "{\r\n    // Act\r\n    await MockClient.ResetAsync();\r\n    // Assert\r\n    var logs = XunitContext.Logs;\r\n    logs.Should().Contain(\u0022Resetting MockServer...\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ManualMockServerSetupTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "Should_Successfully_Setup_Up_Expecation_On_MockServer",
        "Body": "{\r\n    // Act\r\n    await MockClient.SetupAsync(exp =\u003E exp.OnHandling(HttpMethod.Get, req =\u003E req.WithPath(\u0022/test\u0022)).RespondOnce(HttpStatusCode.Created, resp =\u003E resp.WithDelay(50, TimeUnit.Milliseconds)).Setup());\r\n    // Assert\r\n    var response = await HttpClient.GetAsync(\u0022test\u0022);\r\n    response.StatusCode.Should().Be(HttpStatusCode.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Reset_Expecation_On_MockServer",
        "Body": "{\r\n    // Arrange\r\n    await MockClient.SetupAsync(exp =\u003E exp.OnHandling(HttpMethod.Get, req =\u003E req.WithPath(\u0022/test\u0022)).RespondOnce(HttpStatusCode.Created, resp =\u003E resp.WithDelay(50, TimeUnit.Milliseconds)).Setup());\r\n    // Act\r\n    await MockClient.ResetAsync();\r\n    // Assert\r\n    var response = await HttpClient.GetAsync(\u0022test\u0022);\r\n    response.StatusCode.Should().Be(HttpStatusCode.NotFound);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Verify_Expecation_Was_Met_On_MockServer",
        "Body": "{\r\n    // Arrange\r\n    var request = new HttpRequestMessage(HttpMethod.Get, new Uri(\u0022test\u0022, UriKind.Relative));\r\n    await HttpClient.SendAsync(request);\r\n    // Act\r\n    await MockClient.VerifyAsync(v =\u003E v.WithMethod(HttpMethod.Get).WithPath(\u0022test\u0022), VerificationTimes.MoreThan(1));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MockServerClientTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "ListSetupsAsync_Returns_One_Active_Setups_When_One_Setup_Is_Active",
        "Body": "{\r\n    // Arrange\r\n    await MockClient.SetupAsync(_ =\u003E _.OnHandlingAny(HttpMethod.Patch).RespondOnce(HttpStatusCode.OK).Setup());\r\n    // Act\r\n    var response = await MockClient.ListSetupsAsync();\r\n    // Assert\r\n    response.Should().ContainSingle().Subject.HttpRequest.Method.Should().Be(\u0022PATCH\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ListRequestsAsync_Returns_All_Requests_The_MockServer_Received",
        "Body": "{\r\n    // Arrange\r\n    await HttpClient.GetAsync(\u0022a\u0022);\r\n    await HttpClient.PostAsync(\u0022b\u0022, new JsonContent(new { Type = \u0022Request\u0022, Value = 1 }));\r\n    await HttpClient.GetAsync(\u0022c\u0022);\r\n    // Act\r\n    var response = await MockClient.ListRequestsAsync();\r\n    // Assert\r\n    response.Should().HaveCount(3);\r\n    var a = response.First();\r\n    a.Path.Should().Be(\u0022/a\u0022);\r\n    a.Method.Should().Be(\u0022GET\u0022);\r\n    var b = response.ElementAt(1);\r\n    Dump(b, \u0022B\u0022);\r\n    b.Path.Should().Be(\u0022/b\u0022);\r\n    b.Method.Should().Be(\u0022POST\u0022);\r\n    b.Body.Value\u003Cstring\u003E(\u0022type\u0022).Should().Be(\u0022STRING\u0022);\r\n    var bodyValue = b.Body.Value\u003Cstring\u003E(\u0022string\u0022);\r\n    bodyValue.Should().Be(\u0022{\\n  \\\u0022type\\\u0022: \\\u0022Request\\\u0022,\\n  \\\u0022value\\\u0022: 1\\n}\u0022);\r\n    var c = response.Last();\r\n    c.Path.Should().Be(\u0022/c\u0022);\r\n    c.Method.Should().Be(\u0022GET\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RemoveSetupsAsync_Removes_Active_Setups_When_Match",
        "Body": "{\r\n    // Arrange\r\n    await MockClient.SetupAsync(_ =\u003E _.OnHandlingAny(HttpMethod.Get).RespondOnce(HttpStatusCode.OK).And.OnHandlingAny(HttpMethod.Post).RespondOnce(HttpStatusCode.NoContent).Setup());\r\n    // Act\r\n    await MockClient.RemoveSetupsAsync(_ =\u003E _.WithMethod(HttpMethod.Get));\r\n    // Assert\r\n    var response = await MockClient.ListSetupsAsync();\r\n    response.Should().ContainSingle();\r\n    response.Single().HttpRequest.Method.Should().Be(\u0022POST\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MockServerContextTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "Name_Should_Be_Unique_TestClassTestMethod_Name",
        "Body": "{\r\n    // Arrange \u0026 Act\r\n    var context = Fixture.Register(Output);\r\n    Output.WriteLine($\u0022Name={context.Name};\u0022);\r\n    // Assert\r\n    context.Name.Should().Be(XunitContext.Context.UniqueTestName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Id_Should_Be_Null_When_No_Context_Specififed",
        "Body": "{\r\n    // Arrange \u0026 Act\r\n    var context = Fixture.Register(Output);\r\n    Output.WriteLine($\u0022Id={context.Id};\u0022);\r\n    // Assert\r\n    context.Id.Should().BeNullOrEmpty();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Id_Should_Equal_Name_When_Isolated",
        "Body": "{\r\n    // Arrange \u0026 Act\r\n    var context = Fixture.Register(Output);\r\n    Output.WriteLine($\u0022Id={context.Id};\u0022);\r\n    // Assert\r\n    context.Id.Should().Be(XunitContext.Context.UniqueTestName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Id_Should_Be_Equal_To_The_CollectionAttribute_Value",
        "Body": "{\r\n    // Arrange \u0026 Act\r\n    var context = Fixture.Register(Output);\r\n    Output.WriteLine($\u0022Id={context.Id};\u0022);\r\n    // Assert\r\n    context.Id.Should().Be(\u0022feat(client): concurrent context domains\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MockServerFixtureTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "Should_Reset_Expectation_On_MockServer",
        "Body": "{\r\n    // Arrange\r\n    await MockClient.SetupAsync(exp =\u003E exp.OnHandling(HttpMethod.Get, req =\u003E req.WithPath(\u0022/test\u0022)).RespondOnce(HttpStatusCode.Created, resp =\u003E resp.WithDelay(50, TimeUnit.Milliseconds)).Setup());\r\n    // Act\r\n    await MockClient.ResetAsync();\r\n    // Assert\r\n    var response = await HttpClient.GetAsync(\u0022test\u0022);\r\n    response.StatusCode.Should().Be(HttpStatusCode.NotFound);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Successfully_Setup_Up_Expectation_On_MockServer",
        "Body": "{\r\n    // Arrange\r\n    await MockClient.SetupAsync(exp =\u003E exp.OnHandling(HttpMethod.Get, req =\u003E req.WithPath(\u0022/test\u0022)).RespondOnce(HttpStatusCode.Created, resp =\u003E resp.WithDelay(50, TimeUnit.Milliseconds)).Setup());\r\n    var response = await HttpClient.GetAsync(\u0022test\u0022);\r\n    response.StatusCode.Should().Be(HttpStatusCode.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Successfully_Setup_Up_Expectation_On_MockServer2",
        "Body": "{\r\n    // Arrange\r\n    Func\u003CIFluentExpectationBuilder, MockServerSetup\u003E factory = e =\u003E e.OnHandling(HttpMethod.Get, req =\u003E req.WithPath(\u0022/test\u0022)).RespondWith(HttpStatusCode.Created, resp =\u003E resp.WithDelay(50, TimeUnit.Milliseconds)).Setup();\r\n    var builder = new FluentExpectationBuilder(new MockServerSetup());\r\n    foreach (var setupExpectation in factory(builder).Expectations)\r\n    {\r\n        Output.WriteLine(Serializer.Serialize(setupExpectation));\r\n    }\r\n\r\n    // Act\r\n    var expectation = factory(builder).Expectations.First();\r\n    Output.WriteLine(Serializer.Serialize(expectation));\r\n    await MockClient.SetupAsync(factory);\r\n    var response = await HttpClient.GetAsync(\u0022/test\u0022);\r\n    response.StatusCode.Should().Be(HttpStatusCode.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Verify_Expectation_Was_Met_On_MockServer",
        "Body": "{\r\n    // Arrange\r\n    await MockClient.SetupAsync(exp =\u003E exp.OnHandling(HttpMethod.Get, req =\u003E req.WithPath(\u0022/test\u0022)).RespondOnce(HttpStatusCode.Created, resp =\u003E resp.WithDelay(50, TimeUnit.Milliseconds)).Setup());\r\n    await HttpClient.GetAsync(\u0022test\u0022);\r\n    var builder = new FluentHttpRequestBuilder();\r\n    builder.WithMethod(HttpMethod.Get).WithPath(\u0022/test\u0022);\r\n    // Act\r\n    await MockClient.VerifyAsync(v =\u003E v.WithPath(\u0022/test\u0022).WithMethod(HttpMethod.Get), VerificationTimes.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MockTestFrameworkTests",
    "Message": "This class has Lack of Cohesion of Test Cases",
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "Should_Discover",
        "Body": "{\r\n    Output.WriteLine(\u0022Discovered!\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Set_ContextHeader_On_HttpClient_Requests",
        "Body": "{\r\n    // Act\r\n    var result = await HttpClient.GetAsync(\u0022http://google.com\u0022);\r\n    // Assert\r\n    if (result.RequestMessage.TryGetMockContextHeader(out var context))\r\n    {\r\n        context.Should().Contain(Context.Id);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Discover_Isolate",
        "Body": "{\r\n    // Assert\r\n    ContextRegistry.Instance.Isolated.Count(m =\u003E m == XunitContext.Context.MethodInfo).Should().Be(1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Discover_Set_Unique_Id",
        "Body": "{\r\n    // Arrange\r\n    Context.Id.Should().NotBeNullOrWhiteSpace();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Set_Unique_Id_In_Header",
        "Body": "{\r\n    // Arrange\r\n    Output.WriteLine($\u0022Id = {Context.Id}\u0022);\r\n    // Act\r\n    var response = await Context.HttpClient.GetAsync(\u0022https://google.com\u0022);\r\n    // Assert\r\n    response.RequestMessage.TryGetMockContextHeader(out var contextId).Should().BeTrue();\r\n    contextId.Should().Be(Context.Id);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Invoke_GlobalSetup",
        "Body": "{\r\n    GlobalSetup.Called.Should().BeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SoapServiceTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "Should_Setup_Expectation_With_Xml_Body_When_Setup_Using_Predefined_Setup",
        "Body": "{\r\n    // Arrange\r\n    const string id1 = \u0022IP-100001\u0022;\r\n    const string id2 = \u002210001234\u0022;\r\n    const string contentType = \u0022text/xml; charset=utf-8\u0022;\r\n    var response = ResponseTemplate.Replace(\u0022{Id1}\u0022, id1).Replace(\u0022{Id2}\u0022, id2);\r\n    // Act\r\n    await MockedServer.SetupAsync(_ =\u003E _.OnHandlingAny().RespondWith(r =\u003E r.WithBody(response).AddContentType(contentType).WithDelay(50, TimeUnit.Milliseconds)).Setup());\r\n    var responseMessage = await HttpClient.GetAsync(\u0022test\u0022);\r\n    // Assert\r\n    var responseContentType = responseMessage.Content.Headers.ContentType.ToString();\r\n    var responseBody = await responseMessage.Content.ReadAsStringAsync();\r\n    Dump(responseContentType, \u0022Response Content-Type\u0022);\r\n    Dump(responseBody, \u0022Response Body\u0022);\r\n    responseBody.Should().Be(response);\r\n    responseContentType.Should().Be(contentType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "VerificationTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.Tests",
    "Methods": [
      {
        "Name": "VerifyAsync_Should_Return_True_When_MockServer_Recieved_Matching_Setup",
        "Body": "{\r\n    // Arrange\r\n    await HttpClient.GetAsync(\u0022test\u0022);\r\n    // Act\r\n    await MockClient.VerifyAsync(v =\u003E v.WithPath(\u0022test\u0022), VerificationTimes.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "VerifyAsync_Should_Return_False_When_MockServer_Recieved_No_Matching_Setup",
        "Body": "{\r\n    // Act\r\n    Func\u003CTask\u003E action = async () =\u003E await MockClient.VerifyAsync(v =\u003E v.WithPath(\u0022test\u0022), VerificationTimes.Once);\r\n    // Assert\r\n    action.Should().ThrowExactly\u003CMockServerVerificationException\u003E();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "VerifyAsync_Should_Return_True_When_MockServer_Recieved_In_Context",
        "Body": "{\r\n    // Act\r\n    // MockClient.SetupAsync()\r\n    Func\u003CTask\u003E action = async () =\u003E await MockClient.VerifyAsync(v =\u003E v.WithPath(\u0022test\u0022), VerificationTimes.Once);\r\n    // Assert\r\n    action.Should().ThrowExactly\u003CMockServerVerificationException\u003E();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigurationProviderTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.API.Tests",
    "Methods": [
      {
        "Name": "Returns_ConfigurationFile_When_Only_One_Yaml_File",
        "Body": "{\r\n    // Arrange\r\n    var fs = new MockFileSystem(new Dictionary\u003Cstring, MockFileData\u003E { { \u0022/etc/mock-server/config/a.yaml\u0022, new MockFileData(@\u0022\n- Action:\n    Response:\n      StatusCode: 200\n      Body: \u0022\u0022some body \\n over \\n multiple \\nlines\u0022\u0022\n\u0022) }, { \u0022/etc/mock-server/config/b.yml\u0022, new MockFileData(@\u0022\n- Matcher:\n    Path: /some/path\n    Method: POST\n  Action:\n    Response:\n      StatusCode: 201\n- Matcher:\n    Path: /\n    Headers:\n      Content-Type:\n        - application/json\n        - application/cloudevents\u002Bjson\n      Content-Length:\n        - 105\n\u0022) } });\r\n    var sut = new ConfigFileProvider(fs, CreateLogger\u003CConfigFileProvider\u003E());\r\n    // Act\r\n    var configurations = sut.GetConfigFiles().ToArray();\r\n    // Assert\r\n    configurations.Count().Should().Be(2);\r\n    configurations[0].Path.Should().Be(\u0022/etc/mock-server/config/a.yaml\u0022);\r\n    configurations[0].FileType.Should().Be(ConfigurationFileType.yaml);\r\n    configurations[0].Configurations.Should().HaveCount(1);\r\n    var setupA = configurations[0].Configurations.First();\r\n    setupA.Action.Response.StatusCode.Should().Be(200);\r\n    setupA.Matcher.Should().BeNull();\r\n    configurations[1].Path.Should().Be(\u0022/etc/mock-server/config/b.yml\u0022);\r\n    configurations[1].FileType.Should().Be(ConfigurationFileType.yml);\r\n    configurations[1].Configurations.Should().HaveCount(2);\r\n    var setupB = configurations[1].Configurations.First();\r\n    setupB.Action.Response.StatusCode.Should().Be(201);\r\n    setupB.Matcher.Path.ToPath().Should().Be(\u0022/some/path\u0022);\r\n    setupB.Matcher.Method.MethodString.Should().Be(\u0022POST\u0022);\r\n    var setupC = configurations[1].Configurations.ElementAt(1);\r\n    Dump(setupC, \u0022Setup - C\u0022);\r\n    setupC.Matcher.Headers.Header.Should().HaveCount(2);\r\n    setupC.Matcher.Path.ToPath().Should().Be(\u0022/\u0022);\r\n    setupC.Action.Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Returns_ConfigurationFile_When_Only_Only_JSON_Files",
        "Body": "{\r\n    // Arrange\r\n    var fs = new MockFileSystem(new Dictionary\u003Cstring, MockFileData\u003E { { \u0022/etc/mock-server/config/a.json\u0022, new MockFileData(@\u0022\n[\n  {\n    \u0022\u0022Action\u0022\u0022: {\n      \u0022\u0022Response\u0022\u0022: {\n        \u0022\u0022StatusCode\u0022\u0022: 200,\n        \u0022\u0022Body\u0022\u0022: \u0022\u0022some body \\n over \\n multiple \\nlines\u0022\u0022\n      }\n    }\n  }\n]\n\u0022) }, { \u0022/etc/mock-server/config/b.json\u0022, new MockFileData(@\u0022\n[\n  {\n    \u0022\u0022Matcher\u0022\u0022: {\n      \u0022\u0022Path\u0022\u0022: \u0022\u0022/some/path\u0022\u0022,\n      \u0022\u0022Method\u0022\u0022: \u0022\u0022POST\u0022\u0022\n    },\n    \u0022\u0022Action\u0022\u0022: {\n      \u0022\u0022Response\u0022\u0022: {\n        \u0022\u0022StatusCode\u0022\u0022: 201\n      }\n    }\n  },\n  {\n    \u0022\u0022Matcher\u0022\u0022: {\n      \u0022\u0022Path\u0022\u0022: \u0022\u0022/\u0022\u0022,\n      \u0022\u0022Headers\u0022\u0022: {\n        \u0022\u0022Content-Type\u0022\u0022: [\n          \u0022\u0022application/json\u0022\u0022,\n          \u0022\u0022application/cloudevents\u002Bjson\u0022\u0022\n        ],\n        \u0022\u0022Content-Length\u0022\u0022: [\n          105\n        ]\n      }\n    }\n  }\n]\n\u0022) } });\r\n    var sut = new ConfigFileProvider(fs, CreateLogger\u003CConfigFileProvider\u003E());\r\n    // Act\r\n    var configurations = sut.GetConfigFiles().ToArray();\r\n    // Assert\r\n    configurations.Count().Should().Be(2);\r\n    configurations[0].Path.Should().Be(\u0022/etc/mock-server/config/a.json\u0022);\r\n    configurations[0].FileType.Should().Be(ConfigurationFileType.json);\r\n    configurations[0].Configurations.Should().HaveCount(1);\r\n    var setupA = configurations[0].Configurations.First();\r\n    setupA.Action.Response.StatusCode.Should().Be(200);\r\n    setupA.Matcher.Should().BeNull();\r\n    configurations[1].Path.Should().Be(\u0022/etc/mock-server/config/b.json\u0022);\r\n    configurations[1].FileType.Should().Be(ConfigurationFileType.json);\r\n    configurations[1].Configurations.Should().HaveCount(2);\r\n    var setupB = configurations[1].Configurations.First();\r\n    setupB.Action.Response.StatusCode.Should().Be(201);\r\n    setupB.Matcher.Path.ToPath().Should().Be(\u0022/some/path\u0022);\r\n    setupB.Matcher.Method.MethodString.Should().Be(\u0022POST\u0022);\r\n    var setupC = configurations[1].Configurations.ElementAt(1);\r\n    setupC.Matcher.Headers.Header.Should().HaveCount(2);\r\n    setupC.Matcher.Path.ToPath().Should().Be(\u0022/\u0022);\r\n    setupC.Action.Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigurationServiceTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.API.Tests",
    "Methods": [
      {
        "Name": "Reload_Should_Get_Configurations",
        "Body": "{\r\n    // Arrange\r\n    var subject = CreateSubject(out var provider, out var setupService);\r\n    provider.Setup(m =\u003E m.GetConfigFiles()).Returns(new List\u003CIConfigFile\u003E { new ConfigFile(\u0022/etc/mock-server/config/config.yaml\u0022, new[] { new Setup(), new Setup() }) });\r\n    // Act\r\n    subject.Reload();\r\n    // Assert\r\n    setupService.Verify(m =\u003E m.Add(It.IsAny\u003CSetup\u003E()), Times.Exactly(2));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MockServerBuilderTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.API.Tests",
    "Methods": [
      {
        "Name": "Should_Return_When_State",
        "Body": "{\r\n    // Arrange\r\n    var sut = CreateSubject().Services.BuildServiceProvider();\r\n    // Assert\r\n    sut.EnsureRegistered\u003CILogRepository\u003E();\r\n    sut.EnsureRegistered\u003CISetupRepository\u003E();\r\n    sut.EnsureRegistered\u003CISetupService\u003E();\r\n    sut.EnsureRegistered\u003CIHttpContextAccessor\u003E();\r\n    sut.EnsureRegistered\u003CIConfigurationService\u003E();\r\n    sut.EnsureRegistered\u003CIConfigFileProvider\u003E();\r\n    sut.EnsureRegistered\u003CILogService\u003E();\r\n    sut.EnsureRegistered\u003CIStartupInitializer\u003E();\r\n    sut.EnsureRegistered\u003CILogger\u003CMockServerBuilderTests\u003E\u003E();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Startup_Configure_Should_Register_All_Required_Services",
        "Body": "{\r\n    var host = Program.CreateHostBuilder(null).Build();\r\n    // Arrange\r\n    host.Services.EnsureServicesRegistered();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MockServerBuilderTestExtensions",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.API.Tests",
    "Methods": [
      {
        "Name": "Should_Return_When_State",
        "Body": "{\r\n    // Arrange\r\n    var sut = CreateSubject().Services.BuildServiceProvider();\r\n    // Assert\r\n    sut.EnsureRegistered\u003CILogRepository\u003E();\r\n    sut.EnsureRegistered\u003CISetupRepository\u003E();\r\n    sut.EnsureRegistered\u003CISetupService\u003E();\r\n    sut.EnsureRegistered\u003CIHttpContextAccessor\u003E();\r\n    sut.EnsureRegistered\u003CIConfigurationService\u003E();\r\n    sut.EnsureRegistered\u003CIConfigFileProvider\u003E();\r\n    sut.EnsureRegistered\u003CILogService\u003E();\r\n    sut.EnsureRegistered\u003CIStartupInitializer\u003E();\r\n    sut.EnsureRegistered\u003CILogger\u003CMockServerBuilderTests\u003E\u003E();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Startup_Configure_Should_Register_All_Required_Services",
        "Body": "{\r\n    var host = Program.CreateHostBuilder(null).Build();\r\n    // Arrange\r\n    host.Services.EnsureServicesRegistered();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "EnumExtensions",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.API.Tests",
    "Methods": [
      {
        "Name": "GetDescription_Should_Throw_When_Enum_Does_Not_Contain_Description_Attribute",
        "Body": "{\r\n    // Act\r\n    Func\u003Cstring\u003E invocation = () =\u003E value.GetDescription();\r\n    // Assert\r\n    invocation.Should().ThrowExactly\u003CInvalidOperationException\u003E();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetDescription_Should_Return_DescriptionValue_When_EnumValue_Contains_Description_Attribute",
        "Body": "{\r\n    // Arrange\r\n    var value = AnimalsWithDescription.Dog;\r\n    // Act \u0026 Assert\r\n    value.GetDescription().Should().Be(DogDescription);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetDescription_Should_Return_DescriptionValue_When_Enum_Contains_Empty_Description_Attribute",
        "Body": "{\r\n    // Arrange\r\n    var value = AnimalsWithDescription.Cat;\r\n    // Act \u0026 Assert\r\n    value.GetDescription().Should().Be(string.Empty);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SetupRepositoryTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.API.Tests",
    "Methods": [
      {
        "Name": "Add_Should_Create_A_SetupLogCreated_Log_Entry",
        "Body": "{\r\n    // Arrange\r\n    var sut = CreateSubject(out var logService);\r\n    var setup = new Setup\r\n    {\r\n        Matcher = new RequestMatcher\r\n        {\r\n            Path = new Path(\u0022/some/path\u0022)\r\n        }\r\n    };\r\n    // Act\r\n    sut.Add(setup);\r\n    // Assert\r\n    logService.Verify(m =\u003E m.Log(It.IsAny\u003CFunc\u003CLogFactory, LogItem\u003CSetup\u003E\u003E\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "LogItemTestData",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.API.Tests",
    "Methods": [
      {
        "Name": "SetupLog_LogType_Should_Return_Setup",
        "Body": "{\r\n    // Arrange\r\n    ILogItem log = LogItemTestData.SetupCreated;\r\n    // Act \u0026 Assert\r\n    log.Type.Should().Be(LogType.Setup);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RequestMatchedLog_LogType_Should_Return_Request",
        "Body": "{\r\n    // Arrange\r\n    ILogItem log = LogItemTestData.RequestMatched;\r\n    // Act \u0026 Assert\r\n    log.Type.Should().Be(LogType.Request);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RequestUnmatchedLog_LogType_Should_Return_Request",
        "Body": "{\r\n    // Arrange\r\n    ILogItem log = LogItemTestData.RequestUnmatched;\r\n    // Act \u0026 Assert\r\n    log.Type.Should().Be(LogType.Request);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ToFormattedString_Should_Return_PrettyFormatted_String",
        "Body": "{\r\n    // Act\r\n    var formatted = log.ToFormattedString();\r\n    // Assert\r\n    Dump(expected, formatted);\r\n    formatted.Should().Be(expected);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "LogItemTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.API.Tests",
    "Methods": [
      {
        "Name": "SetupLog_LogType_Should_Return_Setup",
        "Body": "{\r\n    // Arrange\r\n    ILogItem log = LogItemTestData.SetupCreated;\r\n    // Act \u0026 Assert\r\n    log.Type.Should().Be(LogType.Setup);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RequestMatchedLog_LogType_Should_Return_Request",
        "Body": "{\r\n    // Arrange\r\n    ILogItem log = LogItemTestData.RequestMatched;\r\n    // Act \u0026 Assert\r\n    log.Type.Should().Be(LogType.Request);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RequestUnmatchedLog_LogType_Should_Return_Request",
        "Body": "{\r\n    // Arrange\r\n    ILogItem log = LogItemTestData.RequestUnmatched;\r\n    // Act \u0026 Assert\r\n    log.Type.Should().Be(LogType.Request);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ToFormattedString_Should_Return_PrettyFormatted_String",
        "Body": "{\r\n    // Act\r\n    var formatted = log.ToFormattedString();\r\n    // Assert\r\n    Dump(expected, formatted);\r\n    formatted.Should().Be(expected);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RequestBodyMatcherTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.API.Tests",
    "Methods": [
      {
        "Name": "When_IsMatch_Returns_True_When_Method_Is_Equal",
        "Body": "{\r\n    // Arrange\r\n    var compare = new Method(method);\r\n    var context = CreateContext(method);\r\n    var subject = new ComparasionVisitor(context);\r\n    // Act\u0026 Assert\r\n    var score = subject.Visit(compare);\r\n    subject.IsSuccess.Should().BeTrue();\r\n    score.Should().Be(1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "When_IsMatch_Returns_True_When_Path_Is_Match",
        "Body": "{\r\n    // Arrange\r\n    var compare = new Path(path);\r\n    var context = CreateContext(path: path);\r\n    var subject = new ComparasionVisitor(context);\r\n    // Act\u0026 Assert\r\n    var score = subject.Visit(compare);\r\n    subject.IsSuccess.Should().BeTrue();\r\n    score.Should().Be(1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "When_IsMatch_Returns_True_When_Headers_Are_Equal",
        "Body": "{\r\n    // Arrange\r\n    var compare = new Headers(request);\r\n    var context = CreateContext(headers: contextHeaders);\r\n    var subject = new ComparasionVisitor(context);\r\n    // Act\u0026 Assert\r\n    var score = subject.Visit(compare);\r\n    subject.IsSuccess.Should().Be(isValid);\r\n    score.Should().Be(isValid ? 1 : 0);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsMatch_Should_Be_False_When_QueryString_Not_Same",
        "Body": "{\r\n    // Arrange\r\n    var context = CreateContext(queryString: new QueryString());\r\n    var sut = new ComparasionVisitor(context);\r\n    // Act \u0026 Assert\r\n    var score = sut.Visit(new Query(new QueryString(\u0022?id=100\u0022)));\r\n    sut.IsSuccess.Should().BeFalse();\r\n    score.Should().Be(0);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsMatch_Should_Be_False_When_RequestBodyMatcher_IsNotMatch",
        "Body": "{\r\n    // Arrange\r\n    var requestBodyContent = \u0022some content\u0022;\r\n    var requestBodyStream = new MemoryStream();\r\n    var bytes = Encoding.UTF8.GetBytes(requestBodyContent);\r\n    requestBodyStream.Write(bytes);\r\n    var bodyMatcher = new RequestBodyMatcher\r\n    {\r\n        Content = \u0022hello world\u0022,\r\n        Kind = RequestBodyKind.Text,\r\n        MatchExact = true\r\n    };\r\n    var context = CreateContext(requestBodyStream: requestBodyStream);\r\n    var subject = new ComparasionVisitor(context);\r\n    // Act\u0026 Assert\r\n    var score = subject.Visit(bodyMatcher);\r\n    subject.IsSuccess.Should().BeFalse();\r\n    score.Should().Be(0);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsMatch_Should_Be_True_When_No_RequestBodyMatcher",
        "Body": "{\r\n    // Arrange\r\n    var context = CreateContext();\r\n    var subject = new ComparasionVisitor(context);\r\n    // Act\u0026 Assert\r\n    var score = subject.Visit((RequestBodyMatcher)null);\r\n    subject.IsSuccess.Should().BeTrue();\r\n    score.Should().Be(1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsMatch_Should_Be_True_When_QueryString_IsMatch",
        "Body": "{\r\n    // Arrange\r\n    var query = new QueryString(\u0022?id=100\u0022);\r\n    var context = CreateContext(queryString: query);\r\n    var subject = new ComparasionVisitor(context);\r\n    // Act\u0026 Assert\r\n    var score = subject.Visit(new Query(query));\r\n    subject.IsSuccess.Should().BeTrue();\r\n    score.Should().Be(1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsMatch_Should_Be_True_When_QueryString_Not_Set",
        "Body": "{\r\n    // Arrange\r\n    var context = CreateContext(queryString: new QueryString(\u0022?id=100\u0022));\r\n    var subject = new ComparasionVisitor(context);\r\n    // Act\u0026 Assert\r\n    var score = subject.Visit((Query)null);\r\n    subject.IsSuccess.Should().BeTrue();\r\n    score.Should().Be(1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsMatch_Should_Be_True_When_RequestBodyMatcher_IsMatch",
        "Body": "{\r\n    // Arrange\r\n    var requestBodyContent = \u0022some content\u0022;\r\n    var requestBodyStream = new MemoryStream();\r\n    var bytes = Encoding.UTF8.GetBytes(requestBodyContent);\r\n    requestBodyStream.Write(bytes);\r\n    var bodyMatcher = new RequestBodyMatcher\r\n    {\r\n        Content = requestBodyContent,\r\n        Kind = RequestBodyKind.Text,\r\n        MatchExact = true\r\n    };\r\n    var context = CreateContext(requestBodyStream: requestBodyStream);\r\n    var subject = new ComparasionVisitor(context);\r\n    // Act\u0026 Assert\r\n    var score = subject.Visit(bodyMatcher);\r\n    subject.IsSuccess.Should().BeTrue();\r\n    score.Should().Be(1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Match_Exact_String_Body",
        "Body": "{\r\n    // Arrange\r\n    const string content = \u0022{\\\u0022hello\\\u0022:\\\u0022world!\\\u0022}\u0022;\r\n    var subject = CreateSubject(RequestBodyKind.Text, true, content);\r\n    var context = CreateContext(content);\r\n    var visitor = new ComparasionVisitor(context);\r\n    // Act\r\n    var score = visitor.Visit(subject);\r\n    // Assert\r\n    score.Should().BeGreaterThan(0);\r\n    visitor.IsSuccess.Should().BeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Match_String_Body_If_Contains_String",
        "Body": "{\r\n    // Arrange\r\n    const string content = \u0022{\\\u0022hello\\\u0022:\\\u0022world!\\\u0022}\u0022;\r\n    var subject = CreateSubject(RequestBodyKind.Text, false, \u0022world!\\\u0022}\u0022);\r\n    var context = CreateContext(content);\r\n    var visitor = new ComparasionVisitor(context);\r\n    // Act\r\n    var score = visitor.Visit(subject);\r\n    // Assert\r\n    score.Should().BeGreaterThan(0);\r\n    visitor.IsSuccess.Should().BeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Not_Match_Exact_String_Body_When_Not_Exact_Same_String_Content",
        "Body": "{\r\n    // Arrange\r\n    var subject = CreateSubject(RequestBodyKind.Text, true, \u0022{\\\u0022hello\\\u0022:\\\u0022car!\\\u0022}\u0022);\r\n    var context = CreateContext(\u0022{\\\u0022hello\\\u0022:\\\u0022world!\\\u0022}\u0022);\r\n    var visitor = new ComparasionVisitor(context);\r\n    // Act\r\n    var score = visitor.Visit(subject);\r\n    //  Assert\r\n    score.Should().Be(0);\r\n    visitor.IsSuccess.Should().BeFalse();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Not_Match_String_Body_If_Not_Contains_String",
        "Body": "{\r\n    // Arrange\r\n    const string content = \u0022{\\\u0022hello\\\u0022:\\\u0022world!\\\u0022}\u0022;\r\n    var subject = CreateSubject(RequestBodyKind.Text, false, \u0022car!\\\u0022}\u0022);\r\n    var context = CreateContext(content);\r\n    var visitor = new ComparasionVisitor(context);\r\n    // Act\r\n    var score = visitor.Visit(subject);\r\n    // Assert\r\n    score.Should().Be(0);\r\n    visitor.IsSuccess.Should().BeFalse();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ComparasionVisitorTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.API.Tests",
    "Methods": [
      {
        "Name": "When_IsMatch_Returns_True_When_Method_Is_Equal",
        "Body": "{\r\n    // Arrange\r\n    var compare = new Method(method);\r\n    var context = CreateContext(method);\r\n    var subject = new ComparasionVisitor(context);\r\n    // Act\u0026 Assert\r\n    var score = subject.Visit(compare);\r\n    subject.IsSuccess.Should().BeTrue();\r\n    score.Should().Be(1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "When_IsMatch_Returns_True_When_Path_Is_Match",
        "Body": "{\r\n    // Arrange\r\n    var compare = new Path(path);\r\n    var context = CreateContext(path: path);\r\n    var subject = new ComparasionVisitor(context);\r\n    // Act\u0026 Assert\r\n    var score = subject.Visit(compare);\r\n    subject.IsSuccess.Should().BeTrue();\r\n    score.Should().Be(1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "When_IsMatch_Returns_True_When_Headers_Are_Equal",
        "Body": "{\r\n    // Arrange\r\n    var compare = new Headers(request);\r\n    var context = CreateContext(headers: contextHeaders);\r\n    var subject = new ComparasionVisitor(context);\r\n    // Act\u0026 Assert\r\n    var score = subject.Visit(compare);\r\n    subject.IsSuccess.Should().Be(isValid);\r\n    score.Should().Be(isValid ? 1 : 0);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsMatch_Should_Be_False_When_QueryString_Not_Same",
        "Body": "{\r\n    // Arrange\r\n    var context = CreateContext(queryString: new QueryString());\r\n    var sut = new ComparasionVisitor(context);\r\n    // Act \u0026 Assert\r\n    var score = sut.Visit(new Query(new QueryString(\u0022?id=100\u0022)));\r\n    sut.IsSuccess.Should().BeFalse();\r\n    score.Should().Be(0);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsMatch_Should_Be_False_When_RequestBodyMatcher_IsNotMatch",
        "Body": "{\r\n    // Arrange\r\n    var requestBodyContent = \u0022some content\u0022;\r\n    var requestBodyStream = new MemoryStream();\r\n    var bytes = Encoding.UTF8.GetBytes(requestBodyContent);\r\n    requestBodyStream.Write(bytes);\r\n    var bodyMatcher = new RequestBodyMatcher\r\n    {\r\n        Content = \u0022hello world\u0022,\r\n        Kind = RequestBodyKind.Text,\r\n        MatchExact = true\r\n    };\r\n    var context = CreateContext(requestBodyStream: requestBodyStream);\r\n    var subject = new ComparasionVisitor(context);\r\n    // Act\u0026 Assert\r\n    var score = subject.Visit(bodyMatcher);\r\n    subject.IsSuccess.Should().BeFalse();\r\n    score.Should().Be(0);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsMatch_Should_Be_True_When_No_RequestBodyMatcher",
        "Body": "{\r\n    // Arrange\r\n    var context = CreateContext();\r\n    var subject = new ComparasionVisitor(context);\r\n    // Act\u0026 Assert\r\n    var score = subject.Visit((RequestBodyMatcher)null);\r\n    subject.IsSuccess.Should().BeTrue();\r\n    score.Should().Be(1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsMatch_Should_Be_True_When_QueryString_IsMatch",
        "Body": "{\r\n    // Arrange\r\n    var query = new QueryString(\u0022?id=100\u0022);\r\n    var context = CreateContext(queryString: query);\r\n    var subject = new ComparasionVisitor(context);\r\n    // Act\u0026 Assert\r\n    var score = subject.Visit(new Query(query));\r\n    subject.IsSuccess.Should().BeTrue();\r\n    score.Should().Be(1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsMatch_Should_Be_True_When_QueryString_Not_Set",
        "Body": "{\r\n    // Arrange\r\n    var context = CreateContext(queryString: new QueryString(\u0022?id=100\u0022));\r\n    var subject = new ComparasionVisitor(context);\r\n    // Act\u0026 Assert\r\n    var score = subject.Visit((Query)null);\r\n    subject.IsSuccess.Should().BeTrue();\r\n    score.Should().Be(1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsMatch_Should_Be_True_When_RequestBodyMatcher_IsMatch",
        "Body": "{\r\n    // Arrange\r\n    var requestBodyContent = \u0022some content\u0022;\r\n    var requestBodyStream = new MemoryStream();\r\n    var bytes = Encoding.UTF8.GetBytes(requestBodyContent);\r\n    requestBodyStream.Write(bytes);\r\n    var bodyMatcher = new RequestBodyMatcher\r\n    {\r\n        Content = requestBodyContent,\r\n        Kind = RequestBodyKind.Text,\r\n        MatchExact = true\r\n    };\r\n    var context = CreateContext(requestBodyStream: requestBodyStream);\r\n    var subject = new ComparasionVisitor(context);\r\n    // Act\u0026 Assert\r\n    var score = subject.Visit(bodyMatcher);\r\n    subject.IsSuccess.Should().BeTrue();\r\n    score.Should().Be(1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Match_Exact_String_Body",
        "Body": "{\r\n    // Arrange\r\n    const string content = \u0022{\\\u0022hello\\\u0022:\\\u0022world!\\\u0022}\u0022;\r\n    var subject = CreateSubject(RequestBodyKind.Text, true, content);\r\n    var context = CreateContext(content);\r\n    var visitor = new ComparasionVisitor(context);\r\n    // Act\r\n    var score = visitor.Visit(subject);\r\n    // Assert\r\n    score.Should().BeGreaterThan(0);\r\n    visitor.IsSuccess.Should().BeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Match_String_Body_If_Contains_String",
        "Body": "{\r\n    // Arrange\r\n    const string content = \u0022{\\\u0022hello\\\u0022:\\\u0022world!\\\u0022}\u0022;\r\n    var subject = CreateSubject(RequestBodyKind.Text, false, \u0022world!\\\u0022}\u0022);\r\n    var context = CreateContext(content);\r\n    var visitor = new ComparasionVisitor(context);\r\n    // Act\r\n    var score = visitor.Visit(subject);\r\n    // Assert\r\n    score.Should().BeGreaterThan(0);\r\n    visitor.IsSuccess.Should().BeTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Not_Match_Exact_String_Body_When_Not_Exact_Same_String_Content",
        "Body": "{\r\n    // Arrange\r\n    var subject = CreateSubject(RequestBodyKind.Text, true, \u0022{\\\u0022hello\\\u0022:\\\u0022car!\\\u0022}\u0022);\r\n    var context = CreateContext(\u0022{\\\u0022hello\\\u0022:\\\u0022world!\\\u0022}\u0022);\r\n    var visitor = new ComparasionVisitor(context);\r\n    // Act\r\n    var score = visitor.Visit(subject);\r\n    //  Assert\r\n    score.Should().Be(0);\r\n    visitor.IsSuccess.Should().BeFalse();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Not_Match_String_Body_If_Not_Contains_String",
        "Body": "{\r\n    // Arrange\r\n    const string content = \u0022{\\\u0022hello\\\u0022:\\\u0022world!\\\u0022}\u0022;\r\n    var subject = CreateSubject(RequestBodyKind.Text, false, \u0022car!\\\u0022}\u0022);\r\n    var context = CreateContext(content);\r\n    var visitor = new ComparasionVisitor(context);\r\n    // Act\r\n    var score = visitor.Visit(subject);\r\n    // Assert\r\n    score.Should().Be(0);\r\n    visitor.IsSuccess.Should().BeFalse();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HeadersTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.API.Tests",
    "Methods": [
      {
        "Name": "Should_Serialize",
        "Body": "{\r\n    // Arrange\r\n    const string expected = @\u0022{\n  \u0022\u0022a\u0022\u0022: [\n    \u0022\u00221\u0022\u0022\n  ],\n  \u0022\u0022b\u0022\u0022: [\n    \u0022\u00221\u0022\u0022\n  ],\n  \u0022\u0022c\u0022\u0022: [\n    \u0022\u00221\u0022\u0022\n  ],\n  \u0022\u0022d\u0022\u0022: [\n    \u0022\u00221\u0022\u0022\n  ]\n}\u0022;\r\n    var instance = new Headers((\u0022a\u0022, new[] { \u00221\u0022 }), (\u0022b\u0022, new[] { \u00221\u0022 }), (\u0022c\u0022, new[] { \u00221\u0022 }), (\u0022d\u0022, new[] { \u00221\u0022 }));\r\n    // Act\r\n    var jo = JObject.FromObject(instance);\r\n    Dump(jo, \u0022Headers - JObject\u0022);\r\n    var json = jo.ToString(Formatting.Indented);\r\n    // Assert\r\n    Output.WriteLine(json);\r\n    json.Should().Be(expected);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Should_Deserialize",
        "Body": "{\r\n    // Arrange\r\n    var expected = new Headers((\u0022a\u0022, new[] { \u00221\u0022 }), (\u0022b\u0022, new[] { \u00221\u0022 }), (\u0022c\u0022, new[] { \u00221\u0022 }), (\u0022d\u0022, new[] { \u00221\u0022 }));\r\n    // Act\r\n    var instance = JObject.Parse(@\u0022{\n  \u0022\u0022a\u0022\u0022: [\n    \u0022\u00221\u0022\u0022\n  ],\n  \u0022\u0022b\u0022\u0022: [\n    \u0022\u00221\u0022\u0022\n  ],\n  \u0022\u0022c\u0022\u0022: [\n    \u0022\u00221\u0022\u0022\n  ],\n  \u0022\u0022d\u0022\u0022: [\n    \u0022\u00221\u0022\u0022\n  ]\n}\u0022);\r\n    Dump(instance, \u0022HeaderCollection - JObject\u0022);\r\n    var dict = instance.ToObject\u003CHeaders\u003E();\r\n    // Assert\r\n    dict.Should().HaveSameCount(expected.Header);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "LogServiceTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.API.Tests",
    "Methods": [
      {
        "Name": "Log_Should_Create_LogItem",
        "Body": "{\r\n    // Arrange\r\n    var sut = CreateSubject(out var repo, () =\u003E Id);\r\n    var setup = new Setup();\r\n    // Act\r\n    sut.Log(l =\u003E l.SetupCreated(setup));\r\n    // Assert\r\n    repo.Verify(m =\u003E m.AddOrUpdate(It.Is\u003CSetupLog\u003E(l =\u003E l.Content == setup)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OfType_Returns_Only_LogItems_Of_Given_Type",
        "Body": "{\r\n    // Arrange\r\n    var sut = CreateSeededLogService();\r\n    // Act \u0026 Assert\r\n    sut.OfType\u003CSetupLog\u003E().Should().HaveCount(2);\r\n    sut.OfType(LogType.Setup).Should().HaveCount(2);\r\n    sut.OfType(LogType.Request).Should().HaveCount(2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_Returns_All_Log_Items",
        "Body": "{\r\n    // Arrange\r\n    var sut = CreateSeededLogService();\r\n    // Act \u0026 Assert\r\n    sut.Get().Should().HaveCount(4);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Prune_Clears_All_Logs",
        "Body": "{\r\n    // Arrange\r\n    var repo = new Mock\u003CILogRepository\u003E();\r\n    var sut = new LogService(CreateLogger\u003CLogService\u003E(), repo.Object);\r\n    // Act \u0026 Assert\r\n    sut.Prune();\r\n    repo.Verify(m =\u003E m.Prune(), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_Returns_Only_LogItems_Matching_The_Predicate",
        "Body": "{\r\n    // Arrange\r\n    var sut = CreateSeededLogService();\r\n    // Act \u0026 Assert\r\n    sut.Get\u003CSetupLog\u003E(log =\u003E log.Kind == LogKind.SetupCreated).Should().ContainSingle();\r\n    sut.Get\u003CSetupLog\u003E(log =\u003E log.Kind == LogKind.SetupDeleted).Should().ContainSingle();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SetupServiceTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.API.Tests",
    "Methods": [
      {
        "Name": "Should_Add_Setup",
        "Body": "{\r\n    // Arrange\r\n    var repo = new Mock\u003CISetupRepository\u003E();\r\n    var subject = new SetupService(repo.Object);\r\n    var setup = new Setup();\r\n    // Act\r\n    subject.Add(setup);\r\n    // Assert\r\n    repo.Verify(m =\u003E m.Add(setup), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TryGetMatchingSetup_Should_Return_False_If_No_Matching_Setup_In_Repo",
        "Body": "{\r\n    // Arrange\r\n    var repo = new MockSetupRepository().SetupTryGetMatchingSetupReturnsNull();\r\n    var subject = CreateSubject(repo);\r\n    var context = CreateContext();\r\n    // Act \u0026 Assert\r\n    subject.TryGetMatchingSetup(context, out var _).Should().BeFalse();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TryGetMatchingSetup_Should_Return_True_If_Matching_Setup_In_Repo",
        "Body": "{\r\n    // Arrange\r\n    var setup = new Setup\r\n    {\r\n        Matcher = new RequestMatcher\r\n        {\r\n            Path = new Path(\u0022/some/path\u0022)\r\n        }\r\n    };\r\n    var repo = new MockSetupRepository().SetupTryGetMatchingSetup(setup);\r\n    var subject = CreateSubject(repo);\r\n    var context = CreateContext();\r\n    // Act \u0026 Assert\r\n    subject.TryGetMatchingSetup(context, out var matchingSetup).Should().BeTrue();\r\n    matchingSetup.Should().Be(setup);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MockSetupRepository",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.API.Tests",
    "Methods": [
      {
        "Name": "Should_Add_Setup",
        "Body": "{\r\n    // Arrange\r\n    var repo = new Mock\u003CISetupRepository\u003E();\r\n    var subject = new SetupService(repo.Object);\r\n    var setup = new Setup();\r\n    // Act\r\n    subject.Add(setup);\r\n    // Assert\r\n    repo.Verify(m =\u003E m.Add(setup), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TryGetMatchingSetup_Should_Return_False_If_No_Matching_Setup_In_Repo",
        "Body": "{\r\n    // Arrange\r\n    var repo = new MockSetupRepository().SetupTryGetMatchingSetupReturnsNull();\r\n    var subject = CreateSubject(repo);\r\n    var context = CreateContext();\r\n    // Act \u0026 Assert\r\n    subject.TryGetMatchingSetup(context, out var _).Should().BeFalse();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TryGetMatchingSetup_Should_Return_True_If_Matching_Setup_In_Repo",
        "Body": "{\r\n    // Arrange\r\n    var setup = new Setup\r\n    {\r\n        Matcher = new RequestMatcher\r\n        {\r\n            Path = new Path(\u0022/some/path\u0022)\r\n        }\r\n    };\r\n    var repo = new MockSetupRepository().SetupTryGetMatchingSetup(setup);\r\n    var subject = CreateSubject(repo);\r\n    var context = CreateContext();\r\n    // Act \u0026 Assert\r\n    subject.TryGetMatchingSetup(context, out var matchingSetup).Should().BeTrue();\r\n    matchingSetup.Should().Be(setup);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "InitializerTests",
    "Message": null,
    "ProjectName": "NinjaTools.FluentMockServer.API.Tests",
    "Methods": [
      {
        "Name": "Should_Initialize_StartupInitializer_On_Startup",
        "Body": "{\r\n    // Arrange\r\n    var mockInitializer = new Mock\u003CIInitializer\u003E();\r\n    var startupInitializer = new StartupInitializer(CreateLogger\u003CStartupInitializer\u003E());\r\n    // Act\r\n    startupInitializer.AddInitializer(mockInitializer.Object);\r\n    await startupInitializer.InitializeAsync();\r\n    // Assert\r\n    mockInitializer.Verify(m =\u003E m.InitializeAsync(), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigurationInitializer_Should_Initialize_On_Startup",
        "Body": "{\r\n    // Arrange\r\n    var configService = new Mock\u003CIConfigurationService\u003E();\r\n    var sut = new ConfigurationInitializer(configService.Object);\r\n    // Act\r\n    await sut.InitializeAsync();\r\n    // Assert\r\n    configService.Verify(m =\u003E m.Reload());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  }
]