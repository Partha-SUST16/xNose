[
  {
    "Name": "ProfilesControllerTest",
    "Message": null,
    "ProjectName": "Profile.UnitTests",
    "Methods": [
      {
        "Name": "GetProfiles_Returns_CollectionOfProfileDTO",
        "Body": "{\r\n    // Arrange\r\n    var profileServiceMock = new Mock\u003CIProfileService\u003E();\r\n    profileServiceMock.Setup(service =\u003E service.GetAllProfilesAsync()).Returns(Task.FromResult(GetAllProfiles()));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Information(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new ProfilesController(profileServiceMock.Object, loggerMock.Object);\r\n    // Act\r\n    var result = controller.GetProfiles().GetAwaiter().GetResult();\r\n    // Assert\r\n    Assert.IsType\u003CList\u003CProfileDTO\u003E\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetProfile_WithInvalidModel_Returns_BadRequestResult",
        "Body": "{\r\n    // Arrange\r\n    var profileServiceMock = new Mock\u003CIProfileService\u003E();\r\n    profileServiceMock.Setup(service =\u003E service.GetProfileByIdAsync(It.IsAny\u003CGuid\u003E())).Returns(Task.FromResult(GetProfile()));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    var controller = new ProfilesController(profileServiceMock.Object, loggerMock.Object);\r\n    controller.ModelState.AddModelError(\u0022Id\u0022, \u0022InvalidId\u0022);\r\n    var id = new Guid();\r\n    // Act\r\n    var result = controller.GetProfile(id).GetAwaiter().GetResult();\r\n    // Assert\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetProfile_WithValidModelAndValidId_Returns_ProfileDTO",
        "Body": "{\r\n    // Arrange\r\n    var profileServiceMock = new Mock\u003CIProfileService\u003E();\r\n    profileServiceMock.Setup(service =\u003E service.GetProfileByIdAsync(It.IsAny\u003CGuid\u003E())).Returns(Task.FromResult(GetProfile()));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Information(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new ProfilesController(profileServiceMock.Object, loggerMock.Object);\r\n    var id = new Guid();\r\n    // Act\r\n    var result = controller.GetProfile(id).GetAwaiter().GetResult();\r\n    // Assert\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003CProfileDTO\u003E(okObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetProfile_WithValidModelAndInvalidId_Returns_NoContentResult",
        "Body": "{\r\n    // Arrange\r\n    var profileServiceMock = new Mock\u003CIProfileService\u003E();\r\n    profileServiceMock.Setup(service =\u003E service.GetProfileByIdAsync(It.IsAny\u003CGuid\u003E())).Returns(Task.FromResult(GetNullProfile()));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Warning(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new ProfilesController(profileServiceMock.Object, loggerMock.Object);\r\n    var id = new Guid();\r\n    // Act\r\n    var result = controller.GetProfile(id).GetAwaiter().GetResult();\r\n    // Assert\r\n    var noContentResult = Assert.IsType\u003CNoContentResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RegisterNewReport_WithInvalidModel_Returns_BadRequestResult",
        "Body": "{\r\n    // Arrange\r\n    var profileServiceMock = new Mock\u003CIProfileService\u003E();\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    var controller = new ProfilesController(profileServiceMock.Object, loggerMock.Object);\r\n    controller.ModelState.AddModelError(\u0022Error\u0022, \u0022Model Error\u0022);\r\n    var profileDTO = new ProfileDTO();\r\n    // Act\r\n    var result = controller.RegisterNewProfile(profileDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RegisterNewProfile_WithValidExistingModel_Returns_ConflictResult",
        "Body": "{\r\n    // Arrange\r\n    var profileServiceMock = new Mock\u003CIProfileService\u003E();\r\n    profileServiceMock.Setup(service =\u003E service.RegisterNewProfileAsync(It.IsAny\u003CProfileDTO\u003E())).Returns(Task.FromResult((new Guid(), false)));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Warning(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new ProfilesController(profileServiceMock.Object, loggerMock.Object);\r\n    var profileDTO = new ProfileDTO();\r\n    // Act\r\n    var result = controller.RegisterNewProfile(profileDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var conflictObjectResult = Assert.IsType\u003CConflictObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RegisterNewProfile_WithValidModel_Returns_CreatedAtActionResult",
        "Body": "{\r\n    // Arrange\r\n    var profileServiceMock = new Mock\u003CIProfileService\u003E();\r\n    profileServiceMock.Setup(service =\u003E service.RegisterNewProfileAsync(It.IsAny\u003CProfileDTO\u003E())).Returns(Task.FromResult((new Guid(), true)));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Information(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new ProfilesController(profileServiceMock.Object, loggerMock.Object);\r\n    var profileDTO = new ProfileDTO();\r\n    // Act\r\n    var result = controller.RegisterNewProfile(profileDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var createdAtActionResult = Assert.IsType\u003CCreatedAtActionResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003CProfileDTO\u003E(createdAtActionResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateProfile_WithInvalidModel_Returns_BadRequestResult",
        "Body": "{\r\n    // Arrange\r\n    var profileServiceMock = new Mock\u003CIProfileService\u003E();\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    var controller = new ProfilesController(profileServiceMock.Object, loggerMock.Object);\r\n    controller.ModelState.AddModelError(\u0022Error\u0022, \u0022Model Error\u0022);\r\n    var profileDTO = new ProfileDTO();\r\n    // Act\r\n    var result = controller.UpdateProfile(profileDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateProfile_WithInvalidModelId_Returns_BadRequestResult",
        "Body": "{\r\n    // Arrange\r\n    var profileServiceMock = new Mock\u003CIProfileService\u003E();\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    var controller = new ProfilesController(profileServiceMock.Object, loggerMock.Object);\r\n    var reportDTO = new ProfileDTO\r\n    {\r\n        Id = Guid.Empty\r\n    };\r\n    // Act\r\n    var result = controller.UpdateProfile(reportDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var badRequestObjectResult = Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003CGuid\u003E(badRequestObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateProfile_WithNonexistingId_Returns_NotFoundResult",
        "Body": "{\r\n    // Arrange\r\n    var profileServiceMock = new Mock\u003CIProfileService\u003E();\r\n    profileServiceMock.Setup(service =\u003E service.GetProfileByIdAsync(It.IsAny\u003CGuid\u003E())).Returns(Task.FromResult(GetNullProfile()));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Warning(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new ProfilesController(profileServiceMock.Object, loggerMock.Object);\r\n    var profileDTO = new ProfileDTO\r\n    {\r\n        Id = Guid.Parse(\u002211111111-1111-1111-1111-111111111111\u0022)\r\n    };\r\n    // Act\r\n    var result = controller.UpdateProfile(profileDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var notFoundObjectResult = Assert.IsType\u003CNotFoundObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003CGuid\u003E(notFoundObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateProfile_WithUpdateError_Returns_ConflictResult",
        "Body": "{\r\n    // Arrange\r\n    var profileServiceMock = new Mock\u003CIProfileService\u003E();\r\n    profileServiceMock.Setup(service =\u003E service.GetProfileByIdAsync(It.IsAny\u003CGuid\u003E())).Returns(Task.FromResult(GetProfile()));\r\n    profileServiceMock.Setup(service =\u003E service.UpdateProfileAsync(It.IsAny\u003CProfileDTO\u003E())).Returns(Task.FromResult(false));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Warning(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new ProfilesController(profileServiceMock.Object, loggerMock.Object);\r\n    var profileDTO = new ProfileDTO\r\n    {\r\n        Id = Guid.Parse(\u002211111111-1111-1111-1111-111111111111\u0022)\r\n    };\r\n    // Act\r\n    var result = controller.UpdateProfile(profileDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var conflictResult = Assert.IsType\u003CConflictResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateProfile_WithValidModel_Returns_OkResult",
        "Body": "{\r\n    // Arrange\r\n    var profileServiceMock = new Mock\u003CIProfileService\u003E();\r\n    profileServiceMock.Setup(service =\u003E service.GetProfileByIdAsync(It.IsAny\u003CGuid\u003E())).Returns(Task.FromResult(GetProfile()));\r\n    profileServiceMock.Setup(service =\u003E service.UpdateProfileAsync(It.IsAny\u003CProfileDTO\u003E())).Returns(Task.FromResult(true));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Information(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new ProfilesController(profileServiceMock.Object, loggerMock.Object);\r\n    var profileDTO = new ProfileDTO\r\n    {\r\n        Id = Guid.Parse(\u002211111111-1111-1111-1111-111111111111\u0022)\r\n    };\r\n    // Act\r\n    var result = controller.UpdateProfile(profileDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var okResult = Assert.IsType\u003COkObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003CProfileDTO\u003E(okResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteProfile_WithInvalidModelId_Returns_NotFoundResult",
        "Body": "{\r\n    // Arrange\r\n    var profileServiceMock = new Mock\u003CIProfileService\u003E();\r\n    profileServiceMock.Setup(service =\u003E service.DeleteProfileByIdAsync(It.IsAny\u003CGuid\u003E())).Returns(Task.FromResult(false));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Warning(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new ProfilesController(profileServiceMock.Object, loggerMock.Object);\r\n    var profileDTO = new ProfileDTO();\r\n    var id = new Guid();\r\n    // Act\r\n    var result = controller.DeleteProfile(id).GetAwaiter().GetResult();\r\n    // Assert\r\n    var notFoundObjectResult = Assert.IsType\u003CNotFoundObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003CGuid\u003E(notFoundObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteProfile_Returns_OkResult",
        "Body": "{\r\n    // Arrange\r\n    var profileServiceMock = new Mock\u003CIProfileService\u003E();\r\n    profileServiceMock.Setup(service =\u003E service.GetProfileByIdAsync(It.IsAny\u003CGuid\u003E())).Returns(Task.FromResult(GetProfile()));\r\n    profileServiceMock.Setup(service =\u003E service.DeleteProfileByIdAsync(It.IsAny\u003CGuid\u003E())).Returns(Task.FromResult(true));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Information(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new ProfilesController(profileServiceMock.Object, loggerMock.Object);\r\n    var id = new Guid();\r\n    // Act\r\n    var result = controller.DeleteProfile(id).GetAwaiter().GetResult();\r\n    // Assert\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003CGuid\u003E(okObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DataProcessorControllerTest",
    "Message": null,
    "ProjectName": "DataProcessor.UnitTests",
    "Methods": [
      {
        "Name": "ProcessData_WithInvalidModel_Returns_BadRequestResult",
        "Body": "{\r\n    // Arrange\r\n    var dataProcessorServiceMock = new Mock\u003CIDataProcessorService\u003E();\r\n    var loggerMock = new Mock\u003CILogger\u003CDataProcessorController\u003E\u003E();\r\n    var controller = new DataProcessorController(dataProcessorServiceMock.Object, loggerMock.Object);\r\n    controller.ModelState.AddModelError(\u0022Model\u0022, \u0022SomeError\u0022);\r\n    var model = new RecordDTO();\r\n    // Act\r\n    var result = controller.ProcessData(model).GetAwaiter().GetResult();\r\n    // Assert\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ProcessData_WithValidModelAndProcessingError_Returns_ConflictResult",
        "Body": "{\r\n    // Arrange\r\n    var dataProcessorServiceMock = new Mock\u003CIDataProcessorService\u003E();\r\n    dataProcessorServiceMock.Setup(service =\u003E service.ProcessData(It.IsAny\u003CRecordDTO\u003E())).Returns(Task.FromResult\u003C(ReportDTO, bool)\u003E((null, false)));\r\n    var loggerMock = new Mock\u003CILogger\u003CDataProcessorController\u003E\u003E();\r\n    var controller = new DataProcessorController(dataProcessorServiceMock.Object, loggerMock.Object);\r\n    var model = GetData();\r\n    // Act\r\n    var result = controller.ProcessData(model).GetAwaiter().GetResult();\r\n    // Assert\r\n    Assert.IsType\u003CConflictResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ProcessData_WithValidModel_Returns_OkResult",
        "Body": "{\r\n    // Arrange\r\n    var dataProcessorServiceMock = new Mock\u003CIDataProcessorService\u003E();\r\n    dataProcessorServiceMock.Setup(service =\u003E service.ProcessData(It.IsAny\u003CRecordDTO\u003E())).Returns(Task.FromResult\u003C(ReportDTO, bool)\u003E((GetReport(), true)));\r\n    var loggerMock = new Mock\u003CILogger\u003CDataProcessorController\u003E\u003E();\r\n    var controller = new DataProcessorController(dataProcessorServiceMock.Object, loggerMock.Object);\r\n    var model = GetData();\r\n    // Act\r\n    var result = controller.ProcessData(model).GetAwaiter().GetResult();\r\n    // Assert\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003CReportDTO\u003E(okObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AccountsControllerTest",
    "Message": null,
    "ProjectName": "Identity.UnitTests",
    "Methods": [
      {
        "Name": "GetAccounts_Returns_CollectionOfAccountDTO",
        "Body": "{\r\n    // Arrange\r\n    var accountServiceMock = new Mock\u003CIAccountService\u003E();\r\n    accountServiceMock.Setup(service =\u003E service.GetAllAccountsAsync()).Returns(Task.FromResult(GetAllAccounts()));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Information(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new AccountsController(accountServiceMock.Object, loggerMock.Object);\r\n    // Act\r\n    var result = controller.GetAccounts().GetAwaiter().GetResult();\r\n    // Assert\r\n    Assert.IsType\u003CList\u003CAccountDTO\u003E\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetAccount_WithInvalidModel_Returns_BadRequestResult",
        "Body": "{\r\n    // Arrange\r\n    var accountServiceMock = new Mock\u003CIAccountService\u003E();\r\n    accountServiceMock.Setup(service =\u003E service.GetAccountByIdAsync(It.IsAny\u003CGuid\u003E())).Returns(Task.FromResult(GetAccount()));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    var controller = new AccountsController(accountServiceMock.Object, loggerMock.Object);\r\n    controller.ModelState.AddModelError(\u0022Id\u0022, \u0022InvalidId\u0022);\r\n    var id = new Guid();\r\n    // Act\r\n    var result = controller.GetAccount(id).GetAwaiter().GetResult();\r\n    // Assert\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetAccount_WithValidModelAndValidId_Returns_AccountDTO",
        "Body": "{\r\n    // Arrange\r\n    var accountServiceMock = new Mock\u003CIAccountService\u003E();\r\n    accountServiceMock.Setup(service =\u003E service.GetAccountByIdAsync(It.IsAny\u003CGuid\u003E())).Returns(Task.FromResult(GetAccount()));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Information(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new AccountsController(accountServiceMock.Object, loggerMock.Object);\r\n    var id = new Guid();\r\n    // Act\r\n    var result = controller.GetAccount(id).GetAwaiter().GetResult();\r\n    // Assert\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003CAccountDTO\u003E(okObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetAccount_WithValidModelAndInvalidId_Returns_NoContentResult",
        "Body": "{\r\n    // Arrange\r\n    var accountServiceMock = new Mock\u003CIAccountService\u003E();\r\n    accountServiceMock.Setup(service =\u003E service.GetAccountByIdAsync(It.IsAny\u003CGuid\u003E())).Returns(Task.FromResult(GetNullAccount()));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Warning(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new AccountsController(accountServiceMock.Object, loggerMock.Object);\r\n    var id = new Guid();\r\n    // Act\r\n    var result = controller.GetAccount(id).GetAwaiter().GetResult();\r\n    // Assert\r\n    var noContentResult = Assert.IsType\u003CNoContentResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Login_WithInvalidModel_Returns_BadRequestResult",
        "Body": "{\r\n    // Arrange\r\n    var accountServiceMock = new Mock\u003CIAccountService\u003E();\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    var controller = new AccountsController(accountServiceMock.Object, loggerMock.Object);\r\n    controller.ModelState.AddModelError(\u0022Error\u0022, \u0022Model Error\u0022);\r\n    var loginDTO = GetLoginData();\r\n    // Act\r\n    var result = controller.Login(loginDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Login_WhenAccountDoesNotExist_Returns_NoContentResult",
        "Body": "{\r\n    // Arrange\r\n    var accountServiceMock = new Mock\u003CIAccountService\u003E();\r\n    accountServiceMock.Setup(service =\u003E service.LoginAsync(It.IsAny\u003CLoginDTO\u003E())).Returns(Task.FromResult(GetNullToken()));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Warning(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new AccountsController(accountServiceMock.Object, loggerMock.Object);\r\n    var loginDTO = GetLoginData();\r\n    // Act\r\n    var result = controller.Login(loginDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var noContentResult = Assert.IsType\u003CNoContentResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Login_WithValidModel_Returns_AcceptedResult",
        "Body": "{\r\n    // Arrange\r\n    var accountServiceMock = new Mock\u003CIAccountService\u003E();\r\n    accountServiceMock.Setup(service =\u003E service.LoginAsync(It.IsAny\u003CLoginDTO\u003E())).Returns(Task.FromResult(GetToken()));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Information(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new AccountsController(accountServiceMock.Object, loggerMock.Object);\r\n    var loginDTO = GetLoginData();\r\n    controller.ControllerContext = GetFakeContext();\r\n    // Act\r\n    var result = controller.Login(loginDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var acceptedResult = Assert.IsType\u003CAcceptedResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003CTokenDTO\u003E(acceptedResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RegisterNewAccount_WithInvalidModel_Returns_BadRequestResult",
        "Body": "{\r\n    // Arrange\r\n    var accountServiceMock = new Mock\u003CIAccountService\u003E();\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    var controller = new AccountsController(accountServiceMock.Object, loggerMock.Object);\r\n    controller.ModelState.AddModelError(\u0022Error\u0022, \u0022Model Error\u0022);\r\n    var accountDTO = new AccountDTO();\r\n    // Act\r\n    var result = controller.RegisterNewAccount(accountDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RegisterNewAccount_WithValidExistingModel_Returns_ConflictResult",
        "Body": "{\r\n    // Arrange\r\n    var accountServiceMock = new Mock\u003CIAccountService\u003E();\r\n    accountServiceMock.Setup(service =\u003E service.RegisterAsync(It.IsAny\u003CAccountDTO\u003E())).Returns(Task.FromResult((Guid.NewGuid(), false, \u0022Conflict\u0022)));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Warning(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new AccountsController(accountServiceMock.Object, loggerMock.Object);\r\n    var accountDTO = new AccountDTO();\r\n    // Act\r\n    var result = controller.RegisterNewAccount(accountDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var conflictObjectResult = Assert.IsType\u003CConflictObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RegisterNewAccount_WithValidModel_Returns_CreatedAtActionResult",
        "Body": "{\r\n    // Arrange\r\n    var accountServiceMock = new Mock\u003CIAccountService\u003E();\r\n    accountServiceMock.Setup(service =\u003E service.RegisterAsync(It.IsAny\u003CAccountDTO\u003E())).Returns(Task.FromResult((Guid.NewGuid(), true, \u0022Success\u0022)));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Information(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new AccountsController(accountServiceMock.Object, loggerMock.Object);\r\n    var accountDTO = new AccountDTO();\r\n    // Act\r\n    var result = controller.RegisterNewAccount(accountDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var createdAtActionResult = Assert.IsType\u003CCreatedAtActionResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003CAccountDTO\u003E(createdAtActionResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateAccount_WithInvalidModel_Returns_BadRequestResult",
        "Body": "{\r\n    // Arrange\r\n    var accountServiceMock = new Mock\u003CIAccountService\u003E();\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    var controller = new AccountsController(accountServiceMock.Object, loggerMock.Object);\r\n    controller.ModelState.AddModelError(\u0022Error\u0022, \u0022Model Error\u0022);\r\n    var accountDTO = new AccountDTO();\r\n    // Act\r\n    var result = controller.UpdateAccount(accountDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateAccount_WhenAccountDoesNotExist_Returns_NotFoundResult",
        "Body": "{\r\n    // Arrange\r\n    var accountServiceMock = new Mock\u003CIAccountService\u003E();\r\n    accountServiceMock.Setup(service =\u003E service.GetAccountByEmailAsync(It.IsAny\u003Cstring\u003E())).Returns(Task.FromResult(GetNullAccount()));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Warning(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new AccountsController(accountServiceMock.Object, loggerMock.Object);\r\n    var accountDTO = GetAccount();\r\n    // Act\r\n    var result = controller.UpdateAccount(accountDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var notFoundObjectResult = Assert.IsType\u003CNotFoundObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003CGuid\u003E(notFoundObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateAccount_WithUpdateError_Returns_ConflictResult",
        "Body": "{\r\n    // Arrange\r\n    var accountServiceMock = new Mock\u003CIAccountService\u003E();\r\n    accountServiceMock.Setup(service =\u003E service.GetAccountByEmailAsync(It.IsAny\u003Cstring\u003E())).Returns(Task.FromResult(GetAccount()));\r\n    accountServiceMock.Setup(service =\u003E service.UpdateAccountAsync(It.IsAny\u003CAccountDTO\u003E())).Returns(Task.FromResult(false));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Warning(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new AccountsController(accountServiceMock.Object, loggerMock.Object);\r\n    var accountDTO = GetAccount();\r\n    // Act\r\n    var result = controller.UpdateAccount(accountDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var conflictResult = Assert.IsType\u003CConflictResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateAccount_WithValidModel_Returns_OkResult",
        "Body": "{\r\n    // Arrange\r\n    var accountServiceMock = new Mock\u003CIAccountService\u003E();\r\n    accountServiceMock.Setup(service =\u003E service.GetAccountByEmailAsync(It.IsAny\u003Cstring\u003E())).Returns(Task.FromResult(GetAccount()));\r\n    accountServiceMock.Setup(service =\u003E service.UpdateAccountAsync(It.IsAny\u003CAccountDTO\u003E())).Returns(Task.FromResult(true));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Information(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new AccountsController(accountServiceMock.Object, loggerMock.Object);\r\n    var accountDTO = GetAccount();\r\n    // Act\r\n    var result = controller.UpdateAccount(accountDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var okResult = Assert.IsType\u003COkObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003CAccountDTO\u003E(okResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteAccount_WithInvalidModelId_Returns_NotFoundResult",
        "Body": "{\r\n    // Arrange\r\n    var accountServiceMock = new Mock\u003CIAccountService\u003E();\r\n    accountServiceMock.Setup(service =\u003E service.DeleteAccountByIdAsync(It.IsAny\u003CGuid\u003E())).Returns(Task.FromResult(false));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    var controller = new AccountsController(accountServiceMock.Object, loggerMock.Object);\r\n    var accountDTO = new AccountDTO();\r\n    var id = new Guid();\r\n    // Act\r\n    var result = controller.DeleteAccount(id).GetAwaiter().GetResult();\r\n    // Assert\r\n    var notFoundObjectResult = Assert.IsType\u003CNotFoundObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003CGuid\u003E(notFoundObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteAccount_Returns_OkResult",
        "Body": "{\r\n    // Arrange\r\n    var accountServiceMock = new Mock\u003CIAccountService\u003E();\r\n    accountServiceMock.Setup(service =\u003E service.GetAccountByIdAsync(It.IsAny\u003CGuid\u003E())).Returns(Task.FromResult(GetAccount()));\r\n    accountServiceMock.Setup(service =\u003E service.DeleteAccountByIdAsync(It.IsAny\u003CGuid\u003E())).Returns(Task.FromResult(true));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    var controller = new AccountsController(accountServiceMock.Object, loggerMock.Object);\r\n    var id = new Guid();\r\n    // Act\r\n    var result = controller.DeleteAccount(id).GetAwaiter().GetResult();\r\n    // Assert\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003CGuid\u003E(okObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ReportsControllerTest",
    "Message": null,
    "ProjectName": "Report.UnitTests",
    "Methods": [
      {
        "Name": "GetReports_Returns_CollectionOfReportDTO",
        "Body": "{\r\n    // Arrange\r\n    var reportServiceMock = new Mock\u003CIReportService\u003E();\r\n    reportServiceMock.Setup(service =\u003E service.GetAllReportsAsync(null)).Returns(Task.FromResult(GetAllReports()));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Information(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new ReportsController(reportServiceMock.Object, loggerMock.Object);\r\n    // Act\r\n    var result = controller.GetReports(null).GetAwaiter().GetResult();\r\n    // Assert\r\n    Assert.IsType\u003CList\u003CReportDTO\u003E\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetReport_WithInvalidModel_Returns_BadRequestResult",
        "Body": "{\r\n    // Arrange\r\n    var reportServiceMock = new Mock\u003CIReportService\u003E();\r\n    reportServiceMock.Setup(service =\u003E service.GetReportByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(GetReport()));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    var controller = new ReportsController(reportServiceMock.Object, loggerMock.Object);\r\n    controller.ModelState.AddModelError(\u0022Id\u0022, \u0022InvalidId\u0022);\r\n    var id = 1;\r\n    // Act\r\n    var result = controller.GetReport(id).GetAwaiter().GetResult();\r\n    // Assert\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetReport_WithValidModelAndValidId_Returns_ReportDTO",
        "Body": "{\r\n    // Arrange\r\n    var reportServiceMock = new Mock\u003CIReportService\u003E();\r\n    reportServiceMock.Setup(service =\u003E service.GetReportByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(GetReport()));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Information(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new ReportsController(reportServiceMock.Object, loggerMock.Object);\r\n    var id = 1;\r\n    // Act\r\n    var result = controller.GetReport(id).GetAwaiter().GetResult();\r\n    // Assert\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003CReportDTO\u003E(okObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetReport_WithValidModelAndInvalidId_Returns_NotFoundResult",
        "Body": "{\r\n    // Arrange\r\n    var reportServiceMock = new Mock\u003CIReportService\u003E();\r\n    reportServiceMock.Setup(service =\u003E service.GetReportByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(GetNullReport()));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Warning(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new ReportsController(reportServiceMock.Object, loggerMock.Object);\r\n    var id = 1;\r\n    // Act\r\n    var result = controller.GetReport(id).GetAwaiter().GetResult();\r\n    // Assert\r\n    var notFoundObjectResult = Assert.IsType\u003CNotFoundObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003Cint\u003E(notFoundObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RegisterNewReport_WithInvalidModel_Returns_BadRequestResult",
        "Body": "{\r\n    // Arrange\r\n    var reportServiceMock = new Mock\u003CIReportService\u003E();\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    var controller = new ReportsController(reportServiceMock.Object, loggerMock.Object);\r\n    controller.ModelState.AddModelError(\u0022Error\u0022, \u0022Model Error\u0022);\r\n    var profileDTO = new ReportDTO();\r\n    // Act\r\n    var result = controller.RegisterNewReport(profileDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RegisterNewReport_WithValidExistingModel_Returns_ConflictResult",
        "Body": "{\r\n    // Arrange\r\n    var reportServiceMock = new Mock\u003CIReportService\u003E();\r\n    reportServiceMock.Setup(service =\u003E service.RegisterNewReportAsync(It.IsAny\u003CReportDTO\u003E())).Returns(Task.FromResult((0, false)));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Warning(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new ReportsController(reportServiceMock.Object, loggerMock.Object);\r\n    var profileDTO = new ReportDTO();\r\n    // Act\r\n    var result = controller.RegisterNewReport(profileDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var conflictObjectResult = Assert.IsType\u003CConflictObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003Cint\u003E(conflictObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RegisterNewReport_WithValidModel_Returns_CreatedAtActionResult",
        "Body": "{\r\n    // Arrange\r\n    var reportServiceMock = new Mock\u003CIReportService\u003E();\r\n    reportServiceMock.Setup(service =\u003E service.RegisterNewReportAsync(It.IsAny\u003CReportDTO\u003E())).Returns(Task.FromResult((1, true)));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Information(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new ReportsController(reportServiceMock.Object, loggerMock.Object);\r\n    var profileDTO = new ReportDTO();\r\n    // Act\r\n    var result = controller.RegisterNewReport(profileDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var createdAtActionResult = Assert.IsType\u003CCreatedAtActionResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003CReportDTO\u003E(createdAtActionResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateReport_WithInvalidModel_Returns_BadRequestResult",
        "Body": "{\r\n    // Arrange\r\n    var reportServiceMock = new Mock\u003CIReportService\u003E();\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    var controller = new ReportsController(reportServiceMock.Object, loggerMock.Object);\r\n    controller.ModelState.AddModelError(\u0022Error\u0022, \u0022Model Error\u0022);\r\n    var profileDTO = new ReportDTO();\r\n    // Act\r\n    var result = controller.UpdateReport(profileDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateReport_WithInvalidModelId_Returns_BadRequestResult",
        "Body": "{\r\n    // Arrange\r\n    var reportServiceMock = new Mock\u003CIReportService\u003E();\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    var controller = new ReportsController(reportServiceMock.Object, loggerMock.Object);\r\n    var reportDTO = new ReportDTO\r\n    {\r\n        Id = 0\r\n    };\r\n    // Act\r\n    var result = controller.UpdateReport(reportDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var badRequestObjectResult = Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003Cint\u003E(badRequestObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateReport_WithNonexistingId_Returns_NotFoundResult",
        "Body": "{\r\n    // Arrange\r\n    var reportServiceMock = new Mock\u003CIReportService\u003E();\r\n    reportServiceMock.Setup(service =\u003E service.GetReportByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(GetNullReport()));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Warning(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new ReportsController(reportServiceMock.Object, loggerMock.Object);\r\n    var profileDTO = new ReportDTO\r\n    {\r\n        Id = 1\r\n    };\r\n    // Act\r\n    var result = controller.UpdateReport(profileDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var notFoundObjectResult = Assert.IsType\u003CNotFoundObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003Cint\u003E(notFoundObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateReport_WithUpdateError_Returns_ConflictResult",
        "Body": "{\r\n    // Arrange\r\n    var reportServiceMock = new Mock\u003CIReportService\u003E();\r\n    reportServiceMock.Setup(service =\u003E service.GetReportByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(GetReport()));\r\n    reportServiceMock.Setup(service =\u003E service.UpdateReportAsync(It.IsAny\u003CReportDTO\u003E())).Returns(Task.FromResult(false));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Warning(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new ReportsController(reportServiceMock.Object, loggerMock.Object);\r\n    var profileDTO = new ReportDTO\r\n    {\r\n        Id = 1\r\n    };\r\n    // Act\r\n    var result = controller.UpdateReport(profileDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var conflictResult = Assert.IsType\u003CConflictResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateReport_WithValidModel_Returns_OkResult",
        "Body": "{\r\n    // Arrange\r\n    var reportServiceMock = new Mock\u003CIReportService\u003E();\r\n    reportServiceMock.Setup(service =\u003E service.GetReportByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(GetReport()));\r\n    reportServiceMock.Setup(service =\u003E service.UpdateReportAsync(It.IsAny\u003CReportDTO\u003E())).Returns(Task.FromResult(true));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Information(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new ReportsController(reportServiceMock.Object, loggerMock.Object);\r\n    var profileDTO = new ReportDTO\r\n    {\r\n        Id = 1\r\n    };\r\n    // Act\r\n    var result = controller.UpdateReport(profileDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var okResult = Assert.IsType\u003COkObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003CReportDTO\u003E(okResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteReport_WithInvalidModelId_Returns_NotFoundResult",
        "Body": "{\r\n    // Arrange\r\n    var reportServiceMock = new Mock\u003CIReportService\u003E();\r\n    reportServiceMock.Setup(service =\u003E service.DeleteReportByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(false));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Warning(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new ReportsController(reportServiceMock.Object, loggerMock.Object);\r\n    var profileDTO = new ReportDTO();\r\n    var id = 1;\r\n    // Act\r\n    var result = controller.DeleteReport(id).GetAwaiter().GetResult();\r\n    // Assert\r\n    var notFoundObjectResult = Assert.IsType\u003CNotFoundObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003Cint\u003E(notFoundObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteReport_Returns_OkResult",
        "Body": "{\r\n    // Arrange\r\n    var reportServiceMock = new Mock\u003CIReportService\u003E();\r\n    reportServiceMock.Setup(service =\u003E service.GetReportByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(GetReport()));\r\n    reportServiceMock.Setup(service =\u003E service.DeleteReportByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(true));\r\n    var loggerMock = new Mock\u003CILogger\u003E();\r\n    loggerMock.Setup(c =\u003E c.Information(It.IsAny\u003Cstring\u003E()));\r\n    var controller = new ReportsController(reportServiceMock.Object, loggerMock.Object);\r\n    var id = 1;\r\n    // Act\r\n    var result = controller.DeleteReport(id).GetAwaiter().GetResult();\r\n    // Assert\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003Cint\u003E(okObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RecordsControllerTest",
    "Message": null,
    "ProjectName": "Sensor.UnitTests",
    "Methods": [
      {
        "Name": "GetRecords_Returns_CollectionOfSensorDTO",
        "Body": "{\r\n    // Arrange\r\n    var recordServiceMock = new Mock\u003CIRecordService\u003E();\r\n    recordServiceMock.Setup(service =\u003E service.GetAllRecordsAsync(null)).Returns(Task.FromResult(GetAllRecords()));\r\n    var loggerMock = new Mock\u003CILogger\u003CRecordsController\u003E\u003E();\r\n    var controller = new RecordsController(recordServiceMock.Object, loggerMock.Object);\r\n    // Act\r\n    var result = controller.GetRecords(null).GetAwaiter().GetResult();\r\n    // Assert\r\n    Assert.IsType\u003CList\u003CRecordDTO\u003E\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetRecord_WithInvalidModel_Returns_BadRequestResult",
        "Body": "{\r\n    // Arrange\r\n    var recordServiceMock = new Mock\u003CIRecordService\u003E();\r\n    recordServiceMock.Setup(service =\u003E service.GetRecordByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(GetRecord()));\r\n    var loggerMock = new Mock\u003CILogger\u003CRecordsController\u003E\u003E();\r\n    var controller = new RecordsController(recordServiceMock.Object, loggerMock.Object);\r\n    controller.ModelState.AddModelError(\u0022Id\u0022, \u0022InvalidId\u0022);\r\n    var id = 1;\r\n    // Act\r\n    var result = controller.GetRecord(id).GetAwaiter().GetResult();\r\n    // Assert\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetRecord_WithValidModelAndValidId_Returns_RecordDTO",
        "Body": "{\r\n    // Arrange\r\n    var recordServiceMock = new Mock\u003CIRecordService\u003E();\r\n    recordServiceMock.Setup(service =\u003E service.GetRecordByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(GetRecord()));\r\n    var loggerMock = new Mock\u003CILogger\u003CRecordsController\u003E\u003E();\r\n    var controller = new RecordsController(recordServiceMock.Object, loggerMock.Object);\r\n    var id = 1;\r\n    // Act\r\n    var result = controller.GetRecord(id).GetAwaiter().GetResult();\r\n    // Assert\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003CRecordDTO\u003E(okObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetRecord_WithValidModelAndInvalidId_Returns_NotFoundResult",
        "Body": "{\r\n    // Arrange\r\n    var recordServiceMock = new Mock\u003CIRecordService\u003E();\r\n    recordServiceMock.Setup(service =\u003E service.GetRecordByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(GetNullRecord()));\r\n    var loggerMock = new Mock\u003CILogger\u003CRecordsController\u003E\u003E();\r\n    var controller = new RecordsController(recordServiceMock.Object, loggerMock.Object);\r\n    var id = 2;\r\n    // Act\r\n    var result = controller.GetRecord(id).GetAwaiter().GetResult();\r\n    // Assert\r\n    var notFoundObjectResult = Assert.IsType\u003CNotFoundObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003Cint\u003E(notFoundObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RegisterNewRecordPost_WithInvalidModel_Returns_BadRequestResult",
        "Body": "{\r\n    // Arrange\r\n    var recordServiceMock = new Mock\u003CIRecordService\u003E();\r\n    var loggerMock = new Mock\u003CILogger\u003CRecordsController\u003E\u003E();\r\n    var controller = new RecordsController(recordServiceMock.Object, loggerMock.Object);\r\n    controller.ModelState.AddModelError(\u0022Error\u0022, \u0022Model Error\u0022);\r\n    var recordDTO = new RecordDTO();\r\n    // Act\r\n    var result = controller.RegisterNewRecord(recordDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RegisterNewRecordPost_WithValidExistingModel_Returns_ConflictResult",
        "Body": "{\r\n    // Arrange\r\n    var recordServiceMock = new Mock\u003CIRecordService\u003E();\r\n    recordServiceMock.Setup(service =\u003E service.RegisterNewRecordAsync(It.IsAny\u003CRecordDTO\u003E())).Returns(Task.FromResult((1, false)));\r\n    var loggerMock = new Mock\u003CILogger\u003CRecordsController\u003E\u003E();\r\n    var controller = new RecordsController(recordServiceMock.Object, loggerMock.Object);\r\n    var recordDTO = new RecordDTO();\r\n    // Act\r\n    var result = controller.RegisterNewRecord(recordDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var conflictObjectResult = Assert.IsType\u003CConflictObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003Cint\u003E(conflictObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RegisterNewRecordPost_WithValidModel_Returns_CreatedAtActionResult",
        "Body": "{\r\n    // Arrange\r\n    var recordServiceMock = new Mock\u003CIRecordService\u003E();\r\n    recordServiceMock.Setup(service =\u003E service.RegisterNewRecordAsync(It.IsAny\u003CRecordDTO\u003E())).Returns(Task.FromResult((1, true)));\r\n    var loggerMock = new Mock\u003CILogger\u003CRecordsController\u003E\u003E();\r\n    var controller = new RecordsController(recordServiceMock.Object, loggerMock.Object);\r\n    var recordDTO = new RecordDTO();\r\n    // Act\r\n    var result = controller.RegisterNewRecord(recordDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var createdAtActionResult = Assert.IsType\u003CCreatedAtActionResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003CRecordDTO\u003E(createdAtActionResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateRecord_WithInvalidModel_Returns_BadRequestResult",
        "Body": "{\r\n    // Arrange\r\n    var recordServiceMock = new Mock\u003CIRecordService\u003E();\r\n    var loggerMock = new Mock\u003CILogger\u003CRecordsController\u003E\u003E();\r\n    var controller = new RecordsController(recordServiceMock.Object, loggerMock.Object);\r\n    controller.ModelState.AddModelError(\u0022Error\u0022, \u0022Model Error\u0022);\r\n    var recordDTO = new RecordDTO();\r\n    // Act\r\n    var result = controller.UpdateRecord(recordDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateRecord_WithInvalidModelId_Returns_BadRequestResult",
        "Body": "{\r\n    // Arrange\r\n    var recordServiceMock = new Mock\u003CIRecordService\u003E();\r\n    var loggerMock = new Mock\u003CILogger\u003CRecordsController\u003E\u003E();\r\n    var controller = new RecordsController(recordServiceMock.Object, loggerMock.Object);\r\n    var recordDTO = new RecordDTO\r\n    {\r\n        Id = -1\r\n    };\r\n    // Act\r\n    var result = controller.UpdateRecord(recordDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var badRequestObjectResult = Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003Cint\u003E(badRequestObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateRecord_WithNonexistingId_Returns_NotFoundResult",
        "Body": "{\r\n    // Arrange\r\n    var recordServiceMock = new Mock\u003CIRecordService\u003E();\r\n    recordServiceMock.Setup(service =\u003E service.GetRecordByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(GetNullRecord()));\r\n    var loggerMock = new Mock\u003CILogger\u003CRecordsController\u003E\u003E();\r\n    var controller = new RecordsController(recordServiceMock.Object, loggerMock.Object);\r\n    var recordDTO = new RecordDTO\r\n    {\r\n        Id = 2\r\n    };\r\n    // Act\r\n    var result = controller.UpdateRecord(recordDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var notFoundObjectResult = Assert.IsType\u003CNotFoundObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003Cint\u003E(notFoundObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateRecord_WithNullValue_Returns_ConflictResult",
        "Body": "{\r\n    // Arrange\r\n    var recordServiceMock = new Mock\u003CIRecordService\u003E();\r\n    recordServiceMock.Setup(service =\u003E service.GetRecordByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(GetRecord()));\r\n    recordServiceMock.Setup(service =\u003E service.UpdateRecordAsync(It.IsAny\u003CRecordDTO\u003E())).Returns(Task.FromResult(false));\r\n    var loggerMock = new Mock\u003CILogger\u003CRecordsController\u003E\u003E();\r\n    var controller = new RecordsController(recordServiceMock.Object, loggerMock.Object);\r\n    var recordDTO = new RecordDTO\r\n    {\r\n        Id = 1\r\n    };\r\n    // Act\r\n    var result = controller.UpdateRecord(recordDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var conflictResult = Assert.IsType\u003CConflictResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateRecord_WithValidModel_Returns_OkResult",
        "Body": "{\r\n    // Arrange\r\n    var recordServiceMock = new Mock\u003CIRecordService\u003E();\r\n    recordServiceMock.Setup(service =\u003E service.GetRecordByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(GetRecord()));\r\n    recordServiceMock.Setup(service =\u003E service.UpdateRecordAsync(It.IsAny\u003CRecordDTO\u003E())).Returns(Task.FromResult(true));\r\n    var loggerMock = new Mock\u003CILogger\u003CRecordsController\u003E\u003E();\r\n    var controller = new RecordsController(recordServiceMock.Object, loggerMock.Object);\r\n    var recordDTO = new RecordDTO\r\n    {\r\n        Id = 1\r\n    };\r\n    // Act\r\n    var result = controller.UpdateRecord(recordDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var okResult = Assert.IsType\u003COkObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003CRecordDTO\u003E(okResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteRecord_WithInvalidModelId_Returns_NotFoundResult",
        "Body": "{\r\n    // Arrange\r\n    var recordServiceMock = new Mock\u003CIRecordService\u003E();\r\n    recordServiceMock.Setup(service =\u003E service.DeleteRecordByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(false));\r\n    var loggerMock = new Mock\u003CILogger\u003CRecordsController\u003E\u003E();\r\n    var controller = new RecordsController(recordServiceMock.Object, loggerMock.Object);\r\n    var recordDTO = new RecordDTO();\r\n    var id = 1;\r\n    // Act\r\n    var result = controller.DeleteRecord(id).GetAwaiter().GetResult();\r\n    // Assert\r\n    var notFoundObjectResult = Assert.IsType\u003CNotFoundObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003Cint\u003E(notFoundObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteRecord_Returns_OkResult",
        "Body": "{\r\n    // Arrange\r\n    var recordServiceMock = new Mock\u003CIRecordService\u003E();\r\n    recordServiceMock.Setup(service =\u003E service.GetRecordByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(GetRecord()));\r\n    recordServiceMock.Setup(service =\u003E service.DeleteRecordByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(true));\r\n    var loggerMock = new Mock\u003CILogger\u003CRecordsController\u003E\u003E();\r\n    var controller = new RecordsController(recordServiceMock.Object, loggerMock.Object);\r\n    var id = 1;\r\n    // Act\r\n    var result = controller.DeleteRecord(id).GetAwaiter().GetResult();\r\n    // Assert\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003Cint\u003E(okObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteRecords_Returns_OkResult",
        "Body": "{\r\n    // Arrange\r\n    var recordServiceMock = new Mock\u003CIRecordService\u003E();\r\n    recordServiceMock.Setup(service =\u003E service.DeleteAllRecordsAsync());\r\n    var loggerMock = new Mock\u003CILogger\u003CRecordsController\u003E\u003E();\r\n    var controller = new RecordsController(recordServiceMock.Object, loggerMock.Object);\r\n    // Act\r\n    var result = controller.DeleteRecords().GetAwaiter().GetResult();\r\n    // Assert\r\n    var okObjectResult = Assert.IsType\u003COkResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SensorsControllerTest",
    "Message": null,
    "ProjectName": "Sensor.UnitTests",
    "Methods": [
      {
        "Name": "GetSensors_Returns_CollectionOfSensorDTO",
        "Body": "{\r\n    // Arrange\r\n    var sensorServiceMock = new Mock\u003CISensorService\u003E();\r\n    sensorServiceMock.Setup(service =\u003E service.GetAllSensorsAsync()).Returns(Task.FromResult(GetAllSensors()));\r\n    var loggerMock = new Mock\u003CILogger\u003CSensorsController\u003E\u003E();\r\n    var controller = new SensorsController(sensorServiceMock.Object, loggerMock.Object);\r\n    // Act\r\n    var result = controller.GetSensors().GetAwaiter().GetResult();\r\n    // Assert\r\n    Assert.IsType\u003CList\u003CSensorDTO\u003E\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetSensorsByProfileId_Returns_CollectionOfSensorDTO",
        "Body": "{\r\n    // Arrange\r\n    var sensorServiceMock = new Mock\u003CISensorService\u003E();\r\n    sensorServiceMock.Setup(service =\u003E service.GetAllSensorsByProfileIdAsync(It.IsAny\u003CGuid\u003E())).Returns(Task.FromResult(GetAllSensors()));\r\n    var loggerMock = new Mock\u003CILogger\u003CSensorsController\u003E\u003E();\r\n    var controller = new SensorsController(sensorServiceMock.Object, loggerMock.Object);\r\n    var profileId = Guid.NewGuid();\r\n    // Act\r\n    var result = controller.GetSensors(profileId).GetAwaiter().GetResult();\r\n    // Assert\r\n    Assert.IsType\u003CList\u003CSensorDTO\u003E\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetSensor_WithInvalidModel_Returns_BadRequestResult",
        "Body": "{\r\n    // Arrange\r\n    var sensorServiceMock = new Mock\u003CISensorService\u003E();\r\n    sensorServiceMock.Setup(service =\u003E service.GetSensorByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(GetSensor()));\r\n    var loggerMock = new Mock\u003CILogger\u003CSensorsController\u003E\u003E();\r\n    var controller = new SensorsController(sensorServiceMock.Object, loggerMock.Object);\r\n    controller.ModelState.AddModelError(\u0022Id\u0022, \u0022InvalidId\u0022);\r\n    var id = 1;\r\n    // Act\r\n    var result = controller.GetSensor(id).GetAwaiter().GetResult();\r\n    // Assert\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetSensor_WithValidModelAndValidId_Returns_SensorDTO",
        "Body": "{\r\n    // Arrange\r\n    var sensorServiceMock = new Mock\u003CISensorService\u003E();\r\n    sensorServiceMock.Setup(service =\u003E service.GetSensorByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(GetSensor()));\r\n    var loggerMock = new Mock\u003CILogger\u003CSensorsController\u003E\u003E();\r\n    var controller = new SensorsController(sensorServiceMock.Object, loggerMock.Object);\r\n    var id = 1;\r\n    // Act\r\n    var result = controller.GetSensor(id).GetAwaiter().GetResult();\r\n    // Assert\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003CSensorDTO\u003E(okObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetSensor_WithValidModelAndInvalidId_Returns_NoContentResult",
        "Body": "{\r\n    // Arrange\r\n    var sensorServiceMock = new Mock\u003CISensorService\u003E();\r\n    sensorServiceMock.Setup(service =\u003E service.GetSensorByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(GetNullSensor()));\r\n    var loggerMock = new Mock\u003CILogger\u003CSensorsController\u003E\u003E();\r\n    var controller = new SensorsController(sensorServiceMock.Object, loggerMock.Object);\r\n    var id = 2;\r\n    // Act\r\n    var result = controller.GetSensor(id).GetAwaiter().GetResult();\r\n    // Assert\r\n    var noContentResult = Assert.IsType\u003CNoContentResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RegisterNewSensorPost_WithInvalidModel_Returns_BadRequestResult",
        "Body": "{\r\n    // Arrange\r\n    var sensorServiceMock = new Mock\u003CISensorService\u003E();\r\n    var loggerMock = new Mock\u003CILogger\u003CSensorsController\u003E\u003E();\r\n    var controller = new SensorsController(sensorServiceMock.Object, loggerMock.Object);\r\n    controller.ModelState.AddModelError(\u0022Error\u0022, \u0022Model Error\u0022);\r\n    var sensorDTO = new SensorDTO();\r\n    // Act\r\n    var result = controller.RegisterNewSensor(sensorDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RegisterNewSensorPost_WithValidExistingModel_Returns_ConflictResult",
        "Body": "{\r\n    // Arrange\r\n    var sensorServiceMock = new Mock\u003CISensorService\u003E();\r\n    sensorServiceMock.Setup(service =\u003E service.RegisterNewSensorAsync(It.IsAny\u003CSensorDTO\u003E())).Returns(Task.FromResult((1, false)));\r\n    var loggerMock = new Mock\u003CILogger\u003CSensorsController\u003E\u003E();\r\n    var controller = new SensorsController(sensorServiceMock.Object, loggerMock.Object);\r\n    var sensorDTO = new SensorDTO();\r\n    // Act\r\n    var result = controller.RegisterNewSensor(sensorDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var conflictObjectResult = Assert.IsType\u003CConflictObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003Cint\u003E(conflictObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RegisterNewSensorPost_WithValidModel_Returns_CreatedAtActionResult",
        "Body": "{\r\n    // Arrange\r\n    var sensorServiceMock = new Mock\u003CISensorService\u003E();\r\n    sensorServiceMock.Setup(service =\u003E service.RegisterNewSensorAsync(It.IsAny\u003CSensorDTO\u003E())).Returns(Task.FromResult((1, true)));\r\n    var loggerMock = new Mock\u003CILogger\u003CSensorsController\u003E\u003E();\r\n    var controller = new SensorsController(sensorServiceMock.Object, loggerMock.Object);\r\n    var sensorDTO = new SensorDTO();\r\n    // Act\r\n    var result = controller.RegisterNewSensor(sensorDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var createdAtActionResult = Assert.IsType\u003CCreatedAtActionResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003CSensorDTO\u003E(createdAtActionResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateSensor_WithInvalidModel_Returns_BadRequestResult",
        "Body": "{\r\n    // Arrange\r\n    var sensorServiceMock = new Mock\u003CISensorService\u003E();\r\n    var loggerMock = new Mock\u003CILogger\u003CSensorsController\u003E\u003E();\r\n    var controller = new SensorsController(sensorServiceMock.Object, loggerMock.Object);\r\n    controller.ModelState.AddModelError(\u0022Error\u0022, \u0022Model Error\u0022);\r\n    var sensorDTO = new SensorDTO();\r\n    // Act\r\n    var result = controller.UpdateSensor(sensorDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateSensor_WithInvalidModelId_Returns_BadRequestResult",
        "Body": "{\r\n    // Arrange\r\n    var sensorServiceMock = new Mock\u003CISensorService\u003E();\r\n    var loggerMock = new Mock\u003CILogger\u003CSensorsController\u003E\u003E();\r\n    var controller = new SensorsController(sensorServiceMock.Object, loggerMock.Object);\r\n    var sensorDTO = new SensorDTO\r\n    {\r\n        Id = -1\r\n    };\r\n    // Act\r\n    var result = controller.UpdateSensor(sensorDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var badRequestObjectResult = Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003Cint\u003E(badRequestObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateSensor_WithNonexistingId_Returns_NotFoundResult",
        "Body": "{\r\n    // Arrange\r\n    var sensorServiceMock = new Mock\u003CISensorService\u003E();\r\n    sensorServiceMock.Setup(service =\u003E service.GetSensorByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(GetNullSensor()));\r\n    var loggerMock = new Mock\u003CILogger\u003CSensorsController\u003E\u003E();\r\n    var controller = new SensorsController(sensorServiceMock.Object, loggerMock.Object);\r\n    var sensorDTO = new SensorDTO\r\n    {\r\n        Id = 2\r\n    };\r\n    // Act\r\n    var result = controller.UpdateSensor(sensorDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var notFoundObjectResult = Assert.IsType\u003CNotFoundObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003Cint\u003E(notFoundObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateSensor_WithUnknownSensorType_Returns_ConflictResult",
        "Body": "{\r\n    // Arrange\r\n    var sensorServiceMock = new Mock\u003CISensorService\u003E();\r\n    sensorServiceMock.Setup(service =\u003E service.GetSensorByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(GetSensor()));\r\n    sensorServiceMock.Setup(service =\u003E service.UpdateSensorAsync(It.IsAny\u003CSensorDTO\u003E())).Returns(Task.FromResult(false));\r\n    var loggerMock = new Mock\u003CILogger\u003CSensorsController\u003E\u003E();\r\n    var controller = new SensorsController(sensorServiceMock.Object, loggerMock.Object);\r\n    var sensorDTO = new SensorDTO\r\n    {\r\n        Id = 1\r\n    };\r\n    // Act\r\n    var result = controller.UpdateSensor(sensorDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var conflictResult = Assert.IsType\u003CConflictResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateSensor_WithValidModel_Returns_OkResult",
        "Body": "{\r\n    // Arrange\r\n    var sensorServiceMock = new Mock\u003CISensorService\u003E();\r\n    sensorServiceMock.Setup(service =\u003E service.GetSensorByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(GetSensor()));\r\n    sensorServiceMock.Setup(service =\u003E service.UpdateSensorAsync(It.IsAny\u003CSensorDTO\u003E())).Returns(Task.FromResult(true));\r\n    var loggerMock = new Mock\u003CILogger\u003CSensorsController\u003E\u003E();\r\n    var controller = new SensorsController(sensorServiceMock.Object, loggerMock.Object);\r\n    var sensorDTO = new SensorDTO\r\n    {\r\n        Id = 1\r\n    };\r\n    // Act\r\n    var result = controller.UpdateSensor(sensorDTO).GetAwaiter().GetResult();\r\n    // Assert\r\n    var okResult = Assert.IsType\u003COkObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003CSensorDTO\u003E(okResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteSensor_WithInvalidModelId_Returns_NotFoundResult",
        "Body": "{\r\n    // Arrange\r\n    var sensorServiceMock = new Mock\u003CISensorService\u003E();\r\n    sensorServiceMock.Setup(service =\u003E service.DeleteSensorByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(false));\r\n    var loggerMock = new Mock\u003CILogger\u003CSensorsController\u003E\u003E();\r\n    var controller = new SensorsController(sensorServiceMock.Object, loggerMock.Object);\r\n    var sensorDTO = new SensorDTO();\r\n    var id = 1;\r\n    // Act\r\n    var result = controller.DeleteSensor(id).GetAwaiter().GetResult();\r\n    // Assert\r\n    var notFoundObjectResult = Assert.IsType\u003CNotFoundObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003Cint\u003E(notFoundObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteSensor_Returns_OkResult",
        "Body": "{\r\n    // Arrange\r\n    var sensorServiceMock = new Mock\u003CISensorService\u003E();\r\n    sensorServiceMock.Setup(service =\u003E service.GetSensorByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(GetSensor()));\r\n    sensorServiceMock.Setup(service =\u003E service.DeleteSensorByIdAsync(It.IsAny\u003Cint\u003E())).Returns(Task.FromResult(true));\r\n    var loggerMock = new Mock\u003CILogger\u003CSensorsController\u003E\u003E();\r\n    var controller = new SensorsController(sensorServiceMock.Object, loggerMock.Object);\r\n    var id = 1;\r\n    // Act\r\n    var result = controller.DeleteSensor(id).GetAwaiter().GetResult();\r\n    // Assert\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003Cint\u003E(okObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DataSourceControllerTest",
    "Message": null,
    "ProjectName": "DataSource.UnitTests",
    "Methods": [
      {
        "Name": "Start_WhenServiceNotAccessable_Returns_Conflict",
        "Body": "{\r\n    // Arrange\r\n    var dataSourceServiceMock = new Mock\u003CIDataSourceService\u003E();\r\n    dataSourceServiceMock.Setup(service =\u003E service.Start()).Returns(false);\r\n    var loggerMock = new Mock\u003CILogger\u003CDataSourceController\u003E\u003E();\r\n    var controller = new DataSourceController(dataSourceServiceMock.Object, loggerMock.Object);\r\n    // Act\r\n    var result = controller.Start();\r\n    // Assert\r\n    Assert.IsType\u003CConflictObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Start_WhenStartSuccessfully_Returns_Ok",
        "Body": "{\r\n    // Arrange\r\n    var dataSourceServiceMock = new Mock\u003CIDataSourceService\u003E();\r\n    dataSourceServiceMock.Setup(service =\u003E service.Start()).Returns(true);\r\n    var loggerMock = new Mock\u003CILogger\u003CDataSourceController\u003E\u003E();\r\n    var controller = new DataSourceController(dataSourceServiceMock.Object, loggerMock.Object);\r\n    // Act\r\n    var result = controller.Start();\r\n    // Assert\r\n    Assert.IsType\u003COkObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Stop_WhenServiceNotAccessable_Returns_Conflict",
        "Body": "{\r\n    // Arrange\r\n    var dataSourceServiceMock = new Mock\u003CIDataSourceService\u003E();\r\n    dataSourceServiceMock.Setup(service =\u003E service.Stop()).Returns(false);\r\n    var loggerMock = new Mock\u003CILogger\u003CDataSourceController\u003E\u003E();\r\n    var controller = new DataSourceController(dataSourceServiceMock.Object, loggerMock.Object);\r\n    // Act\r\n    var result = controller.Stop();\r\n    // Assert\r\n    Assert.IsType\u003CConflictObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Stop_WhenStopSuccessfully_Returns_Ok",
        "Body": "{\r\n    // Arrange\r\n    var dataSourceServiceMock = new Mock\u003CIDataSourceService\u003E();\r\n    dataSourceServiceMock.Setup(service =\u003E service.Stop()).Returns(true);\r\n    var loggerMock = new Mock\u003CILogger\u003CDataSourceController\u003E\u003E();\r\n    var controller = new DataSourceController(dataSourceServiceMock.Object, loggerMock.Object);\r\n    // Act\r\n    var result = controller.Stop();\r\n    // Assert\r\n    Assert.IsType\u003COkObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetConfiguration_WhenConfigurationSearchError_Returns_NotFound",
        "Body": "{\r\n    // Arrange\r\n    var dataSourceServiceMock = new Mock\u003CIDataSourceService\u003E();\r\n    dataSourceServiceMock.Setup(service =\u003E service.GetConfiguration()).Returns(GetNullSetingsDTO());\r\n    var loggerMock = new Mock\u003CILogger\u003CDataSourceController\u003E\u003E();\r\n    var controller = new DataSourceController(dataSourceServiceMock.Object, loggerMock.Object);\r\n    // Act\r\n    var result = controller.GetConfiguration();\r\n    // Assert\r\n    Assert.IsType\u003CNotFoundResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetConfiguration_WhenFound_Returns_Configuration",
        "Body": "{\r\n    // Arrange\r\n    var dataSourceServiceMock = new Mock\u003CIDataSourceService\u003E();\r\n    dataSourceServiceMock.Setup(service =\u003E service.GetConfiguration()).Returns(GetSettingsDTO());\r\n    var loggerMock = new Mock\u003CILogger\u003CDataSourceController\u003E\u003E();\r\n    var controller = new DataSourceController(dataSourceServiceMock.Object, loggerMock.Object);\r\n    // Act\r\n    var result = controller.GetConfiguration();\r\n    // Assert\r\n    var okObjectResult = Assert.IsType\u003COkObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003CSettingsDTO\u003E(okObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Configure_WithInvalidModel_Returns_BadRequestResult",
        "Body": "{\r\n    // Arrange\r\n    var dataSourceServiceMock = new Mock\u003CIDataSourceService\u003E();\r\n    var loggerMock = new Mock\u003CILogger\u003CDataSourceController\u003E\u003E();\r\n    var controller = new DataSourceController(dataSourceServiceMock.Object, loggerMock.Object);\r\n    controller.ModelState.AddModelError(\u0022Error\u0022, \u0022Model Error\u0022);\r\n    var settingsDTO = new SettingsDTO();\r\n    // Act\r\n    var result = controller.Configure(settingsDTO);\r\n    // Assert\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Configure_WithValidExistingModel_Returns_ConflictResult",
        "Body": "{\r\n    // Arrange\r\n    var dataSourceServiceMock = new Mock\u003CIDataSourceService\u003E();\r\n    dataSourceServiceMock.Setup(service =\u003E service.Configure(It.IsAny\u003CSettingsDTO\u003E())).Returns(false);\r\n    var loggerMock = new Mock\u003CILogger\u003CDataSourceController\u003E\u003E();\r\n    var controller = new DataSourceController(dataSourceServiceMock.Object, loggerMock.Object);\r\n    var settingsDTO = new SettingsDTO();\r\n    // Act\r\n    var result = controller.Configure(settingsDTO);\r\n    // Assert\r\n    var conflictObjectResult = Assert.IsType\u003CConflictObjectResult\u003E(result);\r\n    Assert.IsAssignableFrom\u003Cstring\u003E(conflictObjectResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Configure_WithValidModel_Returns_AcceptedResult",
        "Body": "{\r\n    // Arrange\r\n    var dataSourceServiceMock = new Mock\u003CIDataSourceService\u003E();\r\n    dataSourceServiceMock.Setup(service =\u003E service.Configure(It.IsAny\u003CSettingsDTO\u003E())).Returns(true);\r\n    var loggerMock = new Mock\u003CILogger\u003CDataSourceController\u003E\u003E();\r\n    var controller = new DataSourceController(dataSourceServiceMock.Object, loggerMock.Object);\r\n    var settingsDTO = new SettingsDTO();\r\n    // Act\r\n    var result = controller.Configure(settingsDTO);\r\n    // Assert\r\n    Assert.IsType\u003CAcceptedResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DataSourceServiceTest",
    "Message": null,
    "ProjectName": "DataSource.UnitTests",
    "Methods": [
      {
        "Name": "Constructor_WithEmptySettins_Returns_ArgumentNullException",
        "Body": "{\r\n    // Arrange\r\n    DataSourceSettings settings = null;\r\n    // Act\r\n    var constructGenerator = new Action(() =\u003E new DataSourceService(settings));\r\n    // Assert\r\n    Assert.Throws\u003CArgumentNullException\u003E(constructGenerator);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Configure_WithEmptySettins_Returns_ArgumentNullException",
        "Body": "{\r\n    // Arrange\r\n    DataSourceSettings settings = null;\r\n    // Act\r\n    var configureGenerator = new Action(() =\u003E TestGenerator.Configure(settings));\r\n    // Assert\r\n    Assert.Throws\u003CArgumentNullException\u003E(configureGenerator);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Configure_WithValidSettins_Updates_Generator",
        "Body": "{\r\n    // Arrange\r\n    var oldSensorType = TestGenerator.Sensor.DataType;\r\n    var oldSensorSerial = TestGenerator.Sensor.Serial;\r\n    var oldGenerationTimeInterval = TestGenerator.GenerationTimeInterval;\r\n    var settings = new DataSourceSettings\r\n    {\r\n        DataType = DataType.Acoustic.ToString(),\r\n        SensorSerial = \u00220987654321\u0022,\r\n        GenerationTimeIntervalSeconds = \u002210\u0022,\r\n        AuthToken = \u002211111\u0022,\r\n        HostAddress = \u0022http://localhost:4000/records\u0022,\r\n    };\r\n    // Act\r\n    TestGenerator.Configure(settings);\r\n    // Assert\r\n    (TestGenerator.Sensor.DataType).ShouldNotBeNull();\r\n    (TestGenerator.Sensor.DataType).ShouldNotBe(oldSensorType);\r\n    (TestGenerator.Sensor.Serial).ShouldNotBeNull();\r\n    (TestGenerator.Sensor.Serial).ShouldNotBe(oldSensorSerial);\r\n    (TestGenerator.GenerationTimeInterval).ShouldNotBeNull();\r\n    (TestGenerator.GenerationTimeInterval).ShouldNotBe(oldGenerationTimeInterval);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SensorTest",
    "Message": null,
    "ProjectName": "DataSource.UnitTests",
    "Methods": [
      {
        "Name": "Constructor_WithNullSerial_Returns_ArgumentNullException",
        "Body": "{\r\n    // Arrange\r\n    string serial = null;\r\n    DataType dataType = DataType.Temperature;\r\n    // Act\r\n    var createSensor = new Action(() =\u003E new Sensor(serial, dataType));\r\n    // Assert\r\n    Assert.Throws\u003CArgumentNullException\u003E(createSensor);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Constructor_WithUnknownSensorType_Returns_ArgumentException",
        "Body": "{\r\n    // Arrange\r\n    string serial = \u00221234567890\u0022;\r\n    DataType sensorType = DataType.Unknown;\r\n    // Act\r\n    var createSensor = new Action(() =\u003E new Sensor(serial, sensorType));\r\n    // Assert\r\n    Assert.Throws\u003CArgumentException\u003E(createSensor);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetRecordData_WithUnknownSensorType_Returns_Null",
        "Body": "{\r\n    // Arrange\r\n    TestSensor.DataType = DataType.Unknown;\r\n    // Act\r\n    var record = TestSensor.GetDataRecord();\r\n    // Assert\r\n    Assert.Null(record);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetRecordData_WithTemperatureSensor_Returns_TemperatureData",
        "Body": "{\r\n    // Arrange\r\n    TestSensor.DataType = DataType.Temperature;\r\n    // Act\r\n    var record = TestSensor.GetDataRecord();\r\n    // Assert\r\n    record.ShouldNotBeNull();\r\n    (record.Value).ShouldNotBeNull();\r\n    (record.Value).ShouldBeOfType\u003Cbyte[]\u003E();\r\n    (record.Date).ShouldNotBeNull();\r\n    (record.SensorDeviceType).ShouldNotBeNull();\r\n    (record.SensorDeviceType).ShouldBeOfType\u003Cstring\u003E();\r\n    (record.SensorDeviceType).ShouldBe(\u0022Temperature\u0022);\r\n    (record.SensorDeviceSerial).ShouldNotBeNull();\r\n    (record.SensorDeviceSerial).ShouldBeOfType\u003Cstring\u003E();\r\n    (record.SensorDeviceSerial).ShouldBe(\u00221234567890\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetRecordData_WithAcousticSensor_Returns_AcousticData",
        "Body": "{\r\n    // Arrange\r\n    TestSensor.DataType = DataType.Acoustic;\r\n    // Act\r\n    var record = TestSensor.GetDataRecord();\r\n    // Assert\r\n    record.ShouldNotBeNull();\r\n    (record.Value).ShouldNotBeNull();\r\n    (record.Value).ShouldBeOfType\u003Cbyte[]\u003E();\r\n    (record.Date).ShouldNotBeNull();\r\n    (record.SensorDeviceType).ShouldNotBeNull();\r\n    (record.SensorDeviceType).ShouldBeOfType\u003Cstring\u003E();\r\n    (record.SensorDeviceType).ShouldBe(\u0022Acoustic\u0022);\r\n    (record.SensorDeviceSerial).ShouldNotBeNull();\r\n    (record.SensorDeviceSerial).ShouldBeOfType\u003Cstring\u003E();\r\n    (record.SensorDeviceSerial).ShouldBe(\u00221234567890\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  }
]