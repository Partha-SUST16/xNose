[
  {
    "Name": "AppInstallerTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.Apple.Tests",
    "Methods": [
      {
        "Name": "InstallOnSimulatorTest",
        "Body": "{\r\n    // Act\r\n    var appInstaller = new AppInstaller(_processManager.Object, _mainLog.Object);\r\n    var result = await appInstaller.InstallApp(_appBundleInformation, new TestTargetOs(TestTarget.Simulator_iOS64, null), s_mockDevice);\r\n    // Verify\r\n    Assert.Equal(0, result.ExitCode);\r\n    var expectedArgs = $\u0022--device=:v2:udid={s_mockDevice.UDID} --installsim {StringUtils.FormatArguments(s_appPath)}\u0022;\r\n    _processManager.Verify(x =\u003E x.ExecuteCommandAsync(It.Is\u003CMlaunchArguments\u003E(args =\u003E args.AsCommandLine() == expectedArgs), _mainLog.Object, It.IsAny\u003CTimeSpan\u003E(), null, It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InstallOnDeviceTest",
        "Body": "{\r\n    // Act\r\n    var appInstaller = new AppInstaller(_processManager.Object, _mainLog.Object);\r\n    var result = await appInstaller.InstallApp(_appBundleInformation, new TestTargetOs(TestTarget.Device_iOS, null), s_mockDevice);\r\n    // Verify\r\n    Assert.Equal(0, result.ExitCode);\r\n    var expectedArgs = $\u0022--devname {s_mockDevice.UDID} --installdev {StringUtils.FormatArguments(s_appPath)}\u0022;\r\n    _processManager.Verify(x =\u003E x.ExecuteCommandAsync(It.Is\u003CMlaunchArguments\u003E(args =\u003E args.AsCommandLine() == expectedArgs), _mainLog.Object, It.IsAny\u003CTimeSpan\u003E(), null, It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AppRunnerTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.Apple.Tests",
    "Methods": [
      {
        "Name": "RunOnSimulatorTest",
        "Body": "{\r\n    var captureLog = new Mock\u003CICaptureLog\u003E();\r\n    captureLog.SetupGet(x =\u003E x.FullPath).Returns(_simulatorLogPath);\r\n    captureLog.SetupGet(x =\u003E x.Description).Returns(LogType.SystemLog.ToString());\r\n    var captureLogFactory = new Mock\u003CICaptureLogFactory\u003E();\r\n    captureLogFactory.Setup(x =\u003E x.Create(Path.Combine(_logs.Object.Directory, _mockSimulator.Name \u002B \u0022.log\u0022), _mockSimulator.SystemLog, false, LogType.SystemLog)).Returns(captureLog.Object);\r\n    SetupLogList(new[] { captureLog.Object });\r\n    // Act\r\n    var appRunner = new AppRunner(_processManager.Object, _snapshotReporterFactory, captureLogFactory.Object, Mock.Of\u003CIDeviceLogCapturerFactory\u003E(), _mainLog.Object, _logs.Object, _helpers.Object);\r\n    var result = await appRunner.RunApp(_appBundleInfo, new TestTargetOs(TestTarget.Simulator_tvOS, null), _mockSimulator, null, timeout: TimeSpan.FromSeconds(30), signalAppEnd: false, waitForExit: true, extraAppArguments: new[] { \u0022--foo=bar\u0022, \u0022--xyz\u0022 }, extraEnvVariables: new[] { (\u0022appArg1\u0022, \u0022value1\u0022) });\r\n    // Verify\r\n    Assert.True(result.Succeeded);\r\n    var expectedArgs = GetExpectedSimulatorMlaunchArgs();\r\n    _processManager.Verify(x =\u003E x.ExecuteCommandAsync(It.Is\u003CMlaunchArguments\u003E(args =\u003E args.AsCommandLine() == expectedArgs), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E\u003E(), It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _processManager.Verify(x =\u003E x.ExecuteXcodeCommandAsync(\u0022simctl\u0022, It.Is\u003CIList\u003Cstring\u003E\u003E(args =\u003E args.Contains(\u0022log\u0022) \u0026\u0026 args.Contains(_mockSimulator.UDID) \u0026\u0026 args.Contains(\u0022stream\u0022) \u0026\u0026 args.Any(a =\u003E a.Contains(BundleExecutable))), It.IsAny\u003CILog\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    captureLog.Verify(x =\u003E x.StartCapture(), Times.AtLeastOnce);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RunOnDeviceTest",
        "Body": "{\r\n    var deviceSystemLog = new Mock\u003CIFileBackedLog\u003E();\r\n    deviceSystemLog.SetupGet(x =\u003E x.FullPath).Returns(AppBundleIdentifier \u002B \u0022system.log\u0022);\r\n    deviceSystemLog.SetupGet(x =\u003E x.Description).Returns(LogType.SystemLog.ToString());\r\n    SetupLogList(new[] { deviceSystemLog.Object });\r\n    _logs.Setup(x =\u003E x.Create(\u0022device-\u0022 \u002B DeviceName \u002B \u0022-mocked_timestamp.log\u0022, LogType.SystemLog.ToString(), It.IsAny\u003Cbool?\u003E())).Returns(deviceSystemLog.Object);\r\n    var deviceLogCapturer = new Mock\u003CIDeviceLogCapturer\u003E();\r\n    var deviceLogCapturerFactory = new Mock\u003CIDeviceLogCapturerFactory\u003E();\r\n    deviceLogCapturerFactory.Setup(x =\u003E x.Create(_mainLog.Object, deviceSystemLog.Object, DeviceName)).Returns(deviceLogCapturer.Object);\r\n    var x = _logs.Object.First();\r\n    // Act\r\n    var appRunner = new AppRunner(_processManager.Object, _snapshotReporterFactory, Mock.Of\u003CICaptureLogFactory\u003E(), deviceLogCapturerFactory.Object, _mainLog.Object, _logs.Object, _helpers.Object);\r\n    var result = await appRunner.RunApp(_appBundleInfo, new TestTargetOs(TestTarget.Device_iOS, null), s_mockDevice, null, timeout: TimeSpan.FromSeconds(30), signalAppEnd: false, waitForExit: true, extraAppArguments: new[] { \u0022--foo=bar\u0022, \u0022--xyz\u0022 }, extraEnvVariables: new[] { (\u0022appArg1\u0022, \u0022value1\u0022) });\r\n    // Verify\r\n    Assert.True(result.Succeeded);\r\n    var expectedArgs = GetExpectedDeviceMlaunchArgs();\r\n    _processManager.Verify(x =\u003E x.ExecuteCommandAsync(It.Is\u003CMlaunchArguments\u003E(args =\u003E args.AsCommandLine() == expectedArgs), It.IsAny\u003CILog\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E\u003E(), It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _snapshotReporter.Verify(x =\u003E x.StartCaptureAsync(), Times.AtLeastOnce);\r\n    deviceSystemLog.Verify(x =\u003E x.Dispose(), Times.AtLeastOnce);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RunOnDeviceWithAppEndSignalTest",
        "Body": "{\r\n    var deviceSystemLog = new Mock\u003CIFileBackedLog\u003E();\r\n    deviceSystemLog.SetupGet(x =\u003E x.FullPath).Returns(AppBundleIdentifier \u002B \u0022system.log\u0022);\r\n    deviceSystemLog.SetupGet(x =\u003E x.Description).Returns(LogType.SystemLog.ToString());\r\n    SetupLogList(new[] { deviceSystemLog.Object });\r\n    _logs.Setup(x =\u003E x.Create(\u0022device-\u0022 \u002B DeviceName \u002B \u0022-mocked_timestamp.log\u0022, LogType.SystemLog.ToString(), It.IsAny\u003Cbool?\u003E())).Returns(deviceSystemLog.Object);\r\n    var deviceLogCapturer = new Mock\u003CIDeviceLogCapturer\u003E();\r\n    var deviceLogCapturerFactory = new Mock\u003CIDeviceLogCapturerFactory\u003E();\r\n    deviceLogCapturerFactory.Setup(x =\u003E x.Create(_mainLog.Object, deviceSystemLog.Object, DeviceName)).Returns(deviceLogCapturer.Object);\r\n    var testEndSignal = Guid.NewGuid();\r\n    _helpers.Setup(x =\u003E x.GenerateGuid()).Returns(testEndSignal);\r\n    List\u003CMlaunchArguments\u003E mlaunchArguments = new();\r\n    List\u003CIFileBackedLog\u003E appOutputLogs = new();\r\n    List\u003CCancellationToken\u003E cancellationTokens = new();\r\n    // Endlessly running mlaunch until it gets cancelled by the signal\r\n    var mlaunchCompleted = new TaskCompletionSource\u003CProcessExecutionResult\u003E();\r\n    var appStarted = new TaskCompletionSource();\r\n    _processManager.Setup(x =\u003E x.ExecuteCommandAsync(Capture.In(mlaunchArguments), It.IsAny\u003CILog\u003E(), Capture.In(appOutputLogs), Capture.In(appOutputLogs), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E?\u003E(), It.IsAny\u003Cint\u003E(), Capture.In(cancellationTokens))).Callback(() =\u003E\r\n    {\r\n        // Signal we have started mlaunch\r\n        appStarted.SetResult();\r\n        // When mlaunch gets signalled to shut down, shut down even our fake mlaunch\r\n        cancellationTokens.Last().Register(() =\u003E mlaunchCompleted.SetResult(new ProcessExecutionResult { TimedOut = true, }));\r\n    }).Returns(mlaunchCompleted.Task);\r\n    // Act\r\n    var appRunner = new AppRunner(_processManager.Object, _snapshotReporterFactory, Mock.Of\u003CICaptureLogFactory\u003E(), deviceLogCapturerFactory.Object, _mainLog.Object, _logs.Object, _helpers.Object);\r\n    var runTask = appRunner.RunApp(_appBundleInfo, new TestTargetOs(TestTarget.Device_iOS, null), s_mockDevice, null, timeout: TimeSpan.FromSeconds(30), signalAppEnd: true, waitForExit: true, Array.Empty\u003Cstring\u003E(), Array.Empty\u003C(string, string)\u003E());\r\n    // Everything should hang now since we mimicked mlaunch not being able to tell the app quits\r\n    // We will wait for XHarness to kick off the mlaunch (the app)\r\n    Assert.False(runTask.IsCompleted);\r\n    await Task.WhenAny(appStarted.Task, Task.Delay(1000));\r\n    // XHarness should still be running\r\n    Assert.False(runTask.IsCompleted);\r\n    // mlaunch should be started\r\n    Assert.True(appStarted.Task.IsCompleted);\r\n    // We will mimick the app writing the end signal\r\n    var appLog = appOutputLogs.First();\r\n    appLog.WriteLine(testEndSignal.ToString());\r\n    // AppTester should now complete fine\r\n    var result = await runTask;\r\n    // Verify\r\n    Assert.True(result.Succeeded);\r\n    var expectedArgs = $\u0022-setenv=RUN_END_TAG={testEndSignal} \u0022 \u002B \u0022--disable-memory-limits \u0022 \u002B $\u0022--devname {s_mockDevice.DeviceIdentifier} \u0022 \u002B $\u0022--launchdevbundleid {AppBundleIdentifier} \u0022 \u002B \u0022--wait-for-exit\u0022;\r\n    Assert.Equal(mlaunchArguments.Last().AsCommandLine(), expectedArgs);\r\n    _snapshotReporter.Verify(x =\u003E x.StartCaptureAsync(), Times.AtLeastOnce);\r\n    deviceSystemLog.Verify(x =\u003E x.Dispose(), Times.AtLeastOnce);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "RunOnMacCatalystTest",
        "Body": "{\r\n    var captureLog = new Mock\u003CICaptureLog\u003E();\r\n    captureLog.SetupGet(x =\u003E x.FullPath).Returns(_simulatorLogPath);\r\n    captureLog.SetupGet(x =\u003E x.Description).Returns(LogType.SystemLog.ToString());\r\n    var captureLogFactory = new Mock\u003CICaptureLogFactory\u003E();\r\n    captureLogFactory.Setup(x =\u003E x.Create(It.IsAny\u003Cstring\u003E(), It.IsAny\u003Cstring\u003E(), false, LogType.SystemLog)).Returns(captureLog.Object);\r\n    SetupLogList(new[] { captureLog.Object });\r\n    // Act\r\n    var appRunner = new AppRunner(_processManager.Object, _snapshotReporterFactory, captureLogFactory.Object, Mock.Of\u003CIDeviceLogCapturerFactory\u003E(), _mainLog.Object, _logs.Object, _helpers.Object);\r\n    var result = await appRunner.RunMacCatalystApp(_appBundleInfo, timeout: TimeSpan.FromSeconds(30), signalAppEnd: false, waitForExit: true, extraAppArguments: new[] { \u0022--foo=bar\u0022, \u0022--xyz\u0022 }, extraEnvVariables: new[] { (\u0022appArg1\u0022, \u0022value1\u0022) });\r\n    // Verify\r\n    Assert.True(result.Succeeded);\r\n    var expectedArgs = GetExpectedSimulatorMlaunchArgs();\r\n    _processManager.Verify(x =\u003E x.ExecuteCommandAsync(\u0022open\u0022, It.Is\u003CIList\u003Cstring\u003E\u003E(args =\u003E args[0] == \u0022-n\u0022 \u0026\u0026 args[1] == \u0022-W\u0022 \u0026\u0026 args[2] == s_appPath), _mainLog.Object, It.IsAny\u003CILog\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _processManager.Verify(x =\u003E x.ExecuteCommandAsync(\u0022log\u0022, It.Is\u003CIList\u003Cstring\u003E\u003E(args =\u003E args.Contains(\u0022stream\u0022) \u0026\u0026 args.Any(a =\u003E a.Contains(BundleExecutable))), It.IsAny\u003CILog\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E?\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    captureLog.Verify(x =\u003E x.StartCapture(), Times.AtLeastOnce);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RunOnDeviceNoWaitTest",
        "Body": "{\r\n    var deviceSystemLog = new Mock\u003CIFileBackedLog\u003E();\r\n    deviceSystemLog.SetupGet(x =\u003E x.FullPath).Returns(AppBundleIdentifier \u002B \u0022system.log\u0022);\r\n    deviceSystemLog.SetupGet(x =\u003E x.Description).Returns(LogType.SystemLog.ToString());\r\n    SetupLogList(new[] { deviceSystemLog.Object });\r\n    _logs.Setup(x =\u003E x.Create(\u0022device-\u0022 \u002B DeviceName \u002B \u0022-mocked_timestamp.log\u0022, LogType.SystemLog.ToString(), It.IsAny\u003Cbool?\u003E())).Returns(deviceSystemLog.Object);\r\n    var deviceLogCapturer = new Mock\u003CIDeviceLogCapturer\u003E();\r\n    var deviceLogCapturerFactory = new Mock\u003CIDeviceLogCapturerFactory\u003E();\r\n    deviceLogCapturerFactory.Setup(x =\u003E x.Create(_mainLog.Object, deviceSystemLog.Object, DeviceName)).Returns(deviceLogCapturer.Object);\r\n    var x = _logs.Object.First();\r\n    // Act\r\n    var appRunner = new AppRunner(_processManager.Object, _snapshotReporterFactory, Mock.Of\u003CICaptureLogFactory\u003E(), deviceLogCapturerFactory.Object, _mainLog.Object, _logs.Object, _helpers.Object);\r\n    var result = await appRunner.RunApp(_appBundleInfo, new TestTargetOs(TestTarget.Device_iOS, null), s_mockDevice, null, timeout: TimeSpan.FromSeconds(30), signalAppEnd: false, waitForExit: false, extraAppArguments: new[] { \u0022--foo=bar\u0022, \u0022--xyz\u0022 }, extraEnvVariables: new[] { (\u0022appArg1\u0022, \u0022value1\u0022) });\r\n    // Verify\r\n    Assert.True(result.Succeeded);\r\n    var expectedArgs = GetExpectedDeviceMlaunchArgs();\r\n    _processManager.Verify(x =\u003E x.ExecuteCommandAsync(It.Is\u003CMlaunchArguments\u003E(args =\u003E args.AsCommandLine() == expectedArgs.Replace(\u0022 --wait-for-exit\u0022, null)), It.IsAny\u003CILog\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E\u003E(), It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _snapshotReporter.Verify(x =\u003E x.StartCaptureAsync(), Times.AtLeastOnce);\r\n    deviceSystemLog.Verify(x =\u003E x.Dispose(), Times.AtLeastOnce);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RunOnSimulatorNoWaitTest",
        "Body": "{\r\n    var captureLog = new Mock\u003CICaptureLog\u003E();\r\n    captureLog.SetupGet(x =\u003E x.FullPath).Returns(_simulatorLogPath);\r\n    captureLog.SetupGet(x =\u003E x.Description).Returns(LogType.SystemLog.ToString());\r\n    var captureLogFactory = new Mock\u003CICaptureLogFactory\u003E();\r\n    captureLogFactory.Setup(x =\u003E x.Create(Path.Combine(_logs.Object.Directory, _mockSimulator.Name \u002B \u0022.log\u0022), _mockSimulator.SystemLog, false, LogType.SystemLog)).Returns(captureLog.Object);\r\n    SetupLogList(new[] { captureLog.Object });\r\n    var expectedArgs = GetExpectedSimulatorMlaunchArgs();\r\n    var appLaunchedTask = new TaskCompletionSource();\r\n    ILog? appLog = null;\r\n    _processManager.Setup(x =\u003E x.ExecuteCommandAsync(It.Is\u003CMlaunchArguments\u003E(args =\u003E args.AsCommandLine() == expectedArgs), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E\u003E(), It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken\u003E())).Callback((MlaunchArguments args, ILog log, TimeSpan timeout, Dictionary\u003Cstring, string\u003E env, int verbosity, CancellationToken? ct) =\u003E\r\n    {\r\n        appLog = log;\r\n        appLaunchedTask.SetResult();\r\n    }).Returns(new TaskCompletionSource\u003CProcessExecutionResult\u003E().Task); // This task must never complete (it represents running app)\r\n    // Act\r\n    var appRunner = new AppRunner(_processManager.Object, _snapshotReporterFactory, captureLogFactory.Object, Mock.Of\u003CIDeviceLogCapturerFactory\u003E(), _mainLog.Object, _logs.Object, _helpers.Object);\r\n    var runTask = appRunner.RunApp(_appBundleInfo, new TestTargetOs(TestTarget.Simulator_tvOS, null), _mockSimulator, null, timeout: TimeSpan.FromSeconds(30), signalAppEnd: false, waitForExit: false, extraAppArguments: new[] { \u0022--foo=bar\u0022, \u0022--xyz\u0022 }, extraEnvVariables: new[] { (\u0022appArg1\u0022, \u0022value1\u0022) });\r\n    // No we wait for the launch of the app (which will then hang and the ScanLog will start waiting for the launch signal)\r\n    await appLaunchedTask.Task;\r\n    Assert.False(runTask.IsCompleted);\r\n    // Now we send the signal that the app has launched\r\n    Assert.NotNull(appLog);\r\n    appLog!.WriteLine($\u0022Some message\u0022);\r\n    appLog!.WriteLine($\u0022Xamarin.Hosting: Launched {AppBundleIdentifier} with pid 39402\u0022);\r\n    appLog!.WriteLine($\u0022Some other message\u0022);\r\n    // We should now be able to return from here since the ScanLog will finish\r\n    var result = await runTask;\r\n    // Verify\r\n    Assert.True(result.Succeeded);\r\n    _processManager.Verify(x =\u003E x.ExecuteCommandAsync(It.Is\u003CMlaunchArguments\u003E(args =\u003E args.AsCommandLine() == expectedArgs), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E\u003E(), It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _processManager.Verify(x =\u003E x.ExecuteXcodeCommandAsync(\u0022simctl\u0022, It.Is\u003CIList\u003Cstring\u003E\u003E(args =\u003E args.Contains(\u0022log\u0022) \u0026\u0026 args.Contains(_mockSimulator.UDID) \u0026\u0026 args.Contains(\u0022stream\u0022) \u0026\u0026 args.Any(a =\u003E a.Contains(BundleExecutable))), It.IsAny\u003CILog\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    captureLog.Verify(x =\u003E x.StartCapture(), Times.AtLeastOnce);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RunOnSimulatorNoWaitNoLaunchSignalTest",
        "Body": "{\r\n    var captureLog = new Mock\u003CICaptureLog\u003E();\r\n    captureLog.SetupGet(x =\u003E x.FullPath).Returns(_simulatorLogPath);\r\n    captureLog.SetupGet(x =\u003E x.Description).Returns(LogType.SystemLog.ToString());\r\n    var captureLogFactory = new Mock\u003CICaptureLogFactory\u003E();\r\n    captureLogFactory.Setup(x =\u003E x.Create(Path.Combine(_logs.Object.Directory, _mockSimulator.Name \u002B \u0022.log\u0022), _mockSimulator.SystemLog, false, LogType.SystemLog)).Returns(captureLog.Object);\r\n    SetupLogList(new[] { captureLog.Object });\r\n    var expectedArgs = GetExpectedSimulatorMlaunchArgs();\r\n    var appLaunchedTask = new TaskCompletionSource();\r\n    var appRunTask = new TaskCompletionSource\u003CProcessExecutionResult\u003E();\r\n    _processManager.Setup(x =\u003E x.ExecuteCommandAsync(It.Is\u003CMlaunchArguments\u003E(args =\u003E args.AsCommandLine() == expectedArgs), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E\u003E(), It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken\u003E())).Callback((MlaunchArguments args, ILog log, TimeSpan timeout, Dictionary\u003Cstring, string\u003E env, int verbosity, CancellationToken? ct) =\u003E\r\n    {\r\n        appLaunchedTask.SetResult();\r\n    }).Returns(appRunTask.Task); // This task will complete and the ScanLog task won\u0027t (we won\u0027t log the \u0022app launched\u0022 message)\r\n    // Act\r\n    var appRunner = new AppRunner(_processManager.Object, _snapshotReporterFactory, captureLogFactory.Object, Mock.Of\u003CIDeviceLogCapturerFactory\u003E(), _mainLog.Object, _logs.Object, _helpers.Object);\r\n    var runTask = appRunner.RunApp(_appBundleInfo, new TestTargetOs(TestTarget.Simulator_tvOS, null), _mockSimulator, null, timeout: TimeSpan.FromSeconds(30), signalAppEnd: false, waitForExit: false, extraAppArguments: new[] { \u0022--foo=bar\u0022, \u0022--xyz\u0022 }, extraEnvVariables: new[] { (\u0022appArg1\u0022, \u0022value1\u0022) });\r\n    // No we wait for the code to start launching the app\r\n    await appLaunchedTask.Task;\r\n    Assert.False(runTask.IsCompleted);\r\n    // In this phase, the code waits for both ScanLog or the app run task\r\n    // We will simulate a case when the app never reports back (never launches)\r\n    appRunTask.SetResult(new ProcessExecutionResult { ExitCode = 137, // This is what we get when app run times out and is killed by our timeout\r\n TimedOut = true, });\r\n    var result = await runTask;\r\n    // Verify\r\n    Assert.False(result.Succeeded);\r\n    Assert.True(result.TimedOut);\r\n    _processManager.Verify(x =\u003E x.ExecuteCommandAsync(It.Is\u003CMlaunchArguments\u003E(args =\u003E args.AsCommandLine() == expectedArgs), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E\u003E(), It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _processManager.Verify(x =\u003E x.ExecuteXcodeCommandAsync(\u0022simctl\u0022, It.Is\u003CIList\u003Cstring\u003E\u003E(args =\u003E args.Contains(\u0022log\u0022) \u0026\u0026 args.Contains(_mockSimulator.UDID) \u0026\u0026 args.Contains(\u0022stream\u0022) \u0026\u0026 args.Any(a =\u003E a.Contains(BundleExecutable))), It.IsAny\u003CILog\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    captureLog.Verify(x =\u003E x.StartCapture(), Times.AtLeastOnce);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RunOnMacCatalystNoWaitTest",
        "Body": "{\r\n    var captureLog = new Mock\u003CICaptureLog\u003E();\r\n    captureLog.SetupGet(x =\u003E x.FullPath).Returns(_simulatorLogPath);\r\n    captureLog.SetupGet(x =\u003E x.Description).Returns(LogType.SystemLog.ToString());\r\n    var captureLogFactory = new Mock\u003CICaptureLogFactory\u003E();\r\n    captureLogFactory.Setup(x =\u003E x.Create(It.IsAny\u003Cstring\u003E(), It.IsAny\u003Cstring\u003E(), false, LogType.SystemLog)).Returns(captureLog.Object);\r\n    SetupLogList(new[] { captureLog.Object });\r\n    // Act\r\n    var appRunner = new AppRunner(_processManager.Object, _snapshotReporterFactory, captureLogFactory.Object, Mock.Of\u003CIDeviceLogCapturerFactory\u003E(), _mainLog.Object, _logs.Object, _helpers.Object);\r\n    var result = await appRunner.RunMacCatalystApp(_appBundleInfo, timeout: TimeSpan.FromSeconds(30), signalAppEnd: false, waitForExit: false, extraAppArguments: Array.Empty\u003Cstring\u003E(), extraEnvVariables: Array.Empty\u003C(string, string)\u003E());\r\n    // Verify\r\n    Assert.True(result.Succeeded);\r\n    var expectedArgs = GetExpectedSimulatorMlaunchArgs();\r\n    _processManager.Verify(x =\u003E x.ExecuteCommandAsync(\u0022open\u0022, It.Is\u003CIList\u003Cstring\u003E\u003E(args =\u003E args.Count == 2 \u0026\u0026 args[0] == \u0022-n\u0022 \u0026\u0026 args[1] == s_appPath), _mainLog.Object, It.IsAny\u003CILog\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    captureLog.Verify(x =\u003E x.StartCapture(), Times.AtLeastOnce);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AppTesterTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.Apple.Tests",
    "Methods": [
      {
        "Name": "TestOnSimulatorTest",
        "Body": "{\r\n    var testResultFilePath = Path.GetTempFileName();\r\n    var listenerLogFile = Mock.Of\u003CIFileBackedLog\u003E(x =\u003E x.FullPath == testResultFilePath);\r\n    File.WriteAllLines(testResultFilePath, new[] { \u0022Some result here\u0022, \u0022Tests run: 124\u0022, \u0022Some result there\u0022 });\r\n    _logs.Setup(x =\u003E x.Create(\u0022test-ios-simulator-64-mocked_timestamp.log\u0022, \u0022TestLog\u0022, It.IsAny\u003Cbool?\u003E())).Returns(listenerLogFile);\r\n    var captureLog = new Mock\u003CICaptureLog\u003E();\r\n    captureLog.SetupGet(x =\u003E x.FullPath).Returns(_simulatorLogPath);\r\n    var captureLogFactory = new Mock\u003CICaptureLogFactory\u003E();\r\n    captureLogFactory.Setup(x =\u003E x.Create(Path.Combine(_logs.Object.Directory, _mockSimulator.Name \u002B \u0022.log\u0022), _mockSimulator.SystemLog, false, It.IsAny\u003CLogType\u003E())).Returns(captureLog.Object);\r\n    _listenerFactory.Setup(f =\u003E f.UseTunnel).Returns(useTunnel);\r\n    // Act\r\n    var appTester = new AppTester(_processManager.Object, _listenerFactory.Object, _snapshotReporterFactory, captureLogFactory.Object, Mock.Of\u003CIDeviceLogCapturerFactory\u003E(), _testReporterFactory, new XmlResultParser(), _mainLog.Object, _logs.Object, _helpers.Object);\r\n    var(result, resultMessage) = await appTester.TestApp(_appBundleInfo, new TestTargetOs(TestTarget.Simulator_tvOS, null), _mockSimulator, null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30), signalAppEnd: false, extraAppArguments: new string[] { \u0022--foo=bar\u0022, \u0022--xyz\u0022 }, extraEnvVariables: new[] { (\u0022appArg1\u0022, \u0022value1\u0022) });\r\n    // Verify\r\n    Assert.Equal(TestExecutingResult.Succeeded, result);\r\n    Assert.Equal(\u0022Tests run: 1194 Passed: 1191 Inconclusive: 0 Failed: 0 Ignored: 0\u0022, resultMessage);\r\n    var expectedArgs = GetExpectedSimulatorMlaunchArgs();\r\n    _processManager.Verify(x =\u003E x.ExecuteCommandAsync(It.Is\u003CMlaunchArguments\u003E(args =\u003E args.AsCommandLine() == expectedArgs), _mainLog.Object, It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E\u003E(), It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _processManager.Verify(x =\u003E x.ExecuteXcodeCommandAsync(\u0022simctl\u0022, It.Is\u003CIList\u003Cstring\u003E\u003E(args =\u003E args.Contains(\u0022log\u0022) \u0026\u0026 args.Contains(_mockSimulator.UDID) \u0026\u0026 args.Contains(\u0022stream\u0022) \u0026\u0026 args.Any(a =\u003E a.Contains(BundleExecutable))), It.IsAny\u003CILog\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _listener.Verify(x =\u003E x.InitializeAndGetPort(), Times.AtLeastOnce);\r\n    _listener.Verify(x =\u003E x.StartAsync(), Times.AtLeastOnce);\r\n    _listener.Verify(x =\u003E x.Dispose(), Times.AtLeastOnce);\r\n    captureLog.Verify(x =\u003E x.StartCapture(), Times.AtLeastOnce);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestOnDeviceTest",
        "Body": "{\r\n    var deviceSystemLog = new Mock\u003CIFileBackedLog\u003E();\r\n    deviceSystemLog.SetupGet(x =\u003E x.FullPath).Returns(Path.GetTempFileName());\r\n    var deviceLogCapturer = new Mock\u003CIDeviceLogCapturer\u003E();\r\n    var deviceLogCapturerFactory = new Mock\u003CIDeviceLogCapturerFactory\u003E();\r\n    deviceLogCapturerFactory.Setup(x =\u003E x.Create(_mainLog.Object, deviceSystemLog.Object, DeviceName)).Returns(deviceLogCapturer.Object);\r\n    var testResultFilePath = Path.GetTempFileName();\r\n    var listenerLogFile = Mock.Of\u003CIFileBackedLog\u003E(x =\u003E x.FullPath == testResultFilePath);\r\n    File.WriteAllLines(testResultFilePath, new[] { \u0022Some result here\u0022, \u0022Tests run: 124\u0022, \u0022Some result there\u0022 });\r\n    _logs.Setup(x =\u003E x.Create(\u0022test-ios-device-mocked_timestamp.log\u0022, \u0022TestLog\u0022, It.IsAny\u003Cbool?\u003E())).Returns(listenerLogFile);\r\n    _logs.Setup(x =\u003E x.Create($\u0022device-{DeviceName}-mocked_timestamp.log\u0022, LogType.SystemLog.ToString(), It.IsAny\u003Cbool?\u003E())).Returns(deviceSystemLog.Object);\r\n    // set tunnel bore expectation\r\n    if (useTunnel)\r\n    {\r\n        _tunnelBore.Setup(t =\u003E t.Create(DeviceName, It.IsAny\u003CILog\u003E()));\r\n    }\r\n\r\n    _listenerFactory.Setup(f =\u003E f.UseTunnel).Returns(useTunnel);\r\n    // Act\r\n    var appTester = new AppTester(_processManager.Object, _listenerFactory.Object, _snapshotReporterFactory, Mock.Of\u003CICaptureLogFactory\u003E(), deviceLogCapturerFactory.Object, _testReporterFactory, new XmlResultParser(), _mainLog.Object, _logs.Object, _helpers.Object);\r\n    var(result, resultMessage) = await appTester.TestApp(_appBundleInfo, new TestTargetOs(TestTarget.Device_iOS, null), s_mockDevice, null, timeout: TimeSpan.FromSeconds(30), testLaunchTimeout: TimeSpan.FromSeconds(30), signalAppEnd: false, extraAppArguments: new[] { \u0022--foo=bar\u0022, \u0022--xyz\u0022 }, extraEnvVariables: new[] { (\u0022appArg1\u0022, \u0022value1\u0022) });\r\n    // Verify\r\n    Assert.Equal(TestExecutingResult.Succeeded, result);\r\n    Assert.Equal(\u0022Tests run: 1194 Passed: 1191 Inconclusive: 0 Failed: 0 Ignored: 0\u0022, resultMessage);\r\n    var expectedArgs = GetExpectedDeviceMlaunchArgs(useTunnel: useTunnel, extraArgs: \u0022-setenv=appArg1=value1 -argument=--foo=bar -argument=--xyz \u0022);\r\n    _processManager.Verify(x =\u003E x.ExecuteCommandAsync(It.Is\u003CMlaunchArguments\u003E(args =\u003E args.AsCommandLine() == expectedArgs), It.IsAny\u003CILog\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.Is\u003CDictionary\u003Cstring, string\u003E\u003E(d =\u003E d[\u0022appArg1\u0022] == \u0022value1\u0022), It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _listener.Verify(x =\u003E x.InitializeAndGetPort(), Times.AtLeastOnce);\r\n    _listener.Verify(x =\u003E x.StartAsync(), Times.AtLeastOnce);\r\n    _listener.Verify(x =\u003E x.Dispose(), Times.AtLeastOnce);\r\n    // verify that we do close the tunnel when it was used\r\n    // we dont want to leak a process\r\n    if (useTunnel)\r\n    {\r\n        _tunnelBore.Verify(t =\u003E t.Close(s_mockDevice.DeviceIdentifier));\r\n    }\r\n\r\n    _snapshotReporter.Verify(x =\u003E x.StartCaptureAsync(), Times.AtLeastOnce);\r\n    deviceSystemLog.Verify(x =\u003E x.Dispose(), Times.AtLeastOnce);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestOnDeviceWithSkippedTestsTest",
        "Body": "{\r\n    var deviceSystemLog = new Mock\u003CIFileBackedLog\u003E();\r\n    deviceSystemLog.SetupGet(x =\u003E x.FullPath).Returns(Path.GetTempFileName());\r\n    var deviceLogCapturer = new Mock\u003CIDeviceLogCapturer\u003E();\r\n    var deviceLogCapturerFactory = new Mock\u003CIDeviceLogCapturerFactory\u003E();\r\n    deviceLogCapturerFactory.Setup(x =\u003E x.Create(_mainLog.Object, deviceSystemLog.Object, DeviceName)).Returns(deviceLogCapturer.Object);\r\n    var testResultFilePath = Path.GetTempFileName();\r\n    var listenerLogFile = Mock.Of\u003CIFileBackedLog\u003E(x =\u003E x.FullPath == testResultFilePath);\r\n    File.WriteAllLines(testResultFilePath, new[] { \u0022Some result here\u0022, \u0022Tests run: 124\u0022, \u0022Some result there\u0022 });\r\n    _logs.Setup(x =\u003E x.Create(\u0022test-ios-device-mocked_timestamp.log\u0022, \u0022TestLog\u0022, It.IsAny\u003Cbool?\u003E())).Returns(listenerLogFile);\r\n    _logs.Setup(x =\u003E x.Create($\u0022device-{DeviceName}-mocked_timestamp.log\u0022, LogType.SystemLog.ToString(), It.IsAny\u003Cbool?\u003E())).Returns(deviceSystemLog.Object);\r\n    // Act\r\n    var appTester = new AppTester(_processManager.Object, _listenerFactory.Object, _snapshotReporterFactory, Mock.Of\u003CICaptureLogFactory\u003E(), deviceLogCapturerFactory.Object, _testReporterFactory, new XmlResultParser(), _mainLog.Object, _logs.Object, _helpers.Object);\r\n    var(result, resultMessage) = await appTester.TestApp(_appBundleInfo, new TestTargetOs(TestTarget.Device_iOS, null), s_mockDevice, null, timeout: TimeSpan.FromSeconds(30), testLaunchTimeout: TimeSpan.FromSeconds(30), signalAppEnd: false, extraAppArguments: new[] { \u0022--foo=bar\u0022, \u0022--xyz\u0022 }, extraEnvVariables: new[] { (\u0022appArg1\u0022, \u0022value1\u0022) }, skippedMethods: skippedTests);\r\n    // Verify\r\n    Assert.Equal(TestExecutingResult.Succeeded, result);\r\n    Assert.Equal(\u0022Tests run: 1194 Passed: 1191 Inconclusive: 0 Failed: 0 Ignored: 0\u0022, resultMessage);\r\n    var skippedTestsArg = $\u0022-setenv=NUNIT_RUN_ALL=false -setenv=NUNIT_SKIPPED_METHODS={string.Join(\u0027,\u0027, skippedTests)} \u0022;\r\n    var expectedArgs = GetExpectedDeviceMlaunchArgs(skippedTestsArg, extraArgs: \u0022-setenv=appArg1=value1 -argument=--foo=bar -argument=--xyz \u0022);\r\n    _processManager.Verify(x =\u003E x.ExecuteCommandAsync(It.Is\u003CMlaunchArguments\u003E(args =\u003E args.AsCommandLine() == expectedArgs), It.IsAny\u003CILog\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E\u003E(), It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _listener.Verify(x =\u003E x.InitializeAndGetPort(), Times.AtLeastOnce);\r\n    _listener.Verify(x =\u003E x.StartAsync(), Times.AtLeastOnce);\r\n    _listener.Verify(x =\u003E x.Dispose(), Times.AtLeastOnce);\r\n    _snapshotReporter.Verify(x =\u003E x.StartCaptureAsync(), Times.AtLeastOnce);\r\n    deviceSystemLog.Verify(x =\u003E x.Dispose(), Times.AtLeastOnce);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestOnDeviceWithSkippedClassesTestTest",
        "Body": "{\r\n    var deviceSystemLog = new Mock\u003CIFileBackedLog\u003E();\r\n    deviceSystemLog.SetupGet(x =\u003E x.FullPath).Returns(Path.GetTempFileName());\r\n    var deviceLogCapturer = new Mock\u003CIDeviceLogCapturer\u003E();\r\n    var deviceLogCapturerFactory = new Mock\u003CIDeviceLogCapturerFactory\u003E();\r\n    deviceLogCapturerFactory.Setup(x =\u003E x.Create(_mainLog.Object, deviceSystemLog.Object, DeviceName)).Returns(deviceLogCapturer.Object);\r\n    var testResultFilePath = Path.GetTempFileName();\r\n    var listenerLogFile = Mock.Of\u003CIFileBackedLog\u003E(x =\u003E x.FullPath == testResultFilePath);\r\n    File.WriteAllLines(testResultFilePath, new[] { \u0022Some result here\u0022, \u0022Tests run: 124\u0022, \u0022Some result there\u0022 });\r\n    _logs.Setup(x =\u003E x.Create(\u0022test-ios-device-mocked_timestamp.log\u0022, \u0022TestLog\u0022, It.IsAny\u003Cbool?\u003E())).Returns(listenerLogFile);\r\n    _logs.Setup(x =\u003E x.Create($\u0022device-{DeviceName}-mocked_timestamp.log\u0022, LogType.SystemLog.ToString(), It.IsAny\u003Cbool?\u003E())).Returns(deviceSystemLog.Object);\r\n    // Act\r\n    var appTester = new AppTester(_processManager.Object, _listenerFactory.Object, _snapshotReporterFactory, Mock.Of\u003CICaptureLogFactory\u003E(), deviceLogCapturerFactory.Object, _testReporterFactory, new XmlResultParser(), _mainLog.Object, _logs.Object, _helpers.Object);\r\n    var(result, resultMessage) = await appTester.TestApp(_appBundleInfo, new TestTargetOs(TestTarget.Device_iOS, null), s_mockDevice, null, extraAppArguments: new[] { \u0022--foo=bar\u0022, \u0022--xyz\u0022 }, extraEnvVariables: new[] { (\u0022appArg1\u0022, \u0022value1\u0022) }, timeout: TimeSpan.FromSeconds(30), testLaunchTimeout: TimeSpan.FromSeconds(30), signalAppEnd: false, skippedTestClasses: skippedClasses);\r\n    // Verify\r\n    Assert.Equal(TestExecutingResult.Succeeded, result);\r\n    Assert.Equal(\u0022Tests run: 1194 Passed: 1191 Inconclusive: 0 Failed: 0 Ignored: 0\u0022, resultMessage);\r\n    var skippedTestsArg = $\u0022-setenv=NUNIT_RUN_ALL=false -setenv=NUNIT_SKIPPED_CLASSES={string.Join(\u0027,\u0027, skippedClasses)} \u0022;\r\n    var expectedArgs = GetExpectedDeviceMlaunchArgs(skippedTestsArg, extraArgs: \u0022-setenv=appArg1=value1 -argument=--foo=bar -argument=--xyz \u0022);\r\n    _processManager.Verify(x =\u003E x.ExecuteCommandAsync(It.Is\u003CMlaunchArguments\u003E(args =\u003E args.AsCommandLine() == expectedArgs), It.IsAny\u003CILog\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E\u003E(), It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _listener.Verify(x =\u003E x.InitializeAndGetPort(), Times.AtLeastOnce);\r\n    _listener.Verify(x =\u003E x.StartAsync(), Times.AtLeastOnce);\r\n    _listener.Verify(x =\u003E x.Dispose(), Times.AtLeastOnce);\r\n    _snapshotReporter.Verify(x =\u003E x.StartCaptureAsync(), Times.AtLeastOnce);\r\n    deviceSystemLog.Verify(x =\u003E x.Dispose(), Times.AtLeastOnce);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestOnMacCatalystTest",
        "Body": "{\r\n    var testResultFilePath = Path.GetTempFileName();\r\n    var listenerLogFile = Mock.Of\u003CIFileBackedLog\u003E(x =\u003E x.FullPath == testResultFilePath);\r\n    File.WriteAllLines(testResultFilePath, new[] { \u0022Some result here\u0022, \u0022Tests run: 124\u0022, \u0022Some result there\u0022 });\r\n    _logs.Setup(x =\u003E x.Create(\u0022test-maccatalyst-mocked_timestamp.log\u0022, \u0022TestLog\u0022, It.IsAny\u003Cbool?\u003E())).Returns(listenerLogFile);\r\n    var captureLog = new Mock\u003CICaptureLog\u003E();\r\n    captureLog.SetupGet(x =\u003E x.FullPath).Returns(_simulatorLogPath);\r\n    var captureLogFactory = new Mock\u003CICaptureLogFactory\u003E();\r\n    captureLogFactory.Setup(x =\u003E x.Create(It.IsAny\u003Cstring\u003E(), \u0022/var/log/system.log\u0022, false, It.IsAny\u003CLogType\u003E())).Returns(captureLog.Object);\r\n    // Act\r\n    var appTester = new AppTester(_processManager.Object, _listenerFactory.Object, _snapshotReporterFactory, captureLogFactory.Object, Mock.Of\u003CIDeviceLogCapturerFactory\u003E(), _testReporterFactory, new XmlResultParser(), _mainLog.Object, _logs.Object, _helpers.Object);\r\n    var(result, resultMessage) = await appTester.TestMacCatalystApp(_appBundleInfo, timeout: TimeSpan.FromSeconds(30), testLaunchTimeout: TimeSpan.FromSeconds(30), signalAppEnd: false, extraAppArguments: new[] { \u0022--foo=bar\u0022, \u0022--xyz\u0022 }, extraEnvVariables: new[] { (\u0022appArg1\u0022, \u0022value1\u0022) });\r\n    // Verify\r\n    Assert.Equal(TestExecutingResult.Succeeded, result);\r\n    Assert.Equal(\u0022Tests run: 1194 Passed: 1191 Inconclusive: 0 Failed: 0 Ignored: 0\u0022, resultMessage);\r\n    _processManager.Verify(x =\u003E x.ExecuteCommandAsync(\u0022open\u0022, It.Is\u003CIList\u003Cstring\u003E\u003E(args =\u003E args.Contains(s_appPath) \u0026\u0026 args.Contains(\u0022--foo=bar\u0022) \u0026\u0026 args.Contains(\u0022--foo=bar\u0022)), _mainLog.Object, It.IsAny\u003CILog\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.Is\u003CDictionary\u003Cstring, string\u003E\u003E(envVars =\u003E envVars[\u0022NUNIT_HOSTNAME\u0022] == \u0022127.0.0.1\u0022 \u0026\u0026 envVars[\u0022NUNIT_HOSTPORT\u0022] == Port.ToString() \u0026\u0026 envVars[\u0022NUNIT_AUTOEXIT\u0022] == \u0022true\u0022 \u0026\u0026 envVars[\u0022NUNIT_XML_VERSION\u0022] == \u0022xUnit\u0022 \u0026\u0026 envVars[\u0022NUNIT_ENABLE_XML_OUTPUT\u0022] == \u0022true\u0022), It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _listener.Verify(x =\u003E x.InitializeAndGetPort(), Times.AtLeastOnce);\r\n    _listener.Verify(x =\u003E x.StartAsync(), Times.AtLeastOnce);\r\n    _listener.Verify(x =\u003E x.Dispose(), Times.AtLeastOnce);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestOnDeviceWithAppEndSignalTest",
        "Body": "{\r\n    var deviceSystemLog = new Mock\u003CIFileBackedLog\u003E();\r\n    deviceSystemLog.SetupGet(x =\u003E x.FullPath).Returns(Path.GetTempFileName());\r\n    var deviceLogCapturer = new Mock\u003CIDeviceLogCapturer\u003E();\r\n    var deviceLogCapturerFactory = new Mock\u003CIDeviceLogCapturerFactory\u003E();\r\n    deviceLogCapturerFactory.Setup(x =\u003E x.Create(_mainLog.Object, deviceSystemLog.Object, DeviceName)).Returns(deviceLogCapturer.Object);\r\n    var testResultFilePath = Path.GetTempFileName();\r\n    var listenerLogFile = Mock.Of\u003CIFileBackedLog\u003E(x =\u003E x.FullPath == testResultFilePath);\r\n    File.WriteAllLines(testResultFilePath, new[] { \u0022Some result here\u0022, \u0022Tests run: 124\u0022, \u0022Some result there\u0022 });\r\n    _logs.Setup(x =\u003E x.Create(\u0022test-ios-device-mocked_timestamp.log\u0022, \u0022TestLog\u0022, It.IsAny\u003Cbool?\u003E())).Returns(listenerLogFile);\r\n    _logs.Setup(x =\u003E x.Create($\u0022device-{DeviceName}-mocked_timestamp.log\u0022, LogType.SystemLog.ToString(), It.IsAny\u003Cbool?\u003E())).Returns(deviceSystemLog.Object);\r\n    _tunnelBore.Setup(t =\u003E t.Create(DeviceName, It.IsAny\u003CILog\u003E()));\r\n    _listenerFactory.Setup(f =\u003E f.UseTunnel).Returns(true);\r\n    var testEndSignal = Guid.NewGuid();\r\n    _helpers.Setup(x =\u003E x.GenerateGuid()).Returns(testEndSignal);\r\n    List\u003CMlaunchArguments\u003E mlaunchArguments = new();\r\n    List\u003CIFileBackedLog\u003E appOutputLogs = new();\r\n    List\u003CCancellationToken\u003E cancellationTokens = new();\r\n    // Endlessly running mlaunch until it gets cancelled by the signal\r\n    var mlaunchCompleted = new TaskCompletionSource\u003CProcessExecutionResult\u003E();\r\n    var appStarted = new TaskCompletionSource();\r\n    _processManager.Setup(x =\u003E x.ExecuteCommandAsync(Capture.In(mlaunchArguments), It.IsAny\u003CILog\u003E(), Capture.In(appOutputLogs), Capture.In(appOutputLogs), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E?\u003E(), It.IsAny\u003Cint\u003E(), Capture.In(cancellationTokens))).Callback(() =\u003E\r\n    {\r\n        // Signal we have started mlaunch\r\n        appStarted.SetResult();\r\n        // When mlaunch gets signalled to shut down, shut down even our fake mlaunch\r\n        cancellationTokens.Last().Register(() =\u003E mlaunchCompleted.SetResult(new ProcessExecutionResult { TimedOut = true, }));\r\n    }).Returns(mlaunchCompleted.Task);\r\n    // Act\r\n    var appTester = new AppTester(_processManager.Object, _listenerFactory.Object, _snapshotReporterFactory, Mock.Of\u003CICaptureLogFactory\u003E(), deviceLogCapturerFactory.Object, _testReporterFactory, new XmlResultParser(), _mainLog.Object, _logs.Object, _helpers.Object);\r\n    var testTask = appTester.TestApp(_appBundleInfo, new TestTargetOs(TestTarget.Device_iOS, null), s_mockDevice, null, timeout: TimeSpan.FromMinutes(30), testLaunchTimeout: TimeSpan.FromMinutes(30), signalAppEnd: true, Array.Empty\u003Cstring\u003E(), Array.Empty\u003C(string, string)\u003E());\r\n    // Everything should hang now since we mimicked mlaunch not being able to tell the app quits\r\n    // We will wait for XHarness to kick off the mlaunch (the app)\r\n    Assert.False(testTask.IsCompleted);\r\n    await Task.WhenAny(appStarted.Task, Task.Delay(1000));\r\n    // XHarness should still be running\r\n    Assert.False(testTask.IsCompleted);\r\n    // mlaunch should be started\r\n    Assert.True(appStarted.Task.IsCompleted);\r\n    // We will mimick the app writing the end signal\r\n    var appLog = appOutputLogs.First();\r\n    appLog.WriteLine(testEndSignal.ToString());\r\n    // AppTester should now complete fine but we safe guard it to be sure\r\n    await Task.WhenAny(testTask, Task.Delay(10000));\r\n    Assert.True(testTask.IsCompleted, \u0022Test tag wasn\u0027t detected\u0022);\r\n    var(result, resultMessage) = testTask.Result;\r\n    // Verify\r\n    Assert.Equal(TestExecutingResult.Succeeded, result);\r\n    Assert.Equal(\u0022Tests run: 1194 Passed: 1191 Inconclusive: 0 Failed: 0 Ignored: 0\u0022, resultMessage);\r\n    var expectedArgs = GetExpectedDeviceMlaunchArgs(useTunnel: true, extraArgs: $\u0022-setenv=RUN_END_TAG={testEndSignal} \u0022);\r\n    Assert.Equal(mlaunchArguments.Last().AsCommandLine(), expectedArgs);\r\n    _listener.Verify(x =\u003E x.InitializeAndGetPort(), Times.AtLeastOnce);\r\n    _listener.Verify(x =\u003E x.StartAsync(), Times.AtLeastOnce);\r\n    _listener.Verify(x =\u003E x.Dispose(), Times.AtLeastOnce);\r\n    // verify that we do close the tunnel when it was used\r\n    // we dont want to leak a process\r\n    _tunnelBore.Verify(t =\u003E t.Close(s_mockDevice.DeviceIdentifier));\r\n    _snapshotReporter.Verify(x =\u003E x.StartCaptureAsync(), Times.AtLeastOnce);\r\n    deviceSystemLog.Verify(x =\u003E x.Dispose(), Times.AtLeastOnce);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AppUninstallerTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.Apple.Tests",
    "Methods": [
      {
        "Name": "UninstallFromSimulatorTest",
        "Body": "{\r\n    var simulator = Mock.Of\u003CISimulatorDevice\u003E(x =\u003E x.Name == DeviceName \u0026\u0026 x.UDID == UDID);\r\n    // Act\r\n    var result = await _appUninstaller.UninstallSimulatorApp(simulator, AppBundleId);\r\n    // Verify\r\n    Assert.Equal(0, result.ExitCode);\r\n    var expectedArgs = $\u0022uninstall {UDID} {StringUtils.FormatArguments(AppBundleId)}\u0022;\r\n    _processManager.Verify(x =\u003E x.ExecuteXcodeCommandAsync(\u0022simctl\u0022, It.Is\u003Cstring[]\u003E(args =\u003E string.Join(\u0022 \u0022, args) == expectedArgs), _mainLog.Object, It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CCancellationToken\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UninstallFromDeviceTest",
        "Body": "{\r\n    var device = Mock.Of\u003CIHardwareDevice\u003E(x =\u003E x.Name == DeviceName \u0026\u0026 x.UDID == UDID);\r\n    // Act\r\n    var result = await _appUninstaller.UninstallDeviceApp(device, AppBundleId);\r\n    // Verify\r\n    Assert.Equal(0, result.ExitCode);\r\n    var expectedArgs = $\u0022--uninstalldevbundleid {StringUtils.FormatArguments(AppBundleId)} --devname {UDID}\u0022;\r\n    _processManager.Verify(x =\u003E x.ExecuteCommandAsync(It.Is\u003CMlaunchArguments\u003E(args =\u003E args.AsCommandLine() == expectedArgs), _mainLog.Object, It.IsAny\u003CTimeSpan\u003E(), null, It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DeviceFinderTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.Apple.Tests",
    "Methods": [
      {
        "Name": "CorrectTypeOfDeviceIsFoundTest",
        "Body": "{\r\n    _hardwareDevices.Add(CreateDevice(DeviceClass.iPhone, \u00228A450AA31EA94191AD6B02455F377CC1\u0022));\r\n    _hardwareDevices.Add(CreateDevice(DeviceClass.AppleTV, \u002230C0630E03EB40A19F9A40D61E66796B\u0022));\r\n    var device = await _deviceFinder.FindDevice(new TestTargetOs(TestTarget.Device_tvOS, null), null, new MemoryLog(), false);\r\n    Assert.Equal(\u002230C0630E03EB40A19F9A40D61E66796B\u0022, device.Device.UDID);\r\n    _hardwareDevices.Clear();\r\n    _hardwareDevices.Add(CreateDevice(DeviceClass.iPhone, \u00228A450AA31EA94191AD6B02455F377CC1\u0022));\r\n    _hardwareDevices.Add(CreateDevice(DeviceClass.iPhone, \u002230C0630E03EB40A19F9A40D61E66796B\u0022));\r\n    await Assert.ThrowsAsync\u003CNoDeviceFoundException\u003E(async () =\u003E await _deviceFinder.FindDevice(new TestTargetOs(TestTarget.Device_tvOS, null), null, new MemoryLog(), false));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeviceIsFoundByNameTest",
        "Body": "{\r\n    _hardwareDevices.Add(CreateDevice(DeviceClass.iPhone, \u00228A450AA31EA94191AD6B02455F377CC1\u0022));\r\n    _hardwareDevices.Add(CreateDevice(DeviceClass.iPhone, \u002230C0630E03EB40A19F9A40D61E66796B\u0022));\r\n    var device = await _deviceFinder.FindDevice(new TestTargetOs(TestTarget.Device_iOS, null), \u002230C0630E03EB40A19F9A40D61E66796B\u0022, new MemoryLog(), false);\r\n    Assert.Equal(\u002230C0630E03EB40A19F9A40D61E66796B\u0022, device.Device.UDID);\r\n    await Assert.ThrowsAsync\u003CNoDeviceFoundException\u003E(async () =\u003E await _deviceFinder.FindDevice(new TestTargetOs(TestTarget.Device_iOS, null), \u0022unknown\u0022, new MemoryLog(), false));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OnlyPairedDevicesAreFoundTest",
        "Body": "{\r\n    _hardwareDevices.Add(CreateDevice(DeviceClass.iPhone, \u00228A450AA31EA94191AD6B02455F377CC1\u0022, false));\r\n    _hardwareDevices.Add(CreateDevice(DeviceClass.iPhone, \u002230C0630E03EB40A19F9A40D61E66796B\u0022));\r\n    var device = await _deviceFinder.FindDevice(new TestTargetOs(TestTarget.Device_iOS, null), null, new MemoryLog(), false);\r\n    Assert.Equal(\u002230C0630E03EB40A19F9A40D61E66796B\u0022, device.Device.UDID);\r\n    _hardwareDevices.Clear();\r\n    _hardwareDevices.Add(CreateDevice(DeviceClass.iPhone, \u00228A450AA31EA94191AD6B02455F377CC1\u0022, false));\r\n    _hardwareDevices.Add(CreateDevice(DeviceClass.iPhone, \u002230C0630E03EB40A19F9A40D61E66796B\u0022, false));\r\n    await Assert.ThrowsAsync\u003CNoDeviceFoundException\u003E(async () =\u003E await _deviceFinder.FindDevice(new TestTargetOs(TestTarget.Device_iOS, null), null, new MemoryLog(), false));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ErrorKnowledgeBaseTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.Apple.Tests",
    "Methods": [
      {
        "Name": "WrongArchPresentTest",
        "Body": "{\r\n    var expectedFailureMessage = \u0022IncorrectArchitecture: Failed to find matching device arch for the application\u0022;\r\n    using (var log = new LogFile(\u0022test\u0022, _logPath))\r\n    {\r\n        // write some data in it\r\n        log.WriteLine(\u0022InstallingEmbeddedProfile: 65%\u0022);\r\n        log.WriteLine(\u0022PercentComplete: 30\u0022);\r\n        log.WriteLine(\u0022Status: InstallingEmbeddedProfile\u0022);\r\n        log.WriteLine(\u0022VerifyingApplication: 70%\u0022);\r\n        log.WriteLine(\u0022PercentComplete: 40\u0022);\r\n        log.WriteLine(\u0022Status: VerifyingApplication\u0022);\r\n        log.WriteLine(\u0022IncorrectArchitecture: Failed to find matching arch for 64-bit Mach-O input file /private/var/installd/Library/Caches/com.apple.mobile.installd.staging/temp.Ic8Ank/extracted/monotouchtest.app/monotouchtest\u0022);\r\n        log.Flush();\r\n        Assert.True(_errorKnowledgeBase.IsKnownInstallIssue(log, out var failure));\r\n        Assert.Equal(expectedFailureMessage, failure?.HumanMessage);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "WrongArchNotPresentTest",
        "Body": "{\r\n    using (var log = new LogFile(\u0022test\u0022, _logPath))\r\n    {\r\n        // write some data in it\r\n        log.WriteLine(\u0022InstallingEmbeddedProfile: 65%\u0022);\r\n        log.WriteLine(\u0022PercentComplete: 30\u0022);\r\n        log.WriteLine(\u0022Status: InstallingEmbeddedProfile\u0022);\r\n        log.WriteLine(\u0022VerifyingApplication: 70%\u0022);\r\n        log.WriteLine(\u0022PercentComplete: 40\u0022);\r\n        log.WriteLine(\u0022Status: VerifyingApplication\u0022);\r\n        log.Flush();\r\n        Assert.False(_errorKnowledgeBase.IsKnownInstallIssue(log, out var failure));\r\n        Assert.Null(failure);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsbIssuesPresentTest",
        "Body": "{\r\n    var expectedFailureMessage = \u0022Failed to communicate with the device. Please ensure the cable is properly connected, and try rebooting the device\u0022;\r\n    using (var log = new LogFile(\u0022test\u0022, _logPath))\r\n    {\r\n        // initial lines are not interesting\r\n        log.WriteLine(\u0022InstallingEmbeddedProfile: 65%\u0022);\r\n        log.WriteLine(\u0022PercentComplete: 30\u0022);\r\n        log.WriteLine(\u0022Status: InstallingEmbeddedProfile\u0022);\r\n        log.WriteLine(\u0022VerifyingApplication: 70%\u0022);\r\n        log.WriteLine(\u0022PercentComplete: 40\u0022);\r\n        log.WriteLine(\u0022Xamarin.Hosting.MobileDeviceException: Failed to communicate with the device. Please ensure the cable is properly connected, and try rebooting the device (error: 0xe8000065 kAMDMuxConnectError)\u0022);\r\n        log.Flush();\r\n        Assert.True(_errorKnowledgeBase.IsKnownTestIssue(log, out var failure));\r\n        Assert.Equal(expectedFailureMessage, failure?.HumanMessage);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UsbIssuesMissingTest",
        "Body": "{\r\n    using (var log = new LogFile(\u0022test\u0022, _logPath))\r\n    {\r\n        // initial lines are not interesting\r\n        log.WriteLine(\u0022InstallingEmbeddedProfile: 65%\u0022);\r\n        log.WriteLine(\u0022PercentComplete: 30\u0022);\r\n        log.WriteLine(\u0022Status: InstallingEmbeddedProfile\u0022);\r\n        log.WriteLine(\u0022VerifyingApplication: 70%\u0022);\r\n        log.WriteLine(\u0022PercentComplete: 40\u0022);\r\n        log.Flush();\r\n        Assert.False(_errorKnowledgeBase.IsKnownTestIssue(log, out var failure));\r\n        Assert.Null(failure);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeviceLockedTest",
        "Body": "{\r\n    var expectedFailureMessage = \u0022Cannot launch the application because the device is locked. Please unlock the device and try again\u0022;\r\n    using (var log = new LogFile(\u0022test\u0022, _logPath))\r\n    {\r\n        log.WriteLine(\u002205:55:56.7712200 05:55:56.7712030 Xamarin.Hosting: Mounting developer image on \u0027iPremek\u0027\u0022);\r\n        log.WriteLine(\u002205:55:56.7716040 05:55:56.7715960 Xamarin.Hosting: Mounted developer image on \u0027iPremek\u0027\u0022);\r\n        log.WriteLine(\u002205:55:56.8494160 05:55:56.8494020 error MT1031: Could not launch the app \u0027net.dot.HelloiOS\u0027 on the device \u0027iPremek\u0027 because the device is locked. Please unlock the device and try again.\u0022);\r\n        log.WriteLine(\u002205:55:56.8537390 05:55:56.8537300   at Xamarin.Launcher.DevController\u002B\u003C\u003Ec__DisplayClass14_0.\u003CLaunchBundleOnDevice\u003Eb__0 () [0x0059d] in /Users/rolf/work/maccore/xcode12/maccore/tools/mlaunch/Xamarin.Hosting/Xamarin.Launcher/controller-device.cs:372\u0022);\r\n        log.WriteLine(\u002205:55:56.8537720 05:55:56.8537700   at Xamarin.Launcher.DevController.LaunchDeviceBundleAsync (System.String app_path, Xamarin.Hosting.DeviceLaunchConfig config) [0x00111] in /Users/rolf/work/maccore/xcode12/maccore/tools/mlaunch/Xamarin.Hosting/Xamarin.Launcher/controller-device.cs:176\u0022);\r\n        log.WriteLine(\u002205:55:56.8537800 05:55:56.8537790   at Xamarin.Utils.NSRunLoopExtensions.RunUntilTaskCompletion[T] (Foundation.NSRunLoop this, System.Threading.Tasks.Task\u00601[TResult] task) [0x00082] in /Users/rolf/work/maccore/xcode12/maccore/tools/mlaunch/Xamarin.Hosting/Xamarin.Utils/Extensions.cs:35\u0022);\r\n        log.WriteLine(\u002205:55:56.8537870 05:55:56.8537860   at Xamarin.Launcher.Driver.Main2 (System.String[] args) [0x00b43] in /Users/rolf/work/maccore/xcode12/maccore/tools/mlaunch/Xamarin.Hosting/Xamarin.Launcher/Main.cs:458\u0022);\r\n        log.WriteLine(\u002205:55:56.8538290 05:55:56.8538250   at Xamarin.Launcher.Driver.Main (System.String[] args) [0x0006d] in /Users/rolf/work/maccore/xcode12/maccore/tools/mlaunch/Xamarin.Hosting/Xamarin.Launcher/Main.cs:150\u0022);\r\n        log.WriteLine(\u002205:55:56.8618920 05:55:56.8618780 Process mlaunch exited with 1\u0022);\r\n        log.WriteLine(\u002205:56:01.8765370 05:56:01.8765240 Killing process tree of 2797...\u0022);\r\n        log.WriteLine(\u002205:56:01.8938830 05:56:01.8938670 Pids to kill: 2797\u0022);\r\n        log.Flush();\r\n        Assert.True(_errorKnowledgeBase.IsKnownTestIssue(log, out var failure));\r\n        Assert.Equal(expectedFailureMessage, failure?.HumanMessage);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeviceUpdateNotFinishedTest",
        "Body": "{\r\n    var expectedFailureMessage = \u0022Cannot launch the application because the device\u0027s update hasn\u0027t been finished. The setup assistant is still running. Please finish the device OS update on the device\u0022;\r\n    using (var log = new LogFile(\u0022test\u0022, _logPath))\r\n    {\r\n        log.WriteLine(\u0022[08:44:10.0123870] Xamarin.Hosting: Mounted developer image on \u0027DNCENGTVOS-090\u0027\u0022);\r\n        log.WriteLine(\u0022[08:44:10.7259750] warning MT1043: Failed to launch the application using the instruments service. Will try launching the app using gdb service.\u0022);\r\n        log.WriteLine(\u0022[08:44:10.7260060]         \u0022);\r\n        log.WriteLine(\u0022[08:44:10.7260580] --- inner exception\u0022);\r\n        log.WriteLine(\u0022[08:44:10.7265060] error HE0003: Failed to launch the application \u0027net.dot.System.Buffers.Tests\u0027 on \u0027DNCENGTVOS-090: 1 (Request to launch net.dot.System.Buffers.Tests failed.)\u0022);\r\n        log.WriteLine(\u0022[08:44:10.7265220]         \u0022);\r\n        log.WriteLine(\u0022[08:44:10.7265280] ---\u0022);\r\n        log.WriteLine(\u0022[08:44:10.7278170] Launching \u0027net.dot.System.Buffers.Tests\u0027 on the device \u0027DNCENGTVOS-090\u0027\u0022);\r\n        log.WriteLine(\u0022[08:44:11.3152170] Launching /private/var/containers/Bundle/Application/27FA8535-C645-413A-ABE9-2ABD0BC6086B/System.Buffers.Tests.app\u0022);\r\n        log.WriteLine(\u0022[08:44:11.3156130] Xamarin.Hosting: Sending command: $A208,0,2f707269766174652f7661722f636f6e7461696e6572732f42756e646c652f4170706c69636174696f6e2f32374641383533352d433634352d343133412d414245392d3241424430424336303836422f53797374656d2e427566666572732e54657374732e617070#43\u0022);\r\n        log.WriteLine(\u0022[08:44:11.3174180] Xamarin.Hosting: Received command: OK\u0022);\r\n        log.WriteLine(\u0022[08:44:11.3174360] Xamarin.Hosting: Sending command: $qLaunchSuccess#a5\u0022);\r\n        log.WriteLine(\u0022[08:44:11.3864920] Xamarin.Hosting: Received command: EThe operation couldn\u2019t be completed. [PBD] Denying open-application request for reason: Disabled (Cannot launch app \u0027net.dot.System.Buffers.Tests\u0027 while Setup Assistant is running)\u0022);\r\n        log.WriteLine(\u0022[08:44:11.3886900] error MT1007: Failed to launch the application \u0027net.dot.System.Buffers.Tests\u0027 on the device \u0027DNCENGTVOS-090\u0027: Failed to launch the application \u0027net.dot.System.Buffers.Tests\u0027 on the device \u0027DNCENGTVOS-090\u0027: Application failed to launch: EThe operation couldn\u2019t be completed. [PBD] Denying open-application request for reason: Disabled (Cannot launch app \u0027net.dot.System.Buffers.Tests\u0027 while Setup Assistant is running)\u0022);\r\n        log.WriteLine(\u0022[08:44:11.3887100]         \u0022);\r\n        log.WriteLine(\u0022[08:44:11.3887170]         . You can still launch the application manually by tapping on it.\u0022);\r\n        log.WriteLine(\u0022[08:44:11.3887220]         \u0022);\r\n        log.WriteLine(\u0022[08:44:11.3887260] --- inner exception\u0022);\r\n        log.WriteLine(\u0022[08:44:11.3887310] error MT1020: Failed to launch the application \u0027net.dot.System.Buffers.Tests\u0027 on the device \u0027DNCENGTVOS-090\u0027: Application failed to launch: EThe operation couldn\u2019t be completed. [PBD] Denying open-application request for reason: Disabled (Cannot launch app \u0027net.dot.System.Buffers.Tests\u0027 while Setup Assistant is running)\u0022);\r\n        log.WriteLine(\u0022[08:44:11.3887360]         \u0022);\r\n        log.WriteLine(\u0022[08:44:11.3887400]         \u0022);\r\n        log.WriteLine(\u0022[08:44:11.3887450] ---\u0022);\r\n        log.WriteLine(\u0022[08:44:11.3887490] --- inner exception\u0022);\r\n        log.WriteLine(\u0022[08:44:11.3887570] error HE1107: Application failed to launch: EThe operation couldn\u2019t be completed. [PBD] Denying open-application request for reason: Disabled (Cannot launch app \u0027net.dot.System.Buffers.Tests\u0027 while Setup Assistant is running)\u0022);\r\n        log.WriteLine(\u0022[08:44:11.3887790]         \u0022);\r\n        log.WriteLine(\u0022[08:44:11.3887840] ---\u0022);\r\n        log.WriteLine(\u0022[08:44:11.3917790]   at Xamarin.Launcher.DevController.LaunchDeviceBundleIdAsync (System.String bundle_id, Xamarin.Hosting.DeviceLaunchConfig config) [0x001cc] in /Users/builder/azdo/_work/1/s/maccore/tools/mlaunch/Xamarin.Hosting/Xamarin.Launcher/controller-device.cs:208 \u0022);\r\n        log.WriteLine(\u0022[08:44:11.3917960]   at Xamarin.Utils.NSRunLoopExtensions.RunUntilTaskCompletion[T] (Foundation.NSRunLoop this, System.Threading.Tasks.Task\u00601[TResult] task) [0x00082] in /Users/builder/azdo/_work/1/s/maccore/tools/mlaunch/Xamarin.Hosting/Xamarin.Utils/Extensions.cs:35 \u0022);\r\n        log.WriteLine(\u0022[08:44:11.3918040]   at Xamarin.Launcher.Driver.Main2 (System.String[] args) [0x00b43] in /Users/builder/azdo/_work/1/s/maccore/tools/mlaunch/Xamarin.Hosting/Xamarin.Launcher/Main.cs:459 \u0022);\r\n        log.WriteLine(\u0022[08:44:11.3918090]   at Xamarin.Launcher.Driver.Main (System.String[] args) [0x0006d] in /Users/builder/azdo/_work/1/s/maccore/tools/mlaunch/Xamarin.Hosting/Xamarin.Launcher/Main.cs:151 \u0022);\r\n        log.Flush();\r\n        Assert.True(_errorKnowledgeBase.IsKnownTestIssue(log, out var failure));\r\n        Assert.Equal(expectedFailureMessage, failure?.HumanMessage);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ExitCodeDetectorTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.Apple.Tests",
    "Methods": [
      {
        "Name": "ExitCodeIsDetectedTest",
        "Body": "{\r\n    var appBundleInformation = new AppBundleInformation(\u0022HelloiOS\u0022, \u0022net.dot.HelloiOS\u0022, \u0022some/path\u0022, \u0022some/path\u0022, false, null);\r\n    var detector = new iOSExitCodeDetector();\r\n    var log = new[]\r\n    {\r\n        \u0022Nov 18 04:31:44 dci-mac-build-053 CloudKeychainProxy[67121]: objc[67121]: Class MockAKSRefKeyObject is implemented in both /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/Security (0x10350b738) and /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/CloudKeychainProxy.bundle/CloudKeychainProxy (0x103259970). One of the two will be used. Which one is undefined.\u0022,\r\n        \u0022Nov 18 04:31:44 dci-mac-build-053 CloudKeychainProxy[67121]: objc[67121]: Class MockAKSOptionalParameters is implemented in both /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/Security (0x10350b788) and /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/CloudKeychainProxy.bundle/CloudKeychainProxy (0x1032599c0). One of the two will be used. Which one is undefined.\u0022,\r\n        \u0022Nov 18 04:31:44 dci-mac-build-053 CloudKeychainProxy[67121]: objc[67121]: Class SecXPCHelper is implemented in both /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/Security (0x10350b918) and /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/CloudKeychainProxy.bundle/CloudKeychainProxy (0x103259a60). One of the two will be used. Which one is undefined.\u0022,\r\n        \u0022Nov 18 04:31:44 ML-MacVM com.apple.CoreSimulator.SimDevice.2E1EE736-5672-4220-89B5-B7C77DB6AF18[55655] (UIKitApplication:net.dot.HelloiOS[9a0b][rb-legacy][57331]): Service exited with abnormal code: 200\u0022,\r\n        \u0022Nov 18 04:31:44 dci-mac-build-053 com.apple.CoreSimulator.SimDevice.F67392D9-A327-4217-B924-5DA0918415E5[811] (com.apple.security.cloudkeychainproxy3[67121]): Service exited with abnormal code: 1\u0022,\r\n        \u0022Nov 18 04:31:44 dci-mac-build-053 com.apple.CoreSimulator.SimDevice.F67392D9-A327-4217-B924-5DA0918415E5[811] (com.apple.security.cloudkeychainproxy3): Service only ran for 0 seconds. Pushing respawn out by 10 seconds.\u0022,\r\n    };\r\n    var exitCode = detector.DetectExitCode(appBundleInformation, GetLogMock(log));\r\n    Assert.Equal(200, exitCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExitCodeIsDetectedOnMacCatalystTest",
        "Body": "{\r\n    var appBundleInformation = new AppBundleInformation(\u0022System.Buffers.Tests\u0022, \u0022net.dot.System.Buffers.Tests\u0022, \u0022some/path\u0022, \u0022some/path\u0022, false, null);\r\n    var detector = new MacCatalystExitCodeDetector();\r\n    var log = new[]\r\n    {\r\n        \u0022Feb 18 06:40:16 Admins-Mac-Mini System.Buffers.Tests[59229]: CDN - client insert callback function client = 0 type = 17 function = 0x7fff3b262246 local_olny = false\u0022,\r\n        \u0022Feb 18 06:40:16 Admins-Mac-Mini System.Buffers.Tests[59229]: CDN - client setup_remote_port\u0022,\r\n        \u0022Feb 18 06:40:16 Admins-Mac-Mini System.Buffers.Tests[59229]: CDN - Bootstrap Port: 1799\u0022,\r\n        \u0022Feb 18 06:40:16 Admins-Mac-Mini System.Buffers.Tests[59229]: CDN - Remote Port: 56835 (com.apple.CoreDisplay.Notification)\u0022,\r\n        \u0022Feb 18 06:40:16 Admins-Mac-Mini System.Buffers.Tests[59229]: CDN - client setup_local_port\u0022,\r\n        \u0022Feb 18 06:40:16 Admins-Mac-Mini System.Buffers.Tests[59229]: CDN - Local Port: 78339\u0022,\r\n        \u0022Feb 18 06:40:16 Admins-Mac-Mini com.apple.xpc.launchd[1] (net.dot.System.Buffers.Tests.15140[59229]): Service exited with abnormal code: 74\u0022,\r\n        \u0022Feb 18 06:40:49 Admins-Mac-Mini com.apple.xpc.launchd[1] (com.apple.mdworker.shared.09000000-0600-0000-0000-000000000000[59231]): Service exited due to SIGKILL | sent by mds[88]\u0022,\r\n        \u0022Feb 18 06:40:58 Admins-Mac-Mini com.apple.xpc.launchd[1] (com.apple.mdworker.shared.02000000-0100-0000-0000-000000000000[59232]): Service exited due to SIGKILL | sent by mds[88]\u0022,\r\n        \u0022Feb 18 06:41:01 Admins-Mac-Mini com.apple.xpc.launchd[1] (com.apple.mdworker.shared.0D000000-0000-0000-0000-000000000000[59237]): Service exited due to SIGKILL | sent by mds[88]\u0022,\r\n        \u0022Feb 18 06:41:23 Admins-Mac-Mini System.Buffers.Tests[59248]: CDN - client insert callback function client = 0 type = 17 function = 0x7fff3b262246 local_olny = false\u0022,\r\n        \u0022Feb 18 06:41:23 Admins-Mac-Mini System.Buffers.Tests[59248]: CDN - client setup_remote_port\u0022,\r\n        \u0022Feb 18 06:41:23 Admins-Mac-Mini System.Buffers.Tests[59248]: CDN - Bootstrap Port: 1799\u0022,\r\n        \u0022Feb 18 06:41:23 Admins-Mac-Mini System.Buffers.Tests[59248]: CDN - Remote Port: 75271 (com.apple.CoreDisplay.Notification)\u0022,\r\n        \u0022Feb 18 06:41:23 Admins-Mac-Mini System.Buffers.Tests[59248]: CDN - client setup_local_port\u0022,\r\n        \u0022Feb 18 06:41:23 Admins-Mac-Mini System.Buffers.Tests[59248]: CDN - Local Port: 52995\u0022,\r\n    };\r\n    var exitCode = detector.DetectExitCode(appBundleInformation, GetLogMock(log));\r\n    Assert.Equal(74, exitCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NegativeExitCodeIsDetectedTest",
        "Body": "{\r\n    var appBundleInformation = new AppBundleInformation(\u0022HelloiOS\u0022, \u0022net.dot.HelloiOS\u0022, \u0022some/path\u0022, \u0022some/path\u0022, false, null);\r\n    var detector = new iOSExitCodeDetector();\r\n    var log = new[]\r\n    {\r\n        \u0022Nov 18 04:31:44 dci-mac-build-053 CloudKeychainProxy[67121]: objc[67121]: Class MockAKSRefKeyObject is implemented in both /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/Security (0x10350b738) and /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/CloudKeychainProxy.bundle/CloudKeychainProxy (0x103259970). One of the two will be used. Which one is undefined.\u0022,\r\n        \u0022Nov 18 04:31:44 dci-mac-build-053 CloudKeychainProxy[67121]: objc[67121]: Class MockAKSOptionalParameters is implemented in both /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/Security (0x10350b788) and /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/CloudKeychainProxy.bundle/CloudKeychainProxy (0x1032599c0). One of the two will be used. Which one is undefined.\u0022,\r\n        \u0022Nov 18 04:31:44 dci-mac-build-053 CloudKeychainProxy[67121]: objc[67121]: Class SecXPCHelper is implemented in both /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/Security (0x10350b918) and /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/CloudKeychainProxy.bundle/CloudKeychainProxy (0x103259a60). One of the two will be used. Which one is undefined.\u0022,\r\n        \u0022Nov 18 04:31:44 ML-MacVM com.apple.CoreSimulator.SimDevice.2E1EE736-5672-4220-89B5-B7C77DB6AF18[55655] (UIKitApplication:net.dot.HelloiOS[9a0b][rb-legacy][57331]): Service exited with abnormal code: -2\u0022,\r\n        \u0022Nov 18 04:31:44 dci-mac-build-053 com.apple.CoreSimulator.SimDevice.F67392D9-A327-4217-B924-5DA0918415E5[811] (com.apple.security.cloudkeychainproxy3[67121]): Service exited with abnormal code: 1\u0022,\r\n        \u0022Nov 18 04:31:44 dci-mac-build-053 com.apple.CoreSimulator.SimDevice.F67392D9-A327-4217-B924-5DA0918415E5[811] (com.apple.security.cloudkeychainproxy3): Service only ran for 0 seconds. Pushing respawn out by 10 seconds.\u0022,\r\n    };\r\n    var exitCode = detector.DetectExitCode(appBundleInformation, GetLogMock(log));\r\n    Assert.Equal(-2, exitCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "iOSDeviceCodeIsDetectedTest",
        "Body": "{\r\n    var appBundleInformation = new AppBundleInformation(\u0022iOS.Simulator.PInvoke.Test\u0022, \u0022net.dot.iOS.Simulator.PInvoke.Test\u0022, \u0022some/path\u0022, \u0022some/path\u0022, false, null);\r\n    var detector = new iOSExitCodeDetector();\r\n    var log = new[]\r\n    {\r\n        \u0022[07:02:15.9749990] Xamarin.Hosting: Mounting developer image on \u0027DNCENGOSX-003\u0027\u0022,\r\n        \u0022[07:02:15.9752160] Xamarin.Hosting: Mounted developer image on \u0027DNCENGOSX-003\u0027\u0022,\r\n        \u0022[07:02:16.5177370] Xamarin.Hosting: Launched net.dot.Some.Other.App with PID: 13942\u0022,\r\n        \u0022[07:02:16.5181560] Launched application \u0027net.dot.Some.Other.App\u0027 on \u0027DNCENGOSX-003\u0027 with pid 13942\u0022,\r\n        \u0022[07:02:16.6150270] 2022-03-30 07:02:16.601 Some.Other.App[13942:136284382] Done!\u0022,\r\n        \u0022[07:02:21.6632630] Xamarin.Hosting: Process \u002713942\u0027 exited with exit code 143 or crashing signal .\u0022,\r\n        \u0022[07:02:21.6637600] Application \u0027net.dot.Some.Other.App\u0027 terminated (with exit code \u0027143\u0027 and/or crashing signal \u0027).\u0022,\r\n        // We care about this run\r\n        \u0022[07:02:15.9749990] Xamarin.Hosting: Mounting developer image on \u0027DNCENGOSX-003\u0027\u0022,\r\n        \u0022[07:02:15.9752160] Xamarin.Hosting: Mounted developer image on \u0027DNCENGOSX-003\u0027\u0022,\r\n        \u0022[07:02:16.5177370] Xamarin.Hosting: Launched net.dot.iOS.Simulator.PInvoke.Test with PID: 83937\u0022,\r\n        \u0022[07:02:16.5181560] Launched application \u0027net.dot.iOS.Simulator.PInvoke.Test\u0027 on \u0027DNCENGOSX-003\u0027 with pid 83937\u0022,\r\n        \u0022[07:02:16.6150270] 2022-03-30 07:02:16.601 iOS.Simulator.PInvoke.Test[83937:136284382] Done!\u0022,\r\n        \u0022[07:02:21.6632630] Xamarin.Hosting: Process \u002783937\u0027 exited with exit code 42 or crashing signal .\u0022,\r\n        \u0022[07:02:21.6637600] Application \u0027net.dot.iOS.Simulator.PInvoke.Test\u0027 terminated (with exit code \u002742\u0027 and/or crashing signal \u0027).\u0022,\r\n    };\r\n    var exitCode = detector.DetectExitCode(appBundleInformation, GetLogMock(log));\r\n    Assert.Equal(42, exitCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExitCodeIsNotDetectedTest",
        "Body": "{\r\n    var appBundleInformation = new AppBundleInformation(\u0022HelloiOS\u0022, \u0022net.dot.HelloiOS\u0022, \u0022some/path\u0022, \u0022some/path\u0022, false, null);\r\n    var detector = new iOSExitCodeDetector();\r\n    var log = new[]\r\n    {\r\n        \u0022Nov 18 04:31:44 dci-mac-build-053 CloudKeychainProxy[67121]: objc[67121]: Class MockAKSRefKeyObject is implemented in both /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/Security (0x10350b738) and /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/CloudKeychainProxy.bundle/CloudKeychainProxy (0x103259970). One of the two will be used. Which one is undefined.\u0022,\r\n        \u0022Nov 18 04:31:44 dci-mac-build-053 CloudKeychainProxy[67121]: objc[67121]: Class MockAKSOptionalParameters is implemented in both /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/Security (0x10350b788) and /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/CloudKeychainProxy.bundle/CloudKeychainProxy (0x1032599c0). One of the two will be used. Which one is undefined.\u0022,\r\n        \u0022Nov 18 04:31:44 dci-mac-build-053 CloudKeychainProxy[67121]: objc[67121]: Class SecXPCHelper is implemented in both /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/Security (0x10350b918) and /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/CloudKeychainProxy.bundle/CloudKeychainProxy (0x103259a60). One of the two will be used. Which one is undefined.\u0022,\r\n        \u0022Nov 18 04:31:44 ML-MacVM com.apple.CoreSimulator.SimDevice.2E1EE736-5672-4220-89B5-B7C77DB6AF18[55655] (UIKitApplication:net.dot.HelloiOS[9a0b][rb-legacy][57331]): Some other error message\u0022,\r\n        \u0022Nov 18 04:31:44 dci-mac-build-053 com.apple.CoreSimulator.SimDevice.F67392D9-A327-4217-B924-5DA0918415E5[811] (com.apple.security.cloudkeychainproxy3[67121]): Service exited with abnormal code: 1\u0022,\r\n        \u0022Nov 18 04:31:44 dci-mac-build-053 com.apple.CoreSimulator.SimDevice.F67392D9-A327-4217-B924-5DA0918415E5[811] (com.apple.security.cloudkeychainproxy3): Service only ran for 0 seconds. Pushing respawn out by 10 seconds.\u0022,\r\n    };\r\n    var exitCode = detector.DetectExitCode(appBundleInformation, GetLogMock(log));\r\n    Assert.Null(exitCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExitCodeFromPreviousRunIsIgnored",
        "Body": "{\r\n    var previousLog = \u0022Nov 18 04:31:44 dci-mac-build-053 CloudKeychainProxy[67121]: objc[67121]: Class MockAKSRefKeyObject is implemented in both /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/Security (0x10350b738) and /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/CloudKeychainProxy.bundle/CloudKeychainProxy (0x103259970). One of the two will be used. Which one is undefined.\u0022 \u002B Environment.NewLine \u002B \u0022Nov 18 04:31:44 dci-mac-build-053 CloudKeychainProxy[67121]: objc[67121]: Class MockAKSOptionalParameters is implemented in both /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/Security (0x10350b788) and /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/CloudKeychainProxy.bundle/CloudKeychainProxy (0x1032599c0). One of the two will be used. Which one is undefined.\u0022 \u002B Environment.NewLine \u002B \u0022Nov 18 04:31:44 dci-mac-build-053 CloudKeychainProxy[67121]: objc[67121]: Class SecXPCHelper is implemented in both /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/Security (0x10350b918) and /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/CloudKeychainProxy.bundle/CloudKeychainProxy (0x103259a60). One of the two will be used. Which one is undefined.\u0022 \u002B Environment.NewLine \u002B \u0022Nov 18 04:31:44 dci-mac-build-053 ML-MacVM com.apple.CoreSimulator.SimDevice.2E1EE736-5672-4220-89B5-B7C77DB6AF18[55655] (UIKitApplication:net.dot.HelloiOS[9a0b][rb-legacy][57331]): Some other error message\u0022 \u002B Environment.NewLine \u002B \u0022Nov 18 04:31:44 dci-mac-build-053 ML-MacVM com.apple.CoreSimulator.SimDevice.2E1EE736-5672-4220-89B5-B7C77DB6AF18[55655] (UIKitApplication:net.dot.HelloiOS[9a0b][rb-legacy][57331]): Service exited with abnormal code: 55\u0022 \u002B Environment.NewLine \u002B \u0022Nov 18 04:31:44 dci-mac-build-053 com.apple.CoreSimulator.SimDevice.F67392D9-A327-4217-B924-5DA0918415E5[811] (com.apple.security.cloudkeychainproxy3): Service only ran for 0 seconds. Pushing respawn out by 10 seconds.\u0022 \u002B Environment.NewLine;\r\n    var currentRunLog = \u0022Nov 18 04:31:44 dci-mac-build-053 CloudKeychainProxy[67121]: objc[67121]: Class MockAKSRefKeyObject is implemented in both /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/Security (0x10350b738) and /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/CloudKeychainProxy.bundle/CloudKeychainProxy (0x103259970). One of the two will be used. Which one is undefined.\u0022 \u002B Environment.NewLine \u002B \u0022Nov 18 04:31:44 dci-mac-build-053 CloudKeychainProxy[67121]: objc[67121]: Class MockAKSOptionalParameters is implemented in both /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/Security (0x10350b788) and /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/CloudKeychainProxy.bundle/CloudKeychainProxy (0x1032599c0). One of the two will be used. Which one is undefined.\u0022 \u002B Environment.NewLine \u002B \u0022Nov 18 04:31:44 dci-mac-build-053 CloudKeychainProxy[67121]: objc[67121]: Class SecXPCHelper is implemented in both /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/Security (0x10350b918) and /Applications/Xcode115.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Security.framework/CloudKeychainProxy.bundle/CloudKeychainProxy (0x103259a60). One of the two will be used. Which one is undefined.\u0022 \u002B Environment.NewLine \u002B \u0022Nov 18 04:31:44 dci-mac-build-053 ML-MacVM com.apple.CoreSimulator.SimDevice.2E1EE736-5672-4220-89B5-B7C77DB6AF18[55655] (UIKitApplication:net.dot.HelloiOS[9a0b][rb-legacy][57331]): Some other error message\u0022 \u002B Environment.NewLine \u002B \u0022Nov 18 04:31:44 dci-mac-build-053 ML-MacVM com.apple.CoreSimulator.SimDevice.2E1EE736-5672-4220-89B5-B7C77DB6AF18[55655] (UIKitApplication:net.dot.HelloiOS[9a0b][rb-legacy][57331]): Service exited with abnormal code: 72\u0022 \u002B Environment.NewLine \u002B \u0022Nov 18 04:31:44 dci-mac-build-053 com.apple.CoreSimulator.SimDevice.F67392D9-A327-4217-B924-5DA0918415E5[811] (com.apple.security.cloudkeychainproxy3): Service only ran for 0 seconds. Pushing respawn out by 10 seconds.\u0022 \u002B Environment.NewLine;\r\n    var tempFilename = Path.GetTempFileName();\r\n    File.WriteAllText(tempFilename, previousLog);\r\n    var capturedFilename = Path.GetTempFileName();\r\n    using var captureLog = new CaptureLog(capturedFilename, tempFilename, false);\r\n    captureLog.StartCapture();\r\n    File.AppendAllText(tempFilename, currentRunLog);\r\n    captureLog.StopCapture();\r\n    var appBundleInformation = new AppBundleInformation(\u0022net.dot.HelloiOS\u0022, \u0022net.dot.HelloiOS\u0022, \u0022some/path\u0022, \u0022some/path\u0022, false, null);\r\n    var exitCode = new iOSExitCodeDetector().DetectExitCode(appBundleInformation, captureLog);\r\n    Assert.Equal(72, exitCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "InstallOrchestratorTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.Apple.Tests",
    "Methods": [
      {
        "Name": "OrchestrateSimulatorInstallationTest",
        "Body": "{\r\n    // Setup\r\n    SetupInstall(_simulator.Object);\r\n    SetupUninstall(_simulator.Object, 1); // This can fail as this is the first purge of the app before we install it\r\n    var testTarget = new TestTargetOs(TestTarget.Simulator_iOS64, \u002213.5\u0022);\r\n    // Act\r\n    var result = await _installOrchestrator.OrchestrateInstall(testTarget, null, AppPath, TimeSpan.FromMinutes(30), includeWirelessDevices: false, resetSimulator: false, enableLldb: false, new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.SUCCESS, result);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, null, It.IsAny\u003CILog\u003E(), false, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    VerifyDiagnosticData(testTarget);\r\n    _appInstaller.Verify(x =\u003E x.InstallApp(_appBundleInformation, testTarget, _simulator.Object, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateSimulatorInstallationWithResetTest",
        "Body": "{\r\n    // Setup\r\n    SetupInstall(_simulator.Object);\r\n    SetupUninstall(_simulator.Object, 1); // This can fail as this is the first purge of the app before we install it\r\n    var testTarget = new TestTargetOs(TestTarget.Simulator_tvOS, \u002213.5\u0022);\r\n    // Act\r\n    var result = await _installOrchestrator.OrchestrateInstall(testTarget, null, AppPath, TimeSpan.FromMinutes(30), includeWirelessDevices: true, resetSimulator: true, enableLldb: true, new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.SUCCESS, result);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, null, It.IsAny\u003CILog\u003E(), true, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    VerifySimulatorReset(true);\r\n    VerifySimulatorCleanUp(false); // Install doesn\u0027t end with a cleanup so that the app stays behind\r\n    VerifyDiagnosticData(testTarget);\r\n    _appInstaller.Verify(x =\u003E x.InstallApp(_appBundleInformation, testTarget, _simulator.Object, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateDeviceInstallationTest",
        "Body": "{\r\n    // Setup\r\n    SetupInstall(_device.Object);\r\n    SetupUninstall(_device.Object, 1); // This can fail as this is the first purge of the app before we install it\r\n    var testTarget = new TestTargetOs(TestTarget.Device_iOS, \u002214.2\u0022);\r\n    // Act\r\n    var result = await _installOrchestrator.OrchestrateInstall(testTarget, null, AppPath, TimeSpan.FromMinutes(30), includeWirelessDevices: false, resetSimulator: false, enableLldb: true, new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.SUCCESS, result);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    VerifyDiagnosticData(testTarget);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, null, It.IsAny\u003CILog\u003E(), false, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _appInstaller.Verify(x =\u003E x.InstallApp(_appBundleInformation, testTarget, _device.Object, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateFailedDeviceInstallationTest",
        "Body": "{\r\n    // Setup\r\n    SetupInstall(_device.Object, 1);\r\n    SetupUninstall(_device.Object, 1); // This can fail as this is the first purge of the app before we install it\r\n    var failure = new KnownIssue(\u0022Some failure\u0022, suggestedExitCode: (int)ExitCode.APP_NOT_SIGNED);\r\n    _errorKnowledgeBase.Setup(x =\u003E x.IsKnownInstallIssue(It.IsAny\u003CIFileBackedLog\u003E(), out failure)).Returns(true).Verifiable();\r\n    var testTarget = new TestTargetOs(TestTarget.Device_iOS, \u002214.2\u0022);\r\n    // Act\r\n    var result = await _installOrchestrator.OrchestrateInstall(testTarget, null, AppPath, TimeSpan.FromMinutes(30), includeWirelessDevices: false, resetSimulator: false, enableLldb: true, new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.APP_NOT_SIGNED, result);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, null, It.IsAny\u003CILog\u003E(), false, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    VerifyDiagnosticData(testTarget);\r\n    _appInstaller.Verify(x =\u003E x.InstallApp(_appBundleInformation, testTarget, _device.Object, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateMacCatalystInstallationTest",
        "Body": "{\r\n    // Setup\r\n    _appInstaller.Reset();\r\n    _appUninstaller.Reset();\r\n    _deviceFinder.Reset();\r\n    var testTarget = new TestTargetOs(TestTarget.MacCatalyst, null);\r\n    // Act\r\n    var result = await _installOrchestrator.OrchestrateInstall(testTarget, null, AppPath, TimeSpan.FromMinutes(30), includeWirelessDevices: false, resetSimulator: false, enableLldb: true, new CancellationToken());\r\n    // Verify\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, It.IsAny\u003Cstring\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003Cbool\u003E(), It.IsAny\u003Cbool\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Never);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    _appInstaller.VerifyNoOtherCalls();\r\n    _appUninstaller.VerifyNoOtherCalls();\r\n    _deviceFinder.VerifyNoOtherCalls();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateDeviceInstallationWhenNoDeviceTest",
        "Body": "{\r\n    // Setup\r\n    _deviceFinder.Reset();\r\n    _deviceFinder.Setup(x =\u003E x.FindDevice(It.IsAny\u003CTestTargetOs\u003E(), It.IsAny\u003Cstring?\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003Cbool\u003E(), It.IsAny\u003Cbool\u003E(), It.IsAny\u003CCancellationToken\u003E())).ThrowsAsync(new NoDeviceFoundException());\r\n    var testTarget = new TestTargetOs(TestTarget.Device_iOS, \u002214.2\u0022);\r\n    // Act\r\n    var result = await _installOrchestrator.OrchestrateInstall(testTarget, null, AppPath, TimeSpan.FromMinutes(30), includeWirelessDevices: false, resetSimulator: false, enableLldb: true, new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.DEVICE_NOT_FOUND, result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "JustRunOrchestratorTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.Apple.Tests",
    "Methods": [
      {
        "Name": "OrchestrateSimulatorJustRunTest",
        "Body": "{\r\n    // Setup\r\n    var testTarget = new TestTargetOs(TestTarget.Simulator_iOS64, \u002213.5\u0022);\r\n    var envVars = new[]\r\n    {\r\n        (\u0022envVar1\u0022, \u0022value1\u0022),\r\n        (\u0022envVar2\u0022, \u0022value2\u0022)\r\n    };\r\n    _iOSExitCodeDetector.Setup(x =\u003E x.DetectExitCode(_appBundleInformation, It.IsAny\u003CIReadableLog\u003E())).Returns(100).Verifiable();\r\n    _appRunner.Setup(x =\u003E x.RunApp(_appBundleInformation, testTarget, _simulator.Object, null, TimeSpan.FromMinutes(30), false, true, It.IsAny\u003CIEnumerable\u003Cstring\u003E\u003E(), envVars, It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(new ProcessExecutionResult { ExitCode = 0, TimedOut = false, }).Verifiable();\r\n    // Act\r\n    var result = await _justRunOrchestrator.OrchestrateRun(BundleIdentifier, testTarget, null, TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(3), expectedExitCode: 100, includeWirelessDevices: false, enableLldb: false, signalAppEnd: false, waitForExit: true, envVars, Array.Empty\u003Cstring\u003E(), new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.SUCCESS, result);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, null, It.IsAny\u003CILog\u003E(), false, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    VerifyDiagnosticData(testTarget);\r\n    _iOSExitCodeDetector.VerifyAll();\r\n    _appRunner.VerifyAll();\r\n    _appInstaller.VerifyNoOtherCalls();\r\n    _appUninstaller.VerifyNoOtherCalls();\r\n    _simulator.Verify(x =\u003E x.Boot(_mainLog.Object, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _simulator.Verify(x =\u003E x.GetAppBundlePath(_mainLog.Object, BundleIdentifier, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateDeviceJustRunTest",
        "Body": "{\r\n    // Setup\r\n    var testTarget = new TestTargetOs(TestTarget.Device_iOS, \u002214.2\u0022);\r\n    _iOSExitCodeDetector.Setup(x =\u003E x.DetectExitCode(It.Is\u003CAppBundleInformation\u003E(info =\u003E info.BundleIdentifier == BundleIdentifier), It.IsAny\u003CIReadableLog\u003E())).Returns(100).Verifiable();\r\n    var extraArguments = new[]\r\n    {\r\n        \u0022--some arg1\u0022,\r\n        \u0022--some arg2\u0022\r\n    };\r\n    _appRunner.Setup(x =\u003E x.RunApp(It.Is\u003CAppBundleInformation\u003E(info =\u003E info.BundleIdentifier == BundleIdentifier), testTarget, _device.Object, null, TimeSpan.FromMinutes(30), false, true, extraArguments, It.IsAny\u003CIEnumerable\u003C(string, string)\u003E\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(new ProcessExecutionResult { ExitCode = 0, TimedOut = false, }).Verifiable();\r\n    // Act\r\n    var result = await _justRunOrchestrator.OrchestrateRun(BundleIdentifier, testTarget, DeviceName, TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(3), expectedExitCode: 100, includeWirelessDevices: true, enableLldb: false, signalAppEnd: false, waitForExit: true, Array.Empty\u003C(string, string)\u003E(), extraArguments, new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.SUCCESS, result);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, DeviceName, It.IsAny\u003CILog\u003E(), true, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    VerifyDiagnosticData(testTarget);\r\n    _iOSExitCodeDetector.VerifyAll();\r\n    _appRunner.VerifyAll();\r\n    _appInstaller.VerifyNoOtherCalls();\r\n    _appUninstaller.VerifyNoOtherCalls();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateFailedSimulatorJustRunTest",
        "Body": "{\r\n    // Setup\r\n    var testTarget = new TestTargetOs(TestTarget.Simulator_iOS64, \u002213.5\u0022);\r\n    _appRunner.Setup(x =\u003E x.RunApp(_appBundleInformation, testTarget, _simulator.Object, null, TimeSpan.FromMinutes(30), false, true, It.IsAny\u003CIEnumerable\u003Cstring\u003E\u003E(), It.IsAny\u003CIEnumerable\u003C(string, string)\u003E\u003E(), It.IsAny\u003CCancellationToken\u003E())).ThrowsAsync(new Exception()).Verifiable();\r\n    var failure = new KnownIssue(\u0022Some failure\u0022, suggestedExitCode: (int)ExitCode.SIMULATOR_FAILURE);\r\n    _errorKnowledgeBase.Setup(x =\u003E x.IsKnownTestIssue(It.IsAny\u003CIFileBackedLog\u003E(), out failure)).Returns(true).Verifiable();\r\n    // Act\r\n    var result = await _justRunOrchestrator.OrchestrateRun(BundleIdentifier, testTarget, null, TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(3), expectedExitCode: 100, includeWirelessDevices: false, enableLldb: true, signalAppEnd: false, waitForExit: true, Array.Empty\u003C(string, string)\u003E(), Array.Empty\u003Cstring\u003E(), new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.SIMULATOR_FAILURE, result);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, null, It.IsAny\u003CILog\u003E(), false, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    VerifyDiagnosticData(testTarget);\r\n    _errorKnowledgeBase.VerifyAll();\r\n    _appRunner.VerifyAll();\r\n    _appInstaller.VerifyNoOtherCalls();\r\n    _appUninstaller.VerifyNoOtherCalls();\r\n    _simulator.Verify(x =\u003E x.Boot(_mainLog.Object, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _simulator.Verify(x =\u003E x.GetAppBundlePath(_mainLog.Object, BundleIdentifier, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateFailedDeviceJustRunTest",
        "Body": "{\r\n    // Setup\r\n    var testTarget = new TestTargetOs(TestTarget.Device_iOS, \u002214.2\u0022);\r\n    _iOSExitCodeDetector.Setup(x =\u003E x.DetectExitCode(It.Is\u003CAppBundleInformation\u003E(info =\u003E info.BundleIdentifier == BundleIdentifier), It.IsAny\u003CIReadableLog\u003E())).Returns(200).Verifiable();\r\n    var extraArguments = new[]\r\n    {\r\n        \u0022--some arg1\u0022,\r\n        \u0022--some arg2\u0022\r\n    };\r\n    _appRunner.Setup(x =\u003E x.RunApp(It.Is\u003CAppBundleInformation\u003E(info =\u003E info.BundleIdentifier == BundleIdentifier), testTarget, _device.Object, null, TimeSpan.FromMinutes(30), true, true, extraArguments, It.IsAny\u003CIEnumerable\u003C(string, string)\u003E\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(new ProcessExecutionResult { ExitCode = 0, TimedOut = false, }).Verifiable();\r\n    var failure = new KnownIssue(\u0022Some failure\u0022, suggestedExitCode: (int)ExitCode.DEVICE_FAILURE);\r\n    _errorKnowledgeBase.Setup(x =\u003E x.IsKnownTestIssue(It.IsAny\u003CIFileBackedLog\u003E(), out failure)).Returns(true).Verifiable();\r\n    // Act\r\n    var result = await _justRunOrchestrator.OrchestrateRun(BundleIdentifier, testTarget, DeviceName, TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(3), expectedExitCode: 100, includeWirelessDevices: true, enableLldb: false, signalAppEnd: true, waitForExit: true, Array.Empty\u003C(string, string)\u003E(), extraArguments, new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.DEVICE_FAILURE, result);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, DeviceName, It.IsAny\u003CILog\u003E(), true, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    VerifyDiagnosticData(testTarget);\r\n    _iOSExitCodeDetector.VerifyAll();\r\n    _appRunner.VerifyAll();\r\n    _appInstaller.VerifyNoOtherCalls();\r\n    _appUninstaller.VerifyNoOtherCalls();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateMacCatalystJustRunTest",
        "Body": "{\r\n    // Setup\r\n    _appInstaller.Reset();\r\n    _appUninstaller.Reset();\r\n    _deviceFinder.Reset();\r\n    var testTarget = new TestTargetOs(TestTarget.MacCatalyst, null);\r\n    var envVars = new[]\r\n    {\r\n        (\u0022envVar1\u0022, \u0022value1\u0022),\r\n        (\u0022envVar2\u0022, \u0022value2\u0022)\r\n    };\r\n    _macCatalystExitCodeDetector.Setup(x =\u003E x.DetectExitCode(It.Is\u003CAppBundleInformation\u003E(info =\u003E info.BundleIdentifier == BundleIdentifier), It.IsAny\u003CIReadableLog\u003E())).Returns(100).Verifiable();\r\n    _appRunner.Setup(x =\u003E x.RunMacCatalystApp(It.Is\u003CAppBundleInformation\u003E(info =\u003E info.BundleIdentifier == BundleIdentifier), TimeSpan.FromMinutes(30), true, true, It.IsAny\u003CIEnumerable\u003Cstring\u003E\u003E(), envVars, It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(new ProcessExecutionResult { ExitCode = 0, TimedOut = false, }).Verifiable();\r\n    // Act\r\n    var result = await _justRunOrchestrator.OrchestrateRun(BundleIdentifier, testTarget, null, TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(3), expectedExitCode: 100, includeWirelessDevices: false, enableLldb: false, signalAppEnd: true, waitForExit: true, envVars, Array.Empty\u003Cstring\u003E(), new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.SUCCESS, result);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    _macCatalystExitCodeDetector.VerifyAll();\r\n    _appRunner.VerifyAll();\r\n    _deviceFinder.VerifyNoOtherCalls();\r\n    _appInstaller.VerifyNoOtherCalls();\r\n    _appUninstaller.VerifyNoOtherCalls();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "JustTestOrchestratorTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.Apple.Tests",
    "Methods": [
      {
        "Name": "OrchestrateSimulatorJustTestTest",
        "Body": "{\r\n    // Setup\r\n    var testTarget = new TestTargetOs(TestTarget.Simulator_iOS64, \u002213.5\u0022);\r\n    var envVars = new[]\r\n    {\r\n        (\u0022envVar1\u0022, \u0022value1\u0022),\r\n        (\u0022envVar2\u0022, \u0022value2\u0022)\r\n    };\r\n    _appTester.Setup(x =\u003E x.TestApp(_appBundleInformation, testTarget, _simulator.Object, null, TimeSpan.FromMinutes(30), It.IsAny\u003CTimeSpan\u003E(), false, It.IsAny\u003CIEnumerable\u003Cstring\u003E\u003E(), envVars, It.IsAny\u003CXmlResultJargon\u003E(), It.IsAny\u003Cstring[]?\u003E(), It.IsAny\u003Cstring[]?\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync((TestExecutingResult.Succeeded, SuccessResultLine)).Verifiable();\r\n    // Act\r\n    var result = await _justTestOrchestrator.OrchestrateTest(BundleIdentifier, testTarget, null, TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(3), CommunicationChannel.UsbTunnel, XmlResultJargon.xUnit, Array.Empty\u003Cstring\u003E(), Array.Empty\u003Cstring\u003E(), includeWirelessDevices: false, enableLldb: false, signalAppEnd: false, envVars, Array.Empty\u003Cstring\u003E(), new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.SUCCESS, result);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, null, It.IsAny\u003CILog\u003E(), false, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    VerifyDiagnosticData(testTarget);\r\n    _appTester.VerifyAll();\r\n    _appInstaller.VerifyNoOtherCalls();\r\n    _appUninstaller.VerifyNoOtherCalls();\r\n    _simulator.Verify(x =\u003E x.Boot(_mainLog.Object, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _simulator.Verify(x =\u003E x.GetAppBundlePath(_mainLog.Object, BundleIdentifier, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateDeviceJustTestTest",
        "Body": "{\r\n    // Setup\r\n    var testTarget = new TestTargetOs(TestTarget.Device_iOS, \u002214.2\u0022);\r\n    var extraArguments = new[]\r\n    {\r\n        \u0022--some arg1\u0022,\r\n        \u0022--some arg2\u0022\r\n    };\r\n    _appTester.Setup(x =\u003E x.TestApp(It.Is\u003CAppBundleInformation\u003E(info =\u003E info.BundleIdentifier == BundleIdentifier), testTarget, _device.Object, null, TimeSpan.FromMinutes(30), It.IsAny\u003CTimeSpan\u003E(), false, extraArguments, It.IsAny\u003CIEnumerable\u003C(string, string)\u003E\u003E(), It.IsAny\u003CXmlResultJargon\u003E(), It.IsAny\u003Cstring[]?\u003E(), It.IsAny\u003Cstring[]?\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync((TestExecutingResult.Succeeded, SuccessResultLine)).Verifiable();\r\n    // Act\r\n    var result = await _justTestOrchestrator.OrchestrateTest(BundleIdentifier, testTarget, DeviceName, TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(3), CommunicationChannel.UsbTunnel, XmlResultJargon.xUnit, Array.Empty\u003Cstring\u003E(), Array.Empty\u003Cstring\u003E(), includeWirelessDevices: true, enableLldb: false, signalAppEnd: false, Array.Empty\u003C(string, string)\u003E(), extraArguments, new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.SUCCESS, result);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, DeviceName, It.IsAny\u003CILog\u003E(), true, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    VerifyDiagnosticData(testTarget);\r\n    _appTester.VerifyAll();\r\n    _appInstaller.VerifyNoOtherCalls();\r\n    _appUninstaller.VerifyNoOtherCalls();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateFailedSimulatorJustTestTest",
        "Body": "{\r\n    // Setup\r\n    var testTarget = new TestTargetOs(TestTarget.Simulator_iOS64, \u002213.5\u0022);\r\n    _appTester.Setup(x =\u003E x.TestApp(_appBundleInformation, testTarget, _simulator.Object, null, TimeSpan.FromMinutes(30), It.IsAny\u003CTimeSpan\u003E(), false, It.IsAny\u003CIEnumerable\u003Cstring\u003E\u003E(), It.IsAny\u003CIEnumerable\u003C(string, string)\u003E\u003E(), It.IsAny\u003CXmlResultJargon\u003E(), It.IsAny\u003Cstring[]?\u003E(), It.IsAny\u003Cstring[]?\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync((TestExecutingResult.Crashed, \u0022App never reported back\u0022)).Verifiable();\r\n    var failure = new KnownIssue(\u0022Some failure\u0022, suggestedExitCode: (int)ExitCode.APP_CRASH);\r\n    _errorKnowledgeBase.Setup(x =\u003E x.IsKnownTestIssue(It.IsAny\u003CIFileBackedLog\u003E(), out failure)).Returns(true).Verifiable();\r\n    // Act\r\n    var result = await _justTestOrchestrator.OrchestrateTest(BundleIdentifier, testTarget, null, TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(3), CommunicationChannel.UsbTunnel, XmlResultJargon.xUnit, Array.Empty\u003Cstring\u003E(), Array.Empty\u003Cstring\u003E(), includeWirelessDevices: false, enableLldb: true, signalAppEnd: false, Array.Empty\u003C(string, string)\u003E(), Array.Empty\u003Cstring\u003E(), new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.APP_CRASH, result);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, null, It.IsAny\u003CILog\u003E(), false, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    VerifyDiagnosticData(testTarget);\r\n    _errorKnowledgeBase.VerifyAll();\r\n    _appTester.VerifyAll();\r\n    _appInstaller.VerifyNoOtherCalls();\r\n    _appUninstaller.VerifyNoOtherCalls();\r\n    _simulator.Verify(x =\u003E x.Boot(_mainLog.Object, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _simulator.Verify(x =\u003E x.GetAppBundlePath(_mainLog.Object, BundleIdentifier, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateFailedDeviceJustTestTest",
        "Body": "{\r\n    // Setup\r\n    var testTarget = new TestTargetOs(TestTarget.Device_iOS, \u002214.2\u0022);\r\n    var extraArguments = new[]\r\n    {\r\n        \u0022--some arg1\u0022,\r\n        \u0022--some arg2\u0022\r\n    };\r\n    _appTester.Setup(x =\u003E x.TestApp(It.Is\u003CAppBundleInformation\u003E(info =\u003E info.BundleIdentifier == BundleIdentifier), testTarget, _device.Object, null, TimeSpan.FromMinutes(30), It.IsAny\u003CTimeSpan\u003E(), true, extraArguments, It.IsAny\u003CIEnumerable\u003C(string, string)\u003E\u003E(), It.IsAny\u003CXmlResultJargon\u003E(), It.IsAny\u003Cstring[]?\u003E(), It.IsAny\u003Cstring[]?\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync((TestExecutingResult.TimedOut, SuccessResultLine)).Verifiable();\r\n    // Act\r\n    var result = await _justTestOrchestrator.OrchestrateTest(BundleIdentifier, testTarget, DeviceName, TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(3), CommunicationChannel.UsbTunnel, XmlResultJargon.xUnit, Array.Empty\u003Cstring\u003E(), Array.Empty\u003Cstring\u003E(), includeWirelessDevices: true, enableLldb: false, signalAppEnd: true, Array.Empty\u003C(string, string)\u003E(), extraArguments, new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.TIMED_OUT, result);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, DeviceName, It.IsAny\u003CILog\u003E(), true, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    VerifyDiagnosticData(testTarget);\r\n    _appTester.VerifyAll();\r\n    _appInstaller.VerifyNoOtherCalls();\r\n    _appUninstaller.VerifyNoOtherCalls();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateMacCatalystJustTestTest",
        "Body": "{\r\n    // Setup\r\n    _appInstaller.Reset();\r\n    _appUninstaller.Reset();\r\n    _deviceFinder.Reset();\r\n    var testTarget = new TestTargetOs(TestTarget.MacCatalyst, null);\r\n    var envVars = new[]\r\n    {\r\n        (\u0022envVar1\u0022, \u0022value1\u0022),\r\n        (\u0022envVar2\u0022, \u0022value2\u0022)\r\n    };\r\n    _appTester.Setup(x =\u003E x.TestMacCatalystApp(It.Is\u003CAppBundleInformation\u003E(info =\u003E info.BundleIdentifier == BundleIdentifier), TimeSpan.FromMinutes(30), It.IsAny\u003CTimeSpan\u003E(), true, It.IsAny\u003CIEnumerable\u003Cstring\u003E\u003E(), envVars, It.IsAny\u003CXmlResultJargon\u003E(), It.IsAny\u003Cstring[]?\u003E(), It.IsAny\u003Cstring[]?\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync((TestExecutingResult.Failed, \u0022Tests failed\u0022)).Verifiable();\r\n    // Act\r\n    var result = await _justTestOrchestrator.OrchestrateTest(BundleIdentifier, testTarget, null, TimeSpan.FromMinutes(30), It.IsAny\u003CTimeSpan\u003E(), CommunicationChannel.UsbTunnel, XmlResultJargon.xUnit, Array.Empty\u003Cstring\u003E(), Array.Empty\u003Cstring\u003E(), includeWirelessDevices: false, enableLldb: false, signalAppEnd: true, envVars, Array.Empty\u003Cstring\u003E(), new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.TESTS_FAILED, result);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    _appTester.VerifyAll();\r\n    _deviceFinder.VerifyNoOtherCalls();\r\n    _appInstaller.VerifyNoOtherCalls();\r\n    _appUninstaller.VerifyNoOtherCalls();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RunOrchestratorTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.Apple.Tests",
    "Methods": [
      {
        "Name": "OrchestrateSimulatorRunTest",
        "Body": "{\r\n    // Setup\r\n    var testTarget = new TestTargetOs(TestTarget.Simulator_iOS64, \u002213.5\u0022);\r\n    var envVars = new[]\r\n    {\r\n        (\u0022envVar1\u0022, \u0022value1\u0022),\r\n        (\u0022envVar2\u0022, \u0022value2\u0022)\r\n    };\r\n    _iOSExitCodeDetector.Setup(x =\u003E x.DetectExitCode(_appBundleInformation, It.IsAny\u003CIReadableLog\u003E())).Returns(100).Verifiable();\r\n    _appRunner.Setup(x =\u003E x.RunApp(_appBundleInformation, testTarget, _simulator.Object, null, TimeSpan.FromMinutes(30), false, true, It.IsAny\u003CIEnumerable\u003Cstring\u003E\u003E(), envVars, It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(new ProcessExecutionResult { ExitCode = 0, TimedOut = false, }).Verifiable();\r\n    // Act\r\n    var result = await _runOrchestrator.OrchestrateRun(AppPath, testTarget, null, TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(3), expectedExitCode: 100, includeWirelessDevices: false, resetSimulator: true, enableLldb: false, signalAppEnd: false, waitForExit: true, envVars, Array.Empty\u003Cstring\u003E(), new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.SUCCESS, result);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, null, It.IsAny\u003CILog\u003E(), false, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    VerifySimulatorReset(true);\r\n    VerifySimulatorCleanUp(true);\r\n    VerifyDiagnosticData(testTarget);\r\n    _appInstaller.Verify(x =\u003E x.InstallApp(_appBundleInformation, testTarget, _simulator.Object, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _iOSExitCodeDetector.VerifyAll();\r\n    _appRunner.VerifyAll();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateDeviceRunTest",
        "Body": "{\r\n    // Setup\r\n    var testTarget = new TestTargetOs(TestTarget.Device_iOS, \u002214.2\u0022);\r\n    _iOSExitCodeDetector.Setup(x =\u003E x.DetectExitCode(_appBundleInformation, It.IsAny\u003CIReadableLog\u003E())).Returns(100).Verifiable();\r\n    var extraArguments = new[]\r\n    {\r\n        \u0022--some arg1\u0022,\r\n        \u0022--some arg2\u0022\r\n    };\r\n    _appRunner.Setup(x =\u003E x.RunApp(_appBundleInformation, testTarget, _device.Object, null, TimeSpan.FromMinutes(30), false, true, extraArguments, It.IsAny\u003CIEnumerable\u003C(string, string)\u003E\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(new ProcessExecutionResult { ExitCode = 0, TimedOut = false, }).Verifiable();\r\n    // Act\r\n    var result = await _runOrchestrator.OrchestrateRun(AppPath, testTarget, DeviceName, TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(3), expectedExitCode: 100, includeWirelessDevices: true, resetSimulator: false, enableLldb: false, signalAppEnd: false, waitForExit: true, Array.Empty\u003C(string, string)\u003E(), extraArguments, new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.SUCCESS, result);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, DeviceName, It.IsAny\u003CILog\u003E(), true, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    VerifyDiagnosticData(testTarget);\r\n    _appInstaller.Verify(x =\u003E x.InstallApp(_appBundleInformation, testTarget, _device.Object, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _iOSExitCodeDetector.VerifyAll();\r\n    _appRunner.VerifyAll();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateFailedSimulatorRunTest",
        "Body": "{\r\n    // Setup\r\n    var testTarget = new TestTargetOs(TestTarget.Simulator_iOS64, \u002213.5\u0022);\r\n    _appRunner.Setup(x =\u003E x.RunApp(_appBundleInformation, testTarget, _simulator.Object, null, TimeSpan.FromMinutes(30), false, true, It.IsAny\u003CIEnumerable\u003Cstring\u003E\u003E(), It.IsAny\u003CIEnumerable\u003C(string, string)\u003E\u003E(), It.IsAny\u003CCancellationToken\u003E())).ThrowsAsync(new Exception()).Verifiable();\r\n    var failure = new KnownIssue(\u0022Some failure\u0022, suggestedExitCode: (int)ExitCode.SIMULATOR_FAILURE);\r\n    _errorKnowledgeBase.Setup(x =\u003E x.IsKnownTestIssue(It.IsAny\u003CIFileBackedLog\u003E(), out failure)).Returns(true).Verifiable();\r\n    // Act\r\n    var result = await _runOrchestrator.OrchestrateRun(AppPath, testTarget, null, TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(3), expectedExitCode: 100, includeWirelessDevices: false, resetSimulator: false, enableLldb: true, signalAppEnd: false, waitForExit: true, Array.Empty\u003C(string, string)\u003E(), Array.Empty\u003Cstring\u003E(), new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.SIMULATOR_FAILURE, result);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, null, It.IsAny\u003CILog\u003E(), false, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    VerifyDiagnosticData(testTarget);\r\n    _appInstaller.Verify(x =\u003E x.InstallApp(_appBundleInformation, testTarget, _simulator.Object, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _errorKnowledgeBase.VerifyAll();\r\n    _appRunner.VerifyAll();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateFailedDeviceRunTest",
        "Body": "{\r\n    // Setup\r\n    var testTarget = new TestTargetOs(TestTarget.Device_iOS, \u002214.2\u0022);\r\n    _iOSExitCodeDetector.Setup(x =\u003E x.DetectExitCode(_appBundleInformation, It.IsAny\u003CIReadableLog\u003E())).Returns(200).Verifiable();\r\n    var extraArguments = new[]\r\n    {\r\n        \u0022--some arg1\u0022,\r\n        \u0022--some arg2\u0022\r\n    };\r\n    _appRunner.Setup(x =\u003E x.RunApp(_appBundleInformation, testTarget, _device.Object, null, TimeSpan.FromMinutes(30), true, true, extraArguments, It.IsAny\u003CIEnumerable\u003C(string, string)\u003E\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(new ProcessExecutionResult { ExitCode = 0, TimedOut = false, }).Verifiable();\r\n    var failure = new KnownIssue(\u0022Some failure\u0022, suggestedExitCode: (int)ExitCode.DEVICE_FAILURE);\r\n    _errorKnowledgeBase.Setup(x =\u003E x.IsKnownTestIssue(It.IsAny\u003CIFileBackedLog\u003E(), out failure)).Returns(true).Verifiable();\r\n    // Act\r\n    var result = await _runOrchestrator.OrchestrateRun(AppPath, testTarget, DeviceName, TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(3), expectedExitCode: 100, includeWirelessDevices: true, resetSimulator: false, enableLldb: false, signalAppEnd: true, waitForExit: true, Array.Empty\u003C(string, string)\u003E(), extraArguments, new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.DEVICE_FAILURE, result);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, DeviceName, It.IsAny\u003CILog\u003E(), true, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    VerifyDiagnosticData(testTarget);\r\n    _appInstaller.Verify(x =\u003E x.InstallApp(_appBundleInformation, testTarget, _device.Object, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _iOSExitCodeDetector.VerifyAll();\r\n    _appRunner.VerifyAll();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateMacCatalystRunTest",
        "Body": "{\r\n    // Setup\r\n    _appInstaller.Reset();\r\n    _appUninstaller.Reset();\r\n    _deviceFinder.Reset();\r\n    var testTarget = new TestTargetOs(TestTarget.MacCatalyst, null);\r\n    var envVars = new[]\r\n    {\r\n        (\u0022envVar1\u0022, \u0022value1\u0022),\r\n        (\u0022envVar2\u0022, \u0022value2\u0022)\r\n    };\r\n    _macCatalystExitCodeDetector.Setup(x =\u003E x.DetectExitCode(_appBundleInformation, It.IsAny\u003CIReadableLog\u003E())).Returns(100).Verifiable();\r\n    _appRunner.Setup(x =\u003E x.RunMacCatalystApp(_appBundleInformation, TimeSpan.FromMinutes(30), true, true, It.IsAny\u003CIEnumerable\u003Cstring\u003E\u003E(), envVars, It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(new ProcessExecutionResult { ExitCode = 0, TimedOut = false, }).Verifiable();\r\n    // Act\r\n    var result = await _runOrchestrator.OrchestrateRun(AppPath, testTarget, null, TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(3), expectedExitCode: 100, includeWirelessDevices: false, resetSimulator: true, enableLldb: false, signalAppEnd: true, waitForExit: true, envVars, Array.Empty\u003Cstring\u003E(), new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.SUCCESS, result);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    _macCatalystExitCodeDetector.VerifyAll();\r\n    _appRunner.VerifyAll();\r\n    _deviceFinder.VerifyNoOtherCalls();\r\n    _appInstaller.VerifyNoOtherCalls();\r\n    _appUninstaller.VerifyNoOtherCalls();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateMacCatalystRunWithNoExitCodeTest",
        "Body": "{\r\n    // Setup\r\n    _appInstaller.Reset();\r\n    _appUninstaller.Reset();\r\n    _deviceFinder.Reset();\r\n    var testTarget = new TestTargetOs(TestTarget.MacCatalyst, null);\r\n    var envVars = new[]\r\n    {\r\n        (\u0022envVar1\u0022, \u0022value1\u0022),\r\n        (\u0022envVar2\u0022, \u0022value2\u0022)\r\n    };\r\n    _macCatalystExitCodeDetector.Setup(x =\u003E x.DetectExitCode(_appBundleInformation, It.IsAny\u003CIReadableLog\u003E())).Returns((int? )null).Verifiable();\r\n    _appRunner.Setup(x =\u003E x.RunMacCatalystApp(_appBundleInformation, TimeSpan.FromMinutes(30), true, true, It.IsAny\u003CIEnumerable\u003Cstring\u003E\u003E(), envVars, It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(new ProcessExecutionResult { ExitCode = 0, TimedOut = false, }).Verifiable();\r\n    // Act\r\n    var result = await _runOrchestrator.OrchestrateRun(AppPath, testTarget, null, TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(3), expectedExitCode: 100, includeWirelessDevices: false, resetSimulator: true, enableLldb: false, signalAppEnd: true, waitForExit: true, envVars, Array.Empty\u003Cstring\u003E(), new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.RETURN_CODE_NOT_SET, result);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    _macCatalystExitCodeDetector.VerifyAll();\r\n    _appRunner.VerifyAll();\r\n    _deviceFinder.VerifyNoOtherCalls();\r\n    _appInstaller.VerifyNoOtherCalls();\r\n    _appUninstaller.VerifyNoOtherCalls();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateNoWaitDeviceRunTest",
        "Body": "{\r\n    // Setup\r\n    var testTarget = new TestTargetOs(TestTarget.Device_iOS, \u002214.2\u0022);\r\n    var extraArguments = new[]\r\n    {\r\n        \u0022--some arg1\u0022,\r\n        \u0022--some arg2\u0022\r\n    };\r\n    _appRunner.Setup(x =\u003E x.RunApp(_appBundleInformation, testTarget, _device.Object, null, TimeSpan.FromMinutes(30), false, false, extraArguments, It.IsAny\u003CIEnumerable\u003C(string, string)\u003E\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(new ProcessExecutionResult { ExitCode = 0, TimedOut = false, }).Verifiable();\r\n    // Act\r\n    var result = await _runOrchestrator.OrchestrateRun(AppPath, testTarget, DeviceName, TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(3), expectedExitCode: 100, includeWirelessDevices: true, resetSimulator: true, enableLldb: false, signalAppEnd: false, waitForExit: false, Array.Empty\u003C(string, string)\u003E(), extraArguments, new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.SUCCESS, result);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, DeviceName, It.IsAny\u003CILog\u003E(), true, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    VerifyDiagnosticData(testTarget);\r\n    _appInstaller.Verify(x =\u003E x.InstallApp(_appBundleInformation, testTarget, _device.Object, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _appUninstaller.Verify(x =\u003E x.UninstallDeviceApp(_device.Object, BundleIdentifier, It.IsAny\u003CCancellationToken\u003E()), Times.Once); // Once in preparation, but not a second time after we\u0027re done\r\n    _appRunner.VerifyAll();\r\n    _iOSExitCodeDetector.VerifyNoOtherCalls();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateNoWaitSimulatorRunTest",
        "Body": "{\r\n    // Setup\r\n    var testTarget = new TestTargetOs(TestTarget.Simulator_iOS64, \u002213.5\u0022);\r\n    var extraArguments = new[]\r\n    {\r\n        \u0022--some arg1\u0022,\r\n        \u0022--some arg2\u0022\r\n    };\r\n    _appRunner.Setup(x =\u003E x.RunApp(_appBundleInformation, testTarget, _simulator.Object, null, TimeSpan.FromMinutes(30), false, false, extraArguments, It.IsAny\u003CIEnumerable\u003C(string, string)\u003E\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(new ProcessExecutionResult { ExitCode = 0, TimedOut = false, }).Verifiable();\r\n    // Act\r\n    var result = await _runOrchestrator.OrchestrateRun(AppPath, testTarget, null, TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(3), expectedExitCode: 100, includeWirelessDevices: true, resetSimulator: true, enableLldb: false, signalAppEnd: false, waitForExit: false, Array.Empty\u003C(string, string)\u003E(), extraArguments, new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.SUCCESS, result);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, null, It.IsAny\u003CILog\u003E(), true, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    VerifySimulatorReset(true);\r\n    VerifySimulatorCleanUp(false);\r\n    VerifyDiagnosticData(testTarget);\r\n    _appInstaller.Verify(x =\u003E x.InstallApp(_appBundleInformation, testTarget, _simulator.Object, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _appUninstaller.Verify(x =\u003E x.UninstallSimulatorApp(_simulator.Object, BundleIdentifier, It.IsAny\u003CCancellationToken\u003E()), Times.Never); // No preparation uninstall (because of reset), and then not at the end\r\n    _appRunner.VerifyAll();\r\n    _iOSExitCodeDetector.VerifyNoOtherCalls();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SimulatorResetOrchestratorTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.Apple.Tests",
    "Methods": [
      {
        "Name": "OrchestrateSimulatorResetTest",
        "Body": "{\r\n    // Setup\r\n    var testTarget = new TestTargetOs(TestTarget.Simulator_iOS64, \u002213.5\u0022);\r\n    // Act\r\n    var result = await _simulatorResetOrchestrator.OrchestrateSimulatorReset(testTarget, SimulatorName, TimeSpan.FromMinutes(30), new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.SUCCESS, result);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, SimulatorName, It.IsAny\u003CILog\u003E(), false, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    VerifySimulatorReset(true);\r\n    VerifySimulatorCleanUp(false);\r\n    _appInstaller.VerifyNoOtherCalls();\r\n    _appUninstaller.VerifyNoOtherCalls();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TryDeviceResetTest",
        "Body": "{\r\n    // Setup\r\n    var testTarget = new TestTargetOs(TestTarget.Device_iOS, \u002213.5\u0022);\r\n    _deviceFinder.Reset();\r\n    // Act\r\n    var result = await _simulatorResetOrchestrator.OrchestrateSimulatorReset(testTarget, null, TimeSpan.FromMinutes(30), new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.INVALID_ARGUMENTS, result);\r\n    _deviceFinder.VerifyNoOtherCalls();\r\n    _appInstaller.VerifyNoOtherCalls();\r\n    _appUninstaller.VerifyNoOtherCalls();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TryMacCatalystResetTest",
        "Body": "{\r\n    // Setup\r\n    var testTarget = new TestTargetOs(TestTarget.MacCatalyst, null);\r\n    _deviceFinder.Reset();\r\n    // Act\r\n    var result = await _simulatorResetOrchestrator.OrchestrateSimulatorReset(testTarget, null, TimeSpan.FromMinutes(30), new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.INVALID_ARGUMENTS, result);\r\n    _deviceFinder.VerifyNoOtherCalls();\r\n    _appInstaller.VerifyNoOtherCalls();\r\n    _appUninstaller.VerifyNoOtherCalls();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TestOrchestratorTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.Apple.Tests",
    "Methods": [
      {
        "Name": "OrchestrateSimulatorTestTest",
        "Body": "{\r\n    // Setup\r\n    var testTarget = new TestTargetOs(TestTarget.Simulator_iOS64, \u002213.5\u0022);\r\n    var envVars = new[]\r\n    {\r\n        (\u0022envVar1\u0022, \u0022value1\u0022),\r\n        (\u0022envVar2\u0022, \u0022value2\u0022)\r\n    };\r\n    _appTester.Setup(x =\u003E x.TestApp(_appBundleInformation, testTarget, _simulator.Object, null, TimeSpan.FromMinutes(30), It.IsAny\u003CTimeSpan\u003E(), false, It.IsAny\u003CIEnumerable\u003Cstring\u003E\u003E(), envVars, It.IsAny\u003CXmlResultJargon\u003E(), It.IsAny\u003Cstring[]?\u003E(), It.IsAny\u003Cstring[]?\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync((TestExecutingResult.Succeeded, SuccessResultLine)).Verifiable();\r\n    // Act\r\n    var result = await _testOrchestrator.OrchestrateTest(AppPath, testTarget, null, TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(3), CommunicationChannel.UsbTunnel, XmlResultJargon.xUnit, Array.Empty\u003Cstring\u003E(), Array.Empty\u003Cstring\u003E(), includeWirelessDevices: false, resetSimulator: true, enableLldb: false, signalAppEnd: false, envVars, Array.Empty\u003Cstring\u003E(), new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.SUCCESS, result);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, null, It.IsAny\u003CILog\u003E(), false, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    VerifySimulatorReset(true);\r\n    VerifySimulatorCleanUp(true);\r\n    VerifyDiagnosticData(testTarget);\r\n    _appInstaller.Verify(x =\u003E x.InstallApp(_appBundleInformation, testTarget, _simulator.Object, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _appTester.VerifyAll();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateDeviceTestTest",
        "Body": "{\r\n    // Setup\r\n    var testTarget = new TestTargetOs(TestTarget.Device_iOS, \u002214.2\u0022);\r\n    var extraArguments = new[]\r\n    {\r\n        \u0022--some arg1\u0022,\r\n        \u0022--some arg2\u0022\r\n    };\r\n    _appTester.Setup(x =\u003E x.TestApp(_appBundleInformation, testTarget, _device.Object, null, TimeSpan.FromMinutes(30), It.IsAny\u003CTimeSpan\u003E(), false, extraArguments, It.IsAny\u003CIEnumerable\u003C(string, string)\u003E\u003E(), It.IsAny\u003CXmlResultJargon\u003E(), It.IsAny\u003Cstring[]?\u003E(), It.IsAny\u003Cstring[]?\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync((TestExecutingResult.Succeeded, SuccessResultLine)).Verifiable();\r\n    // Act\r\n    var result = await _testOrchestrator.OrchestrateTest(AppPath, testTarget, DeviceName, TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(3), CommunicationChannel.UsbTunnel, XmlResultJargon.xUnit, Array.Empty\u003Cstring\u003E(), Array.Empty\u003Cstring\u003E(), includeWirelessDevices: true, resetSimulator: false, enableLldb: false, signalAppEnd: false, Array.Empty\u003C(string, string)\u003E(), extraArguments, new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.SUCCESS, result);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, DeviceName, It.IsAny\u003CILog\u003E(), true, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    VerifyDiagnosticData(testTarget);\r\n    _appInstaller.Verify(x =\u003E x.InstallApp(_appBundleInformation, testTarget, _device.Object, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _appTester.VerifyAll();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateFailedSimulatorTestTest",
        "Body": "{\r\n    // Setup\r\n    var testTarget = new TestTargetOs(TestTarget.Simulator_iOS64, \u002213.5\u0022);\r\n    _appTester.Setup(x =\u003E x.TestApp(_appBundleInformation, testTarget, _simulator.Object, null, TimeSpan.FromMinutes(30), It.IsAny\u003CTimeSpan\u003E(), false, It.IsAny\u003CIEnumerable\u003Cstring\u003E\u003E(), It.IsAny\u003CIEnumerable\u003C(string, string)\u003E\u003E(), It.IsAny\u003CXmlResultJargon\u003E(), It.IsAny\u003Cstring[]?\u003E(), It.IsAny\u003Cstring[]?\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync((TestExecutingResult.Crashed, \u0022App never reported back\u0022)).Verifiable();\r\n    var failure = new KnownIssue(\u0022Some failure\u0022, suggestedExitCode: (int)ExitCode.APP_CRASH);\r\n    _errorKnowledgeBase.Setup(x =\u003E x.IsKnownTestIssue(It.IsAny\u003CIFileBackedLog\u003E(), out failure)).Returns(true).Verifiable();\r\n    // Act\r\n    var result = await _testOrchestrator.OrchestrateTest(AppPath, testTarget, null, TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(3), CommunicationChannel.UsbTunnel, XmlResultJargon.xUnit, Array.Empty\u003Cstring\u003E(), Array.Empty\u003Cstring\u003E(), includeWirelessDevices: false, resetSimulator: false, enableLldb: true, signalAppEnd: false, Array.Empty\u003C(string, string)\u003E(), Array.Empty\u003Cstring\u003E(), new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.APP_CRASH, result);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, null, It.IsAny\u003CILog\u003E(), false, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    VerifyDiagnosticData(testTarget);\r\n    _appInstaller.Verify(x =\u003E x.InstallApp(_appBundleInformation, testTarget, _simulator.Object, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _errorKnowledgeBase.VerifyAll();\r\n    _appTester.VerifyAll();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateTimedOutSimulatorTestTest",
        "Body": "{\r\n    // Setup\r\n    var testTarget = new TestTargetOs(TestTarget.Simulator_iOS64, \u002213.5\u0022);\r\n    _appTester.Setup(x =\u003E x.TestApp(_appBundleInformation, testTarget, _simulator.Object, null, TimeSpan.FromMinutes(30), It.IsAny\u003CTimeSpan\u003E(), false, It.IsAny\u003CIEnumerable\u003Cstring\u003E\u003E(), It.IsAny\u003CIEnumerable\u003C(string, string)\u003E\u003E(), It.IsAny\u003CXmlResultJargon\u003E(), It.IsAny\u003Cstring[]?\u003E(), It.IsAny\u003Cstring[]?\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync((TestExecutingResult.Crashed, \u0022App never reported back\u0022)).Verifiable();\r\n    var failure = new KnownIssue(\u0022Some failure\u0022, suggestedExitCode: (int)ExitCode.APP_CRASH);\r\n    _errorKnowledgeBase.Setup(x =\u003E x.IsKnownTestIssue(It.IsAny\u003CIFileBackedLog\u003E(), out failure)).Returns(true).Verifiable();\r\n    var cts = new CancellationTokenSource();\r\n    _deviceFinder.Reset();\r\n    _deviceFinder.Setup(x =\u003E x.FindDevice(testTarget, null, It.IsAny\u003CILog\u003E(), false, true, It.IsAny\u003CCancellationToken\u003E())).Callback(() =\u003E cts.Cancel()).ReturnsAsync(new DevicePair(_simulator.Object, null));\r\n    // Act\r\n    var result = await _testOrchestrator.OrchestrateTest(AppPath, testTarget, null, TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(3), CommunicationChannel.UsbTunnel, XmlResultJargon.xUnit, Array.Empty\u003Cstring\u003E(), Array.Empty\u003Cstring\u003E(), includeWirelessDevices: false, resetSimulator: false, enableLldb: true, signalAppEnd: false, Array.Empty\u003C(string, string)\u003E(), Array.Empty\u003Cstring\u003E(), cts.Token);\r\n    // Verify\r\n    Assert.Equal(ExitCode.APP_LAUNCH_TIMEOUT, result);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateTimedOutSimulatorSearchTestTest",
        "Body": "{\r\n    // Setup\r\n    var testTarget = new TestTargetOs(TestTarget.Simulator_iOS64, \u002213.5\u0022);\r\n    _deviceFinder.Reset();\r\n    _deviceFinder.Setup(x =\u003E x.FindDevice(testTarget, null, It.IsAny\u003CILog\u003E(), false, true, It.IsAny\u003CCancellationToken\u003E())).ThrowsAsync(new OperationCanceledException());\r\n    // Act\r\n    var result = await _testOrchestrator.OrchestrateTest(AppPath, testTarget, null, TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(3), CommunicationChannel.UsbTunnel, XmlResultJargon.xUnit, Array.Empty\u003Cstring\u003E(), Array.Empty\u003Cstring\u003E(), includeWirelessDevices: false, resetSimulator: false, enableLldb: true, signalAppEnd: false, Array.Empty\u003C(string, string)\u003E(), Array.Empty\u003Cstring\u003E(), new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.APP_LAUNCH_TIMEOUT, result);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateFailedDeviceTestTest",
        "Body": "{\r\n    // Setup\r\n    var testTarget = new TestTargetOs(TestTarget.Device_iOS, \u002214.2\u0022);\r\n    var extraArguments = new[]\r\n    {\r\n        \u0022--some arg1\u0022,\r\n        \u0022--some arg2\u0022\r\n    };\r\n    _appTester.Setup(x =\u003E x.TestApp(_appBundleInformation, testTarget, _device.Object, null, TimeSpan.FromMinutes(30), It.IsAny\u003CTimeSpan\u003E(), true, extraArguments, It.IsAny\u003CIEnumerable\u003C(string, string)\u003E\u003E(), It.IsAny\u003CXmlResultJargon\u003E(), It.IsAny\u003Cstring[]?\u003E(), It.IsAny\u003Cstring[]?\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync((TestExecutingResult.TimedOut, SuccessResultLine)).Verifiable();\r\n    // Act\r\n    var result = await _testOrchestrator.OrchestrateTest(AppPath, testTarget, DeviceName, TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(3), CommunicationChannel.UsbTunnel, XmlResultJargon.xUnit, Array.Empty\u003Cstring\u003E(), Array.Empty\u003Cstring\u003E(), includeWirelessDevices: true, resetSimulator: false, enableLldb: false, signalAppEnd: true, Array.Empty\u003C(string, string)\u003E(), extraArguments, new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.TIMED_OUT, result);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, DeviceName, It.IsAny\u003CILog\u003E(), true, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    VerifyDiagnosticData(testTarget);\r\n    _appInstaller.Verify(x =\u003E x.InstallApp(_appBundleInformation, testTarget, _device.Object, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _appTester.VerifyAll();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateMacCatalystTestTest",
        "Body": "{\r\n    // Setup\r\n    _appInstaller.Reset();\r\n    _appUninstaller.Reset();\r\n    _deviceFinder.Reset();\r\n    var testTarget = new TestTargetOs(TestTarget.MacCatalyst, null);\r\n    var envVars = new[]\r\n    {\r\n        (\u0022envVar1\u0022, \u0022value1\u0022),\r\n        (\u0022envVar2\u0022, \u0022value2\u0022)\r\n    };\r\n    _appTester.Setup(x =\u003E x.TestMacCatalystApp(_appBundleInformation, TimeSpan.FromMinutes(30), It.IsAny\u003CTimeSpan\u003E(), true, It.IsAny\u003CIEnumerable\u003Cstring\u003E\u003E(), envVars, It.IsAny\u003CXmlResultJargon\u003E(), It.IsAny\u003Cstring[]?\u003E(), It.IsAny\u003Cstring[]?\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync((TestExecutingResult.Failed, \u0022Tests failed\u0022)).Verifiable();\r\n    // Act\r\n    var result = await _testOrchestrator.OrchestrateTest(AppPath, testTarget, null, TimeSpan.FromMinutes(30), It.IsAny\u003CTimeSpan\u003E(), CommunicationChannel.UsbTunnel, XmlResultJargon.xUnit, Array.Empty\u003Cstring\u003E(), Array.Empty\u003Cstring\u003E(), includeWirelessDevices: false, resetSimulator: true, enableLldb: false, signalAppEnd: true, envVars, Array.Empty\u003Cstring\u003E(), new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.TESTS_FAILED, result);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    _appTester.VerifyAll();\r\n    _deviceFinder.VerifyNoOtherCalls();\r\n    _appInstaller.VerifyNoOtherCalls();\r\n    _appUninstaller.VerifyNoOtherCalls();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateDeviceTestWithFailingTcpTest",
        "Body": "{\r\n    // Setup\r\n    var testTarget = new TestTargetOs(TestTarget.Device_iOS, \u002214.2\u0022);\r\n    var extraArguments = new[]\r\n    {\r\n        \u0022--some arg1\u0022,\r\n        \u0022--some arg2\u0022\r\n    };\r\n    _appTester.Setup(x =\u003E x.TestApp(_appBundleInformation, testTarget, _device.Object, null, TimeSpan.FromMinutes(30), It.IsAny\u003CTimeSpan\u003E(), false, extraArguments, It.IsAny\u003CIEnumerable\u003C(string, string)\u003E\u003E(), It.IsAny\u003CXmlResultJargon\u003E(), It.IsAny\u003Cstring[]?\u003E(), It.IsAny\u003Cstring[]?\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync((TestExecutingResult.Crashed, \u0022Test execution timed out\u0022)).Verifiable();\r\n    _appTester.SetupGet(x =\u003E x.ListenerConnected).Returns(false);\r\n    KnownIssue? issue = new KnownIssue(\u0022App crashed\u0022, null, (int)ExitCode.TCP_CONNECTION_FAILED);\r\n    _errorKnowledgeBase.Setup(x =\u003E x.IsKnownTestIssue(It.IsAny\u003CIFileBackedLog\u003E(), out issue)).Returns(true);\r\n    // Act\r\n    var result = await _testOrchestrator.OrchestrateTest(AppPath, testTarget, DeviceName, TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(3), CommunicationChannel.UsbTunnel, XmlResultJargon.xUnit, Array.Empty\u003Cstring\u003E(), Array.Empty\u003Cstring\u003E(), includeWirelessDevices: true, resetSimulator: false, enableLldb: false, signalAppEnd: false, Array.Empty\u003C(string, string)\u003E(), extraArguments, new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.TCP_CONNECTION_FAILED, result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UninstallOrchestratorTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.Apple.Tests",
    "Methods": [
      {
        "Name": "OrchestrateSimulatorUninstallationTest",
        "Body": "{\r\n    // Setup\r\n    _appUninstaller.SetReturnsDefault(Task.FromResult(new ProcessExecutionResult { ExitCode = 0, TimedOut = false, }));\r\n    var testTarget = new TestTargetOs(TestTarget.Simulator_iOS64, \u002213.5\u0022);\r\n    // Act\r\n    var result = await _uninstallOrchestrator.OrchestrateAppUninstall(BundleIdentifier, testTarget, SimulatorName, TimeSpan.FromMinutes(30), includeWirelessDevices: false, resetSimulator: false, enableLldb: false, new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.SUCCESS, result);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, SimulatorName, It.IsAny\u003CILog\u003E(), false, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    VerifyDiagnosticData(testTarget);\r\n    _appInstaller.Verify(x =\u003E x.InstallApp(It.IsAny\u003CAppBundleInformation\u003E(), It.IsAny\u003CTestTargetOs\u003E(), It.IsAny\u003CIDevice\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Never);\r\n    _appUninstaller.Verify(x =\u003E x.UninstallSimulatorApp(_simulator.Object, BundleIdentifier, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    _appUninstaller.Verify(x =\u003E x.UninstallDeviceApp(It.IsAny\u003CIHardwareDevice\u003E(), It.IsAny\u003Cstring\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Never);\r\n    _simulator.Verify(x =\u003E x.Boot(It.IsAny\u003CILog\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.AtLeastOnce);\r\n    _simulator.Verify(x =\u003E x.GetAppBundlePath(It.IsAny\u003CILog\u003E(), BundleIdentifier, It.IsAny\u003CCancellationToken\u003E()), Times.AtLeastOnce);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateDeviceUninstallationTest",
        "Body": "{\r\n    // Setup\r\n    _appUninstaller.SetReturnsDefault(Task.FromResult(new ProcessExecutionResult { ExitCode = 0, TimedOut = false, }));\r\n    var testTarget = new TestTargetOs(TestTarget.Device_tvOS, \u002214.2\u0022);\r\n    // Act\r\n    var result = await _uninstallOrchestrator.OrchestrateAppUninstall(BundleIdentifier, testTarget, null, TimeSpan.FromMinutes(30), includeWirelessDevices: false, resetSimulator: false, enableLldb: false, new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.SUCCESS, result);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, null, It.IsAny\u003CILog\u003E(), false, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    VerifyDiagnosticData(testTarget);\r\n    _appInstaller.Verify(x =\u003E x.InstallApp(It.IsAny\u003CAppBundleInformation\u003E(), It.IsAny\u003CTestTargetOs\u003E(), It.IsAny\u003CIDevice\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Never);\r\n    _appUninstaller.Verify(x =\u003E x.UninstallSimulatorApp(It.IsAny\u003CISimulatorDevice\u003E(), It.IsAny\u003Cstring\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Never);\r\n    _appUninstaller.Verify(x =\u003E x.UninstallDeviceApp(_device.Object, BundleIdentifier, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateSimulatorUninstallationWithResetTest",
        "Body": "{\r\n    // Setup\r\n    _appUninstaller.SetReturnsDefault(Task.FromResult(new ProcessExecutionResult { ExitCode = 0, TimedOut = false, }));\r\n    var testTarget = new TestTargetOs(TestTarget.Simulator_iOS64, \u002213.5\u0022);\r\n    // Act\r\n    var result = await _uninstallOrchestrator.OrchestrateAppUninstall(BundleIdentifier, testTarget, SimulatorName, TimeSpan.FromMinutes(30), includeWirelessDevices: false, resetSimulator: true, enableLldb: false, new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.SUCCESS, result);\r\n    _deviceFinder.Verify(x =\u003E x.FindDevice(testTarget, SimulatorName, It.IsAny\u003CILog\u003E(), false, true, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n    VerifySimulatorReset(true);\r\n    VerifySimulatorCleanUp(true);\r\n    VerifyDiagnosticData(testTarget);\r\n    _appInstaller.Verify(x =\u003E x.InstallApp(It.IsAny\u003CAppBundleInformation\u003E(), It.IsAny\u003CTestTargetOs\u003E(), It.IsAny\u003CIDevice\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Never);\r\n    // Verify that when resetting the device, we don\u0027t try to uninstall unnecessarily after\r\n    _appUninstaller.Verify(x =\u003E x.UninstallSimulatorApp(It.IsAny\u003CISimulatorDevice\u003E(), It.IsAny\u003Cstring\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Never);\r\n    _appUninstaller.Verify(x =\u003E x.UninstallDeviceApp(It.IsAny\u003CIHardwareDevice\u003E(), It.IsAny\u003Cstring\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Never);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateMacCatalystUninstallationTest",
        "Body": "{\r\n    // Setup\r\n    _appInstaller.Reset();\r\n    _appUninstaller.Reset();\r\n    _deviceFinder.Reset();\r\n    var testTarget = new TestTargetOs(TestTarget.MacCatalyst, null);\r\n    // Act\r\n    await _uninstallOrchestrator.OrchestrateAppUninstall(BundleIdentifier, testTarget, null, TimeSpan.FromMinutes(30), includeWirelessDevices: false, resetSimulator: false, enableLldb: false, new CancellationToken());\r\n    // Verify\r\n    VerifySimulatorReset(false);\r\n    VerifySimulatorCleanUp(false);\r\n    _appInstaller.VerifyNoOtherCalls();\r\n    _appUninstaller.VerifyNoOtherCalls();\r\n    _deviceFinder.VerifyNoOtherCalls();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrchestrateDeviceUninstallationWhenNoDeviceTest",
        "Body": "{\r\n    // Setup\r\n    _deviceFinder.Reset();\r\n    _deviceFinder.Setup(x =\u003E x.FindDevice(It.IsAny\u003CTestTargetOs\u003E(), It.IsAny\u003Cstring?\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003Cbool\u003E(), It.IsAny\u003Cbool\u003E(), It.IsAny\u003CCancellationToken\u003E())).ThrowsAsync(new NoDeviceFoundException());\r\n    var testTarget = new TestTargetOs(TestTarget.Device_iOS, \u002214.2\u0022);\r\n    // Act\r\n    var result = await _uninstallOrchestrator.OrchestrateAppUninstall(BundleIdentifier, testTarget, deviceName: null, TimeSpan.FromMinutes(30), includeWirelessDevices: false, resetSimulator: false, enableLldb: false, new CancellationToken());\r\n    // Verify\r\n    Assert.Equal(ExitCode.DEVICE_NOT_FOUND, result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AppBundleInformationParserTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.iOS.Shared.Tests",
    "Methods": [
      {
        "Name": "ParseFromProjectTest",
        "Body": "{\r\n    var parser = new AppBundleInformationParser(Mock.Of\u003CIMlaunchProcessManager\u003E());\r\n    var info = await parser.ParseFromProject(s_projectFilePath, TestTarget.Simulator_iOS64, \u0022Debug\u0022);\r\n    Assert.Equal(AppName, info.AppName);\r\n    Assert.Equal(s_appPath, info.AppPath);\r\n    Assert.Equal(s_appPath, info.LaunchAppPath);\r\n    Assert.Equal(AppName, info.BundleIdentifier);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ParseFromMacCatalystProjectTest",
        "Body": "{\r\n    var parser = new AppBundleInformationParser(Mock.Of\u003CIMlaunchProcessManager\u003E());\r\n    var info = await parser.ParseFromProject(s_projectFilePath, TestTarget.MacCatalyst, \u0022Debug\u0022);\r\n    Assert.Equal(AppName, info.AppName);\r\n    Assert.Equal(s_appPath, info.AppPath);\r\n    Assert.Equal(s_appPath, info.LaunchAppPath);\r\n    Assert.Equal(AppName, info.BundleIdentifier);\r\n    Assert.Equal(Executable, info.BundleExecutable);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ParseFromProjectWithLocatorTest",
        "Body": "{\r\n    var locator = new Mock\u003CIAppBundleLocator\u003E();\r\n    locator.Setup(x =\u003E x.LocateAppBundle(It.IsAny\u003CXmlDocument\u003E(), s_projectFilePath, TestTarget.Simulator_iOS64, \u0022Debug\u0022)).ReturnsAsync(\u0022bin2\u0022).Verifiable();\r\n    var parser = new AppBundleInformationParser(Mock.Of\u003CIMlaunchProcessManager\u003E(), locator.Object);\r\n    var info = await parser.ParseFromProject(s_projectFilePath, TestTarget.Simulator_iOS64, \u0022Debug\u0022);\r\n    Assert.Equal(AppName, info.AppName);\r\n    Assert.Equal(s_appPath2, info.AppPath);\r\n    Assert.Equal(s_appPath2, info.LaunchAppPath);\r\n    Assert.Equal(AppName, info.BundleIdentifier);\r\n    locator.VerifyAll();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CrashReportSnapshotTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.iOS.Shared.Tests",
    "Methods": [
      {
        "Name": "DeviceCaptureTest",
        "Body": "{\r\n    var tempFilePath = Path.GetTempFileName();\r\n    const string deviceName = \u0022Sample-iPhone\u0022;\r\n    const string crashLogPath = \u0022/path/to/crash.log\u0022;\r\n    const string symbolicateLogPath = \u0022/path/to/\u0022 \u002B deviceName \u002B \u0022.symbolicated.log\u0022;\r\n    var crashReport = Mock.Of\u003CIFileBackedLog\u003E(x =\u003E x.FullPath == crashLogPath);\r\n    var symbolicateReport = Mock.Of\u003CIFileBackedLog\u003E(x =\u003E x.FullPath == symbolicateLogPath);\r\n    // Crash report is added\r\n    _logs.Setup(x =\u003E x.Create(deviceName, \u0022Crash report: \u0022 \u002B deviceName, It.IsAny\u003Cbool\u003E())).Returns(crashReport);\r\n    // Symbolicate report is added\r\n    _logs.Setup(x =\u003E x.Create(\u0022crash.symbolicated.log\u0022, \u0022Symbolicated crash report: crash.log\u0022, It.IsAny\u003Cbool\u003E())).Returns(symbolicateReport);\r\n    _processManager.SetReturnsDefault(Task.FromResult(new ProcessExecutionResult() { ExitCode = 0 }));\r\n    // Act\r\n    var snapshotReport = new CrashSnapshotReporter(_processManager.Object, _log.Object, _logs.Object, true, deviceName, () =\u003E tempFilePath);\r\n    File.WriteAllLines(tempFilePath, new[] { \u0022crash 1\u0022, \u0022crash 2\u0022 });\r\n    await snapshotReport.StartCaptureAsync();\r\n    File.WriteAllLines(tempFilePath, new[] { \u0022Sample-iPhone\u0022 });\r\n    await snapshotReport.EndCaptureAsync(TimeSpan.FromSeconds(10));\r\n    // Verify\r\n    _logs.VerifyAll();\r\n    // List of crash reports is retrieved\r\n    _processManager.Verify(x =\u003E x.ExecuteCommandAsync(It.Is\u003CMlaunchArguments\u003E(args =\u003E args.AsCommandLine() == StringUtils.FormatArguments($\u0022--list-crash-reports={tempFilePath}\u0022) \u002B \u0022 \u0022 \u002B $\u0022--devname {StringUtils.FormatArguments(deviceName)}\u0022), _log.Object, TimeSpan.FromMinutes(1), null, It.IsAny\u003Cint\u003E(), null), Times.Exactly(2));\r\n    // Device crash log is downloaded\r\n    _processManager.Verify(x =\u003E x.ExecuteCommandAsync(It.Is\u003CMlaunchArguments\u003E(args =\u003E args.AsCommandLine() == StringUtils.FormatArguments($\u0022--download-crash-report={deviceName}\u0022) \u002B \u0022 \u0022 \u002B StringUtils.FormatArguments($\u0022--download-crash-report-to={crashLogPath}\u0022) \u002B \u0022 \u0022 \u002B $\u0022--devname {StringUtils.FormatArguments(deviceName)}\u0022), _log.Object, TimeSpan.FromMinutes(1), null, It.IsAny\u003Cint\u003E(), null), Times.Once);\r\n    // Symbolicate is ran\r\n    _processManager.Verify(x =\u003E x.ExecuteCommandAsync(Path.Combine(_symbolicatePath, \u0022symbolicatecrash\u0022), It.Is\u003CIList\u003Cstring\u003E\u003E(args =\u003E args.First() == crashLogPath), symbolicateReport, TimeSpan.FromMinutes(1), It.IsAny\u003CDictionary\u003Cstring, string\u003E\u003E(), null), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CommandLineDataTestSource",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.iOS.Shared.Tests",
    "Methods": [
      {
        "Name": "AsCommandLineTest",
        "Body": "Could not load the body for function: AsCommandLineTest in class: CommandLineDataTestSource",
        "Smells": []
      },
      {
        "Name": "MlaunchArgumentAndProcessManagerTest",
        "Body": "{\r\n    var oldArgs = new List\u003Cstring\u003E()\r\n    {\r\n        \u0022--download-crash-report-to=/path/with spaces.txt\u0022,\r\n        \u0022--sdkroot\u0022,\r\n        \u0022/path to xcode/spaces\u0022,\r\n        \u0022--devname\u0022,\r\n        \u0022Premek\u0027s iPhone\u0022,\r\n    };\r\n    var newArgs = new MlaunchArguments()\r\n    {\r\n        new DownloadCrashReportToArgument(\u0022/path/with spaces.txt\u0022),\r\n        new SdkRootArgument(\u0022/path to xcode/spaces\u0022),\r\n        new DeviceNameArgument(\u0022Premek\u0027s iPhone\u0022),\r\n    };\r\n    var oldWayOfPassingArgs = StringUtils.FormatArguments(oldArgs);\r\n    var newWayOfPassingArgs = newArgs.AsCommandLine();\r\n    Assert.Equal(oldWayOfPassingArgs, newWayOfPassingArgs);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "MlaunchArgumentEqualityTest",
        "Body": "{\r\n    var arg1 = new DownloadCrashReportToArgument(\u0022/path/with spaces.txt\u0022);\r\n    var arg2 = new DownloadCrashReportToArgument(\u0022/path/with spaces.txt\u0022);\r\n    var arg3 = new DownloadCrashReportToArgument(\u0022/path/with.txt\u0022);\r\n    Assert.Equal(arg1, arg2);\r\n    Assert.NotEqual(arg1, arg3);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "MlaunchArgumentsEqualityTest",
        "Body": "{\r\n    var args1 = new MlaunchArgument[]\r\n    {\r\n        new ListDevicesArgument(\u0022foo\u0022),\r\n        new ListSimulatorsArgument(\u0022bar\u0022)\r\n    };\r\n    var args2 = new MlaunchArgument[]\r\n    {\r\n        new ListDevicesArgument(\u0022foo\u0022),\r\n        new ListSimulatorsArgument(\u0022bar\u0022)\r\n    };\r\n    var args3 = new MlaunchArgument[]\r\n    {\r\n        new ListDevicesArgument(\u0022foo\u0022),\r\n        new ListSimulatorsArgument(\u0022xyz\u0022)\r\n    };\r\n    Assert.Equal(args1, args2);\r\n    Assert.NotEqual(args1, args3);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MlaunchArgumentsTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.iOS.Shared.Tests",
    "Methods": [
      {
        "Name": "AsCommandLineTest",
        "Body": "Could not load the body for function: AsCommandLineTest in class: MlaunchArgumentsTests",
        "Smells": []
      },
      {
        "Name": "MlaunchArgumentAndProcessManagerTest",
        "Body": "{\r\n    var oldArgs = new List\u003Cstring\u003E()\r\n    {\r\n        \u0022--download-crash-report-to=/path/with spaces.txt\u0022,\r\n        \u0022--sdkroot\u0022,\r\n        \u0022/path to xcode/spaces\u0022,\r\n        \u0022--devname\u0022,\r\n        \u0022Premek\u0027s iPhone\u0022,\r\n    };\r\n    var newArgs = new MlaunchArguments()\r\n    {\r\n        new DownloadCrashReportToArgument(\u0022/path/with spaces.txt\u0022),\r\n        new SdkRootArgument(\u0022/path to xcode/spaces\u0022),\r\n        new DeviceNameArgument(\u0022Premek\u0027s iPhone\u0022),\r\n    };\r\n    var oldWayOfPassingArgs = StringUtils.FormatArguments(oldArgs);\r\n    var newWayOfPassingArgs = newArgs.AsCommandLine();\r\n    Assert.Equal(oldWayOfPassingArgs, newWayOfPassingArgs);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "MlaunchArgumentEqualityTest",
        "Body": "{\r\n    var arg1 = new DownloadCrashReportToArgument(\u0022/path/with spaces.txt\u0022);\r\n    var arg2 = new DownloadCrashReportToArgument(\u0022/path/with spaces.txt\u0022);\r\n    var arg3 = new DownloadCrashReportToArgument(\u0022/path/with.txt\u0022);\r\n    Assert.Equal(arg1, arg2);\r\n    Assert.NotEqual(arg1, arg3);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "MlaunchArgumentsEqualityTest",
        "Body": "{\r\n    var args1 = new MlaunchArgument[]\r\n    {\r\n        new ListDevicesArgument(\u0022foo\u0022),\r\n        new ListSimulatorsArgument(\u0022bar\u0022)\r\n    };\r\n    var args2 = new MlaunchArgument[]\r\n    {\r\n        new ListDevicesArgument(\u0022foo\u0022),\r\n        new ListSimulatorsArgument(\u0022bar\u0022)\r\n    };\r\n    var args3 = new MlaunchArgument[]\r\n    {\r\n        new ListDevicesArgument(\u0022foo\u0022),\r\n        new ListSimulatorsArgument(\u0022xyz\u0022)\r\n    };\r\n    Assert.Equal(args1, args2);\r\n    Assert.NotEqual(args1, args3);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DefaultSimulatorSelectorTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.iOS.Shared.Tests",
    "Methods": [
      {
        "Name": "SelectSimulatorTest",
        "Body": "{\r\n    var simulator1 = new SimulatorDevice(_processManager.Object, _tccDatabase.Object)\r\n    {\r\n        Name = \u0022Simulator 1\u0022,\r\n        UDID = \u0022udid1\u0022,\r\n        State = DeviceState.Shutdown,\r\n    };\r\n    var simulator2 = new SimulatorDevice(_processManager.Object, _tccDatabase.Object)\r\n    {\r\n        Name = \u0022Simulator 2\u0022,\r\n        UDID = \u0022udid2\u0022,\r\n        State = DeviceState.Booted,\r\n    };\r\n    var simulator3 = new SimulatorDevice(_processManager.Object, _tccDatabase.Object)\r\n    {\r\n        Name = \u0022Simulator 3\u0022,\r\n        UDID = \u0022udid3\u0022,\r\n        State = DeviceState.Booting,\r\n    };\r\n    var simulator = _simulatorSelector.SelectSimulator(new[] { simulator1, simulator2, simulator3 });\r\n    // The Booted one\r\n    Assert.Equal(simulator2, simulator);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DevicesDataTestSource",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.iOS.Shared.Tests",
    "Methods": [
      {
        "Name": "DebugSpeedTest",
        "Body": "Could not load the body for function: DebugSpeedTest in class: DevicesDataTestSource",
        "Smells": []
      },
      {
        "Name": "DevicePlatformTest",
        "Body": "Could not load the body for function: DevicePlatformTest in class: DevicesDataTestSource",
        "Smells": []
      },
      {
        "Name": "Supports64bTest",
        "Body": "Could not load the body for function: Supports64bTest in class: DevicesDataTestSource",
        "Smells": []
      },
      {
        "Name": "Supports32BTest",
        "Body": "Could not load the body for function: Supports32BTest in class: DevicesDataTestSource",
        "Smells": []
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DeviceTest",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.iOS.Shared.Tests",
    "Methods": [
      {
        "Name": "DebugSpeedTest",
        "Body": "Could not load the body for function: DebugSpeedTest in class: DeviceTest",
        "Smells": []
      },
      {
        "Name": "DevicePlatformTest",
        "Body": "Could not load the body for function: DevicePlatformTest in class: DeviceTest",
        "Smells": []
      },
      {
        "Name": "Supports64bTest",
        "Body": "Could not load the body for function: Supports64bTest in class: DeviceTest",
        "Smells": []
      },
      {
        "Name": "Supports32BTest",
        "Body": "Could not load the body for function: Supports32BTest in class: DeviceTest",
        "Smells": []
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HardwareDeviceLoaderTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.iOS.Shared.Tests",
    "Methods": [
      {
        "Name": "LoadAsyncProcessErrorTest",
        "Body": "{\r\n    string processPath = null;\r\n    MlaunchArguments passedArguments = null;\r\n    // moq It.Is is not working as nicelly as we would like it, we capture data and use asserts\r\n    _processManager.Setup(p =\u003E p.RunAsync(It.IsAny\u003CProcess\u003E(), It.IsAny\u003CMlaunchArguments\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan?\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E\u003E(), It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken?\u003E(), It.IsAny\u003Cbool?\u003E())).Returns\u003CProcess, MlaunchArguments, ILog, TimeSpan?, Dictionary\u003Cstring, string\u003E, int, CancellationToken?, bool?\u003E((p, args, log, t, env, verbosity, token, d) =\u003E\r\n    {\r\n        // we are going set the used args to validate them later, will always return an error from this method\r\n        processPath = p.StartInfo.FileName;\r\n        passedArguments = args;\r\n        if (!timeout)\r\n        {\r\n            return Task.FromResult(new ProcessExecutionResult { ExitCode = 1, TimedOut = false });\r\n        }\r\n        else\r\n        {\r\n            return Task.FromResult(new ProcessExecutionResult { ExitCode = 0, TimedOut = true });\r\n        }\r\n    });\r\n    Assert.ThrowsAsync\u003CException\u003E(async () =\u003E\r\n    {\r\n        await _devices.LoadDevices(_executionLog.Object);\r\n    });\r\n    MlaunchArgument listDevArg = passedArguments.Where(a =\u003E a is ListDevicesArgument).FirstOrDefault();\r\n    Assert.NotNull(listDevArg);\r\n    MlaunchArgument outputFormatArg = passedArguments.Where(a =\u003E a is XmlOutputFormatArgument).FirstOrDefault();\r\n    Assert.NotNull(outputFormatArg);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAsyncProcessSuccess",
        "Body": "{\r\n    string processPath = null;\r\n    MlaunchArguments passedArguments = null;\r\n    // moq It.Is is not working as nicelly as we would like it, we capture data and use asserts\r\n    _processManager.Setup(p =\u003E p.RunAsync(It.IsAny\u003CProcess\u003E(), It.IsAny\u003CMlaunchArguments\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan?\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E\u003E(), It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken?\u003E(), It.IsAny\u003Cbool?\u003E())).Returns\u003CProcess, MlaunchArguments, ILog, TimeSpan?, Dictionary\u003Cstring, string\u003E, int, CancellationToken?, bool?\u003E((p, args, log, t, env, verbosity, token, d) =\u003E\r\n    {\r\n        processPath = p.StartInfo.FileName;\r\n        passedArguments = args;\r\n        // we get the temp file that was passed as the args, and write our sample xml, which will be parsed to get the devices :)\r\n        var tempPath = args.Where(a =\u003E a is ListDevicesArgument).First().AsCommandLineArgument();\r\n        tempPath = tempPath.Substring(tempPath.IndexOf(\u0027=\u0027) \u002B 1).Replace(\u0022\\\u0022\u0022, string.Empty);\r\n        var name = GetType().Assembly.GetManifestResourceNames().Where(a =\u003E a.EndsWith(\u0022devices.xml\u0022, StringComparison.Ordinal)).FirstOrDefault();\r\n        using (var outputStream = new StreamWriter(tempPath))\r\n        using (var sampleStream = new StreamReader(GetType().Assembly.GetManifestResourceStream(name)))\r\n        {\r\n            string line;\r\n            while ((line = sampleStream.ReadLine()) != null)\r\n            {\r\n                outputStream.WriteLine(line);\r\n            }\r\n        }\r\n\r\n        return Task.FromResult(new ProcessExecutionResult { ExitCode = 0, TimedOut = false });\r\n    });\r\n    await _devices.LoadDevices(_executionLog.Object, listExtraData: extraData);\r\n    // assert the devices that are expected from the sample xml\r\n    MlaunchArgument listDevArg = passedArguments.Where(a =\u003E a is ListDevicesArgument).FirstOrDefault();\r\n    Assert.NotNull(listDevArg);\r\n    MlaunchArgument outputFormatArg = passedArguments.Where(a =\u003E a is XmlOutputFormatArgument).FirstOrDefault();\r\n    Assert.NotNull(outputFormatArg);\r\n    if (extraData)\r\n    {\r\n        MlaunchArgument listExtraDataArg = passedArguments.Where(a =\u003E a is ListExtraDataArgument).FirstOrDefault();\r\n        Assert.NotNull(listExtraDataArg);\r\n    }\r\n\r\n    Assert.Equal(2, _devices.Connected64BitIOS.Count());\r\n    Assert.Single(_devices.Connected32BitIOS);\r\n    Assert.Empty(_devices.ConnectedTV);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FindAndCacheDevicesWithFailingMlaunchTest",
        "Body": "{\r\n    string processPath = null;\r\n    MlaunchArguments passedArguments = null;\r\n    // Moq.SetupSequence doesn\u0027t allow custom callbacks so we need to count ourselves\r\n    var calls = 0;\r\n    // moq It.Is is not working as nicelly as we would like it, we capture data and use asserts\r\n    _processManager.Setup(p =\u003E p.RunAsync(It.IsAny\u003CProcess\u003E(), It.IsAny\u003CMlaunchArguments\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan?\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E\u003E(), It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken?\u003E(), It.IsAny\u003Cbool?\u003E())).Returns\u003CProcess, MlaunchArguments, ILog, TimeSpan?, Dictionary\u003Cstring, string\u003E, int, CancellationToken?, bool?\u003E((p, args, log, t, env, verbosity, token, d) =\u003E\r\n    {\r\n        calls\u002B\u002B;\r\n        if (calls == 1)\r\n        {\r\n            // Mlaunch can sometimes time out and we are testing that a subsequent Load will trigger it again\r\n            return Task.FromResult(new ProcessExecutionResult { ExitCode = 137, TimedOut = true });\r\n        }\r\n\r\n        processPath = p.StartInfo.FileName;\r\n        passedArguments = args;\r\n        // we get the temp file that was passed as the args, and write our sample xml, which will be parsed to get the devices :)\r\n        var tempPath = args.Where(a =\u003E a is ListDevicesArgument).First().AsCommandLineArgument();\r\n        tempPath = tempPath.Substring(tempPath.IndexOf(\u0027=\u0027) \u002B 1).Replace(\u0022\\\u0022\u0022, string.Empty);\r\n        var name = GetType().Assembly.GetManifestResourceNames().Where(a =\u003E a.EndsWith(\u0022devices.xml\u0022, StringComparison.Ordinal)).FirstOrDefault();\r\n        using (var outputStream = new StreamWriter(tempPath))\r\n        using (var sampleStream = new StreamReader(GetType().Assembly.GetManifestResourceStream(name)))\r\n        {\r\n            string line;\r\n            while ((line = sampleStream.ReadLine()) != null)\r\n                outputStream.WriteLine(line);\r\n        }\r\n\r\n        return Task.FromResult(new ProcessExecutionResult { ExitCode = 0, TimedOut = false });\r\n    });\r\n    await Assert.ThrowsAsync\u003CException\u003E(async () =\u003E await _devices.LoadDevices(_executionLog.Object));\r\n    Assert.Empty(_devices.ConnectedDevices);\r\n    Assert.Equal(1, calls);\r\n    await _devices.LoadDevices(_executionLog.Object);\r\n    Assert.Equal(2, calls);\r\n    Assert.NotEmpty(_devices.ConnectedDevices);\r\n    await _devices.LoadDevices(_executionLog.Object);\r\n    Assert.Equal(2, calls);\r\n    await _devices.LoadDevices(_executionLog.Object);\r\n    Assert.Equal(2, calls);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SimulatorDeviceTest",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.iOS.Shared.Tests",
    "Methods": [
      {
        "Name": "IsWatchSimulatorTest",
        "Body": "{\r\n    _simulator.SimRuntime = runtime;\r\n    Assert.Equal(expectation, _simulator.IsWatchSimulator);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OSVersionTest",
        "Body": "{\r\n    _simulator.SimRuntime = runtime;\r\n    Assert.Equal(expected, _simulator.OSVersion);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "EraseAsyncTest",
        "Body": "{\r\n    // just call and verify the correct args are pass\r\n    await _simulator.Erase(_executionLog.Object);\r\n    _processManager.Verify(h =\u003E h.ExecuteXcodeCommandAsync(It.Is\u003Cstring\u003E(s =\u003E s == \u0022simctl\u0022), It.Is\u003Cstring[]\u003E(args =\u003E args.Where(a =\u003E a == _simulator.UDID || a == \u0022shutdown\u0022).Count() == 2), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CCancellationToken\u003E()));\r\n    _processManager.Verify(h =\u003E h.ExecuteXcodeCommandAsync(It.Is\u003Cstring\u003E(s =\u003E s == \u0022simctl\u0022), It.Is\u003Cstring[]\u003E(args =\u003E args.Where(a =\u003E a == _simulator.UDID || a == \u0022erase\u0022).Count() == 2), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CCancellationToken\u003E()));\r\n    _processManager.Verify(h =\u003E h.ExecuteXcodeCommandAsync(It.Is\u003Cstring\u003E(s =\u003E s == \u0022simctl\u0022), It.Is\u003Cstring[]\u003E(args =\u003E args.Where(a =\u003E a == _simulator.UDID || a == \u0022boot\u0022).Count() == 2), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CCancellationToken\u003E()));\r\n    _processManager.Verify(h =\u003E h.ExecuteXcodeCommandAsync(It.Is\u003Cstring\u003E(s =\u003E s == \u0022simctl\u0022), It.Is\u003Cstring[]\u003E(args =\u003E args.Where(a =\u003E a == _simulator.UDID || a == \u0022shutdown\u0022).Count() == 2), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CCancellationToken\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShutdownAsyncTest",
        "Body": "{\r\n    await _simulator.Shutdown(_executionLog.Object);\r\n    // just call and verify the correct args are pass\r\n    _processManager.Verify(h =\u003E h.ExecuteXcodeCommandAsync(It.Is\u003Cstring\u003E(s =\u003E s == \u0022simctl\u0022), It.Is\u003Cstring[]\u003E(args =\u003E args.Where(a =\u003E a == _simulator.UDID || a == \u0022shutdown\u0022).Count() == 2), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CCancellationToken\u003E()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "KillEverythingAsyncTest",
        "Body": "{\r\n    Func\u003CIList\u003Cstring\u003E, bool\u003E verifyKillAll = (args) =\u003E\r\n    {\r\n        var toKill = new List\u003Cstring\u003E\r\n        {\r\n            \u0022-9\u0022,\r\n            \u0022iPhone Simulator\u0022,\r\n            \u0022iOS Simulator\u0022,\r\n            \u0022Simulator\u0022,\r\n            \u0022Simulator (Watch)\u0022,\r\n            \u0022com.apple.CoreSimulator.CoreSimulatorService\u0022,\r\n            \u0022ibtoold\u0022\r\n        };\r\n        return args.Where(a =\u003E toKill.Contains(a)).Count() == toKill.Count;\r\n    };\r\n    var simulator = new SimulatorDevice(_processManager.Object, new TCCDatabase(_processManager.Object));\r\n    await simulator.KillEverything(_executionLog.Object);\r\n    // verify that all the diff process have been killed making sure args are correct\r\n    _processManager.Verify(p =\u003E p.ExecuteCommandAsync(It.Is\u003Cstring\u003E(s =\u003E s == \u0022launchctl\u0022), It.Is\u003Cstring[]\u003E(args =\u003E args.Where(a =\u003E a == \u0022remove\u0022 || a == \u0022com.apple.CoreSimulator.CoreSimulatorService\u0022).Count() == 2), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), null, null));\r\n    _processManager.Verify(p =\u003E p.ExecuteCommandAsync(It.Is\u003Cstring\u003E(s =\u003E s == \u0022killall\u0022), It.Is\u003CIList\u003Cstring\u003E\u003E(a =\u003E verifyKillAll(a)), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), null, null));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SimulatorLoaderTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.iOS.Shared.Tests",
    "Methods": [
      {
        "Name": "LoadAsyncProcessErrorTest",
        "Body": "{\r\n    MlaunchArguments passedArguments = null;\r\n    // moq It.Is is not working as nicelly as we would like it, we capture data and use asserts\r\n    _processManager.Setup(p =\u003E p.ExecuteCommandAsync(It.IsAny\u003CMlaunchArguments\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E\u003E(), It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken?\u003E())).Returns\u003CMlaunchArguments, ILog, TimeSpan, Dictionary\u003Cstring, string\u003E, int, CancellationToken?\u003E((args, log, t, env, verbosity, token) =\u003E\r\n    {\r\n        // we are going set the used args to validate them later, will always return an error from this method\r\n        passedArguments = args;\r\n        return Task.FromResult(new ProcessExecutionResult { ExitCode = 1, TimedOut = false });\r\n    });\r\n    await Assert.ThrowsAsync\u003CException\u003E(async () =\u003E\r\n    {\r\n        await _simulatorLoader.LoadDevices(_executionLog.Object);\r\n    });\r\n    // validate the execution of mlaunch\r\n    MlaunchArgument listSimArg = passedArguments.Where(a =\u003E a is ListSimulatorsArgument).FirstOrDefault();\r\n    Assert.NotNull(listSimArg);\r\n    MlaunchArgument outputFormatArg = passedArguments.Where(a =\u003E a is XmlOutputFormatArgument).FirstOrDefault();\r\n    Assert.NotNull(outputFormatArg);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAsyncProcessSuccess",
        "Body": "{\r\n    MlaunchArguments passedArguments = null;\r\n    // moq It.Is is not working as nicelly as we would like it, we capture data and use asserts\r\n    _processManager.Setup(p =\u003E p.ExecuteCommandAsync(It.IsAny\u003CMlaunchArguments\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E\u003E(), It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken?\u003E())).Returns\u003CMlaunchArguments, ILog, TimeSpan, Dictionary\u003Cstring, string\u003E, int, CancellationToken?\u003E((args, log, t, env, verbosity, token) =\u003E\r\n    {\r\n        passedArguments = args;\r\n        // we get the temp file that was passed as the args, and write our sample xml, which will be parsed to get the devices :)\r\n        var tempPath = args.Where(a =\u003E a is ListSimulatorsArgument).First().AsCommandLineArgument();\r\n        tempPath = tempPath.Substring(tempPath.IndexOf(\u0027=\u0027) \u002B 1).Replace(\u0022\\\u0022\u0022, string.Empty);\r\n        CopySampleData(tempPath);\r\n        return Task.FromResult(new ProcessExecutionResult { ExitCode = 0, TimedOut = false });\r\n    });\r\n    await _simulatorLoader.LoadDevices(_executionLog.Object);\r\n    MlaunchArgument listSimArg = passedArguments.Where(a =\u003E a is ListSimulatorsArgument).FirstOrDefault();\r\n    Assert.NotNull(listSimArg);\r\n    MlaunchArgument outputFormatArg = passedArguments.Where(a =\u003E a is XmlOutputFormatArgument).FirstOrDefault();\r\n    Assert.NotNull(outputFormatArg);\r\n    Assert.Equal(75, _simulatorLoader.AvailableDevices.Count());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FindAsyncDoNotCreateTest",
        "Body": "{\r\n    MlaunchArguments passedArguments = null;\r\n    _processManager.Setup(h =\u003E h.ExecuteXcodeCommandAsync(\u0022simctl\u0022, It.Is\u003Cstring[]\u003E(args =\u003E args[0] == \u0022create\u0022), _executionLog.Object, TimeSpan.FromMinutes(1), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(new ProcessExecutionResult() { ExitCode = 0 });\r\n    // moq It.Is is not working as nicelly as we would like it, we capture data and use asserts\r\n    _processManager.Setup(p =\u003E p.ExecuteCommandAsync(It.IsAny\u003CMlaunchArguments\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E\u003E(), It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken?\u003E())).Returns\u003CMlaunchArguments, ILog, TimeSpan, Dictionary\u003Cstring, string\u003E, int, CancellationToken?\u003E((args, log, t, env, verbosity, token) =\u003E\r\n    {\r\n        passedArguments = args;\r\n        // we get the temp file that was passed as the args, and write our sample xml, which will be parsed to get the devices :)\r\n        var tempPath = args.Where(a =\u003E a is ListSimulatorsArgument).First().AsCommandLineArgument();\r\n        tempPath = tempPath.Substring(tempPath.IndexOf(\u0027=\u0027) \u002B 1).Replace(\u0022\\\u0022\u0022, string.Empty);\r\n        CopySampleData(tempPath);\r\n        return Task.FromResult(new ProcessExecutionResult { ExitCode = 0, TimedOut = false });\r\n    });\r\n    await _simulatorLoader.LoadDevices(_executionLog.Object);\r\n    var(simulator, companion) = await _simulatorLoader.FindSimulators(target, _executionLog.Object, false, false);\r\n    Assert.NotNull(simulator);\r\n    if (shouldFindCompanion)\r\n    {\r\n        Assert.NotNull(companion);\r\n    }\r\n    else\r\n    {\r\n        Assert.Null(companion);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FindAsyncExactVersionNotFound",
        "Body": "{\r\n    MlaunchArguments passedArguments = null;\r\n    _processManager.Setup(h =\u003E h.ExecuteXcodeCommandAsync(\u0022simctl\u0022, It.Is\u003Cstring[]\u003E(args =\u003E args[0] == \u0022create\u0022), _executionLog.Object, TimeSpan.FromMinutes(1), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(new ProcessExecutionResult() { ExitCode = 0 });\r\n    // moq It.Is is not working as nicelly as we would like it, we capture data and use asserts\r\n    _processManager.Setup(p =\u003E p.ExecuteCommandAsync(It.IsAny\u003CMlaunchArguments\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E\u003E(), It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken?\u003E())).Returns\u003CMlaunchArguments, ILog, TimeSpan, Dictionary\u003Cstring, string\u003E, int, CancellationToken?\u003E((args, log, t, env, verbosity, token) =\u003E\r\n    {\r\n        passedArguments = args;\r\n        // we get the temp file that was passed as the args, and write our sample xml, which will be parsed to get the devices :)\r\n        var tempPath = args.Where(a =\u003E a is ListSimulatorsArgument).First().AsCommandLineArgument();\r\n        tempPath = tempPath.Substring(tempPath.IndexOf(\u0027=\u0027) \u002B 1).Replace(\u0022\\\u0022\u0022, string.Empty);\r\n        CopySampleData(tempPath);\r\n        return Task.FromResult(new ProcessExecutionResult { ExitCode = 0, TimedOut = false });\r\n    });\r\n    await _simulatorLoader.LoadDevices(_executionLog.Object);\r\n    await Assert.ThrowsAsync\u003CNoDeviceFoundException\u003E(async () =\u003E await _simulatorLoader.FindSimulators(new TestTargetOs(TestTarget.Simulator_iOS64, \u002212.8\u0022), _executionLog.Object, false, false));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FindAsyncExactVersionFound",
        "Body": "{\r\n    MlaunchArguments passedArguments = null;\r\n    _processManager.Setup(h =\u003E h.ExecuteXcodeCommandAsync(\u0022simctl\u0022, It.Is\u003Cstring[]\u003E(args =\u003E args[0] == \u0022create\u0022), _executionLog.Object, TimeSpan.FromMinutes(1), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(new ProcessExecutionResult() { ExitCode = 0 });\r\n    // moq It.Is is not working as nicelly as we would like it, we capture data and use asserts\r\n    _processManager.Setup(p =\u003E p.ExecuteCommandAsync(It.IsAny\u003CMlaunchArguments\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E\u003E(), It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken?\u003E())).Returns\u003CMlaunchArguments, ILog, TimeSpan, Dictionary\u003Cstring, string\u003E, int, CancellationToken?\u003E((args, log, t, env, verbosity, token) =\u003E\r\n    {\r\n        passedArguments = args;\r\n        // we get the temp file that was passed as the args, and write our sample xml, which will be parsed to get the devices :)\r\n        var tempPath = args.Where(a =\u003E a is ListSimulatorsArgument).First().AsCommandLineArgument();\r\n        tempPath = tempPath.Substring(tempPath.IndexOf(\u0027=\u0027) \u002B 1).Replace(\u0022\\\u0022\u0022, string.Empty);\r\n        CopySampleData(tempPath);\r\n        return Task.FromResult(new ProcessExecutionResult { ExitCode = 0, TimedOut = false });\r\n    });\r\n    await _simulatorLoader.LoadDevices(_executionLog.Object);\r\n    var(simulator, _) = await _simulatorLoader.FindSimulators(new TestTargetOs(TestTarget.Simulator_iOS64, SdkVersions.MaxiOSSimulator), _executionLog.Object, false, false);\r\n    Assert.NotNull(simulator);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SelectDevicesDeviceOnlyTest",
        "Body": "{\r\n    // moq It.Is is not working as nicelly as we would like it, we capture data and use asserts\r\n    _processManager.Setup(p =\u003E p.ExecuteCommandAsync(It.IsAny\u003CMlaunchArguments\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E\u003E(), It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken?\u003E())).Returns\u003CMlaunchArguments, ILog, TimeSpan, Dictionary\u003Cstring, string\u003E, int, CancellationToken?\u003E((args, log, t, env, verbosity, token) =\u003E\r\n    {\r\n        // We get the temp file that was passed as the args, and write our sample xml, which will be parsed to get the devices :)\r\n        var tempPath = args.Where(a =\u003E a is ListSimulatorsArgument).First().AsCommandLineArgument();\r\n        tempPath = tempPath.Substring(tempPath.IndexOf(\u0027=\u0027) \u002B 1).Replace(\u0022\\\u0022\u0022, string.Empty);\r\n        CopySampleData(tempPath);\r\n        return Task.FromResult(new ProcessExecutionResult { ExitCode = 0, TimedOut = false });\r\n    });\r\n    var devices = _simulatorLoader.SelectDevices(testTarget, _executionLog.Object, false).ToList();\r\n    Assert.Single(devices);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SelectDevicesDeviceAndCompanionTest",
        "Body": "{\r\n    // moq It.Is is not working as nicelly as we would like it, we capture data and use asserts\r\n    _processManager.Setup(p =\u003E p.ExecuteCommandAsync(It.IsAny\u003CMlaunchArguments\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E\u003E(), It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken?\u003E())).Returns\u003CMlaunchArguments, ILog, TimeSpan, Dictionary\u003Cstring, string\u003E, int, CancellationToken?\u003E((args, log, t, env, verbosity, token) =\u003E\r\n    {\r\n        // We get the temp file that was passed as the args, and write our sample xml, which will be parsed to get the devices :)\r\n        var tempPath = args.Where(a =\u003E a is ListSimulatorsArgument).First().AsCommandLineArgument();\r\n        tempPath = tempPath.Substring(tempPath.IndexOf(\u0027=\u0027) \u002B 1).Replace(\u0022\\\u0022\u0022, string.Empty);\r\n        CopySampleData(tempPath);\r\n        return Task.FromResult(new ProcessExecutionResult { ExitCode = 0, TimedOut = false });\r\n    });\r\n    var devices = _simulatorLoader.SelectDevices(TestTarget.Simulator_watchOS, _executionLog.Object, false).ToList();\r\n    Assert.Equal(2, devices.Count);\r\n    Assert.True(devices.First().IsWatchSimulator);\r\n    Assert.False(devices.Last().IsWatchSimulator);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FindSimulatorsWithSucceedingMlaunchTest",
        "Body": "{\r\n    _processManager.Setup(h =\u003E h.ExecuteXcodeCommandAsync(\u0022simctl\u0022, It.Is\u003Cstring[]\u003E(args =\u003E args[0] == \u0022create\u0022), _executionLog.Object, TimeSpan.FromMinutes(1), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(new ProcessExecutionResult() { ExitCode = 0 });\r\n    // moq It.Is is not working as nicelly as we would like it, we capture data and use asserts\r\n    _processManager.Setup(p =\u003E p.ExecuteCommandAsync(It.IsAny\u003CMlaunchArguments\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E\u003E(), It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken?\u003E())).Returns\u003CMlaunchArguments, ILog, TimeSpan, Dictionary\u003Cstring, string\u003E, int, CancellationToken?\u003E((args, log, t, env, verbosity, token) =\u003E\r\n    {\r\n        // we get the temp file that was passed as the args, and write our sample xml, which will be parsed to get the devices :)\r\n        var tempPath = args.Where(a =\u003E a is ListSimulatorsArgument).First().AsCommandLineArgument();\r\n        tempPath = tempPath.Substring(tempPath.IndexOf(\u0027=\u0027) \u002B 1).Replace(\u0022\\\u0022\u0022, string.Empty);\r\n        CopySampleData(tempPath);\r\n        return Task.FromResult(new ProcessExecutionResult { ExitCode = mlaunchExitCode, TimedOut = mlaunchTimedout });\r\n    });\r\n    await _simulatorLoader.LoadDevices(_executionLog.Object);\r\n    var(simulator, companion) = await _simulatorLoader.FindSimulators(TestTarget.Simulator_iOS64, _executionLog.Object, false, false);\r\n    Assert.NotNull(simulator);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FindSimulatorsWithFailingMlaunchTest",
        "Body": "{\r\n    // Moq.SetupSequence doesn\u0027t allow custom callbacks so we need to count ourselves\r\n    var calls = 0;\r\n    _processManager.Setup(p =\u003E p.ExecuteCommandAsync(It.Is\u003CMlaunchArguments\u003E(args =\u003E args.Any(a =\u003E a is ListSimulatorsArgument)), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), It.IsAny\u003CDictionary\u003Cstring, string\u003E\u003E(), It.IsAny\u003Cint\u003E(), It.IsAny\u003CCancellationToken?\u003E())).Returns\u003CMlaunchArguments, ILog, TimeSpan, Dictionary\u003Cstring, string\u003E, int, CancellationToken?\u003E((args, log, t, env, verbosity, token) =\u003E\r\n    {\r\n        calls\u002B\u002B;\r\n        if (calls == 1)\r\n        {\r\n            return Task.FromResult(new ProcessExecutionResult { ExitCode = 137, TimedOut = true });\r\n        }\r\n\r\n        // we get the temp file that was passed as the args, and write our sample xml, which will be parsed to get the devices :)\r\n        var tempPath = args.Where(a =\u003E a is ListSimulatorsArgument).First().AsCommandLineArgument();\r\n        tempPath = tempPath.Substring(tempPath.IndexOf(\u0027=\u0027) \u002B 1).Replace(\u0022\\\u0022\u0022, string.Empty);\r\n        CopySampleData(tempPath);\r\n        return Task.FromResult(new ProcessExecutionResult { ExitCode = 0, TimedOut = false });\r\n    });\r\n    await Assert.ThrowsAsync\u003CException\u003E(async () =\u003E await _simulatorLoader.LoadDevices(_executionLog.Object));\r\n    Assert.Empty(_simulatorLoader.AvailableDevices);\r\n    Assert.Equal(1, calls);\r\n    await _simulatorLoader.LoadDevices(_executionLog.Object);\r\n    Assert.Equal(2, calls);\r\n    Assert.NotEmpty(_simulatorLoader.AvailableDevices);\r\n    await _simulatorLoader.LoadDevices(_executionLog.Object);\r\n    Assert.Equal(2, calls);\r\n    await _simulatorLoader.LoadDevices(_executionLog.Object);\r\n    Assert.Equal(2, calls);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TCCDatabaseTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.iOS.Shared.Tests",
    "Methods": [
      {
        "Name": "GetTCCFormatTest",
        "Body": "Could not load the body for function: GetTCCFormatTest in class: TCCDatabaseTests",
        "Smells": []
      },
      {
        "Name": "GetTCCFormatUnknownTest",
        "Body": "Could not load the body for function: GetTCCFormatUnknownTest in class: TCCDatabaseTests",
        "Smells": []
      },
      {
        "Name": "AgreeToPromptsAsyncNoIdentifiers",
        "Body": "{\r\n    // we should write in the log that we did not managed to agree to it\r\n    _executionLog.Setup(l =\u003E l.WriteLine(It.IsAny\u003Cstring\u003E()));\r\n    await _database.AgreeToPromptsAsync(_simRuntime, _dataPath, _udid, _executionLog.Object);\r\n    _executionLog.Verify(l =\u003E l.WriteLine(\u0022No bundle identifiers given when requested permission editing.\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AgreeToPropmtsAsyncTimeoutsTest",
        "Body": "{\r\n    string processName = null;\r\n    // set the process manager to always return a failure so that we do eventually get a timeout\r\n    _processManager.Setup(p =\u003E p.ExecuteCommandAsync(It.IsAny\u003Cstring\u003E(), It.IsAny\u003CList\u003Cstring\u003E\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), null, null)).Returns\u003Cstring, IList\u003Cstring\u003E, ILog, TimeSpan, Dictionary\u003Cstring, string\u003E, CancellationToken?\u003E((p, a, l, t, e, c) =\u003E\r\n    {\r\n        processName = p;\r\n        return Task.FromResult(new ProcessExecutionResult { ExitCode = 1, TimedOut = true });\r\n    });\r\n    // try to accept and fail because we always timeout\r\n    await _database.AgreeToPromptsAsync(_simRuntime, _dataPath, _udid, _executionLog.Object, \u0022my-bundle-id\u0022, \u0022your-bundle-id\u0022);\r\n    // verify that we did write in the logs and that we did call sqlite3\r\n    Assert.Equal(\u0022sqlite3\u0022, processName);\r\n    _executionLog.Verify(l =\u003E l.WriteLine(\u0022Failed to edit TCC.db, the test run might hang due to permission request dialogs\u0022), Times.AtLeastOnce);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AgreeToPromptsAsyncSuccessTest",
        "Body": "{\r\n    string bundleIdentifier = \u0022my-bundle-identifier\u0022;\r\n    var services = new string[]\r\n    {\r\n        \u0022kTCCServiceAll\u0022,\r\n        \u0022kTCCServiceAddressBook\u0022,\r\n        \u0022kTCCServiceCalendar\u0022,\r\n        \u0022kTCCServiceCamera\u0022,\r\n        \u0022kTCCServicePhotos\u0022,\r\n        \u0022kTCCServiceMediaLibrary\u0022,\r\n        \u0022kTCCServiceMicrophone\u0022,\r\n        \u0022kTCCServiceUbiquity\u0022,\r\n        \u0022kTCCServiceWillow\u0022\r\n    };\r\n    var expectedArgs = new StringBuilder(\u0022\\n\u0022);\r\n    // assert the sql used depending on the version\r\n    foreach (var id in new[]\r\n    {\r\n        bundleIdentifier,\r\n        bundleIdentifier \u002B \u0022.watchkitapp\u0022\r\n    }\r\n\r\n    )\r\n    {\r\n        switch (dbVersion)\r\n        {\r\n            case 1:\r\n                foreach (var s in services)\r\n                {\r\n                    expectedArgs.AppendFormat(\u0022DELETE FROM access WHERE service = \u0027{0}\u0027 AND client = \u0027{1}\u0027;\\n\u0022, s, id);\r\n                    expectedArgs.AppendFormat(\u0022INSERT INTO access VALUES(\u0027{0}\u0027,\u0027{1}\u0027,0,1,0,NULL);\\n\u0022, s, id);\r\n                }\r\n\r\n                break;\r\n            case 2:\r\n                foreach (var s in services)\r\n                {\r\n                    expectedArgs.AppendFormat(\u0022DELETE FROM access WHERE service = \u0027{0}\u0027 AND client = \u0027{1}\u0027;\\n\u0022, s, id);\r\n                    expectedArgs.AppendFormat(\u0022INSERT INTO access VALUES(\u0027{0}\u0027,\u0027{1}\u0027,0,1,0,NULL,NULL);\\n\u0022, s, id);\r\n                }\r\n\r\n                break;\r\n            case 3:\r\n                foreach (var s in services)\r\n                {\r\n                    expectedArgs.AppendFormat(\u0022INSERT OR REPLACE INTO access VALUES(\u0027{0}\u0027,\u0027{1}\u0027,0,1,0,NULL,NULL,NULL,\u0027UNUSED\u0027,NULL,NULL,{2});\\n\u0022, s, id, DateTimeOffset.Now.ToUnixTimeSeconds());\r\n                }\r\n\r\n                break;\r\n        }\r\n    }\r\n\r\n    string processName = null;\r\n    IList\u003Cstring\u003E args = new List\u003Cstring\u003E();\r\n    _processManager.Setup(p =\u003E p.ExecuteCommandAsync(It.IsAny\u003Cstring\u003E(), It.IsAny\u003CList\u003Cstring\u003E\u003E(), It.IsAny\u003CILog\u003E(), It.IsAny\u003CTimeSpan\u003E(), null, null)).Returns\u003Cstring, IList\u003Cstring\u003E, ILog, TimeSpan, Dictionary\u003Cstring, string\u003E, CancellationToken?\u003E((p, a, l, t, e, c) =\u003E\r\n    {\r\n        processName = p;\r\n        args = a;\r\n        return Task.FromResult(new ProcessExecutionResult { ExitCode = 0, TimedOut = false });\r\n    });\r\n    await _database.AgreeToPromptsAsync(runtime, _dataPath, _udid, _executionLog.Object, bundleIdentifier);\r\n    Assert.Equal(\u0022sqlite3\u0022, processName);\r\n    // assert that the sql is present\r\n    Assert.Contains(_dataPath, args);\r\n    Assert.Contains(expectedArgs.ToString(), args);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SimpleFileListenerTest",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.iOS.Shared.Tests",
    "Methods": [
      {
        "Name": "ConstructorNullPathTest",
        "Body": "Could not load the body for function: ConstructorNullPathTest in class: SimpleFileListenerTest",
        "Smells": []
      },
      {
        "Name": "FileContentIsCopied",
        "Body": "{\r\n    var lines = new[]\r\n    {\r\n        \u0022first line\u0022,\r\n        \u0022second line\u0022,\r\n        \u0022last line\u0022\r\n    };\r\n    // Create a listener, set the writer and ensure that what we write in the file is present in the final path\r\n    using (var sourceWriter = new StreamWriter(_path))\r\n    {\r\n        using var listener = new SimpleFileListener(_path, _log.Object, _testLog.Object, isXml);\r\n        listener.InitializeAndGetPort();\r\n        listener.StartAsync();\r\n        // Write a number of lines and ensure that those are called in the mock\r\n        sourceWriter.WriteLine(\u0022[Runner executing:\u0022);\r\n        foreach (var line in lines)\r\n        {\r\n            sourceWriter.WriteLine(line);\r\n        }\r\n\r\n        sourceWriter.WriteLine(endLine);\r\n        sourceWriter.Flush();\r\n    }\r\n\r\n    Thread.Sleep(200);\r\n    // Verify that the expected lines were added\r\n    foreach (var line in lines)\r\n    {\r\n        _testLog.Verify(l =\u003E l.WriteLine(It.Is\u003Cstring\u003E(ll =\u003E ll.Trim() == line.Trim())), Times.AtLeastOnce);\r\n    }\r\n\r\n    _log.Verify(l =\u003E l.WriteLine(It.Is\u003Cstring\u003E(ll =\u003E ll == \u0022Tests have finished executing\u0022)), Times.AtLeastOnce);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SimpleListenerFactoryTest",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.iOS.Shared.Tests",
    "Methods": [
      {
        "Name": "ConstructorAllowsNullTunnelBore",
        "Body": "{\r\n    _ = new SimpleListenerFactory(null); // if it throws, test fails ;)\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateNotWatchListener",
        "Body": "{\r\n    var(transport, listener, listenerTmpFile) = _factory.Create(RunMode.iOS, _log.Object, _log.Object, true, true, true);\r\n    Assert.Equal(ListenerTransport.Tcp, transport);\r\n    Assert.IsType\u003CSimpleTcpListener\u003E(listener);\r\n    Assert.Null(listenerTmpFile);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateWatchOSSimulator",
        "Body": "{\r\n    var logFullPath = \u0022myfullpath.txt\u0022;\r\n    _ = _log.Setup(l =\u003E l.FullPath).Returns(logFullPath);\r\n    var(transport, listener, listenerTmpFile) = _factory.Create(RunMode.WatchOS, _log.Object, _log.Object, true, true, true);\r\n    Assert.Equal(ListenerTransport.File, transport);\r\n    Assert.IsType\u003CSimpleFileListener\u003E(listener);\r\n    Assert.NotNull(listenerTmpFile);\r\n    Assert.Equal(logFullPath \u002B \u0022.tmp\u0022, listenerTmpFile);\r\n    _log.Verify(l =\u003E l.FullPath, Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateWatchOSDevice",
        "Body": "{\r\n    var(transport, listener, listenerTmpFile) = _factory.Create(RunMode.WatchOS, _log.Object, _log.Object, false, true, true);\r\n    Assert.Equal(ListenerTransport.Http, transport);\r\n    Assert.IsType\u003CSimpleHttpListener\u003E(listener);\r\n    Assert.Null(listenerTmpFile);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UseTcpTunnel",
        "Body": "{\r\n    var f = new SimpleListenerFactory(null);\r\n    Assert.False(f.UseTunnel, \u0022Do not use tunnel.\u0022);\r\n    f = new SimpleListenerFactory(Mock.Of\u003CITunnelBore\u003E());\r\n    Assert.True(f.UseTunnel, \u0022Use tunnel.\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SimpleTcpListenerTest",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.iOS.Shared.Tests",
    "Methods": [
      {
        "Name": "ContentIsSentOverTcp",
        "Body": "{\r\n    var tempResult = Path.GetTempFileName();\r\n    // create a stream to be used and write the data there\r\n    var lines = new string[]\r\n    {\r\n        \u0022first line\u0022,\r\n        \u0022second line\u0022,\r\n        \u0022last line\u0022\r\n    };\r\n    // setup the expected data to be written\r\n    _testLog.Setup(l =\u003E l.Write(It.IsAny\u003Cbyte[]\u003E(), 0, It.IsAny\u003Cint\u003E())).Callback\u003Cbyte[], int, int\u003E((buffer, start, end) =\u003E\r\n    {\r\n        using (var resultStream = File.Create(tempResult))\r\n        { // opening closing a lot, but for the test we do not care\r\n            resultStream.Write(buffer, start, end);\r\n            resultStream.Flush();\r\n        }\r\n    });\r\n    // create a linstener that will start in an other thread, connect to it\r\n    // and send the data.\r\n    var listener = new SimpleTcpListener(_log.Object, _testLog.Object, true, true);\r\n    listener.InitializeAndGetPort();\r\n    var connectionPort = listener.Port;\r\n    listener.StartAsync();\r\n    // create a tcp client which will write the logs, then verity that\r\n    // the expected data was provided\r\n    var client = new TcpClient();\r\n    client.Connect(\u0022localhost\u0022, connectionPort);\r\n    using (var networkStream = client.GetStream())\r\n    using (var streamWriter = new StreamWriter(networkStream))\r\n    {\r\n        foreach (var line in lines)\r\n        {\r\n            streamWriter.WriteLine(line);\r\n            streamWriter.Flush();\r\n        }\r\n    }\r\n\r\n    listener.Cancel();\r\n    bool firstLineFound = false;\r\n    bool secondLineFound = false;\r\n    bool lastLineFound = false;\r\n    // read the data in the tempResult and ensure lines are present\r\n    using (var reader = new StreamReader(tempResult))\r\n    {\r\n        string line;\r\n        while ((line = reader.ReadLine()) != null)\r\n        {\r\n            if (line.EndsWith(lines[0]))\r\n            {\r\n                firstLineFound = true;\r\n            }\r\n\r\n            if (line.EndsWith(lines[1]))\r\n            {\r\n                secondLineFound = true;\r\n            }\r\n\r\n            if (line.EndsWith(lines[2]))\r\n            {\r\n                lastLineFound = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    Assert.True(firstLineFound, \u0022first line\u0022);\r\n    Assert.True(secondLineFound, \u0022second line\u0022);\r\n    Assert.True(lastLineFound, \u0022last line\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CaptureLogTest",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.iOS.Shared.Tests",
    "Methods": [
      {
        "Name": "ConstructorNullFilePath",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E\r\n    {\r\n        var captureLog = new CaptureLog(null, _sourcePath, false);\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CapturePartOfTheFileOnly",
        "Body": "{\r\n    var ignoredLine = \u0022This line should not be captured\u0022;\r\n    var logLines = new[]\r\n    {\r\n        \u0022first line\u0022,\r\n        \u0022second line\u0022,\r\n        \u0022third line\u0022\r\n    };\r\n    File.WriteAllLines(_sourcePath, new[] { ignoredLine });\r\n    using var captureLog = new CaptureLog(_destinationPath, _sourcePath, false);\r\n    captureLog.StartCapture();\r\n    File.AppendAllLines(_sourcePath, logLines);\r\n    captureLog.StopCapture();\r\n    File.AppendAllLines(_sourcePath, new[] { ignoredLine });\r\n    // get the stream and assert we do have the correct lines\r\n    using var captureStream = captureLog.GetReader();\r\n    string logLine;\r\n    while ((logLine = captureStream.ReadLine()) != null)\r\n    {\r\n        Assert.NotEqual(ignoredLine, logLine);\r\n        if (!string.IsNullOrEmpty(logLine))\r\n        {\r\n            Assert.Contains(logLine, logLines);\r\n        }\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CapturePieceByPiece",
        "Body": "{\r\n    var ignoredLine = \u0022This line should not be captured\u0022;\r\n    var logLines = new[]\r\n    {\r\n        \u0022first line\u0022,\r\n        \u0022second line\u0022,\r\n        \u0022third line\u0022\r\n    };\r\n    File.WriteAllLines(_sourcePath, new[] { ignoredLine });\r\n    using var captureLog = new CaptureLog(_destinationPath, _sourcePath, false);\r\n    captureLog.StartCapture();\r\n    File.AppendAllLines(_destinationPath, logLines.Take(1));\r\n    captureLog.Flush();\r\n    Assert.Contains(logLines.First(), File.ReadAllText(_destinationPath));\r\n    File.AppendAllLines(_destinationPath, logLines.Skip(1));\r\n    captureLog.StopCapture();\r\n    // Get the stream and assert we do have the correct lines\r\n    using var captureStream = captureLog.GetReader();\r\n    string logLine;\r\n    while ((logLine = captureStream.ReadLine()) != null)\r\n    {\r\n        Assert.NotEqual(ignoredLine, logLine);\r\n        if (!string.IsNullOrEmpty(logLine))\r\n        {\r\n            Assert.Contains(logLine, logLines);\r\n        }\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CaptureMissingFileTest",
        "Body": "{\r\n    using (var captureLog = new CaptureLog(_destinationPath, _sourcePath, false))\r\n    {\r\n        Assert.Equal(_destinationPath, captureLog.FullPath);\r\n        captureLog.StartCapture();\r\n        captureLog.StopCapture();\r\n    }\r\n\r\n    // Read the data that was added to the capture path and  ensure that we do have the name of the missing file\r\n    using (var reader = new StreamReader(_destinationPath))\r\n    {\r\n        var line = reader.ReadLine();\r\n        Assert.Contains(_sourcePath, line);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CaptureWrongOrder",
        "Body": "{\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E\r\n    {\r\n        using var captureLog = new CaptureLog(_destinationPath, _sourcePath, false);\r\n        captureLog.StopCapture();\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CaptureEverythingAtOnce",
        "Body": "{\r\n    var logLines = new[]\r\n    {\r\n        \u0022first line\u0022,\r\n        \u0022second line\u0022,\r\n        \u0022third line\u0022\r\n    };\r\n    File.WriteAllText(_sourcePath, string.Empty);\r\n    using var captureLog = new CaptureLog(_destinationPath, _sourcePath, false);\r\n    captureLog.StartCapture();\r\n    File.AppendAllLines(_sourcePath, logLines);\r\n    captureLog.StopCapture();\r\n    // get the stream and assert we do have the correct lines\r\n    using var captureStream = captureLog.GetReader();\r\n    string logLine;\r\n    while ((logLine = captureStream.ReadLine()) != null)\r\n    {\r\n        if (!string.IsNullOrEmpty(logLine))\r\n        {\r\n            Assert.Contains(logLine, logLines);\r\n        }\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CaptureEntireFile",
        "Body": "{\r\n    var ignoredLine = \u0022This line should not be captured\u0022;\r\n    var logLines = new List\u003Cstring\u003E()\r\n    {\r\n        \u0022first line\u0022,\r\n        \u0022second line\u0022,\r\n        \u0022third line\u0022\r\n    };\r\n    File.WriteAllLines(_sourcePath, new[] { ignoredLine });\r\n    using var captureLog = new CaptureLog(_destinationPath, _sourcePath, true);\r\n    captureLog.StartCapture();\r\n    File.AppendAllLines(_destinationPath, logLines.Take(1));\r\n    captureLog.Flush();\r\n    Assert.Contains(logLines.First(), File.ReadAllText(_destinationPath));\r\n    File.AppendAllLines(_destinationPath, logLines.Skip(1));\r\n    captureLog.StopCapture();\r\n    // Get the stream and assert we do have the correct lines\r\n    using var captureStream = captureLog.GetReader();\r\n    string logLine;\r\n    logLines.Add(ignoredLine);\r\n    while ((logLine = captureStream.ReadLine()) != null)\r\n    {\r\n        if (!string.IsNullOrEmpty(logLine))\r\n        {\r\n            Assert.Contains(logLine, logLines);\r\n        }\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "LogFileTest",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.iOS.Shared.Tests",
    "Methods": [
      {
        "Name": "ConstructorTest",
        "Body": "{\r\n    using (var log = new LogFile(_description, _path))\r\n    {\r\n        Assert.Equal(_description, log.Description);\r\n        Assert.Equal(_path, log.FullPath);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConstructorNullPathTest",
        "Body": "Could not load the body for function: ConstructorNullPathTest in class: LogFileTest",
        "Smells": []
      },
      {
        "Name": "ConstructorNullDescriptionTest",
        "Body": "{\r\n    using var log = new LogFile(null, _path);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "WriteTest",
        "Body": "{\r\n    const string oldLine = \u0022Hello world!\u0022;\r\n    const string newLine = \u0022Hola mundo!\u0022;\r\n    // create a log, write to it and assert that we have the expected data\r\n    File.WriteAllLines(_path, new[] { oldLine });\r\n    using (var log = new LogFile(_description, _path))\r\n    {\r\n        log.WriteLine(newLine);\r\n        log.Flush();\r\n    }\r\n\r\n    bool oldLineFound = false;\r\n    bool newLineFound = false;\r\n    using (var reader = new StreamReader(_path))\r\n    {\r\n        string line;\r\n        while ((line = reader.ReadLine()) != null)\r\n        {\r\n            if (line == oldLine)\r\n            {\r\n                oldLineFound = true;\r\n            }\r\n\r\n            if (line.EndsWith(newLine)) // consider time stamp\r\n            {\r\n                newLineFound = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    Assert.True(oldLineFound, \u0022old line\u0022);\r\n    Assert.True(newLineFound, \u0022new line\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "WriteNotAppendTest",
        "Body": "{\r\n    const string oldLine = \u0022Hello world!\u0022;\r\n    const string newLine = \u0022Hola mundo!\u0022;\r\n    // create a log, write to it and assert that we have the expected data\r\n    File.WriteAllLines(_path, new[] { oldLine });\r\n    using (var log = new LogFile(_description, _path, false))\r\n    {\r\n        log.WriteLine(newLine);\r\n        log.Flush();\r\n    }\r\n\r\n    bool oldLineFound = false;\r\n    bool newLineFound = false;\r\n    using (var reader = new StreamReader(_path))\r\n    {\r\n        string line;\r\n        while ((line = reader.ReadLine()) != null)\r\n        {\r\n            if (line == oldLine)\r\n            {\r\n                oldLineFound = true;\r\n            }\r\n\r\n            if (line.EndsWith(newLine)) // consider timestamp\r\n            {\r\n                newLineFound = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    Assert.False(oldLineFound, \u0022old line\u0022);\r\n    Assert.True(newLineFound, \u0022new line\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "LogsTest",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.iOS.Shared.Tests",
    "Methods": [
      {
        "Name": "ConstructorTest",
        "Body": "{\r\n    using (var logs = new Logs(_directory))\r\n    {\r\n        Assert.Equal(_directory, logs.Directory);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConstructorNullDirTest",
        "Body": "Could not load the body for function: ConstructorNullDirTest in class: LogsTest",
        "Smells": []
      },
      {
        "Name": "CreateFileTest",
        "Body": "{\r\n    using (var logs = new Logs(_directory))\r\n    {\r\n        var file = logs.CreateFile(_fileName, _description);\r\n        Assert.True(File.Exists(file), \u0022exists\u0022);\r\n        Assert.Equal(_fileName, Path.GetFileName(file));\r\n        Assert.Single(logs);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateFileNullPathTest",
        "Body": "{\r\n    using (var logs = new Logs(_directory))\r\n    {\r\n        _fileName = null;\r\n        var description = \u0022My description\u0022;\r\n        Assert.Throws\u003CArgumentNullException\u003E(() =\u003E logs.CreateFile(_fileName, description));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateFileNullDescriptionTest",
        "Body": "{\r\n    using (var logs = new Logs(_directory))\r\n    {\r\n        string description = null;\r\n        logs.CreateFile(_fileName, description);\r\n        Assert.Single(logs);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddFileTest",
        "Body": "{\r\n    var fullPath = Path.Combine(_directory, _fileName);\r\n    File.WriteAllText(fullPath, \u0022foo\u0022);\r\n    using (var logs = new Logs(_directory))\r\n    {\r\n        var fileLog = logs.AddFile(fullPath, _description);\r\n        Assert.Equal(fullPath, fileLog.FullPath); // path \u0026\u0026 fullPath are the same\r\n        Assert.Equal(Path.Combine(_directory, _fileName), fileLog.FullPath);\r\n        Assert.Equal(_description, fileLog.Description);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddFileNotInDirTest",
        "Body": "{\r\n    var dir1 = Path.Combine(_directory, \u0022dir1\u0022);\r\n    var dir2 = Path.Combine(_directory, \u0022dir2\u0022);\r\n    Directory.CreateDirectory(dir1);\r\n    Directory.CreateDirectory(dir2);\r\n    var filePath = Path.Combine(dir1, \u0022test-file.txt\u0022);\r\n    File.WriteAllText(filePath, \u0022Hello world!\u0022);\r\n    using (var logs = new Logs(dir2))\r\n    {\r\n        var newPath = Path.Combine(dir2, Path.GetFileNameWithoutExtension(_fileName));\r\n        var fileLog = logs.AddFile(filePath, _description);\r\n        Assert.StartsWith(newPath, fileLog.FullPath); // assert new path\r\n        Assert.True(File.Exists(fileLog.FullPath), \u0022copy\u0022);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddFilePathNullTest",
        "Body": "{\r\n    using (var logs = new Logs(_directory))\r\n    {\r\n        Assert.Throws\u003CArgumentNullException\u003E(() =\u003E logs.AddFile(null, _description));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddFileDescriptionNull",
        "Body": "{\r\n    var fullPath = Path.Combine(_directory, _fileName);\r\n    File.WriteAllText(fullPath, \u0022foo\u0022);\r\n    using (var logs = new Logs(_directory))\r\n    {\r\n        logs.Create(fullPath, null);\r\n        Assert.Single(logs);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TestExecutingResultTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.iOS.Shared.Tests",
    "Methods": [
      {
        "Name": "FlagIsPresentWhereItShouldBe",
        "Body": "{\r\n    var withoutFlag = Enum.GetValues(typeof(TestExecutingResult)).Cast\u003CTestExecutingResult\u003E().Except(withFlag);\r\n    foreach (var result in withoutFlag)\r\n    {\r\n        Assert.False(result.HasFlag(flag), $\u0022{result} should not have {flag}\u0022);\r\n    }\r\n\r\n    foreach (var result in withFlag)\r\n    {\r\n        Assert.True(result.HasFlag(flag), $\u0022{result} should have {flag}\u0022);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ResultHasFlag",
        "Body": "{\r\n    foreach (var flag in flags)\r\n    {\r\n        Assert.True(result.HasFlag(flag), $\u0022{result} should have {flag}\u0022);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TestReporterTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.iOS.Shared.Tests",
    "Methods": [
      {
        "Name": "CollectSimulatorResultsSucess",
        "Body": "{\r\n    // set the listener to return a task that we are not going to complete\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    var tcs = new TaskCompletionSource\u003Cbool\u003E();\r\n    _listener.Setup(l =\u003E l.CompletionTask).Returns(tcs.Task); // will never be set to be completed\r\n    // ensure that we do provide the required runlog information so that we know if it was a launch failure or not, we are\r\n    // not dealing with the launch faliure\r\n    _runLog.Setup(l =\u003E l.GetReader()).Returns(new StreamReader(GetRunLogSample()));\r\n    var testReporter = BuildTestReporter();\r\n    var processResult = new ProcessExecutionResult()\r\n    {\r\n        TimedOut = false,\r\n        ExitCode = 0\r\n    };\r\n    await testReporter.CollectSimulatorResult(processResult);\r\n    // we should have timeout, since the task completion source was never set\r\n    Assert.True(testReporter.Success, \u0022success\u0022);\r\n    _processManager.Verify(p =\u003E p.KillTreeAsync(It.IsAny\u003Cint\u003E(), It.IsAny\u003CILog\u003E(), true), Times.Never);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CollectSimulatorResultsLaunchFailureTest",
        "Body": "{\r\n    // similar to the above test, but in this case we ware going to fake a launch issue, that is, the runlog\r\n    // does not contain a PID that we can parse and later try to kill.\r\n    // set the listener to return a task that we are not going to complete\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    var tcs = new TaskCompletionSource\u003Cbool\u003E();\r\n    _listener.Setup(l =\u003E l.CompletionTask).Returns(tcs.Task); // will never be set to be completed\r\n    // empty test file to be returned as the runlog stream\r\n    var tmpFile = Path.GetTempFileName();\r\n    if (!string.IsNullOrEmpty(runLogData))\r\n    {\r\n        using (var writer = new StreamWriter(tmpFile))\r\n        {\r\n            writer.Write(runLogData);\r\n        }\r\n    }\r\n\r\n    // ensure that we do provide the required runlog information so that we know if it was a launch failure or not, we are\r\n    // not dealing with the launch faliure\r\n    _runLog.Setup(l =\u003E l.GetReader()).Returns(new StreamReader(File.Create(tmpFile)));\r\n    var testReporter = BuildTestReporter();\r\n    var processResult = new ProcessExecutionResult()\r\n    {\r\n        TimedOut = true,\r\n        ExitCode = 0\r\n    };\r\n    await testReporter.CollectSimulatorResult(processResult);\r\n    // we should have timeout, since the task completion source was never set\r\n    Assert.False(testReporter.Success, \u0022success\u0022);\r\n    // verify that we do not try to kill a process that never got started\r\n    _processManager.Verify(p =\u003E p.KillTreeAsync(It.IsAny\u003Cint\u003E(), It.IsAny\u003CILog\u003E(), true), Times.Never);\r\n    File.Delete(tmpFile);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CollectSimulatorResultsSuccessLaunchTest",
        "Body": "{\r\n    // fake the best case scenario, we got the process to exit correctly\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    var tcs = new TaskCompletionSource\u003Cobject\u003E();\r\n    var processResult = new ProcessExecutionResult()\r\n    {\r\n        TimedOut = false,\r\n        ExitCode = processExitCode\r\n    };\r\n    // ensure we do not consider it to be a launch failure\r\n    _runLog.Setup(l =\u003E l.GetReader()).Returns(new StreamReader(GetRunLogSample()));\r\n    var testReporter = BuildTestReporter();\r\n    await testReporter.CollectSimulatorResult(processResult);\r\n    // we should have timeout, since the task completion source was never set\r\n    if (processExitCode != 0)\r\n    {\r\n        Assert.False(testReporter.Success, \u0022success\u0022);\r\n    }\r\n    else\r\n    {\r\n        Assert.True(testReporter.Success, \u0022success\u0022);\r\n    }\r\n\r\n    if (processExitCode != 0)\r\n    {\r\n        _processManager.Verify(p =\u003E p.KillTreeAsync(It.IsAny\u003Cint\u003E(), It.IsAny\u003CILog\u003E(), true), Times.Once);\r\n    }\r\n    else\r\n    {\r\n        // verify that we do not try to kill a process that never got started\r\n        _processManager.Verify(p =\u003E p.KillTreeAsync(It.IsAny\u003Cint\u003E(), It.IsAny\u003CILog\u003E(), true), Times.Never);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CollectDeviceResultTimeoutTest",
        "Body": "{\r\n    // set the listener to return a task that we are not going to complete\r\n    var tcs = new TaskCompletionSource\u003Cbool\u003E();\r\n    _listener.Setup(l =\u003E l.CompletionTask).Returns(tcs.Task); // will never be set to be completed\r\n    // ensure that we do provide the required runlog information so that we know if it was a launch failure or not, we are\r\n    // not dealing with the launch faliure\r\n    _runLog.Setup(l =\u003E l.GetReader()).Returns(new StreamReader(GetRunLogSample()));\r\n    var testReporter = BuildTestReporter();\r\n    var processResult = new ProcessExecutionResult()\r\n    {\r\n        TimedOut = true,\r\n        ExitCode = 0\r\n    };\r\n    await testReporter.CollectDeviceResult(processResult);\r\n    // we should have timeout, since the task completion source was never set\r\n    Assert.False(testReporter.Success, \u0022success\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CollectDeviceResultSuccessTest",
        "Body": "{\r\n    // fake the best case scenario, we got the process to exit correctly\r\n    var processResult = new ProcessExecutionResult()\r\n    {\r\n        TimedOut = false,\r\n        ExitCode = processExitCode\r\n    };\r\n    // ensure we do not consider it to be a launch failure\r\n    _runLog.Setup(l =\u003E l.GetReader()).Returns(new StreamReader(GetRunLogSample()));\r\n    var testReporter = BuildTestReporter();\r\n    await testReporter.CollectDeviceResult(processResult);\r\n    // we should have timeout, since the task completion source was never set\r\n    if (processExitCode != 0)\r\n    {\r\n        Assert.False(testReporter.Success, \u0022success\u0022);\r\n    }\r\n    else\r\n    {\r\n        Assert.True(testReporter.Success, \u0022success\u0022);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LaunchCallbackFaultedTest",
        "Body": "{\r\n    var testReporter = BuildTestReporter();\r\n    var t = Task.FromException\u003Cbool\u003E(new Exception(\u0022test\u0022));\r\n    testReporter.LaunchCallback(t);\r\n    // verify that we did report the launch proble\r\n    _mainLog.Verify(l =\u003E l.WriteLine(It.Is\u003Cstring\u003E(s =\u003E s.StartsWith($\u0022Test execution failed:\u0022))), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LaunchCallbackCanceledTest",
        "Body": "{\r\n    var testReporter = BuildTestReporter();\r\n    var tcs = new TaskCompletionSource\u003Cbool\u003E();\r\n    tcs.TrySetCanceled();\r\n    testReporter.LaunchCallback(tcs.Task);\r\n    // verify we notify that the execution was canceled\r\n    _mainLog.Verify(l =\u003E l.WriteLine(It.Is\u003Cstring\u003E(s =\u003E s.Equals(\u0022Test execution was cancelled\u0022))), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LaunchCallbackSuccessTest",
        "Body": "{\r\n    var testReporter = BuildTestReporter();\r\n    var t = Task.FromResult(true);\r\n    testReporter.LaunchCallback(t);\r\n    _mainLog.Verify(l =\u003E l.WriteLine(It.Is\u003Cstring\u003E(s =\u003E s.Equals(\u0022Test execution started\u0022))), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LaunchCallbackTimedOutTest",
        "Body": "{\r\n    var tcs = new TaskCompletionSource\u003Cbool\u003E();\r\n    _listener.Setup(l =\u003E l.ConnectedTask).Returns(Task.FromResult(true));\r\n    var testReporter = BuildTestReporter();\r\n    var t = Task.FromResult(false);\r\n    testReporter.LaunchCallback(t);\r\n    _mainLog.Verify(l =\u003E l.WriteLine(It.Is\u003Cstring\u003E(s =\u003E s.Contains(\u0022Test execution timed out\u0022))), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LaunchCallbackLaunchTimedOutTest",
        "Body": "{\r\n    var tcs = new TaskCompletionSource\u003Cbool\u003E();\r\n    _listener.Setup(l =\u003E l.ConnectedTask).Returns(Task.FromResult(false));\r\n    var testReporter = BuildTestReporter();\r\n    var t = Task.FromResult(false);\r\n    testReporter.LaunchCallback(t);\r\n    _mainLog.Verify(l =\u003E l.WriteLine(It.Is\u003Cstring\u003E(s =\u003E s.Contains(\u0022Test failed to start\u0022))), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ParseResultFailingTestsTest",
        "Body": "{\r\n    var sample = CreateSampleFile(\u0022NUnitV3SampleFailure.xml\u0022);\r\n    var listenerLog = Mock.Of\u003CIFileBackedLog\u003E(l =\u003E l.FullPath == sample);\r\n    _listener.Setup(l =\u003E l.TestLog).Returns(listenerLog);\r\n    var testReporter = BuildTestReporter();\r\n    var(result, resultMessage) = await testReporter.ParseResult();\r\n    Assert.Equal(TestExecutingResult.Failed, result);\r\n    Assert.Equal(\u0022Tests run: 5 Passed: 3 Inconclusive: 1 Failed: 2 Ignored: 4\u0022, resultMessage);\r\n    // ensure that we do  call the crash reporter end capture but with 0, since it was a success\r\n    _crashReporter.Verify(c =\u003E c.EndCaptureAsync(TimeSpan.FromSeconds(5)), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ParseResultSuccessTestsTest",
        "Body": "{\r\n    // get a file with a success result so that we can return it as part of the listener log\r\n    var sample = CreateSampleFile(\u0022NUnitV3SampleSuccess.xml\u0022);\r\n    var listenerLog = Mock.Of\u003CIFileBackedLog\u003E(l =\u003E l.FullPath == sample);\r\n    _listener.Setup(l =\u003E l.TestLog).Returns(listenerLog);\r\n    var testReporter = BuildTestReporter();\r\n    var(result, resultMessage) = await testReporter.ParseResult();\r\n    Assert.Equal(TestExecutingResult.Succeeded, result);\r\n    Assert.Equal(\u0022Tests run: 5 Passed: 4 Inconclusive: 0 Failed: 0 Ignored: 1\u0022, resultMessage);\r\n    // ensure that we do  call the crash reporter end capture but with 0, since it was a success\r\n    _crashReporter.Verify(c =\u003E c.EndCaptureAsync(It.Is\u003CTimeSpan\u003E(t =\u003E t.TotalSeconds == 0)), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ParseResultTimeoutTestsTest",
        "Body": "{\r\n    // more complicated test, we need to fake a process timeout, then ensure that the result is the expected one\r\n    var tcs = new TaskCompletionSource\u003Cbool\u003E();\r\n    _listener.Setup(l =\u003E l.CompletionTask).Returns(tcs.Task); // will never be set to be completed\r\n    var listenerLog = new Mock\u003CIFileBackedLog\u003E();\r\n    _listener.Setup(l =\u003E l.TestLog).Returns(listenerLog.Object);\r\n    listenerLog.Setup(l =\u003E l.FullPath).Returns(\u0022/my/missing/path\u0022);\r\n    // ensure that we do provide the required runlog information so that we know if it was a launch failure or not, we are\r\n    // not dealing with the launch faliure\r\n    _runLog.Setup(l =\u003E l.GetReader()).Returns(new StreamReader(GetRunLogSample()));\r\n    var failurePath = Path.Combine(_logsDirectory, \u0022my-failure.xml\u0022);\r\n    var failureLog = new Mock\u003CIFileBackedLog\u003E();\r\n    failureLog.Setup(l =\u003E l.FullPath).Returns(failurePath);\r\n    _logs.Setup(l =\u003E l.Create(It.IsAny\u003Cstring\u003E(), It.IsAny\u003Cstring\u003E(), null)).Returns(failureLog.Object);\r\n    // create some data for the stderr\r\n    var stderr = Path.GetTempFileName();\r\n    using (var stream = File.Create(stderr))\r\n    using (var writer = new StreamWriter(stream))\r\n    {\r\n        await writer.WriteAsync(\u0022Some data to be added to stderr of the failure\u0022);\r\n    }\r\n\r\n    _mainLog.Setup(l =\u003E l.FullPath).Returns(stderr);\r\n    var testReporter = BuildTestReporter();\r\n    var processResult = new ProcessExecutionResult()\r\n    {\r\n        TimedOut = true,\r\n        ExitCode = 0\r\n    };\r\n    await testReporter.CollectDeviceResult(processResult);\r\n    // we should have timeout, since the task completion source was never set\r\n    var(result, failure) = await testReporter.ParseResult();\r\n    Assert.False(testReporter.Success, \u0022success\u0022);\r\n    // verify that we state that there was a timeout\r\n    _mainLog.Verify(l =\u003E l.WriteLine(It.Is\u003Cstring\u003E(s =\u003E s.Equals(\u0022Test run never launched\u0022))), Times.Once);\r\n    // assert that the timeout failure was created.\r\n    Assert.True(File.Exists(failurePath), \u0022failure path\u0022);\r\n    var isTimeoutFailure = false;\r\n    using (var reader = new StreamReader(failurePath))\r\n    {\r\n        string line = null;\r\n        while ((line = await reader.ReadLineAsync()) != null)\r\n        {\r\n            if (line.Contains(\u0022App Timeout\u0022))\r\n            {\r\n                isTimeoutFailure = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    Assert.True(isTimeoutFailure, \u0022correct xml\u0022);\r\n    File.Delete(failurePath);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ParseResultLaunchTimedOutTest",
        "Body": "{\r\n    // set the listener to return a task that we are not going to complete\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    var tcs = new TaskCompletionSource\u003Cbool\u003E();\r\n    _listener.Setup(l =\u003E l.ConnectedTask).Returns(tcs.Task); // will never be set to be completed\r\n    var listenerLog = Mock.Of\u003CIFileBackedLog\u003E(l =\u003E l.FullPath == \u0022/this/path/does/not/exist\u0022);\r\n    _listener.Setup(l =\u003E l.TestLog).Returns(listenerLog);\r\n    var failurePath = Path.Combine(_logsDirectory, \u0022my-failure.xml\u0022);\r\n    var failureLog = new Mock\u003CIFileBackedLog\u003E();\r\n    failureLog.Setup(l =\u003E l.FullPath).Returns(failurePath);\r\n    _logs.Setup(l =\u003E l.Create(It.IsAny\u003Cstring\u003E(), It.IsAny\u003Cstring\u003E(), null)).Returns(failureLog.Object);\r\n    // create some data for the stderr\r\n    var stderr = Path.GetTempFileName();\r\n    using (var stream = File.Create(stderr))\r\n    using (var writer = new StreamWriter(stream))\r\n    {\r\n        await writer.WriteAsync(\u0022Some data to be added to stderr of the failure\u0022);\r\n    }\r\n\r\n    _mainLog.Setup(l =\u003E l.FullPath).Returns(stderr);\r\n    var testReporter = BuildTestReporter();\r\n    // this is called when launch timeout expires\r\n    // false means we never received a connection which would flip it to true\r\n    testReporter.LaunchCallback(Task.FromResult(false));\r\n    var(result, resultMessage) = await testReporter.ParseResult();\r\n    Assert.Equal(TestExecutingResult.LaunchTimedOut, result);\r\n    // verify that we do not try to kill a process that never got started\r\n    _processManager.Verify(p =\u003E p.KillTreeAsync(It.IsAny\u003Cint\u003E(), It.IsAny\u003CILog\u003E(), true), Times.Never);\r\n    _crashReporter.Verify(c =\u003E c.EndCaptureAsync(TimeSpan.FromSeconds(5)), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PListExtensionsTests",
    "Message": "This class has Lack of Cohesion of Test Cases",
    "ProjectName": "Microsoft.DotNet.XHarness.iOS.Shared.Tests",
    "Methods": [
      {
        "Name": "SetMinimumOSVersion",
        "Body": "{\r\n    var version = \u0022MyMinVersion\u0022;\r\n    _plist.SetMinimumOSVersion(version);\r\n    Assert.Equal(version, _plist.GetMinimumOSVersion());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SetNullMinimumOSVersion",
        "Body": "Could not load the body for function: SetNullMinimumOSVersion in class: PListExtensionsTests",
        "Smells": []
      },
      {
        "Name": "SetMinimummacOSVersion",
        "Body": "{\r\n    var version = \u0022MyMaccMinVersion\u0022;\r\n    _plist.SetMinimummacOSVersion(version);\r\n    Assert.Equal(version, _plist.GetMinimummacOSVersion());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SetNullMinimummacOSVersion",
        "Body": "Could not load the body for function: SetNullMinimummacOSVersion in class: PListExtensionsTests",
        "Smells": []
      },
      {
        "Name": "SetCFBundleDisplayName",
        "Body": "{\r\n    var displayName = \u0022MySuperApp\u0022;\r\n    _plist.SetCFBundleDisplayName(displayName);\r\n    Assert.Equal(displayName, _plist.GetCFBundleDisplayName());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SetNullCFBundleDisplayName",
        "Body": "Could not load the body for function: SetNullCFBundleDisplayName in class: PListExtensionsTests",
        "Smells": []
      },
      {
        "Name": "SetCFBundleIdentifier",
        "Body": "{\r\n    var bundleIdentifier = \u0022my.company.super.app\u0022;\r\n    _plist.SetCFBundleIdentifier(bundleIdentifier);\r\n    Assert.Equal(bundleIdentifier, _plist.GetCFBundleIdentifier());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SetNullCFBundleIdentifier",
        "Body": "Could not load the body for function: SetNullCFBundleIdentifier in class: PListExtensionsTests",
        "Smells": []
      },
      {
        "Name": "SetCFBundleName",
        "Body": "{\r\n    var bundleName = \u0022MySuper.app\u0022;\r\n    _plist.SetCFBundleName(bundleName);\r\n    Assert.Equal(bundleName, _plist.GetCFBundleName());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SetNullCFBundleName",
        "Body": "Could not load the body for function: SetNullCFBundleName in class: PListExtensionsTests",
        "Smells": []
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ProjectFileExtensionsTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.iOS.Shared.Tests",
    "Methods": [
      {
        "Name": "GetInfoPListNode",
        "Body": "{\r\n    // Exact Include\r\n    Assert.NotNull(ProjectFileExtensions.GetInfoPListNode(GetMSBuildProject(\u0022\u003CItemGroup\u003E\u003CNone Include=\\\u0022Info.plist\\\u0022 /\u003E\u003C/ItemGroup\u003E\u0022)));\r\n    Assert.NotNull(ProjectFileExtensions.GetInfoPListNode(GetMSBuildProject(\u0022\u003CItemGroup\u003E\u003CBundleResource Include=\\\u0022Info.plist\\\u0022 /\u003E\u003C/ItemGroup\u003E\u0022)));\r\n    Assert.NotNull(ProjectFileExtensions.GetInfoPListNode(GetMSBuildProject(\u0022\u003CItemGroup\u003E\u003CContent Include=\\\u0022Info.plist\\\u0022 /\u003E\u003C/ItemGroup\u003E\u0022)));\r\n    Assert.Null(ProjectFileExtensions.GetInfoPListNode(GetMSBuildProject(\u0022\u003CItemGroup\u003E\u003CWhatever Include=\\\u0022Info.plist\\\u0022 /\u003E\u003C/ItemGroup\u003E\u0022)));\r\n    // With LogicalName\r\n    Assert.NotNull(ProjectFileExtensions.GetInfoPListNode(GetMSBuildProject(\u0022\u003CItemGroup\u003E\u003CNone Include=\\\u0022doc\\\u0022\u003E\u003CLogicalName\u003EInfo.plist\u003C/LogicalName\u003E\u003C/None\u003E\u003C/ItemGroup\u003E\u0022)));\r\n    Assert.NotNull(ProjectFileExtensions.GetInfoPListNode(GetMSBuildProject(\u0022\u003CItemGroup\u003E\u003CBundleResource Include=\\\u0022doc\\\u0022\u003E\u003CLogicalName\u003EInfo.plist\u003C/LogicalName\u003E\u003C/BundleResource\u003E\u003C/ItemGroup\u003E\u0022)));\r\n    Assert.NotNull(ProjectFileExtensions.GetInfoPListNode(GetMSBuildProject(\u0022\u003CItemGroup\u003E\u003CContent Include=\\\u0022doc\\\u0022\u003E\u003CLogicalName\u003EInfo.plist\u003C/LogicalName\u003E\u003C/Content\u003E\u003C/ItemGroup\u003E\u0022)));\r\n    Assert.Null(ProjectFileExtensions.GetInfoPListNode(GetMSBuildProject(\u0022\u003CItemGroup\u003E\u003CWhatever Include=\\\u0022Info.plist\\\u0022\u003E\u003CLogicalName\u003EInfo.plist\u003C/LogicalName\u003E\u003C/Whatever\u003E\u003C/ItemGroup\u003E\u0022)));\r\n    // With Link\r\n    Assert.NotNull(ProjectFileExtensions.GetInfoPListNode(GetMSBuildProject(\u0022\u003CItemGroup\u003E\u003CNone Include=\\\u0022doc\\\u0022\u003E\u003CLink\u003EInfo.plist\u003C/Link\u003E\u003C/None\u003E\u003C/ItemGroup\u003E\u0022)));\r\n    Assert.NotNull(ProjectFileExtensions.GetInfoPListNode(GetMSBuildProject(\u0022\u003CItemGroup\u003E\u003CBundleResource Include=\\\u0022doc\\\u0022\u003E\u003CLink\u003EInfo.plist\u003C/Link\u003E\u003C/BundleResource\u003E\u003C/ItemGroup\u003E\u0022)));\r\n    Assert.NotNull(ProjectFileExtensions.GetInfoPListNode(GetMSBuildProject(\u0022\u003CItemGroup\u003E\u003CContent Include=\\\u0022doc\\\u0022\u003E\u003CLink\u003EInfo.plist\u003C/Link\u003E\u003C/Content\u003E\u003C/ItemGroup\u003E\u0022)));\r\n    Assert.Null(ProjectFileExtensions.GetInfoPListNode(GetMSBuildProject(\u0022\u003CItemGroup\u003E\u003CWhatever Include=\\\u0022Info.plist\\\u0022\u003E\u003CLink\u003EInfo.plist\u003C/Link\u003E\u003C/Whatever\u003E\u003C/ItemGroup\u003E\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "MtouchArchPropertyIsDetected",
        "Body": "{\r\n    var assembly = GetType().Assembly;\r\n    var name = assembly.GetManifestResourceNames().Where(a =\u003E a.EndsWith(\u0022MtouchArchMissingInConfiguration.xml\u0022, StringComparison.Ordinal)).First();\r\n    var reader = new StreamReader(assembly.GetManifestResourceStream(name)!);\r\n    var csproj = CreateDoc(reader.ReadToEnd());\r\n    var arch = csproj.GetMtouchArch(\u0022iPhone\u0022, \u0022Release64\u0022);\r\n    Assert.Equal(\u0022ARM64\u0022, arch);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "MissingMtouchArchPropertyInConfigurationIsHandled",
        "Body": "{\r\n    var assembly = GetType().Assembly;\r\n    var name = assembly.GetManifestResourceNames().Where(a =\u003E a.EndsWith(\u0022MtouchArchMissingInConfiguration.xml\u0022, StringComparison.Ordinal)).First();\r\n    var reader = new StreamReader(assembly.GetManifestResourceStream(name)!);\r\n    var csproj = CreateDoc(reader.ReadToEnd());\r\n    var arch = csproj.GetMtouchArch(\u0022iPhoneSimulator\u0022, \u0022Debug\u0022);\r\n    Assert.Null(arch);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "MissingMtouchArchPropertyInCsprojIsHandled",
        "Body": "{\r\n    var assembly = GetType().Assembly;\r\n    var name = assembly.GetManifestResourceNames().Where(a =\u003E a.EndsWith(\u0022MtouchArchMissingEverywhere.xml\u0022, StringComparison.Ordinal)).First();\r\n    var reader = new StreamReader(assembly.GetManifestResourceStream(name)!);\r\n    var csproj = CreateDoc(reader.ReadToEnd());\r\n    var arch = csproj.GetMtouchArch(\u0022iPhoneSimulator\u0022, \u0022Debug\u0022);\r\n    Assert.Null(arch);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "XmlResultParserTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.iOS.Shared.Tests",
    "Methods": [
      {
        "Name": "IsValidXmlMissingFileTest",
        "Body": "{\r\n    var path = Path.GetTempFileName();\r\n    File.Delete(path);\r\n    Assert.False(_resultParser.IsValidXml(path, out _), \u0022missing file\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsValidXmlTest",
        "Body": "{\r\n    var path = CreateResultSample(jargon);\r\n    Assert.True(_resultParser.IsValidXml(path, out var resultJargon), \u0022is valid\u0022);\r\n    Assert.Equal(jargon, resultJargon);\r\n    File.Delete(path);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetXmlFilePathTest",
        "Body": "{\r\n    var orignialPath = \u0022/path/to/a/xml/result.xml\u0022;\r\n    var xmlPath = _resultParser.GetXmlFilePath(orignialPath, jargon);\r\n    var fileName = Path.GetFileName(xmlPath);\r\n    Assert.StartsWith(prefix, fileName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CleanXmlPingTest",
        "Body": "{\r\n    var path = CreateResultSample(jargon, includePing: true);\r\n    var cleanPath = path \u002B \u0022_clean\u0022;\r\n    _resultParser.CleanXml(path, cleanPath);\r\n    Assert.True(_resultParser.IsValidXml(cleanPath, out var resultJargon), \u0022is valid\u0022);\r\n    Assert.Equal(jargon, resultJargon);\r\n    File.Delete(path);\r\n    File.Delete(cleanPath);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CleanXmlTouchUnitTest",
        "Body": "{\r\n    // similar to CleanXmlPingTest but using TouchUnit, so we do not want to see the extra nodes\r\n    var path = CreateResultSample(XmlResultJargon.TouchUnit, includePing: true);\r\n    var cleanPath = path \u002B \u0022_clean\u0022;\r\n    _resultParser.CleanXml(path, cleanPath);\r\n    Assert.True(_resultParser.IsValidXml(cleanPath, out var resultJargon), \u0022is valid\u0022);\r\n    Assert.Equal(XmlResultJargon.NUnitV2, resultJargon);\r\n    // load the xml, ensure we do not have the nodes we removed\r\n    var doc = XDocument.Load(cleanPath);\r\n    Assert.False(doc.Descendants().Where(e =\u003E e.Name == \u0022TouchUnitTestRun\u0022).Any(), \u0022TouchUnitTestRun\u0022);\r\n    Assert.False(doc.Descendants().Where(e =\u003E e.Name == \u0022NUnitOutput\u0022).Any(), \u0022NUnitOutput\u0022);\r\n    File.Delete(path);\r\n    File.Delete(cleanPath);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateMissingDataTest",
        "Body": "{\r\n    string appName = \u0022TestApp\u0022;\r\n    var path = CreateResultSample(XmlResultJargon.NUnitV3);\r\n    var cleanPath = path \u002B \u0022_clean\u0022;\r\n    _resultParser.CleanXml(path, cleanPath);\r\n    var updatedXml = path \u002B \u0022_updated\u0022;\r\n    var logs = new[]\r\n    {\r\n        \u0022/first/path\u0022,\r\n        \u0022/second/path\u0022,\r\n        \u0022/last/path\u0022\r\n    };\r\n    _resultParser.UpdateMissingData(cleanPath, updatedXml, appName, logs);\r\n    // assert that the required info was updated\r\n    Assert.True(File.Exists(updatedXml), \u0022file exists\u0022);\r\n    var doc = XDocument.Load(updatedXml);\r\n    var testSuiteElements = doc.Descendants().Where(e =\u003E e.Name == \u0022test-suite\u0022 \u0026\u0026 e.Attribute(\u0022type\u0022)?.Value == \u0022Assembly\u0022);\r\n    // assert root node contains the attachments\r\n    var rootNode = testSuiteElements.FirstOrDefault();\r\n    Assert.NotNull(rootNode);\r\n    var attachments = rootNode.Descendants().Where(e =\u003E e.Name == \u0022attachment\u0022);\r\n    var failureCount = rootNode.Descendants().Where(e =\u003E e.Name == \u0022test-case\u0022 \u0026\u0026 e.Attribute(\u0022result\u0022).Value == \u0022Failed\u0022).Count();\r\n    Assert.Equal(logs.Length * (failureCount \u002B 1), attachments.Count());\r\n    // assert that name and full name are present and are the app name\r\n    foreach (var node in testSuiteElements)\r\n    {\r\n        Assert.Equal(appName, node.Attribute(\u0022name\u0022).Value);\r\n        Assert.Equal(appName, node.Attribute(\u0022fullname\u0022).Value);\r\n    }\r\n\r\n    File.Delete(path);\r\n    File.Delete(cleanPath);\r\n    File.Delete(updatedXml);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetVSTSFileNameTest",
        "Body": "{\r\n    var path = Path.GetTempFileName();\r\n    var newPath = XmlResultParser.GetVSTSFilename(path);\r\n    Assert.StartsWith(\u0022vsts-\u0022, Path.GetFileName(newPath));\r\n    File.Delete(path);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GenerateFailureTest",
        "Body": "{\r\n    var src = \u0022test-case\u0022;\r\n    var appName = \u0022MyUnitTest\u0022;\r\n    var variation = \u0022Debug\u0022;\r\n    var title = \u0022Testing\u0022;\r\n    var message = \u0022This is a test\u0022;\r\n    var stderrMessage = \u0022Something went very wrong\u0022;\r\n    var stderrPath = Path.GetTempFileName();\r\n    // write the message in the stderrParh that should be read\r\n    using (var writer = new StreamWriter(stderrPath))\r\n    {\r\n        writer.WriteLine(stderrMessage);\r\n    }\r\n\r\n    // create a path with data in it\r\n    var logs = new Mock\u003CILogs\u003E();\r\n    var tmpLogMock = new Mock\u003CIFileBackedLog\u003E();\r\n    var xmlLogMock = new Mock\u003CIFileBackedLog\u003E();\r\n    var tmpPath = Path.GetTempFileName();\r\n    var finalPath = Path.GetTempFileName();\r\n    // create a number of fake logs to be added to the failure\r\n    var logsDir = Path.GetTempFileName();\r\n    File.Delete(logsDir);\r\n    Directory.CreateDirectory(logsDir);\r\n    var failureLogs = new[]\r\n    {\r\n        \u0022first.txt\u0022,\r\n        \u0022second.txt\u0022,\r\n        \u0022last.txt\u0022\r\n    };\r\n    foreach (var file in failureLogs)\r\n    {\r\n        var path = Path.Combine(logsDir, file);\r\n        File.WriteAllText(path, \u0022\u0022);\r\n    }\r\n\r\n    // expect the creation of the two diff xml file logs\r\n    _ = logs.Setup(l =\u003E l.Create(It.IsAny\u003Cstring\u003E(), \u0022Failure Log tmp\u0022, null)).Returns(tmpLogMock.Object);\r\n    _ = logs.Setup(l =\u003E l.Create(It.IsAny\u003Cstring\u003E(), LogType.XmlLog.ToString(), null)).Returns(xmlLogMock.Object);\r\n    if (jargon == XmlResultJargon.NUnitV3)\r\n    {\r\n        _ = logs.Setup(l =\u003E l.Directory).Returns(logsDir);\r\n        _ = tmpLogMock.Setup(tmpLog =\u003E tmpLog.FullPath).Returns(tmpPath);\r\n    }\r\n\r\n    // return the two temp files so that we can later validate that everything is present\r\n    _ = xmlLogMock.Setup(xmlLog =\u003E xmlLog.FullPath).Returns(finalPath);\r\n    _resultParser.GenerateFailure(logs.Object, src, appName, variation, title, message, stderrPath, jargon);\r\n    // actual assertions do happen in the validation functions\r\n    s_validationMap[jargon](src, appName, variation, title, message, stderrMessage, finalPath, failureLogs.Length);\r\n    // verify that we are correctly adding the logs\r\n    logs.Verify(l =\u003E l.Create(It.IsAny\u003Cstring\u003E(), It.IsAny\u003Cstring\u003E(), null), jargon == XmlResultJargon.NUnitV3 ? Times.AtMost(2) : Times.AtMostOnce());\r\n    if (jargon == XmlResultJargon.NUnitV3)\r\n    {\r\n        logs.Verify(l =\u003E l.Directory, Times.Once);\r\n        tmpLogMock.Verify(l =\u003E l.FullPath, Times.AtLeastOnce);\r\n    }\r\n\r\n    xmlLogMock.Verify(l =\u003E l.FullPath, Times.AtLeastOnce);\r\n    // clean files\r\n    File.Delete(stderrPath);\r\n    File.Delete(tmpPath);\r\n    File.Delete(finalPath);\r\n    Directory.Delete(logsDir, true);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "Issue8214Test",
        "Body": "{\r\n    string expectedResultLine = \u0022Tests run: 2376 Passed: 2301 Inconclusive: 13 Failed: 1 Ignored: 74\u0022;\r\n    // get the sample that was added to the issue to validate that we do parse the resuls correctly and copy it to a local\r\n    // path to be parsed\r\n    var name = GetType().Assembly.GetManifestResourceNames().Where(a =\u003E a.EndsWith(\u0022Issue8214.xml\u0022, StringComparison.Ordinal)).FirstOrDefault();\r\n    var tempPath = Path.GetTempFileName();\r\n    var destinationFile = Path.GetTempFileName();\r\n    using (var outputStream = new StreamWriter(tempPath))\r\n    using (var sampleStream = new StreamReader(GetType().Assembly.GetManifestResourceStream(name)))\r\n    {\r\n        string line;\r\n        while ((line = sampleStream.ReadLine()) != null)\r\n        {\r\n            outputStream.WriteLine(line);\r\n        }\r\n    }\r\n\r\n    var(resultLine, failed) = _resultParser.ParseResults(tempPath, XmlResultJargon.NUnitV3, destinationFile);\r\n    Assert.True(failed, \u0022failed\u0022);\r\n    Assert.Equal(expectedResultLine, resultLine);\r\n    // verify that the destination does contain the result line\r\n    string resultLineInDestinationFile = null;\r\n    using (var resultReader = new StreamReader(destinationFile))\r\n    {\r\n        string line;\r\n        while ((line = resultReader.ReadLine()) != null)\r\n        {\r\n            if (line.Contains(\u0022Tests run:\u0022))\r\n            {\r\n                resultLineInDestinationFile = line;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    Assert.NotNull(resultLineInDestinationFile);\r\n    Assert.Equal(expectedResultLine, resultLineInDestinationFile);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DoNotGenerateHtmlReport",
        "Body": "{\r\n    // get the sample xml to parse\r\n    var name = GetType().Assembly.GetManifestResourceNames().Where(a =\u003E a.EndsWith(xmlFile, StringComparison.Ordinal)).FirstOrDefault();\r\n    using var validXmlSource = new StreamReader(GetType().Assembly.GetManifestResourceStream(name));\r\n    using var source = new StreamReader(GetType().Assembly.GetManifestResourceStream(name));\r\n    var tempPath = Path.GetTempFileName();\r\n    using (var outputStream = new StreamWriter(tempPath))\r\n    using (var sampleStream = new StreamReader(GetType().Assembly.GetManifestResourceStream(name)))\r\n    {\r\n        string line;\r\n        while ((line = sampleStream.ReadLine()) != null)\r\n        {\r\n            outputStream.WriteLine(line);\r\n        }\r\n    }\r\n\r\n    // Get the xml type\r\n    Assert.True(_resultParser.IsValidXml(validXmlSource, out var type));\r\n    // generate the results\r\n    var(resultLine, failed) = _resultParser.ParseResults(tempPath, type, humanReadableReportDestination: (StreamWriter)null);\r\n    Assert.Equal(expectedFailure, failed);\r\n    Assert.Equal(expectedResultLine, resultLine);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Issue91Test",
        "Body": "{\r\n    string expectedResultLine = \u0022Tests run: 3 Passed: 1 Inconclusive: 0 Failed: 1 Ignored: 1\u0022;\r\n    var name = GetType().Assembly.GetManifestResourceNames().Where(a =\u003E a.EndsWith(\u0022Issue95.xml\u0022, StringComparison.Ordinal)).FirstOrDefault();\r\n    var tempPath = Path.GetTempFileName();\r\n    using (var outputStream = new StreamWriter(tempPath))\r\n    using (var sampleStream = new StreamReader(GetType().Assembly.GetManifestResourceStream(name)))\r\n    {\r\n        string line;\r\n        while ((line = sampleStream.ReadLine()) != null)\r\n        {\r\n            outputStream.WriteLine(line);\r\n        }\r\n    }\r\n\r\n    var(resultLine, failed) = _resultParser.ParseResults(tempPath, XmlResultJargon.NUnitV2, (StreamWriter)null);\r\n    Assert.True(failed, \u0022failed\u0022);\r\n    Assert.Equal(expectedResultLine, resultLine);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "HumanReadableResultsTest",
        "Body": "{\r\n    // get the sample xml to parse\r\n    var name = GetType().Assembly.GetManifestResourceNames().Where(a =\u003E a.EndsWith(xmlFile, StringComparison.Ordinal)).FirstOrDefault();\r\n    using var validXmlSource = new StreamReader(GetType().Assembly.GetManifestResourceStream(name));\r\n    using var source = new StreamReader(GetType().Assembly.GetManifestResourceStream(name));\r\n    using var memoryStream = new MemoryStream();\r\n    using var destination = new StreamWriter(memoryStream);\r\n    var tempPath = Path.GetTempFileName();\r\n    using (var outputStream = new StreamWriter(tempPath))\r\n    using (var sampleStream = new StreamReader(GetType().Assembly.GetManifestResourceStream(name)))\r\n    {\r\n        string line;\r\n        while ((line = sampleStream.ReadLine()) != null)\r\n        {\r\n            outputStream.WriteLine(line);\r\n        }\r\n    }\r\n\r\n    // Get the xml type\r\n    Assert.True(_resultParser.IsValidXml(validXmlSource, out var type));\r\n    // generate the results\r\n    var(resultLine, failed) = _resultParser.ParseResults(tempPath, type, destination);\r\n    destination.Flush();\r\n    memoryStream.Position = 0;\r\n    using var reader = new StreamReader(memoryStream);\r\n    var output = reader.ReadToEnd();\r\n    Assert.Equal(expectedFailure, failed);\r\n    Assert.Equal(expectedResultLine, resultLine);\r\n    if (additionalLines != null)\r\n    {\r\n        var lines = output.Split(\u0027\\n\u0027);\r\n        foreach (var line in additionalLines)\r\n        {\r\n            Assert.Contains(line, lines);\r\n        }\r\n    }\r\n\r\n    if (expectedFailure)\r\n    {\r\n        Assert.Contains(\u0022[FAIL]\u0022, output);\r\n    }\r\n    else\r\n    {\r\n        Assert.DoesNotContain(\u0022[FAIL]\u0022, output);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NUnitV2GenerateTestReport",
        "Body": "{\r\n    var name = GetType().Assembly.GetManifestResourceNames().Where(a =\u003E a.EndsWith(\u0022NUnitV2SampleFailure.xml\u0022, StringComparison.Ordinal)).FirstOrDefault();\r\n    using var writer = new StringWriter();\r\n    using var stream = GetType().Assembly.GetManifestResourceStream(name);\r\n    using var reader = new StreamReader(stream);\r\n    _resultParser.GenerateTestReport(writer, reader, XmlResultJargon.NUnitV2);\r\n    var expectedOutput = @\u0022\u003Cdiv style=\u0027padding-left: 15px;\u0027\u003E\n\u003Cul\u003E\n\u003Cli\u003E\nErrorTest1: \u003Cdiv style=\u0027padding-left: 15px;\u0027\u003E\n\u0022 \u002B \u0022Multiline\u003Cbr/\u003E\\nerror\u003Cbr/\u003E\\nmessage\u003C/div\u003E\u0022 \u002B @\u0022\n\u003C/li\u003E\n\u003Cli\u003E\nNUnit.Tests.Assemblies.MockTestFixture.FailingTest: Intentional failure\u003C/li\u003E\n\u003Cli\u003E\nNUnit.Tests.Assemblies.MockTestFixture.TestWithException: System.ApplicationException : Intentional Exception\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/div\u003E\n\u0022;\r\n    Assert.Equal(expectedOutput, writer.ToString());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NUnitV2GenerateTestReportWithInlineDataFailures",
        "Body": "{\r\n    var name = GetType().Assembly.GetManifestResourceNames().Where(a =\u003E a.EndsWith(\u0022TestCaseFailures.xml\u0022, StringComparison.Ordinal)).FirstOrDefault();\r\n    using var writer = new StringWriter();\r\n    using var stream = GetType().Assembly.GetManifestResourceStream(name);\r\n    using var reader = new StreamReader(stream);\r\n    _resultParser.GenerateTestReport(writer, reader, XmlResultJargon.NUnitV2);\r\n    var expectedOutput = @\u0022\u003Cdiv style=\u0027padding-left: 15px;\u0027\u003E\n\u003Cul\u003E\n\u003Cli\u003E\nXamarin.MTouch.FastDev_LinkAll(iOS): message\u003C/li\u003E\n\u003Cli\u003E\nXamarin.MTouch.RebuildWhenReferenceSymbolsInCode: message\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/div\u003E\n\u0022;\r\n    Assert.Equal(writer.ToString(), expectedOutput);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NUnitV3MultipleTestFailures",
        "Body": "{\r\n    var name = GetType().Assembly.GetManifestResourceNames().Where(a =\u003E a.EndsWith(\u0022NUnitV3SampleFailures.xml\u0022, StringComparison.Ordinal)).FirstOrDefault();\r\n    using var writer = new StringWriter();\r\n    using var stream = GetType().Assembly.GetManifestResourceStream(name);\r\n    using var reader = new StreamReader(stream);\r\n    _resultParser.GenerateTestReport(writer, reader, XmlResultJargon.NUnitV3);\r\n    var expectedOutput = @\u0022\u003Cdiv style=\u0027padding-left: 15px;\u0027\u003E\n\u003Cul\u003E\n\u003Cli\u003E\nBug17793:   Not signalled twice in 5s\u003Cbr/\u003E\n  Expected: True\u003Cbr/\u003E\n  But was:  False\u003Cbr/\u003E\n\u003Cbr /\u003E\n\u003C/li\u003E\n\u003Cli\u003E\nBug2443:   Not signalled twice in 5s\u003Cbr/\u003E\n  Expected: True\u003Cbr/\u003E\n  But was:  False\u003Cbr/\u003E\n\u003Cbr /\u003E\n\u003C/li\u003E\n\u003Cli\u003E\nCreateTimer_NewSignature:   WaitOne\u003Cbr/\u003E\n  Expected: True\u003Cbr/\u003E\n  But was:  False\u003Cbr/\u003E\n\u003Cbr /\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/div\u003E\n\u0022;\r\n    Assert.Equal(writer.ToString().Replace(\u0022\\r\u0022, \u0022\u0022), expectedOutput.Replace(\u0022\\r\u0022, \u0022\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "NUnit3XmlOutputWriterTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.TestRunners.Tests",
    "Methods": [
      {
        "Name": "SingleTestRunTest",
        "Body": "{\r\n    var testRun = new Mock\u003CITestRun\u003E();\r\n    testRun.Setup(t =\u003E t.Result).Returns(GetTestRunSample());\r\n    // set the expectations of the mock, the important thing, we want to return a single test-run node\r\n    _resultSummary.Setup(rs =\u003E rs.GetEnumerator()).Returns(new List\u003CITestRun\u003E { testRun.Object }.GetEnumerator());\r\n    using (var writer = new StreamWriter(_tempPath))\r\n    {\r\n        var nunit3Writer = new NUnit3XmlOutputWriter(DateTime.Now);\r\n        nunit3Writer.WriteResultFile(_resultSummary.Object, writer);\r\n    }\r\n\r\n    // read the file and make sure that is correct\r\n    var doc = new XmlDocument();\r\n    doc.Load(_tempPath);\r\n    // we just need to make sure we have a single test-run node and a single env node, the rest\r\n    // was generated by nunit\r\n    var runs = doc.SelectNodes(\u0022.//test-run\u0022);\r\n    Assert.Equal(1, runs.Count);\r\n    var enviroment = doc.SelectNodes(\u0022.//environment\u0022);\r\n    Assert.Equal(1, enviroment.Count);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SeveralTetRunTest",
        "Body": "{\r\n    // same logic as with the other tests, but with more than one test run\r\n    var firstTestRun = new Mock\u003CITestRun\u003E();\r\n    firstTestRun.Setup(t =\u003E t.Result).Returns(GetTestRunSample());\r\n    var secondTestRun = new Mock\u003CITestRun\u003E();\r\n    secondTestRun.Setup(t =\u003E t.Result).Returns(GetTestRunSample());\r\n    _resultSummary.Setup(rs =\u003E rs.GetEnumerator()).Returns(new List\u003CITestRun\u003E { firstTestRun.Object, secondTestRun.Object }.GetEnumerator());\r\n    using (var writer = new StreamWriter(_tempPath))\r\n    {\r\n        var nunit3Writer = new NUnit3XmlOutputWriter(DateTime.Now);\r\n        nunit3Writer.WriteResultFile(_resultSummary.Object, writer);\r\n    }\r\n\r\n    // read the file and make sure that is correct\r\n    var doc = new XmlDocument();\r\n    doc.Load(_tempPath);\r\n    var runs = doc.SelectNodes(\u0022.//test-run\u0022);\r\n    Assert.Equal(1, runs.Count);\r\n    var enviroment = doc.SelectNodes(\u0022.//environment\u0022);\r\n    Assert.Equal(1, enviroment.Count);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TestStatusExtensionsTestData",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.TestRunners.Tests",
    "Methods": [
      {
        "Name": "IsExcludedAsAssembly",
        "Body": "Could not load the body for function: IsExcludedAsAssembly in class: TestStatusExtensionsTestData",
        "Smells": []
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TestStatusExtensionsTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.TestRunners.Tests",
    "Methods": [
      {
        "Name": "IsExcludedAsAssembly",
        "Body": "Could not load the body for function: IsExcludedAsAssembly in class: TestStatusExtensionsTests",
        "Smells": []
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FiltersTestData",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.TestRunners.Tests",
    "Methods": [
      {
        "Name": "IsExcludedTestCase",
        "Body": "{\r\n    var wasExcluded = collection.IsExcluded(testCase);\r\n    Assert.Equal(excluded, wasExcluded);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsExcludedAsAssembly",
        "Body": "{\r\n    var wasExcluded = collection.IsExcluded(assemblyInfo);\r\n    Assert.Equal(excluded, wasExcluded);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AssemblyFilters",
        "Body": "{\r\n    var collection = new XUnitFiltersCollection();\r\n    var assemblies = new[]\r\n    {\r\n        \u0022MyFirstAssembly.dll\u0022,\r\n        \u0022SecondAssembly.dll\u0022,\r\n        \u0022ThirdAssembly.exe\u0022,\r\n    };\r\n    collection.AddRange(assemblies.Select(a =\u003E XUnitFilter.CreateAssemblyFilter(a, true)));\r\n    var classes = new[]\r\n    {\r\n        \u0022FirstClass\u0022,\r\n        \u0022SecondClass\u0022,\r\n        \u0022ThirdClass\u0022\r\n    };\r\n    collection.AddRange(classes.Select(c =\u003E XUnitFilter.CreateClassFilter(c, true)));\r\n    var methods = new[]\r\n    {\r\n        \u0022FirstMethod\u0022,\r\n        \u0022SecondMethod\u0022\r\n    };\r\n    collection.AddRange(methods.Select(m =\u003E XUnitFilter.CreateSingleFilter(m, true)));\r\n    var namespaces = new[]\r\n    {\r\n        \u0022Namespace\u0022\r\n    };\r\n    collection.AddRange(namespaces.Select(n =\u003E XUnitFilter.CreateNamespaceFilter(n, true)));\r\n    Assert.Equal(assemblies.Length, collection.AssemblyFilters.Count());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestCaseFilters",
        "Body": "{\r\n    var collection = new XUnitFiltersCollection();\r\n    var assemblies = new[]\r\n    {\r\n        \u0022MyFirstAssembly.dll\u0022,\r\n        \u0022SecondAssembly.dll\u0022,\r\n        \u0022ThirdAssembly.exe\u0022,\r\n    };\r\n    collection.AddRange(assemblies.Select(a =\u003E XUnitFilter.CreateAssemblyFilter(a, true)));\r\n    var classes = new[]\r\n    {\r\n        \u0022FirstClass\u0022,\r\n        \u0022SecondClass\u0022,\r\n        \u0022ThirdClass\u0022\r\n    };\r\n    collection.AddRange(classes.Select(c =\u003E XUnitFilter.CreateClassFilter(c, true)));\r\n    var methods = new[]\r\n    {\r\n        \u0022FirstMethod\u0022,\r\n        \u0022SecondMethod\u0022\r\n    };\r\n    collection.AddRange(methods.Select(m =\u003E XUnitFilter.CreateSingleFilter(m, true)));\r\n    var namespaces = new[]\r\n    {\r\n        \u0022Namespace\u0022\r\n    };\r\n    collection.AddRange(namespaces.Select(n =\u003E XUnitFilter.CreateNamespaceFilter(n, true)));\r\n    Assert.Equal(collection.Count - assemblies.Length, collection.TestCaseFilters.Count());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "XUnitFiltersCollectionTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.TestRunners.Tests",
    "Methods": [
      {
        "Name": "IsExcludedTestCase",
        "Body": "{\r\n    var wasExcluded = collection.IsExcluded(testCase);\r\n    Assert.Equal(excluded, wasExcluded);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsExcludedAsAssembly",
        "Body": "{\r\n    var wasExcluded = collection.IsExcluded(assemblyInfo);\r\n    Assert.Equal(excluded, wasExcluded);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AssemblyFilters",
        "Body": "{\r\n    var collection = new XUnitFiltersCollection();\r\n    var assemblies = new[]\r\n    {\r\n        \u0022MyFirstAssembly.dll\u0022,\r\n        \u0022SecondAssembly.dll\u0022,\r\n        \u0022ThirdAssembly.exe\u0022,\r\n    };\r\n    collection.AddRange(assemblies.Select(a =\u003E XUnitFilter.CreateAssemblyFilter(a, true)));\r\n    var classes = new[]\r\n    {\r\n        \u0022FirstClass\u0022,\r\n        \u0022SecondClass\u0022,\r\n        \u0022ThirdClass\u0022\r\n    };\r\n    collection.AddRange(classes.Select(c =\u003E XUnitFilter.CreateClassFilter(c, true)));\r\n    var methods = new[]\r\n    {\r\n        \u0022FirstMethod\u0022,\r\n        \u0022SecondMethod\u0022\r\n    };\r\n    collection.AddRange(methods.Select(m =\u003E XUnitFilter.CreateSingleFilter(m, true)));\r\n    var namespaces = new[]\r\n    {\r\n        \u0022Namespace\u0022\r\n    };\r\n    collection.AddRange(namespaces.Select(n =\u003E XUnitFilter.CreateNamespaceFilter(n, true)));\r\n    Assert.Equal(assemblies.Length, collection.AssemblyFilters.Count());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestCaseFilters",
        "Body": "{\r\n    var collection = new XUnitFiltersCollection();\r\n    var assemblies = new[]\r\n    {\r\n        \u0022MyFirstAssembly.dll\u0022,\r\n        \u0022SecondAssembly.dll\u0022,\r\n        \u0022ThirdAssembly.exe\u0022,\r\n    };\r\n    collection.AddRange(assemblies.Select(a =\u003E XUnitFilter.CreateAssemblyFilter(a, true)));\r\n    var classes = new[]\r\n    {\r\n        \u0022FirstClass\u0022,\r\n        \u0022SecondClass\u0022,\r\n        \u0022ThirdClass\u0022\r\n    };\r\n    collection.AddRange(classes.Select(c =\u003E XUnitFilter.CreateClassFilter(c, true)));\r\n    var methods = new[]\r\n    {\r\n        \u0022FirstMethod\u0022,\r\n        \u0022SecondMethod\u0022\r\n    };\r\n    collection.AddRange(methods.Select(m =\u003E XUnitFilter.CreateSingleFilter(m, true)));\r\n    var namespaces = new[]\r\n    {\r\n        \u0022Namespace\u0022\r\n    };\r\n    collection.AddRange(namespaces.Select(n =\u003E XUnitFilter.CreateNamespaceFilter(n, true)));\r\n    Assert.Equal(collection.Count - assemblies.Length, collection.TestCaseFilters.Count());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FiltersTestData",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.TestRunners.Tests",
    "Methods": [
      {
        "Name": "ApplyFilters",
        "Body": "{\r\n    var logOutut = new StringBuilder();\r\n    Action\u003Cstring\u003E? log = (s) =\u003E\r\n    {\r\n        logOutut.AppendLine(s);\r\n    };\r\n    var testExcluded = filter.IsExcluded(testCase, log);\r\n    Assert.Equal(excluded, testExcluded);\r\n    // validate with the log\r\n    Assert.StartsWith(logMessage, logOutut.ToString().Trim());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ApplyAssemblyFilter",
        "Body": "{\r\n    var logOutut = new StringBuilder();\r\n    Action\u003Cstring\u003E? log = (s) =\u003E\r\n    {\r\n        logOutut.AppendLine(s);\r\n    };\r\n    var testExcluded = filter.IsExcluded(info, log);\r\n    Assert.Equal(excluded, testExcluded);\r\n    // validate with the log\r\n    Assert.StartsWith(logMessage, logOutut.ToString().Trim());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateSingleFilterNullTestName",
        "Body": "{\r\n    Assert.Throws\u003CArgumentException\u003E(() =\u003E XUnitFilter.CreateSingleFilter(null !, true));\r\n    Assert.Throws\u003CArgumentException\u003E(() =\u003E XUnitFilter.CreateSingleFilter(\u0022\u0022, true));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateSingleFilter",
        "Body": "{\r\n    var filter = XUnitFilter.CreateSingleFilter(methodName, excluded, assemblyName);\r\n    Assert.Equal(methodName, filter.SelectorValue);\r\n    Assert.Equal(assemblyName, filter.AssemblyName);\r\n    Assert.Equal(excluded, filter.Exclude);\r\n    Assert.Equal(XUnitFilterType.Single, filter.FilterType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateAssemblyFilterNullAssemblyName",
        "Body": "{\r\n    Assert.Throws\u003CArgumentException\u003E(() =\u003E XUnitFilter.CreateAssemblyFilter(null !, true));\r\n    Assert.Throws\u003CArgumentException\u003E(() =\u003E XUnitFilter.CreateAssemblyFilter(\u0022\u0022, true));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateAssemblyFilter",
        "Body": "{\r\n    var filter = XUnitFilter.CreateAssemblyFilter(assemblyName, excluded);\r\n    Assert.Null(filter.SelectorName);\r\n    Assert.Equal(assemblyName, filter.AssemblyName);\r\n    Assert.Equal(excluded, filter.Exclude);\r\n    Assert.Equal(XUnitFilterType.Assembly, filter.FilterType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateAssemblyFilterMissingExtension",
        "Body": "Could not load the body for function: CreateAssemblyFilterMissingExtension in class: FiltersTestData",
        "Smells": []
      },
      {
        "Name": "CreateNamespaceFilterNullNameSpace",
        "Body": "{\r\n    Assert.Throws\u003CArgumentException\u003E(() =\u003E XUnitFilter.CreateNamespaceFilter(null !, true));\r\n    Assert.Throws\u003CArgumentException\u003E(() =\u003E XUnitFilter.CreateNamespaceFilter(\u0022\u0022, true));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateNamespaceFilter",
        "Body": "{\r\n    var filter = XUnitFilter.CreateNamespaceFilter(nameSpace, excluded, assemblyName);\r\n    Assert.Equal(nameSpace, filter.SelectorValue);\r\n    Assert.Equal(assemblyName, filter.AssemblyName);\r\n    Assert.Equal(excluded, filter.Exclude);\r\n    Assert.Equal(XUnitFilterType.Namespace, filter.FilterType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateClassFilterNullClassName",
        "Body": "{\r\n    Assert.Throws\u003CArgumentException\u003E(() =\u003E XUnitFilter.CreateClassFilter(null !, true));\r\n    Assert.Throws\u003CArgumentException\u003E(() =\u003E XUnitFilter.CreateClassFilter(\u0022\u0022, true));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateClassFilter",
        "Body": "{\r\n    var filter = XUnitFilter.CreateClassFilter(className, excluded, assemblyName);\r\n    Assert.Equal(className, filter.SelectorValue);\r\n    Assert.Equal(assemblyName, filter.AssemblyName);\r\n    Assert.Equal(excluded, filter.Exclude);\r\n    Assert.Equal(XUnitFilterType.TypeName, filter.FilterType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateTraitFilterNullTrait",
        "Body": "{\r\n    Assert.Throws\u003CArgumentException\u003E(() =\u003E XUnitFilter.CreateTraitFilter(null !, \u0022value\u0022, true));\r\n    Assert.Throws\u003CArgumentException\u003E(() =\u003E XUnitFilter.CreateTraitFilter(\u0022\u0022, \u0022value\u0022, true));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateTraitFilter",
        "Body": "{\r\n    var filter = XUnitFilter.CreateTraitFilter(trait, traitValue, excluded);\r\n    Assert.Equal(trait, filter.SelectorName);\r\n    if (traitValue == null)\r\n    {\r\n        Assert.Equal(string.Empty, filter.SelectorValue);\r\n    }\r\n    else\r\n    {\r\n        Assert.Equal(traitValue, filter.SelectorValue);\r\n    }\r\n\r\n    Assert.Null(filter.AssemblyName);\r\n    Assert.Equal(excluded, filter.Exclude);\r\n    Assert.Equal(XUnitFilterType.Trait, filter.FilterType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ApplyWrongTypeToAssembly",
        "Body": "{\r\n    // build and assembly for the given type\r\n    XUnitFilter? filter = null;\r\n    switch (type)\r\n    {\r\n        case XUnitFilterType.Namespace:\r\n            filter = XUnitFilter.CreateNamespaceFilter(\u0022foo\u0022, true);\r\n            break;\r\n        case XUnitFilterType.Single:\r\n            filter = XUnitFilter.CreateSingleFilter(\u0022foo\u0022, true);\r\n            break;\r\n        case XUnitFilterType.Trait:\r\n            filter = XUnitFilter.CreateTraitFilter(\u0022foo\u0022, null, true);\r\n            break;\r\n        case XUnitFilterType.TypeName:\r\n            filter = XUnitFilter.CreateClassFilter(\u0022foo\u0022, true);\r\n            break;\r\n        default:\r\n            Assert.True(false, \u0022Unexpected filter type\u0022);\r\n            break;\r\n    }\r\n\r\n    var assebly = new TestAssemblyInfo(Assembly.GetAssembly(typeof(XUnitFilterType)), \u0022path\u0022);\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E filter?.IsExcluded(assebly));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "XUnitFilterTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.TestRunners.Tests",
    "Methods": [
      {
        "Name": "ApplyFilters",
        "Body": "{\r\n    var logOutut = new StringBuilder();\r\n    Action\u003Cstring\u003E? log = (s) =\u003E\r\n    {\r\n        logOutut.AppendLine(s);\r\n    };\r\n    var testExcluded = filter.IsExcluded(testCase, log);\r\n    Assert.Equal(excluded, testExcluded);\r\n    // validate with the log\r\n    Assert.StartsWith(logMessage, logOutut.ToString().Trim());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ApplyAssemblyFilter",
        "Body": "{\r\n    var logOutut = new StringBuilder();\r\n    Action\u003Cstring\u003E? log = (s) =\u003E\r\n    {\r\n        logOutut.AppendLine(s);\r\n    };\r\n    var testExcluded = filter.IsExcluded(info, log);\r\n    Assert.Equal(excluded, testExcluded);\r\n    // validate with the log\r\n    Assert.StartsWith(logMessage, logOutut.ToString().Trim());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateSingleFilterNullTestName",
        "Body": "{\r\n    Assert.Throws\u003CArgumentException\u003E(() =\u003E XUnitFilter.CreateSingleFilter(null !, true));\r\n    Assert.Throws\u003CArgumentException\u003E(() =\u003E XUnitFilter.CreateSingleFilter(\u0022\u0022, true));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateSingleFilter",
        "Body": "{\r\n    var filter = XUnitFilter.CreateSingleFilter(methodName, excluded, assemblyName);\r\n    Assert.Equal(methodName, filter.SelectorValue);\r\n    Assert.Equal(assemblyName, filter.AssemblyName);\r\n    Assert.Equal(excluded, filter.Exclude);\r\n    Assert.Equal(XUnitFilterType.Single, filter.FilterType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateAssemblyFilterNullAssemblyName",
        "Body": "{\r\n    Assert.Throws\u003CArgumentException\u003E(() =\u003E XUnitFilter.CreateAssemblyFilter(null !, true));\r\n    Assert.Throws\u003CArgumentException\u003E(() =\u003E XUnitFilter.CreateAssemblyFilter(\u0022\u0022, true));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateAssemblyFilter",
        "Body": "{\r\n    var filter = XUnitFilter.CreateAssemblyFilter(assemblyName, excluded);\r\n    Assert.Null(filter.SelectorName);\r\n    Assert.Equal(assemblyName, filter.AssemblyName);\r\n    Assert.Equal(excluded, filter.Exclude);\r\n    Assert.Equal(XUnitFilterType.Assembly, filter.FilterType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateAssemblyFilterMissingExtension",
        "Body": "Could not load the body for function: CreateAssemblyFilterMissingExtension in class: XUnitFilterTests",
        "Smells": []
      },
      {
        "Name": "CreateNamespaceFilterNullNameSpace",
        "Body": "{\r\n    Assert.Throws\u003CArgumentException\u003E(() =\u003E XUnitFilter.CreateNamespaceFilter(null !, true));\r\n    Assert.Throws\u003CArgumentException\u003E(() =\u003E XUnitFilter.CreateNamespaceFilter(\u0022\u0022, true));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateNamespaceFilter",
        "Body": "{\r\n    var filter = XUnitFilter.CreateNamespaceFilter(nameSpace, excluded, assemblyName);\r\n    Assert.Equal(nameSpace, filter.SelectorValue);\r\n    Assert.Equal(assemblyName, filter.AssemblyName);\r\n    Assert.Equal(excluded, filter.Exclude);\r\n    Assert.Equal(XUnitFilterType.Namespace, filter.FilterType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateClassFilterNullClassName",
        "Body": "{\r\n    Assert.Throws\u003CArgumentException\u003E(() =\u003E XUnitFilter.CreateClassFilter(null !, true));\r\n    Assert.Throws\u003CArgumentException\u003E(() =\u003E XUnitFilter.CreateClassFilter(\u0022\u0022, true));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateClassFilter",
        "Body": "{\r\n    var filter = XUnitFilter.CreateClassFilter(className, excluded, assemblyName);\r\n    Assert.Equal(className, filter.SelectorValue);\r\n    Assert.Equal(assemblyName, filter.AssemblyName);\r\n    Assert.Equal(excluded, filter.Exclude);\r\n    Assert.Equal(XUnitFilterType.TypeName, filter.FilterType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateTraitFilterNullTrait",
        "Body": "{\r\n    Assert.Throws\u003CArgumentException\u003E(() =\u003E XUnitFilter.CreateTraitFilter(null !, \u0022value\u0022, true));\r\n    Assert.Throws\u003CArgumentException\u003E(() =\u003E XUnitFilter.CreateTraitFilter(\u0022\u0022, \u0022value\u0022, true));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateTraitFilter",
        "Body": "{\r\n    var filter = XUnitFilter.CreateTraitFilter(trait, traitValue, excluded);\r\n    Assert.Equal(trait, filter.SelectorName);\r\n    if (traitValue == null)\r\n    {\r\n        Assert.Equal(string.Empty, filter.SelectorValue);\r\n    }\r\n    else\r\n    {\r\n        Assert.Equal(traitValue, filter.SelectorValue);\r\n    }\r\n\r\n    Assert.Null(filter.AssemblyName);\r\n    Assert.Equal(excluded, filter.Exclude);\r\n    Assert.Equal(XUnitFilterType.Trait, filter.FilterType);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ApplyWrongTypeToAssembly",
        "Body": "{\r\n    // build and assembly for the given type\r\n    XUnitFilter? filter = null;\r\n    switch (type)\r\n    {\r\n        case XUnitFilterType.Namespace:\r\n            filter = XUnitFilter.CreateNamespaceFilter(\u0022foo\u0022, true);\r\n            break;\r\n        case XUnitFilterType.Single:\r\n            filter = XUnitFilter.CreateSingleFilter(\u0022foo\u0022, true);\r\n            break;\r\n        case XUnitFilterType.Trait:\r\n            filter = XUnitFilter.CreateTraitFilter(\u0022foo\u0022, null, true);\r\n            break;\r\n        case XUnitFilterType.TypeName:\r\n            filter = XUnitFilter.CreateClassFilter(\u0022foo\u0022, true);\r\n            break;\r\n        default:\r\n            Assert.True(false, \u0022Unexpected filter type\u0022);\r\n            break;\r\n    }\r\n\r\n    var assebly = new TestAssemblyInfo(Assembly.GetAssembly(typeof(XUnitFilterType)), \u0022path\u0022);\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E filter?.IsExcluded(assebly));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ProcessManagerTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.Common.Tests",
    "Methods": [
      {
        "Name": "ProcessShouldBeKilled",
        "Body": "{\r\n    var pm = ProcessManagerFactory.CreateProcessManager();\r\n    var process = new Process();\r\n    process.StartInfo.FileName = \u0022ping\u0022;\r\n    process.StartInfo.Arguments = \u0022-t 127.0.0.1\u0022;\r\n    var log = new MemoryLog();\r\n    var result = await pm.RunAsync(process, log, TimeSpan.FromSeconds(3));\r\n    Assert.True(result.TimedOut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CallbackLogTest",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.Common.Tests",
    "Methods": [
      {
        "Name": "OnWriteTest",
        "Body": "{\r\n    var message = \u0022This is a log message\u0022;\r\n    bool called = false;\r\n    string data = null;\r\n    Action\u003Cstring\u003E cb = (d) =\u003E\r\n    {\r\n        called = true;\r\n        data = d;\r\n    };\r\n    var log = new CallbackLog(cb);\r\n    log.Write(message);\r\n    Assert.True(called, \u0022Callback was not called\u0022);\r\n    Assert.NotNull(data);\r\n    Assert.EndsWith(message, data); // TODO: take time stamp into account\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConsoleLogTest",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.Common.Tests",
    "Methods": [
      {
        "Name": "TestWrite",
        "Body": "{\r\n    var message = \u0022This is a log message\u0022;\r\n    using (var testStream = new FileStream(_testFile, FileMode.OpenOrCreate, FileAccess.Write))\r\n    using (var writer = new StreamWriter(testStream))\r\n    {\r\n        Console.SetOut(writer);\r\n        // simply test that we do write in the file. We need to close the stream to be able to read it\r\n        _log.WriteLine(message);\r\n    }\r\n\r\n    using (var testStream = new FileStream(_testFile, FileMode.OpenOrCreate, FileAccess.Read))\r\n    using (var reader = new StreamReader(testStream))\r\n    {\r\n        var line = reader.ReadLine();\r\n        Assert.EndsWith(message, line); // consider the time stamp\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ScanLogTest",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.Common.Tests",
    "Methods": [
      {
        "Name": "TagIsFoundInLog",
        "Body": "{\r\n    bool found = false;\r\n    var log = new ScanLog(tag, () =\u003E found = true);\r\n    log.Write(message);\r\n    Assert.Equal(shouldFind, found);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TagIsFoundInSeveralMessages",
        "Body": "{\r\n    bool found = false;\r\n    var log = new ScanLog(\u0022123\u0022, () =\u003E found = true);\r\n    log.Write(\u0022abc1\u0022);\r\n    log.Write(\u00222\u0022);\r\n    log.Write(\u00223cdef\u0022);\r\n    Assert.True(found);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "StringUtilsTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.Common.Tests",
    "Methods": [
      {
        "Name": "NoEscapingNeeded",
        "Body": "Could not load the body for function: NoEscapingNeeded in class: StringUtilsTests",
        "Smells": []
      },
      {
        "Name": "QuoteForProcessTest",
        "Body": "Could not load the body for function: QuoteForProcessTest in class: StringUtilsTests",
        "Smells": []
      },
      {
        "Name": "FormatArgumentsTest",
        "Body": "{\r\n    var p = new Process();\r\n    p.StartInfo.RedirectStandardOutput = true;\r\n    p.StartInfo.UseShellExecute = false;\r\n    p.StartInfo.FileName = \u0022/bin/echo\u0022;\r\n    var complexInput = \u0022\u0027\u0022;\r\n    p.StartInfo.Arguments = StringUtils.FormatArguments(\u0022-n\u0022, \u0022foo\u0022, complexInput, \u0022bar\u0022);\r\n    p.Start();\r\n    var output = p.StandardOutput.ReadToEnd();\r\n    Assert.Equal($\u0022foo {complexInput} bar\u0022, output);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AdbRunnerTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.Android.Tests",
    "Methods": [
      {
        "Name": "GetAdbState",
        "Body": "{\r\n    var runner = new AdbRunner(_mainLog.Object, _processManager.Object, s_adbPath);\r\n    string result = runner.GetAdbState();\r\n    VerifyAdbCall(\u0022get-state\u0022);\r\n    Assert.Equal(\u0022device\u0022, result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ClearAdbLog",
        "Body": "{\r\n    var runner = new AdbRunner(_mainLog.Object, _processManager.Object, s_adbPath);\r\n    runner.ClearAdbLog();\r\n    VerifyAdbCall(\u0022logcat\u0022, \u0022-b\u0022, \u0022all\u0022, \u0022-c\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DumpAdbLog",
        "Body": "{\r\n    var runner = new AdbRunner(_mainLog.Object, _processManager.Object, s_adbPath);\r\n    string pathToDumpLogTo = Path.Join(s_scratchAndOutputPath, $\u0022{Path.GetRandomFileName()}.log\u0022);\r\n    runner.TryDumpAdbLog(pathToDumpLogTo);\r\n    VerifyAdbCall(\u0022logcat\u0022, \u0022-d\u0022, \u0022\u0022);\r\n    Assert.Equal(\u0022Sample LogCat Output\u0022, File.ReadAllText(pathToDumpLogTo));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DumpBugReport",
        "Body": "{\r\n    var runner = new AdbRunner(_mainLog.Object, _processManager.Object, s_adbPath);\r\n    string pathToDumpBugReport = Path.Join(s_scratchAndOutputPath, Path.GetRandomFileName());\r\n    runner.GetDevice(requiredDeviceId: _fakeDeviceList.First().DeviceSerial);\r\n    runner.DumpBugReport(pathToDumpBugReport);\r\n    VerifyAdbCall(\u0022bugreport\u0022, $\u0022{pathToDumpBugReport}.zip\u0022);\r\n    Assert.Equal(\u0022Sample BugReport Output\u0022, File.ReadAllText($\u0022{pathToDumpBugReport}.zip\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "WaitForDevice",
        "Body": "{\r\n    s_bootCompleteCheckTimes = 0; // Force simulating device is offline\r\n    var runner = new AdbRunner(_mainLog.Object, _processManager.Object, s_adbPath);\r\n    string fakeDeviceName = $\u0022emulator-{new Random().Next(9999)}\u0022;\r\n    runner.SetActiveDevice(new AndroidDevice(fakeDeviceName));\r\n    runner.WaitForDevice();\r\n    s_bootCompleteCheckTimes = 0; // Force simulating device is offline\r\n    runner.SetActiveDevice(null);\r\n    runner.WaitForDevice();\r\n    VerifyAdbCall(Times.Exactly(2), \u0022wait-for-device\u0022);\r\n    VerifyAdbCall(Times.Exactly(2), \u0022-s\u0022, fakeDeviceName, \u0022shell\u0022, \u0022getprop\u0022, \u0022sys.boot_completed\u0022);\r\n    VerifyAdbCall(Times.Exactly(2), \u0022shell\u0022, \u0022getprop\u0022, \u0022sys.boot_completed\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ListDevicesAndArchitectures",
        "Body": "{\r\n    var runner = new AdbRunner(_mainLog.Object, _processManager.Object, s_adbPath);\r\n    var result = runner.GetDevices();\r\n    VerifyAdbCall(\u0022devices\u0022, \u0022-l\u0022);\r\n    // Ensure it called, parsed the four random device names and found all four architectures\r\n    foreach (var fakeDevice in _fakeDeviceList)\r\n    {\r\n        VerifyAdbCall(\u0022-s\u0022, fakeDevice.DeviceSerial, \u0022shell\u0022, \u0022getprop\u0022, \u0022ro.product.cpu.abilist\u0022);\r\n        Assert.Equal(fakeDevice.SupportedArchitectures, result.Single(d =\u003E d.DeviceSerial == fakeDevice.DeviceSerial).SupportedArchitectures);\r\n        VerifyAdbCall(\u0022-s\u0022, fakeDevice.DeviceSerial, \u0022shell\u0022, \u0022getprop\u0022, \u0022ro.build.version.sdk\u0022);\r\n        Assert.Equal(fakeDevice.ApiVersion, result.Single(d =\u003E d.ApiVersion == fakeDevice.ApiVersion).ApiVersion);\r\n        VerifyAdbCall(\u0022-s\u0022, fakeDevice.DeviceSerial, \u0022shell\u0022, \u0022getprop\u0022, \u0022ro.product.cpu.abi\u0022);\r\n        Assert.Equal(fakeDevice.Architecture, result.Single(d =\u003E d.DeviceSerial == fakeDevice.DeviceSerial).Architecture);\r\n    }\r\n\r\n    Assert.Equal(4, result.Count);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StartAdbServer",
        "Body": "{\r\n    var runner = new AdbRunner(_mainLog.Object, _processManager.Object, s_adbPath);\r\n    runner.StartAdbServer();\r\n    VerifyAdbCall(\u0022start-server\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "KillAdbServer",
        "Body": "{\r\n    var runner = new AdbRunner(_mainLog.Object, _processManager.Object, s_adbPath);\r\n    runner.KillAdbServer();\r\n    VerifyAdbCall(\u0022kill-server\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InstallApk",
        "Body": "{\r\n    var runner = new AdbRunner(_mainLog.Object, _processManager.Object, s_adbPath);\r\n    string fakeApkPath = Path.Join(s_scratchAndOutputPath, $\u0022{Path.GetRandomFileName()}.apk\u0022);\r\n    File.Create(fakeApkPath).Close();\r\n    int exitCode = runner.InstallApk(fakeApkPath);\r\n    VerifyAdbCall(\u0022install\u0022, fakeApkPath);\r\n    Assert.Equal(0, exitCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UninstallApk",
        "Body": "{\r\n    var runner = new AdbRunner(_mainLog.Object, _processManager.Object, s_adbPath);\r\n    string fakeApkName = $\u0022{Path.GetRandomFileName()}\u0022;\r\n    int exitCode = runner.UninstallApk(fakeApkName);\r\n    VerifyAdbCall(\u0022uninstall\u0022, fakeApkName);\r\n    Assert.Equal(0, exitCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "KillApk",
        "Body": "{\r\n    var runner = new AdbRunner(_mainLog.Object, _processManager.Object, s_adbPath);\r\n    string fakeApkName = $\u0022{Path.GetRandomFileName()}\u0022;\r\n    int exitCode = runner.KillApk(fakeApkName);\r\n    VerifyAdbCall(\u0022shell\u0022, \u0022am\u0022, \u0022kill\u0022, \u0022--user\u0022, \u0022all\u0022, fakeApkName);\r\n    Assert.Equal(0, exitCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetDevice",
        "Body": "{\r\n    var requiredArchitecture = \u0022x86_64\u0022;\r\n    var runner = new AdbRunner(_mainLog.Object, _processManager.Object, s_adbPath);\r\n    var result = runner.GetDevice(requiredArchitectures: new[] { requiredArchitecture });\r\n    VerifyAdbCall(\u0022devices\u0022, \u0022-l\u0022);\r\n    Assert.Contains(_fakeDeviceList, d =\u003E d.DeviceSerial == result.DeviceSerial);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetDeviceWithArchitecture",
        "Body": "{\r\n    var requiredArchitecture = \u0022x86\u0022;\r\n    var runner = new AdbRunner(_mainLog.Object, _processManager.Object, s_adbPath);\r\n    var result = runner.GetDevice(loadArchitecture: true, requiredArchitectures: new[] { requiredArchitecture });\r\n    VerifyAdbCall(\u0022devices\u0022, \u0022-l\u0022);\r\n    VerifyAdbCall(\u0022-s\u0022, result.DeviceSerial, \u0022shell\u0022, \u0022getprop\u0022, \u0022ro.product.cpu.abi\u0022);\r\n    Assert.Contains(_fakeDeviceList, d =\u003E d.DeviceSerial == result.DeviceSerial \u0026\u0026 d.Architecture == result.Architecture);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetDeviceWithApiVersion",
        "Body": "{\r\n    var runner = new AdbRunner(_mainLog.Object, _processManager.Object, s_adbPath);\r\n    var device = _fakeDeviceList.Single(d =\u003E d.ApiVersion == 30);\r\n    var result = runner.GetDevice(loadArchitecture: true, requiredApiVersion: 30);\r\n    VerifyAdbCall(\u0022devices\u0022, \u0022-l\u0022);\r\n    Assert.Equal(device.DeviceSerial, result.DeviceSerial);\r\n    Assert.Equal(device.ApiVersion, result.ApiVersion);\r\n    Assert.Equal(device.Architecture, result.Architecture);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetDeviceWithAppAndApiVersion",
        "Body": "{\r\n    var runner = new AdbRunner(_mainLog.Object, _processManager.Object, s_adbPath);\r\n    var device = _fakeDeviceList.Single(d =\u003E d.ApiVersion == 31 \u0026\u0026 d.InstalledApplications.Contains(\u0022net.dot.E\u0022));\r\n    var result = runner.GetDevice(requiredInstalledApp: \u0022net.dot.E\u0022, requiredApiVersion: 31);\r\n    VerifyAdbCall(\u0022devices\u0022, \u0022-l\u0022);\r\n    Assert.Equal(device.DeviceSerial, result.DeviceSerial);\r\n    Assert.Equal(device.ApiVersion, result.ApiVersion);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RebootAndroidDevice",
        "Body": "{\r\n    var runner = new AdbRunner(_mainLog.Object, _processManager.Object, s_adbPath);\r\n    runner.RebootAndroidDevice();\r\n    VerifyAdbCall(\u0022reboot\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RunInstrumentation",
        "Body": "{\r\n    string fakeApkName = Path.GetRandomFileName();\r\n    var runner = new AdbRunner(_mainLog.Object, _processManager.Object, s_adbPath);\r\n    ProcessExecutionResults result;\r\n    var fakeArgs = new Dictionary\u003Cstring, string\u003E()\r\n    {\r\n        {\r\n            \u0022arg1\u0022,\r\n            \u0022value1\u0022\r\n        },\r\n        {\r\n            \u0022arg2\u0022,\r\n            \u0022value2\u0022\r\n        }\r\n    };\r\n    result = runner.RunApkInstrumentation(fakeApkName, instrumentationName, fakeArgs, TimeSpan.FromSeconds(123));\r\n    Assert.Equal(0, result.ExitCode);\r\n    result = runner.RunApkInstrumentation(fakeApkName, instrumentationName, new Dictionary\u003Cstring, string\u003E(), TimeSpan.FromSeconds(456));\r\n    Assert.Equal(0, result.ExitCode);\r\n    if (string.IsNullOrEmpty(instrumentationName))\r\n    {\r\n        VerifyAdbCall(\u0022shell\u0022, \u0022am\u0022, \u0022instrument\u0022, \u0022-e\u0022, \u0022arg1\u0022, \u0022value1\u0022, \u0022-e\u0022, \u0022arg2\u0022, \u0022value2\u0022, \u0022-w\u0022, fakeApkName);\r\n        VerifyAdbCall(\u0022shell\u0022, \u0022am\u0022, \u0022instrument\u0022, \u0022-w\u0022, fakeApkName);\r\n    }\r\n    else\r\n    {\r\n        VerifyAdbCall(\u0022shell\u0022, \u0022am\u0022, \u0022instrument\u0022, \u0022-e\u0022, \u0022arg1\u0022, \u0022value1\u0022, \u0022-e\u0022, \u0022arg2\u0022, \u0022value2\u0022, \u0022-w\u0022, $\u0022{fakeApkName}/{instrumentationName}\u0022);\r\n        VerifyAdbCall(\u0022shell\u0022, \u0022am\u0022, \u0022instrument\u0022, \u0022-w\u0022, $\u0022{fakeApkName}/{instrumentationName}\u0022);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SampleRepeatableArgument",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.CLI.Tests",
    "Methods": [
      {
        "Name": "RepetableArgumentsAreParsed",
        "Body": "{\r\n    var arg = new SampleRepeatableArgument();\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-a\u0022, \u0022foo\u0022, \u0022-a=bar\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(new[] { \u0022foo\u0022, \u0022bar\u0022 }, arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SwitchArgumentArgumentWithoutValueIsTrue",
        "Body": "{\r\n    var arg = new SampleSwitchArgument(false);\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-b\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.True(arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SwitchArgumentArgumentWithTrueDefaultIsFalse",
        "Body": "{\r\n    var arg = new SampleSwitchArgument(true);\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-b\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.False(arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SwitchArgumentArgumentWithValueIsFalse",
        "Body": "{\r\n    var arg = new SampleSwitchArgument(false);\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-b=false\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.False(arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SwitchArgumentArgumentWithDefaultValueIsFalse",
        "Body": "{\r\n    var arg = new SampleSwitchArgument(true);\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-b=off\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.False(arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RequiredStringArgumentIsSet",
        "Body": "{\r\n    var arg = new SampleStringArgument();\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-c\u0022, \u0022xyz\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(\u0022xyz\u0022, arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RequiredStringArgumentIsValidated",
        "Body": "{\r\n    var arg = new SampleStringArgument();\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(Array.Empty\u003Cstring\u003E());\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TimeSpanArgumentHasDefault",
        "Body": "{\r\n    var arg = new SampleTimeSpanArgument(TimeSpan.FromMinutes(3));\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(Array.Empty\u003Cstring\u003E());\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(TimeSpan.FromMinutes(3), arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TimeSpanArgumentIsSet",
        "Body": "{\r\n    var arg = new SampleTimeSpanArgument(TimeSpan.FromMinutes(3));\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-t\u0022, \u002200:02:30\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(TimeSpan.FromSeconds(150), arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ArgumentsAreInterpolatedWell",
        "Body": "{\r\n    var timespanArg = new SampleTimeSpanArgument(TimeSpan.FromSeconds(5));\r\n    var switchArg = new SampleSwitchArgument(true);\r\n    var stringArg = new SampleStringArgument();\r\n    stringArg.Action(\u0022string-value\u0022);\r\n    Assert.Equal(\u0022time is 00:00:05\u0022, $\u0022time is {timespanArg}\u0022);\r\n    Assert.Equal(\u0022switch is true\u0022, $\u0022switch is {switchArg}\u0022);\r\n    Assert.Equal(\u0022string is string-value\u0022, $\u0022string is {stringArg}\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SampleSwitchArgument",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.CLI.Tests",
    "Methods": [
      {
        "Name": "RepetableArgumentsAreParsed",
        "Body": "{\r\n    var arg = new SampleRepeatableArgument();\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-a\u0022, \u0022foo\u0022, \u0022-a=bar\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(new[] { \u0022foo\u0022, \u0022bar\u0022 }, arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SwitchArgumentArgumentWithoutValueIsTrue",
        "Body": "{\r\n    var arg = new SampleSwitchArgument(false);\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-b\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.True(arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SwitchArgumentArgumentWithTrueDefaultIsFalse",
        "Body": "{\r\n    var arg = new SampleSwitchArgument(true);\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-b\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.False(arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SwitchArgumentArgumentWithValueIsFalse",
        "Body": "{\r\n    var arg = new SampleSwitchArgument(false);\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-b=false\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.False(arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SwitchArgumentArgumentWithDefaultValueIsFalse",
        "Body": "{\r\n    var arg = new SampleSwitchArgument(true);\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-b=off\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.False(arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RequiredStringArgumentIsSet",
        "Body": "{\r\n    var arg = new SampleStringArgument();\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-c\u0022, \u0022xyz\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(\u0022xyz\u0022, arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RequiredStringArgumentIsValidated",
        "Body": "{\r\n    var arg = new SampleStringArgument();\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(Array.Empty\u003Cstring\u003E());\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TimeSpanArgumentHasDefault",
        "Body": "{\r\n    var arg = new SampleTimeSpanArgument(TimeSpan.FromMinutes(3));\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(Array.Empty\u003Cstring\u003E());\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(TimeSpan.FromMinutes(3), arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TimeSpanArgumentIsSet",
        "Body": "{\r\n    var arg = new SampleTimeSpanArgument(TimeSpan.FromMinutes(3));\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-t\u0022, \u002200:02:30\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(TimeSpan.FromSeconds(150), arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ArgumentsAreInterpolatedWell",
        "Body": "{\r\n    var timespanArg = new SampleTimeSpanArgument(TimeSpan.FromSeconds(5));\r\n    var switchArg = new SampleSwitchArgument(true);\r\n    var stringArg = new SampleStringArgument();\r\n    stringArg.Action(\u0022string-value\u0022);\r\n    Assert.Equal(\u0022time is 00:00:05\u0022, $\u0022time is {timespanArg}\u0022);\r\n    Assert.Equal(\u0022switch is true\u0022, $\u0022switch is {switchArg}\u0022);\r\n    Assert.Equal(\u0022string is string-value\u0022, $\u0022string is {stringArg}\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SampleStringArgument",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.CLI.Tests",
    "Methods": [
      {
        "Name": "RepetableArgumentsAreParsed",
        "Body": "{\r\n    var arg = new SampleRepeatableArgument();\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-a\u0022, \u0022foo\u0022, \u0022-a=bar\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(new[] { \u0022foo\u0022, \u0022bar\u0022 }, arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SwitchArgumentArgumentWithoutValueIsTrue",
        "Body": "{\r\n    var arg = new SampleSwitchArgument(false);\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-b\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.True(arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SwitchArgumentArgumentWithTrueDefaultIsFalse",
        "Body": "{\r\n    var arg = new SampleSwitchArgument(true);\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-b\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.False(arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SwitchArgumentArgumentWithValueIsFalse",
        "Body": "{\r\n    var arg = new SampleSwitchArgument(false);\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-b=false\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.False(arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SwitchArgumentArgumentWithDefaultValueIsFalse",
        "Body": "{\r\n    var arg = new SampleSwitchArgument(true);\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-b=off\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.False(arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RequiredStringArgumentIsSet",
        "Body": "{\r\n    var arg = new SampleStringArgument();\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-c\u0022, \u0022xyz\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(\u0022xyz\u0022, arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RequiredStringArgumentIsValidated",
        "Body": "{\r\n    var arg = new SampleStringArgument();\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(Array.Empty\u003Cstring\u003E());\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TimeSpanArgumentHasDefault",
        "Body": "{\r\n    var arg = new SampleTimeSpanArgument(TimeSpan.FromMinutes(3));\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(Array.Empty\u003Cstring\u003E());\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(TimeSpan.FromMinutes(3), arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TimeSpanArgumentIsSet",
        "Body": "{\r\n    var arg = new SampleTimeSpanArgument(TimeSpan.FromMinutes(3));\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-t\u0022, \u002200:02:30\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(TimeSpan.FromSeconds(150), arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ArgumentsAreInterpolatedWell",
        "Body": "{\r\n    var timespanArg = new SampleTimeSpanArgument(TimeSpan.FromSeconds(5));\r\n    var switchArg = new SampleSwitchArgument(true);\r\n    var stringArg = new SampleStringArgument();\r\n    stringArg.Action(\u0022string-value\u0022);\r\n    Assert.Equal(\u0022time is 00:00:05\u0022, $\u0022time is {timespanArg}\u0022);\r\n    Assert.Equal(\u0022switch is true\u0022, $\u0022switch is {switchArg}\u0022);\r\n    Assert.Equal(\u0022string is string-value\u0022, $\u0022string is {stringArg}\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SampleTimeSpanArgument",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.CLI.Tests",
    "Methods": [
      {
        "Name": "RepetableArgumentsAreParsed",
        "Body": "{\r\n    var arg = new SampleRepeatableArgument();\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-a\u0022, \u0022foo\u0022, \u0022-a=bar\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(new[] { \u0022foo\u0022, \u0022bar\u0022 }, arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SwitchArgumentArgumentWithoutValueIsTrue",
        "Body": "{\r\n    var arg = new SampleSwitchArgument(false);\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-b\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.True(arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SwitchArgumentArgumentWithTrueDefaultIsFalse",
        "Body": "{\r\n    var arg = new SampleSwitchArgument(true);\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-b\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.False(arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SwitchArgumentArgumentWithValueIsFalse",
        "Body": "{\r\n    var arg = new SampleSwitchArgument(false);\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-b=false\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.False(arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SwitchArgumentArgumentWithDefaultValueIsFalse",
        "Body": "{\r\n    var arg = new SampleSwitchArgument(true);\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-b=off\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.False(arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RequiredStringArgumentIsSet",
        "Body": "{\r\n    var arg = new SampleStringArgument();\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-c\u0022, \u0022xyz\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(\u0022xyz\u0022, arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RequiredStringArgumentIsValidated",
        "Body": "{\r\n    var arg = new SampleStringArgument();\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(Array.Empty\u003Cstring\u003E());\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TimeSpanArgumentHasDefault",
        "Body": "{\r\n    var arg = new SampleTimeSpanArgument(TimeSpan.FromMinutes(3));\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(Array.Empty\u003Cstring\u003E());\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(TimeSpan.FromMinutes(3), arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TimeSpanArgumentIsSet",
        "Body": "{\r\n    var arg = new SampleTimeSpanArgument(TimeSpan.FromMinutes(3));\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-t\u0022, \u002200:02:30\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(TimeSpan.FromSeconds(150), arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ArgumentsAreInterpolatedWell",
        "Body": "{\r\n    var timespanArg = new SampleTimeSpanArgument(TimeSpan.FromSeconds(5));\r\n    var switchArg = new SampleSwitchArgument(true);\r\n    var stringArg = new SampleStringArgument();\r\n    stringArg.Action(\u0022string-value\u0022);\r\n    Assert.Equal(\u0022time is 00:00:05\u0022, $\u0022time is {timespanArg}\u0022);\r\n    Assert.Equal(\u0022switch is true\u0022, $\u0022switch is {switchArg}\u0022);\r\n    Assert.Equal(\u0022string is string-value\u0022, $\u0022string is {stringArg}\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ArgumentTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.CLI.Tests",
    "Methods": [
      {
        "Name": "RepetableArgumentsAreParsed",
        "Body": "{\r\n    var arg = new SampleRepeatableArgument();\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-a\u0022, \u0022foo\u0022, \u0022-a=bar\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(new[] { \u0022foo\u0022, \u0022bar\u0022 }, arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SwitchArgumentArgumentWithoutValueIsTrue",
        "Body": "{\r\n    var arg = new SampleSwitchArgument(false);\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-b\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.True(arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SwitchArgumentArgumentWithTrueDefaultIsFalse",
        "Body": "{\r\n    var arg = new SampleSwitchArgument(true);\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-b\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.False(arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SwitchArgumentArgumentWithValueIsFalse",
        "Body": "{\r\n    var arg = new SampleSwitchArgument(false);\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-b=false\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.False(arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SwitchArgumentArgumentWithDefaultValueIsFalse",
        "Body": "{\r\n    var arg = new SampleSwitchArgument(true);\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-b=off\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.False(arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RequiredStringArgumentIsSet",
        "Body": "{\r\n    var arg = new SampleStringArgument();\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-c\u0022, \u0022xyz\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(\u0022xyz\u0022, arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "RequiredStringArgumentIsValidated",
        "Body": "{\r\n    var arg = new SampleStringArgument();\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(Array.Empty\u003Cstring\u003E());\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TimeSpanArgumentHasDefault",
        "Body": "{\r\n    var arg = new SampleTimeSpanArgument(TimeSpan.FromMinutes(3));\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(Array.Empty\u003Cstring\u003E());\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(TimeSpan.FromMinutes(3), arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TimeSpanArgumentIsSet",
        "Body": "{\r\n    var arg = new SampleTimeSpanArgument(TimeSpan.FromMinutes(3));\r\n    var command = UnitTestCommand.FromArgument(arg);\r\n    var exitCode = command.Invoke(new[] { \u0022-t\u0022, \u002200:02:30\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(TimeSpan.FromSeconds(150), arg.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ArgumentsAreInterpolatedWell",
        "Body": "{\r\n    var timespanArg = new SampleTimeSpanArgument(TimeSpan.FromSeconds(5));\r\n    var switchArg = new SampleSwitchArgument(true);\r\n    var stringArg = new SampleStringArgument();\r\n    stringArg.Action(\u0022string-value\u0022);\r\n    Assert.Equal(\u0022time is 00:00:05\u0022, $\u0022time is {timespanArg}\u0022);\r\n    Assert.Equal(\u0022switch is true\u0022, $\u0022switch is {switchArg}\u0022);\r\n    Assert.Equal(\u0022string is string-value\u0022, $\u0022string is {stringArg}\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SampleUnitTestArguments",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.CLI.Tests",
    "Methods": [
      {
        "Name": "ArgumentsWithEqualSignsAreParsed",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022--number=50\u0022, \u0022--enum=Value2\u0022, \u0022--string=foobar\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(_command.CommandRun);\r\n    Assert.Equal(50, _arguments.Number);\r\n    Assert.Equal(SampleEnum.Value2, _arguments.Enum);\r\n    Assert.Equal(\u0022foobar\u0022, _arguments.String);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ArgumentsWithSpacesAreParsed",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022--number\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022Value2\u0022, \u0022-s\u0022, \u0022foobar\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(_command.CommandRun);\r\n    Assert.Equal(50, _arguments.Number);\r\n    Assert.Equal(SampleEnum.Value2, _arguments.Enum);\r\n    Assert.Equal(\u0022foobar\u0022, _arguments.String);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ArgumentsAreValidated",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022-n\u0022, \u0022200\u0022, \u0022--enum\u0022, \u0022Value2\u0022, });\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "VerbosityArgumentIsDetected",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022-n\u0022, \u002250\u0022, \u0022--verbosity=Warning\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(_command.CommandRun);\r\n    Assert.Equal(50, _arguments.Number);\r\n    Assert.Equal(LogLevel.Warning, _arguments.Verbosity);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "HelpArgumentIsDetected",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022--help\u0022, });\r\n    Assert.Equal((int)ExitCode.HELP_SHOWN, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n    Assert.True(_arguments.ShowHelp);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtraneousArgumentsAreRejected",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022-n\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022Value2\u0022, \u0022--invalid-arg=foo\u0022, });\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtraneousArgumentsAreDetected",
        "Body": "{\r\n    var arguments = new SampleUnitTestArguments();\r\n    var command = new UnitTestCommand\u003CSampleUnitTestArguments\u003E(arguments, true);\r\n    var exitCode = command.Invoke(new[] { \u0022-n\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022Value2\u0022, \u0022some\u0022, \u0022other=1\u0022, \u0022args\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(50, arguments.Number);\r\n    Assert.Equal(SampleEnum.Value2, arguments.Enum);\r\n    Assert.Equal(new[] { \u0022some\u0022, \u0022other=1\u0022, \u0022args\u0022 }, command.ExtraArgs);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "EnumsAreValidated",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022--enum\u0022, \u0022Foo\u0022, });\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ForbiddenEnumValuesAreValidated",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022--enum\u0022, \u0022ForbiddenValue\u0022, });\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PassThroughArgumentsAreParsed",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022-n\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022Value2\u0022, Program.VerbatimArgumentPlaceholder, \u0022v8\u0022, \u0022--foo\u0022, \u0022runtime.js\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(_command.CommandRun);\r\n    Assert.Equal(50, _arguments.Number);\r\n    Assert.Equal(SampleEnum.Value2, _arguments.Enum);\r\n    Assert.Equal(new[] { \u0022v8\u0022, \u0022--foo\u0022, \u0022runtime.js\u0022 }, _command.PassThroughArgs.ToArray());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PassThroughArgumentsAreParsedInCommandSet",
        "Body": "{\r\n    var arguments = new SampleUnitTestArguments();\r\n    var command = new UnitTestCommand\u003CSampleUnitTestArguments\u003E(arguments, false);\r\n    var commandSet = new CommandSet(\u0022set\u0022)\r\n    {\r\n        command\r\n    };\r\n    var exitCode = commandSet.Run(new[] { \u0022unit-test\u0022, \u0022-n\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022Value2\u0022, Program.VerbatimArgumentPlaceholder, \u0022v8\u0022, \u0022--foo\u0022, \u0022runtime.js\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(50, arguments.Number);\r\n    Assert.Equal(SampleEnum.Value2, arguments.Enum);\r\n    Assert.Equal(new[] { \u0022v8\u0022, \u0022--foo\u0022, \u0022runtime.js\u0022 }, command.PassThroughArgs.ToArray());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtraneousArgumentsDetectedInPassThroughMode",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022v8\u0022, \u0022--foo\u0022, \u0022runtime.js\u0022, Program.VerbatimArgumentPlaceholder, \u0022-n\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022--invalid-arg=foo\u0022, });\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ArgumentPrototypesAreNotClashing",
        "Body": "{\r\n    // This test tries to run all of the commands which will fail because of some missing argument\r\n    // If we for example add a new option and that would clash with some already existing argument,\r\n    // this will fail to add the duplicate option prototype.\r\n    // (it already happened that we added -d to all commands and the WASM command failed because it already had -d)\r\n    var commandSet = new CommandSet(\u0022test\u0022)\r\n    {\r\n        new AppleCommandSet(),\r\n        new AndroidCommandSet(),\r\n        new WasmCommandSet(),\r\n        new XHarnessHelpCommand(),\r\n        new XHarnessVersionCommand()\r\n    };\r\n    Assert.Equal((int)ExitCode.HELP_SHOWN, commandSet.Run(command.Split(\u0022 \u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SampleNumberArgument",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.CLI.Tests",
    "Methods": [
      {
        "Name": "ArgumentsWithEqualSignsAreParsed",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022--number=50\u0022, \u0022--enum=Value2\u0022, \u0022--string=foobar\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(_command.CommandRun);\r\n    Assert.Equal(50, _arguments.Number);\r\n    Assert.Equal(SampleEnum.Value2, _arguments.Enum);\r\n    Assert.Equal(\u0022foobar\u0022, _arguments.String);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ArgumentsWithSpacesAreParsed",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022--number\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022Value2\u0022, \u0022-s\u0022, \u0022foobar\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(_command.CommandRun);\r\n    Assert.Equal(50, _arguments.Number);\r\n    Assert.Equal(SampleEnum.Value2, _arguments.Enum);\r\n    Assert.Equal(\u0022foobar\u0022, _arguments.String);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ArgumentsAreValidated",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022-n\u0022, \u0022200\u0022, \u0022--enum\u0022, \u0022Value2\u0022, });\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "VerbosityArgumentIsDetected",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022-n\u0022, \u002250\u0022, \u0022--verbosity=Warning\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(_command.CommandRun);\r\n    Assert.Equal(50, _arguments.Number);\r\n    Assert.Equal(LogLevel.Warning, _arguments.Verbosity);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "HelpArgumentIsDetected",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022--help\u0022, });\r\n    Assert.Equal((int)ExitCode.HELP_SHOWN, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n    Assert.True(_arguments.ShowHelp);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtraneousArgumentsAreRejected",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022-n\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022Value2\u0022, \u0022--invalid-arg=foo\u0022, });\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtraneousArgumentsAreDetected",
        "Body": "{\r\n    var arguments = new SampleUnitTestArguments();\r\n    var command = new UnitTestCommand\u003CSampleUnitTestArguments\u003E(arguments, true);\r\n    var exitCode = command.Invoke(new[] { \u0022-n\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022Value2\u0022, \u0022some\u0022, \u0022other=1\u0022, \u0022args\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(50, arguments.Number);\r\n    Assert.Equal(SampleEnum.Value2, arguments.Enum);\r\n    Assert.Equal(new[] { \u0022some\u0022, \u0022other=1\u0022, \u0022args\u0022 }, command.ExtraArgs);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "EnumsAreValidated",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022--enum\u0022, \u0022Foo\u0022, });\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ForbiddenEnumValuesAreValidated",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022--enum\u0022, \u0022ForbiddenValue\u0022, });\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PassThroughArgumentsAreParsed",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022-n\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022Value2\u0022, Program.VerbatimArgumentPlaceholder, \u0022v8\u0022, \u0022--foo\u0022, \u0022runtime.js\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(_command.CommandRun);\r\n    Assert.Equal(50, _arguments.Number);\r\n    Assert.Equal(SampleEnum.Value2, _arguments.Enum);\r\n    Assert.Equal(new[] { \u0022v8\u0022, \u0022--foo\u0022, \u0022runtime.js\u0022 }, _command.PassThroughArgs.ToArray());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PassThroughArgumentsAreParsedInCommandSet",
        "Body": "{\r\n    var arguments = new SampleUnitTestArguments();\r\n    var command = new UnitTestCommand\u003CSampleUnitTestArguments\u003E(arguments, false);\r\n    var commandSet = new CommandSet(\u0022set\u0022)\r\n    {\r\n        command\r\n    };\r\n    var exitCode = commandSet.Run(new[] { \u0022unit-test\u0022, \u0022-n\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022Value2\u0022, Program.VerbatimArgumentPlaceholder, \u0022v8\u0022, \u0022--foo\u0022, \u0022runtime.js\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(50, arguments.Number);\r\n    Assert.Equal(SampleEnum.Value2, arguments.Enum);\r\n    Assert.Equal(new[] { \u0022v8\u0022, \u0022--foo\u0022, \u0022runtime.js\u0022 }, command.PassThroughArgs.ToArray());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtraneousArgumentsDetectedInPassThroughMode",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022v8\u0022, \u0022--foo\u0022, \u0022runtime.js\u0022, Program.VerbatimArgumentPlaceholder, \u0022-n\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022--invalid-arg=foo\u0022, });\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ArgumentPrototypesAreNotClashing",
        "Body": "{\r\n    // This test tries to run all of the commands which will fail because of some missing argument\r\n    // If we for example add a new option and that would clash with some already existing argument,\r\n    // this will fail to add the duplicate option prototype.\r\n    // (it already happened that we added -d to all commands and the WASM command failed because it already had -d)\r\n    var commandSet = new CommandSet(\u0022test\u0022)\r\n    {\r\n        new AppleCommandSet(),\r\n        new AndroidCommandSet(),\r\n        new WasmCommandSet(),\r\n        new XHarnessHelpCommand(),\r\n        new XHarnessVersionCommand()\r\n    };\r\n    Assert.Equal((int)ExitCode.HELP_SHOWN, commandSet.Run(command.Split(\u0022 \u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SampleEnumArgument",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.CLI.Tests",
    "Methods": [
      {
        "Name": "ArgumentsWithEqualSignsAreParsed",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022--number=50\u0022, \u0022--enum=Value2\u0022, \u0022--string=foobar\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(_command.CommandRun);\r\n    Assert.Equal(50, _arguments.Number);\r\n    Assert.Equal(SampleEnum.Value2, _arguments.Enum);\r\n    Assert.Equal(\u0022foobar\u0022, _arguments.String);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ArgumentsWithSpacesAreParsed",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022--number\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022Value2\u0022, \u0022-s\u0022, \u0022foobar\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(_command.CommandRun);\r\n    Assert.Equal(50, _arguments.Number);\r\n    Assert.Equal(SampleEnum.Value2, _arguments.Enum);\r\n    Assert.Equal(\u0022foobar\u0022, _arguments.String);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ArgumentsAreValidated",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022-n\u0022, \u0022200\u0022, \u0022--enum\u0022, \u0022Value2\u0022, });\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "VerbosityArgumentIsDetected",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022-n\u0022, \u002250\u0022, \u0022--verbosity=Warning\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(_command.CommandRun);\r\n    Assert.Equal(50, _arguments.Number);\r\n    Assert.Equal(LogLevel.Warning, _arguments.Verbosity);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "HelpArgumentIsDetected",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022--help\u0022, });\r\n    Assert.Equal((int)ExitCode.HELP_SHOWN, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n    Assert.True(_arguments.ShowHelp);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtraneousArgumentsAreRejected",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022-n\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022Value2\u0022, \u0022--invalid-arg=foo\u0022, });\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtraneousArgumentsAreDetected",
        "Body": "{\r\n    var arguments = new SampleUnitTestArguments();\r\n    var command = new UnitTestCommand\u003CSampleUnitTestArguments\u003E(arguments, true);\r\n    var exitCode = command.Invoke(new[] { \u0022-n\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022Value2\u0022, \u0022some\u0022, \u0022other=1\u0022, \u0022args\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(50, arguments.Number);\r\n    Assert.Equal(SampleEnum.Value2, arguments.Enum);\r\n    Assert.Equal(new[] { \u0022some\u0022, \u0022other=1\u0022, \u0022args\u0022 }, command.ExtraArgs);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "EnumsAreValidated",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022--enum\u0022, \u0022Foo\u0022, });\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ForbiddenEnumValuesAreValidated",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022--enum\u0022, \u0022ForbiddenValue\u0022, });\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PassThroughArgumentsAreParsed",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022-n\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022Value2\u0022, Program.VerbatimArgumentPlaceholder, \u0022v8\u0022, \u0022--foo\u0022, \u0022runtime.js\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(_command.CommandRun);\r\n    Assert.Equal(50, _arguments.Number);\r\n    Assert.Equal(SampleEnum.Value2, _arguments.Enum);\r\n    Assert.Equal(new[] { \u0022v8\u0022, \u0022--foo\u0022, \u0022runtime.js\u0022 }, _command.PassThroughArgs.ToArray());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PassThroughArgumentsAreParsedInCommandSet",
        "Body": "{\r\n    var arguments = new SampleUnitTestArguments();\r\n    var command = new UnitTestCommand\u003CSampleUnitTestArguments\u003E(arguments, false);\r\n    var commandSet = new CommandSet(\u0022set\u0022)\r\n    {\r\n        command\r\n    };\r\n    var exitCode = commandSet.Run(new[] { \u0022unit-test\u0022, \u0022-n\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022Value2\u0022, Program.VerbatimArgumentPlaceholder, \u0022v8\u0022, \u0022--foo\u0022, \u0022runtime.js\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(50, arguments.Number);\r\n    Assert.Equal(SampleEnum.Value2, arguments.Enum);\r\n    Assert.Equal(new[] { \u0022v8\u0022, \u0022--foo\u0022, \u0022runtime.js\u0022 }, command.PassThroughArgs.ToArray());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtraneousArgumentsDetectedInPassThroughMode",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022v8\u0022, \u0022--foo\u0022, \u0022runtime.js\u0022, Program.VerbatimArgumentPlaceholder, \u0022-n\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022--invalid-arg=foo\u0022, });\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ArgumentPrototypesAreNotClashing",
        "Body": "{\r\n    // This test tries to run all of the commands which will fail because of some missing argument\r\n    // If we for example add a new option and that would clash with some already existing argument,\r\n    // this will fail to add the duplicate option prototype.\r\n    // (it already happened that we added -d to all commands and the WASM command failed because it already had -d)\r\n    var commandSet = new CommandSet(\u0022test\u0022)\r\n    {\r\n        new AppleCommandSet(),\r\n        new AndroidCommandSet(),\r\n        new WasmCommandSet(),\r\n        new XHarnessHelpCommand(),\r\n        new XHarnessVersionCommand()\r\n    };\r\n    Assert.Equal((int)ExitCode.HELP_SHOWN, commandSet.Run(command.Split(\u0022 \u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SampleStringArgument",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.CLI.Tests",
    "Methods": [
      {
        "Name": "ArgumentsWithEqualSignsAreParsed",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022--number=50\u0022, \u0022--enum=Value2\u0022, \u0022--string=foobar\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(_command.CommandRun);\r\n    Assert.Equal(50, _arguments.Number);\r\n    Assert.Equal(SampleEnum.Value2, _arguments.Enum);\r\n    Assert.Equal(\u0022foobar\u0022, _arguments.String);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ArgumentsWithSpacesAreParsed",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022--number\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022Value2\u0022, \u0022-s\u0022, \u0022foobar\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(_command.CommandRun);\r\n    Assert.Equal(50, _arguments.Number);\r\n    Assert.Equal(SampleEnum.Value2, _arguments.Enum);\r\n    Assert.Equal(\u0022foobar\u0022, _arguments.String);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ArgumentsAreValidated",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022-n\u0022, \u0022200\u0022, \u0022--enum\u0022, \u0022Value2\u0022, });\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "VerbosityArgumentIsDetected",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022-n\u0022, \u002250\u0022, \u0022--verbosity=Warning\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(_command.CommandRun);\r\n    Assert.Equal(50, _arguments.Number);\r\n    Assert.Equal(LogLevel.Warning, _arguments.Verbosity);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "HelpArgumentIsDetected",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022--help\u0022, });\r\n    Assert.Equal((int)ExitCode.HELP_SHOWN, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n    Assert.True(_arguments.ShowHelp);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtraneousArgumentsAreRejected",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022-n\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022Value2\u0022, \u0022--invalid-arg=foo\u0022, });\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtraneousArgumentsAreDetected",
        "Body": "{\r\n    var arguments = new SampleUnitTestArguments();\r\n    var command = new UnitTestCommand\u003CSampleUnitTestArguments\u003E(arguments, true);\r\n    var exitCode = command.Invoke(new[] { \u0022-n\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022Value2\u0022, \u0022some\u0022, \u0022other=1\u0022, \u0022args\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(50, arguments.Number);\r\n    Assert.Equal(SampleEnum.Value2, arguments.Enum);\r\n    Assert.Equal(new[] { \u0022some\u0022, \u0022other=1\u0022, \u0022args\u0022 }, command.ExtraArgs);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "EnumsAreValidated",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022--enum\u0022, \u0022Foo\u0022, });\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ForbiddenEnumValuesAreValidated",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022--enum\u0022, \u0022ForbiddenValue\u0022, });\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PassThroughArgumentsAreParsed",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022-n\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022Value2\u0022, Program.VerbatimArgumentPlaceholder, \u0022v8\u0022, \u0022--foo\u0022, \u0022runtime.js\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(_command.CommandRun);\r\n    Assert.Equal(50, _arguments.Number);\r\n    Assert.Equal(SampleEnum.Value2, _arguments.Enum);\r\n    Assert.Equal(new[] { \u0022v8\u0022, \u0022--foo\u0022, \u0022runtime.js\u0022 }, _command.PassThroughArgs.ToArray());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PassThroughArgumentsAreParsedInCommandSet",
        "Body": "{\r\n    var arguments = new SampleUnitTestArguments();\r\n    var command = new UnitTestCommand\u003CSampleUnitTestArguments\u003E(arguments, false);\r\n    var commandSet = new CommandSet(\u0022set\u0022)\r\n    {\r\n        command\r\n    };\r\n    var exitCode = commandSet.Run(new[] { \u0022unit-test\u0022, \u0022-n\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022Value2\u0022, Program.VerbatimArgumentPlaceholder, \u0022v8\u0022, \u0022--foo\u0022, \u0022runtime.js\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(50, arguments.Number);\r\n    Assert.Equal(SampleEnum.Value2, arguments.Enum);\r\n    Assert.Equal(new[] { \u0022v8\u0022, \u0022--foo\u0022, \u0022runtime.js\u0022 }, command.PassThroughArgs.ToArray());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtraneousArgumentsDetectedInPassThroughMode",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022v8\u0022, \u0022--foo\u0022, \u0022runtime.js\u0022, Program.VerbatimArgumentPlaceholder, \u0022-n\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022--invalid-arg=foo\u0022, });\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ArgumentPrototypesAreNotClashing",
        "Body": "{\r\n    // This test tries to run all of the commands which will fail because of some missing argument\r\n    // If we for example add a new option and that would clash with some already existing argument,\r\n    // this will fail to add the duplicate option prototype.\r\n    // (it already happened that we added -d to all commands and the WASM command failed because it already had -d)\r\n    var commandSet = new CommandSet(\u0022test\u0022)\r\n    {\r\n        new AppleCommandSet(),\r\n        new AndroidCommandSet(),\r\n        new WasmCommandSet(),\r\n        new XHarnessHelpCommand(),\r\n        new XHarnessVersionCommand()\r\n    };\r\n    Assert.Equal((int)ExitCode.HELP_SHOWN, commandSet.Run(command.Split(\u0022 \u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "XHarnessCommandTests",
    "Message": null,
    "ProjectName": "Microsoft.DotNet.XHarness.CLI.Tests",
    "Methods": [
      {
        "Name": "ArgumentsWithEqualSignsAreParsed",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022--number=50\u0022, \u0022--enum=Value2\u0022, \u0022--string=foobar\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(_command.CommandRun);\r\n    Assert.Equal(50, _arguments.Number);\r\n    Assert.Equal(SampleEnum.Value2, _arguments.Enum);\r\n    Assert.Equal(\u0022foobar\u0022, _arguments.String);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ArgumentsWithSpacesAreParsed",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022--number\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022Value2\u0022, \u0022-s\u0022, \u0022foobar\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(_command.CommandRun);\r\n    Assert.Equal(50, _arguments.Number);\r\n    Assert.Equal(SampleEnum.Value2, _arguments.Enum);\r\n    Assert.Equal(\u0022foobar\u0022, _arguments.String);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ArgumentsAreValidated",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022-n\u0022, \u0022200\u0022, \u0022--enum\u0022, \u0022Value2\u0022, });\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "VerbosityArgumentIsDetected",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022-n\u0022, \u002250\u0022, \u0022--verbosity=Warning\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(_command.CommandRun);\r\n    Assert.Equal(50, _arguments.Number);\r\n    Assert.Equal(LogLevel.Warning, _arguments.Verbosity);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "HelpArgumentIsDetected",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022--help\u0022, });\r\n    Assert.Equal((int)ExitCode.HELP_SHOWN, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n    Assert.True(_arguments.ShowHelp);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtraneousArgumentsAreRejected",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022-n\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022Value2\u0022, \u0022--invalid-arg=foo\u0022, });\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtraneousArgumentsAreDetected",
        "Body": "{\r\n    var arguments = new SampleUnitTestArguments();\r\n    var command = new UnitTestCommand\u003CSampleUnitTestArguments\u003E(arguments, true);\r\n    var exitCode = command.Invoke(new[] { \u0022-n\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022Value2\u0022, \u0022some\u0022, \u0022other=1\u0022, \u0022args\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(50, arguments.Number);\r\n    Assert.Equal(SampleEnum.Value2, arguments.Enum);\r\n    Assert.Equal(new[] { \u0022some\u0022, \u0022other=1\u0022, \u0022args\u0022 }, command.ExtraArgs);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "EnumsAreValidated",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022--enum\u0022, \u0022Foo\u0022, });\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ForbiddenEnumValuesAreValidated",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022--enum\u0022, \u0022ForbiddenValue\u0022, });\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PassThroughArgumentsAreParsed",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022-n\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022Value2\u0022, Program.VerbatimArgumentPlaceholder, \u0022v8\u0022, \u0022--foo\u0022, \u0022runtime.js\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(_command.CommandRun);\r\n    Assert.Equal(50, _arguments.Number);\r\n    Assert.Equal(SampleEnum.Value2, _arguments.Enum);\r\n    Assert.Equal(new[] { \u0022v8\u0022, \u0022--foo\u0022, \u0022runtime.js\u0022 }, _command.PassThroughArgs.ToArray());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PassThroughArgumentsAreParsedInCommandSet",
        "Body": "{\r\n    var arguments = new SampleUnitTestArguments();\r\n    var command = new UnitTestCommand\u003CSampleUnitTestArguments\u003E(arguments, false);\r\n    var commandSet = new CommandSet(\u0022set\u0022)\r\n    {\r\n        command\r\n    };\r\n    var exitCode = commandSet.Run(new[] { \u0022unit-test\u0022, \u0022-n\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022Value2\u0022, Program.VerbatimArgumentPlaceholder, \u0022v8\u0022, \u0022--foo\u0022, \u0022runtime.js\u0022, });\r\n    Assert.Equal(0, exitCode);\r\n    Assert.True(command.CommandRun);\r\n    Assert.Equal(50, arguments.Number);\r\n    Assert.Equal(SampleEnum.Value2, arguments.Enum);\r\n    Assert.Equal(new[] { \u0022v8\u0022, \u0022--foo\u0022, \u0022runtime.js\u0022 }, command.PassThroughArgs.ToArray());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtraneousArgumentsDetectedInPassThroughMode",
        "Body": "{\r\n    var exitCode = _command.Invoke(new[] { \u0022v8\u0022, \u0022--foo\u0022, \u0022runtime.js\u0022, Program.VerbatimArgumentPlaceholder, \u0022-n\u0022, \u002250\u0022, \u0022--enum\u0022, \u0022--invalid-arg=foo\u0022, });\r\n    Assert.Equal((int)ExitCode.INVALID_ARGUMENTS, exitCode);\r\n    Assert.False(_command.CommandRun);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ArgumentPrototypesAreNotClashing",
        "Body": "{\r\n    // This test tries to run all of the commands which will fail because of some missing argument\r\n    // If we for example add a new option and that would clash with some already existing argument,\r\n    // this will fail to add the duplicate option prototype.\r\n    // (it already happened that we added -d to all commands and the WASM command failed because it already had -d)\r\n    var commandSet = new CommandSet(\u0022test\u0022)\r\n    {\r\n        new AppleCommandSet(),\r\n        new AndroidCommandSet(),\r\n        new WasmCommandSet(),\r\n        new XHarnessHelpCommand(),\r\n        new XHarnessVersionCommand()\r\n    };\r\n    Assert.Equal((int)ExitCode.HELP_SHOWN, commandSet.Run(command.Split(\u0022 \u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  }
]