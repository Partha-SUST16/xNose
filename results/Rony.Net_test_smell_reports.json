[
  {
    "Name": "RequestHandlerTests",
    "Message": null,
    "ProjectName": "Rony.UnitTests",
    "Methods": [
      {
        "Name": "Constructor_Should_Work_Correctly",
        "Body": "{\r\n    //Assert\r\n    Assert.NotNull(_handler.Configs);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Config_With_String_Should_Add_Config",
        "Body": "{\r\n    //Act\r\n    _handler.Send(request).Receive(response);\r\n    //Assert\r\n    Assert.Single(_handler.Configs);\r\n    Assert.Equal(response, _handler.Match(request));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Config_With_Byte_Array_Should_Add_Config",
        "Body": "{\r\n    //Arrange\r\n    var requestByte = Encoding.UTF8.GetBytes(request);\r\n    var responseByte = Encoding.UTF8.GetBytes(response);\r\n    //Act\r\n    _handler.Send(requestByte).Receive(responseByte);\r\n    var received = _handler.Match(Encoding.UTF8.GetString(requestByte));\r\n    var receivedBytes = Encoding.UTF8.GetBytes(received);\r\n    //Assert\r\n    Assert.Single(_handler.Configs);\r\n    Assert.True(responseByte.SequenceEqual(receivedBytes));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Config_With_Func_Of_String_Should_Add_Config",
        "Body": "{\r\n    //Act\r\n    _handler.Send(request).Receive(x =\u003E x.ToUpper());\r\n    //Assert\r\n    Assert.Single(_handler.Configs);\r\n    Assert.Equal(response, _handler.Match(request));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Config_With_Func_Of_Byte_Array_Should_Add_Config",
        "Body": "{\r\n    //Arrange\r\n    var request = new byte[]\r\n    {\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6,\r\n        7,\r\n        8,\r\n        9\r\n    };\r\n    var expectedResponse = new byte[]\r\n    {\r\n        1,\r\n        3,\r\n        5,\r\n        7,\r\n        9\r\n    };\r\n    //Act\r\n    _handler.Send(request).Receive(x =\u003E x.Select((s, i) =\u003E (s, i)).Where(t =\u003E t.i % 2 == 0).Select(t =\u003E t.s).ToArray());\r\n    var received = _handler.Match(Encoding.UTF8.GetString(request));\r\n    var receivedBytes = Encoding.UTF8.GetBytes(received);\r\n    //Assert\r\n    Assert.Single(_handler.Configs);\r\n    Assert.True(expectedResponse.SequenceEqual(receivedBytes));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Config_With_Empty_String_Should_Match_Any_Request",
        "Body": "{\r\n    //Act\r\n    _handler.Send(\u0022\u0022).Receive(\u0022I match Everything\u0022);\r\n    var received = _handler.Match(request);\r\n    //Assert\r\n    Assert.Single(_handler.Configs);\r\n    Assert.Equal(\u0022I match Everything\u0022, received);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Config_With_Empty_String_Should_Match_Any_Request_With_Func_Of_String",
        "Body": "{\r\n    //Act\r\n    _handler.Send(\u0022\u0022).Receive(x =\u003E x.ToUpper());\r\n    var received = _handler.Match(request);\r\n    //Assert\r\n    Assert.Single(_handler.Configs);\r\n    Assert.Equal(request.ToUpper(), received);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Config_With_Empty_String_Should_Match_Any_Request_With_Func_Of_Byte",
        "Body": "{\r\n    //Act\r\n    _handler.Send(\u0022\u0022).Receive(x =\u003E x.Take(3).ToArray());\r\n    var received = _handler.Match(request);\r\n    //Assert\r\n    Assert.Single(_handler.Configs);\r\n    Assert.Equal(request.Substring(0, 3), received);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TCPServerSslTests",
    "Message": null,
    "ProjectName": "Rony.UnitTests",
    "Methods": [
      {
        "Name": "Constructor_Should_Work_Correctly",
        "Body": "{\r\n    //Arrange\r\n    using var listener = new TcpServerSsl(5000, \u0022localhost\u0022, SslProtocols.None);\r\n    //Assert\r\n    Assert.NotNull(listener);\r\n    Assert.Equal(\u0022127.0.0.1\u0022, listener.Address.ToString());\r\n    Assert.Equal(5000, listener.Port);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Constructor_With_IP_Should_Work_Correctly",
        "Body": "{\r\n    //Arrange\r\n    using var listener = new TcpServerSsl(\u0022127.0.0.1\u0022, 5000, \u0022localhost\u0022, SslProtocols.None);\r\n    //Assert\r\n    Assert.NotNull(listener);\r\n    Assert.Equal(\u0022127.0.0.1\u0022, listener.Address.ToString());\r\n    Assert.Equal(5000, listener.Port);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Constructor_With_IPAddress_Should_Work_Correctly",
        "Body": "{\r\n    //Arrange\r\n    using var listener = new TcpServerSsl(IPAddress.Parse(\u0022127.0.0.1\u0022), 5000, \u0022localhost\u0022, SslProtocols.None);\r\n    //Assert\r\n    Assert.NotNull(listener);\r\n    Assert.Equal(\u0022127.0.0.1\u0022, listener.Address.ToString());\r\n    Assert.Equal(5000, listener.Port);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Active_Property_Should_Set_Correctly",
        "Body": "{\r\n    //Arrange\r\n    using var listener = new TcpServerSsl(IPAddress.Parse(\u0022127.0.0.1\u0022), 5000, \u0022localhost\u0022, SslProtocols.None);\r\n    //Act\r\n    listener.Start();\r\n    //Assert\r\n    Assert.True(listener.Active);\r\n    //Act\r\n    listener.Stop();\r\n    //Assert\r\n    Assert.False(listener.Active);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TCPServerTests",
    "Message": null,
    "ProjectName": "Rony.UnitTests",
    "Methods": [
      {
        "Name": "Constructor_Should_Work_Correctly",
        "Body": "{\r\n    //Arrange\r\n    using var listener = new TcpServer(5000);\r\n    //Assert\r\n    Assert.NotNull(listener);\r\n    Assert.Equal(\u0022127.0.0.1\u0022, listener.Address.ToString());\r\n    Assert.Equal(5000, listener.Port);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Constructor_With_IP_Should_Work_Correctly",
        "Body": "{\r\n    //Arrange\r\n    using var listener = new TcpServer(\u0022127.0.0.1\u0022, 5000);\r\n    //Assert\r\n    Assert.NotNull(listener);\r\n    Assert.Equal(\u0022127.0.0.1\u0022, listener.Address.ToString());\r\n    Assert.Equal(5000, listener.Port);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Constructor_With_IPAddress_Should_Work_Correctly",
        "Body": "{\r\n    //Arrange\r\n    using var listener = new TcpServer(IPAddress.Parse(\u0022127.0.0.1\u0022), 5000);\r\n    //Assert\r\n    Assert.NotNull(listener);\r\n    Assert.Equal(\u0022127.0.0.1\u0022, listener.Address.ToString());\r\n    Assert.Equal(5000, listener.Port);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Active_Property_Should_Set_Correctly",
        "Body": "{\r\n    //Arrange\r\n    using var listener = new TcpServer(IPAddress.Parse(\u0022127.0.0.1\u0022), 5000);\r\n    //Act\r\n    listener.Start();\r\n    //Assert\r\n    Assert.True(listener.Active);\r\n    //Act\r\n    listener.Stop();\r\n    //Assert\r\n    Assert.False(listener.Active);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UdpServerTests",
    "Message": null,
    "ProjectName": "Rony.UnitTests",
    "Methods": [
      {
        "Name": "Constructor_Should_Work_Correctly",
        "Body": "{\r\n    //Arrange\r\n    using var listener = new UdpServer(5000);\r\n    //Assert\r\n    Assert.NotNull(listener);\r\n    Assert.Equal(\u00220.0.0.0\u0022, listener.Address.ToString());\r\n    Assert.Equal(5000, listener.Port);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Constructor_With_IP_Should_Work_Correctly",
        "Body": "{\r\n    //Arrange\r\n    using var listener = new UdpServer(\u0022127.0.0.1\u0022, 5000);\r\n    //Assert\r\n    Assert.NotNull(listener);\r\n    Assert.Equal(\u0022127.0.0.1\u0022, listener.Address.ToString());\r\n    Assert.Equal(5000, listener.Port);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Constructor_With_EndPoint_Should_Work_Correctly",
        "Body": "{\r\n    //Arrange\r\n    using var listener = new UdpServer(new IPEndPoint(IPAddress.Parse(\u0022127.0.0.1\u0022), 5000));\r\n    //Assert\r\n    Assert.NotNull(listener);\r\n    Assert.Equal(\u0022127.0.0.1\u0022, listener.Address.ToString());\r\n    Assert.Equal(5000, listener.Port);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Active_Property_Should_Set_Correctly",
        "Body": "{\r\n    //Arrange\r\n    using var listener = new UdpServer(5000);\r\n    //Assert\r\n    Assert.False(listener.Active);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MockServerTests",
    "Message": null,
    "ProjectName": "Rony.UnitTests",
    "Methods": [
      {
        "Name": "Constructor_Should_Work_Correctly",
        "Body": "{\r\n    //Arrange\r\n    using var server = new MockServer(new TcpServer(5000));\r\n    //Assert\r\n    Assert.NotNull(server);\r\n    Assert.NotNull(server.Mock);\r\n    Assert.Equal(\u0022127.0.0.1\u0022, server.Address.ToString());\r\n    Assert.Equal(5000, server.Port);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Active_Property_Should_Set_Correctly",
        "Body": "{\r\n    //Arrange\r\n    using var server = new MockServer(new TcpServer(5001));\r\n    //Act\r\n    server.Start();\r\n    //Assert\r\n    Assert.True(server.Active);\r\n    //Act\r\n    server.Stop();\r\n    //Assert\r\n    Assert.False(server.Active);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Server_Should_Be_Stop_After_Dispose",
        "Body": "{\r\n    //Arrange\r\n    using var server = new MockServer(new TcpServer(5001));\r\n    //Act\r\n    server.Start();\r\n    //Assert\r\n    Assert.True(server.Active);\r\n    //Act\r\n    server.Dispose();\r\n    //Assert\r\n    Assert.False(server.Active);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Server_Should_Return_Error_On_Adding_Duplicate_Request",
        "Body": "{\r\n    //Arrange\r\n    var server = new MockServer(new TcpServer(3000));\r\n    var request = new byte[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    };\r\n    //Act\r\n    server.Mock.Send(request).Receive(new byte[] { 3, 4, 5 });\r\n    //Assert\r\n    Assert.Throws\u003CArgumentException\u003E(() =\u003E server.Mock.Send(request).Receive(\u0022test\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MessageTests",
    "Message": null,
    "ProjectName": "Rony.UnitTests",
    "Methods": [
      {
        "Name": "Constructor_With_String_Should_Work_Correctly",
        "Body": "{\r\n    //Arrange\r\n    var message = new Message(\u0022Test Message\u0022, new IPEndPoint(IPAddress.Parse(\u0022127.0.0.1\u0022), 1000));\r\n    //Assert\r\n    Assert.NotNull(message);\r\n    Assert.Equal(\u0022Test Message\u0022, message.BodyString);\r\n    var endPoint = (IPEndPoint)message.Sender;\r\n    Assert.Equal(1000, endPoint.Port);\r\n    Assert.Equal(\u0022127.0.0.1\u0022, endPoint.Address.ToString());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Constructor_With_Byte_Should_Work_Correctly",
        "Body": "{\r\n    //Arrange\r\n    var message = new Message(\u0022Test Message\u0022.GetBytes(), new IPEndPoint(IPAddress.Parse(\u0022127.0.0.1\u0022), 1000));\r\n    //Assert\r\n    Assert.NotNull(message);\r\n    Assert.True(\u0022Test Message\u0022.GetBytes().SequenceEqual(message.Body));\r\n    var endPoint = (IPEndPoint)message.Sender;\r\n    Assert.Equal(1000, endPoint.Port);\r\n    Assert.Equal(\u0022127.0.0.1\u0022, endPoint.Address.ToString());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "BodyString_Should_Return_Correct_Value",
        "Body": "{\r\n    //Arrange\r\n    var message = new Message(input.GetBytes(), new IPEndPoint(IPAddress.Parse(\u0022127.0.0.1\u0022), 1000));\r\n    //Assert\r\n    Assert.Equal(input, message.BodyString);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MockTcpServerSslTests",
    "Message": null,
    "ProjectName": "Rony.FunctionalTests",
    "Methods": [
      {
        "Name": "Server_Should_Return_Correct_Response",
        "Body": "{\r\n    //Arrange\r\n    const int port = 3200;\r\n    using var server = new MockServer(new TcpServerSsl(port, _certificateName, SslProtocols.None));\r\n    var request = new byte[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    };\r\n    using var client = new TcpClient();\r\n    //Act\r\n    server.Mock.Send(request).Receive(x =\u003E new byte[] { x[1], 10, x[2] });\r\n    server.Start();\r\n    await client.ConnectAsync(IPAddress.Parse(\u0022127.0.0.1\u0022), port);\r\n    await using var sslStream = new SslStream(client.GetStream(), false, new RemoteCertificateValidationCallback(CertificateValidationCallback));\r\n    await sslStream.AuthenticateAsClientAsync(_certificateName);\r\n    await sslStream.WriteAsync(request, 0, request.Length);\r\n    var response = new byte[client.ReceiveBufferSize];\r\n    var bytes = await sslStream.ReadAsync(response, 0, response.Length);\r\n    client.Close();\r\n    server.Stop();\r\n    //Assert\r\n    Assert.True(response.Take(bytes).SequenceEqual(new byte[] { 2, 10, 3 }));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Server_Should_Return_Response_To_Any_Request_When_An_Empty_Request_Exists",
        "Body": "{\r\n    //Arrange\r\n    const int port = 3201;\r\n    using var server = new MockServer(new TcpServerSsl(port, _certificateName, SslProtocols.None));\r\n    using var client = new TcpClient();\r\n    //Act\r\n    server.Mock.Send(\u0022\u0022).Receive(\u0022I match everything\u0022);\r\n    server.Start();\r\n    await client.ConnectAsync(IPAddress.Parse(\u0022127.0.0.1\u0022), port);\r\n    await using var sslStream = new SslStream(client.GetStream(), false, new RemoteCertificateValidationCallback(CertificateValidationCallback));\r\n    await sslStream.AuthenticateAsClientAsync(_certificateName);\r\n    var requestBytes = request.GetBytes();\r\n    await sslStream.WriteAsync(requestBytes, 0, requestBytes.Length);\r\n    var response = new byte[client.ReceiveBufferSize];\r\n    var bytes = await sslStream.ReadAsync(response, 0, response.Length);\r\n    client.Close();\r\n    server.Stop();\r\n    //Assert\r\n    Assert.Equal(\u0022I match everything\u0022, response.Take(bytes).ToArray().GetString());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Server_Should_Return_Nothing_When_No_Match_Exists",
        "Body": "{\r\n    //Arrange\r\n    const int port = 3202;\r\n    using var server = new MockServer(new TcpServerSsl(port, _certificateName, SslProtocols.None));\r\n    using var client = new TcpClient();\r\n    //Act\r\n    server.Mock.Send(\u0022Main Request\u0022).Receive(x =\u003E new byte[] { x[1], 10, x[2] });\r\n    server.Start();\r\n    await client.ConnectAsync(IPAddress.Parse(\u0022127.0.0.1\u0022), port);\r\n    await using var sslStream = new SslStream(client.GetStream(), false, new RemoteCertificateValidationCallback(CertificateValidationCallback));\r\n    await sslStream.AuthenticateAsClientAsync(_certificateName);\r\n    var requestBytes = request.GetBytes();\r\n    await sslStream.WriteAsync(requestBytes, 0, requestBytes.Length);\r\n    var response = new byte[client.ReceiveBufferSize];\r\n    var bytes = await sslStream.ReadAsync(response, 0, response.Length);\r\n    client.Close();\r\n    server.Stop();\r\n    //Assert\r\n    Assert.Equal(0, bytes);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Server_Should_Return_Correct_Response_On_Multiple_Requests",
        "Body": "{\r\n    //Arrange\r\n    const int port = 3203;\r\n    using var server = new MockServer(new TcpServerSsl(port, _certificateName, SslProtocols.None));\r\n    using var client = new TcpClient();\r\n    //Act\r\n    server.Mock.Send(\u0022123\u0022).Receive(\u0022321\u0022);\r\n    server.Mock.Send(\u0022ABC\u0022).Receive(\u0022CBA\u0022);\r\n    server.Mock.Send(\u0022!@#\u0022).Receive(\u0022$%^\u0022);\r\n    server.Start();\r\n    await client.ConnectAsync(IPAddress.Parse(\u0022127.0.0.1\u0022), port);\r\n    await using var sslStream = new SslStream(client.GetStream(), false, new RemoteCertificateValidationCallback(CertificateValidationCallback));\r\n    await sslStream.AuthenticateAsClientAsync(_certificateName);\r\n    await sslStream.WriteAsync(\u0022ABC\u0022.GetBytes(), 0, 3);\r\n    var response = new byte[client.ReceiveBufferSize];\r\n    var bytes = sslStream.Read(response, 0, response.Length);\r\n    client.Close();\r\n    server.Stop();\r\n    //Assert\r\n    Assert.Equal(\u0022CBA\u0022, response.Take(bytes).ToArray().GetString());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Server_Should_Return_Correct_Response_On_Many_Request",
        "Body": "{\r\n    //Arrange\r\n    const int port = 3204;\r\n    using var server = new MockServer(new TcpServerSsl(port, _certificateName, SslProtocols.None));\r\n    //Act\r\n    for (int i = 0; i \u003C 10000; i\u002B\u002B)\r\n        server.Mock.Send(i.ToString()).Receive((i \u002B 10000).ToString());\r\n    server.Start();\r\n    for (int i = 0; i \u003C 10000; i\u002B\u002B)\r\n    {\r\n        using var client = new TcpClient();\r\n        await client.ConnectAsync(IPAddress.Parse(\u0022127.0.0.1\u0022), port);\r\n        await using var sslStream = new SslStream(client.GetStream(), false, new RemoteCertificateValidationCallback(CertificateValidationCallback));\r\n        await sslStream.AuthenticateAsClientAsync(_certificateName);\r\n        var response = new byte[client.ReceiveBufferSize];\r\n        var request = i.ToString().GetBytes();\r\n        await sslStream.WriteAsync(request, 0, request.Length);\r\n        var bytes = sslStream.Read(response, 0, response.Length);\r\n        client.Close();\r\n        //Assert\r\n        Assert.Equal((i \u002B 10000).ToString(), response.Take(bytes).ToArray().GetString());\r\n    }\r\n\r\n    server.Stop();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Server_Should_Return_Correct_Response_On_Multi_Thread_Request",
        "Body": "{\r\n    //Act\r\n    for (int i = 0; i \u003C 100; i\u002B\u002B)\r\n    {\r\n        ThreadPool.QueueUserWorkItem(new WaitCallback(ConnectServer), i.ToString());\r\n    }\r\n\r\n    async void ConnectServer(object input)\r\n    {\r\n        var header = (string)input;\r\n        using var server = new MockServer(new TcpServerSsl(int.Parse(header), _certificateName, SslProtocols.None));\r\n        for (int i = 0; i \u003C 1000; i\u002B\u002B)\r\n            server.Mock.Send($\u0022{header}-{i}\u0022).Receive($\u0022{header}-{i \u002B 10000}\u0022);\r\n        server.Start();\r\n        for (int i = 0; i \u003C 1000; i\u002B\u002B)\r\n        {\r\n            using var client = new TcpClient();\r\n            await client.ConnectAsync(IPAddress.Parse(\u0022127.0.0.1\u0022), int.Parse(header));\r\n            await using var sslStream = new SslStream(client.GetStream(), false, new RemoteCertificateValidationCallback(CertificateValidationCallback));\r\n            await sslStream.AuthenticateAsClientAsync(_certificateName);\r\n            var response = new byte[client.ReceiveBufferSize];\r\n            var request = $\u0022{header}-{i}\u0022.ToString().GetBytes();\r\n            await sslStream.WriteAsync(request, 0, request.Length);\r\n            var bytes = sslStream.Read(response, 0, response.Length);\r\n            client.Close();\r\n            //Assert\r\n            Assert.Equal($\u0022{header}-{i \u002B 10000}\u0022, response.Take(bytes).ToArray().GetString());\r\n        }\r\n\r\n        server.Stop();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Server_Should_Return_Correct_Response_Where_Configed_With_Enything_And_Func_Of_Byte",
        "Body": "{\r\n    //Arrange\r\n    const int port = 3205;\r\n    using var server = new MockServer(new TcpServerSsl(port, _certificateName, SslProtocols.None));\r\n    using var client = new TcpClient();\r\n    //Act\r\n    server.Mock.Send(\u0022\u0022).Receive(x =\u003E new byte[] { x[0], x[2], x[6] });\r\n    server.Start();\r\n    await client.ConnectAsync(IPAddress.Parse(\u0022127.0.0.1\u0022), port);\r\n    await using var sslStream = new SslStream(client.GetStream(), false, new RemoteCertificateValidationCallback(CertificateValidationCallback));\r\n    await sslStream.AuthenticateAsClientAsync(_certificateName);\r\n    await sslStream.WriteAsync(request.GetBytes(), 0, request.Length);\r\n    var response = new byte[client.ReceiveBufferSize];\r\n    var bytes = await sslStream.ReadAsync(response, 0, response.Length);\r\n    client.Close();\r\n    server.Stop();\r\n    //Assert\r\n    Assert.Equal(expected, response.Take(bytes).ToArray().GetString());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Server_Should_Return_Correct_Response_Where_Configed_With_Enything_And_Func_Of_String",
        "Body": "{\r\n    //Arrange\r\n    const int port = 3206;\r\n    using var server = new MockServer(new TcpServerSsl(port, _certificateName, SslProtocols.None));\r\n    using var client = new TcpClient();\r\n    //Act\r\n    server.Mock.Send(\u0022\u0022).Receive(x =\u003E x.Substring(0, 4).ToUpper());\r\n    server.Start();\r\n    await client.ConnectAsync(IPAddress.Parse(\u0022127.0.0.1\u0022), port);\r\n    await using var sslStream = new SslStream(client.GetStream(), false, new RemoteCertificateValidationCallback(CertificateValidationCallback));\r\n    await sslStream.AuthenticateAsClientAsync(_certificateName);\r\n    await sslStream.WriteAsync(request.GetBytes(), 0, request.Length);\r\n    var response = new byte[client.ReceiveBufferSize];\r\n    var bytes = await sslStream.ReadAsync(response, 0, response.Length);\r\n    client.Close();\r\n    server.Stop();\r\n    //Assert\r\n    Assert.Equal(expected, response.Take(bytes).ToArray().GetString());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MockTcpServerTests",
    "Message": null,
    "ProjectName": "Rony.FunctionalTests",
    "Methods": [
      {
        "Name": "Server_Should_Return_Correct_Response",
        "Body": "{\r\n    //Arrange\r\n    const int port = 3005;\r\n    using var server = new MockServer(new TcpServer(port));\r\n    var request = new byte[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    };\r\n    using var client = new TcpClient();\r\n    //Act\r\n    server.Mock.Send(request).Receive(x =\u003E new byte[] { x[1], 10, x[2] });\r\n    server.Start();\r\n    await client.ConnectAsync(IPAddress.Parse(\u0022127.0.0.1\u0022), port);\r\n    using var stream = client.GetStream();\r\n    await stream.WriteAsync(request, 0, request.Length);\r\n    var response = new byte[client.ReceiveBufferSize];\r\n    var bytes = await stream.ReadAsync(response, 0, response.Length);\r\n    client.Close();\r\n    server.Stop();\r\n    //Assert\r\n    Assert.True(response.Take(bytes).SequenceEqual(new byte[] { 2, 10, 3 }));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Server_Should_Return_Response_To_Any_Request_When_An_Empty_Request_Exists",
        "Body": "{\r\n    //Arrange\r\n    const int port = 3001;\r\n    using var server = new MockServer(new TcpServer(port));\r\n    using var client = new TcpClient();\r\n    //Act\r\n    server.Mock.Send(\u0022\u0022).Receive(\u0022I match everything\u0022);\r\n    server.Start();\r\n    await client.ConnectAsync(IPAddress.Parse(\u0022127.0.0.1\u0022), port);\r\n    using var stream = client.GetStream();\r\n    var requestBytes = request.GetBytes();\r\n    await stream.WriteAsync(requestBytes, 0, requestBytes.Length);\r\n    var response = new byte[client.ReceiveBufferSize];\r\n    var bytes = await stream.ReadAsync(response, 0, response.Length);\r\n    client.Close();\r\n    server.Stop();\r\n    //Assert\r\n    Assert.Equal(\u0022I match everything\u0022, response.Take(bytes).ToArray().GetString());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Server_Should_Return_Nothing_When_No_Match_Exists",
        "Body": "{\r\n    //Arrange\r\n    const int port = 3002;\r\n    using var server = new MockServer(new TcpServer(port));\r\n    using var client = new TcpClient();\r\n    //Act\r\n    server.Mock.Send(\u0022Main Request\u0022).Receive(x =\u003E new byte[] { x[1], 10, x[2] });\r\n    server.Start();\r\n    await client.ConnectAsync(IPAddress.Parse(\u0022127.0.0.1\u0022), port);\r\n    using var stream = client.GetStream();\r\n    var requestBytes = request.GetBytes();\r\n    await stream.WriteAsync(requestBytes, 0, requestBytes.Length);\r\n    var response = new byte[client.ReceiveBufferSize];\r\n    var bytes = await stream.ReadAsync(response, 0, response.Length);\r\n    client.Close();\r\n    server.Stop();\r\n    //Assert\r\n    Assert.Equal(0, bytes);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Server_Should_Return_Correct_Response_On_Multiple_Requests",
        "Body": "{\r\n    //Arrange\r\n    const int port = 3003;\r\n    using var server = new MockServer(new TcpServer(port));\r\n    using var client = new TcpClient();\r\n    //Act\r\n    server.Mock.Send(\u0022123\u0022).Receive(\u0022321\u0022);\r\n    server.Mock.Send(\u0022ABC\u0022).Receive(\u0022CBA\u0022);\r\n    server.Mock.Send(\u0022!@#\u0022).Receive(\u0022$%^\u0022);\r\n    server.Start();\r\n    await client.ConnectAsync(IPAddress.Parse(\u0022127.0.0.1\u0022), port);\r\n    using var stream = client.GetStream();\r\n    await stream.WriteAsync(\u0022ABC\u0022.GetBytes(), 0, 3);\r\n    var response = new byte[client.ReceiveBufferSize];\r\n    var bytes = stream.Read(response, 0, response.Length);\r\n    client.Close();\r\n    server.Stop();\r\n    //Assert\r\n    Assert.Equal(\u0022CBA\u0022, response.Take(bytes).ToArray().GetString());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Server_Should_Return_Correct_Response_On_Many_Request",
        "Body": "{\r\n    //Arrange\r\n    const int port = 3006;\r\n    using var server = new MockServer(new TcpServer(port));\r\n    //Act\r\n    for (int i = 0; i \u003C 10000; i\u002B\u002B)\r\n        server.Mock.Send(i.ToString()).Receive((i \u002B 10000).ToString());\r\n    server.Start();\r\n    for (int i = 0; i \u003C 10000; i\u002B\u002B)\r\n    {\r\n        using var client = new TcpClient();\r\n        await client.ConnectAsync(IPAddress.Parse(\u0022127.0.0.1\u0022), port);\r\n        using var stream = client.GetStream();\r\n        var response = new byte[client.ReceiveBufferSize];\r\n        var request = i.ToString().GetBytes();\r\n        await stream.WriteAsync(request, 0, request.Length);\r\n        var bytes = stream.Read(response, 0, response.Length);\r\n        client.Close();\r\n        //Assert\r\n        Assert.Equal((i \u002B 10000).ToString(), response.Take(bytes).ToArray().GetString());\r\n    }\r\n\r\n    server.Stop();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Server_Should_Return_Correct_Response_On_Multi_Thread_Request",
        "Body": "{\r\n    //Act\r\n    for (int i = 0; i \u003C 100; i\u002B\u002B)\r\n    {\r\n        ThreadPool.QueueUserWorkItem(new WaitCallback(ConnectServer), i.ToString());\r\n    }\r\n\r\n    async void ConnectServer(object input)\r\n    {\r\n        var header = (string)input;\r\n        using var server = new MockServer(new TcpServer(int.Parse(header)));\r\n        for (int i = 0; i \u003C 3000; i\u002B\u002B)\r\n            server.Mock.Send($\u0022{header}-{i}\u0022).Receive($\u0022{header}-{i \u002B 10000}\u0022);\r\n        server.Start();\r\n        for (int i = 0; i \u003C 3000; i\u002B\u002B)\r\n        {\r\n            var client = new TcpClient();\r\n            await client.ConnectAsync(IPAddress.Parse(\u0022127.0.0.1\u0022), int.Parse(header));\r\n            using var stream = client.GetStream();\r\n            var response = new byte[client.ReceiveBufferSize];\r\n            var request = $\u0022{header}-{i}\u0022.ToString().GetBytes();\r\n            await stream.WriteAsync(request, 0, request.Length);\r\n            var bytes = stream.Read(response, 0, response.Length);\r\n            client.Close();\r\n            //Assert\r\n            Assert.Equal($\u0022{header}-{i \u002B 10000}\u0022, response.Take(bytes).ToArray().GetString());\r\n        }\r\n\r\n        server.Stop();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Server_Should_Return_Correct_Response_Where_Configed_With_Enything_And_Func_Of_Byte",
        "Body": "{\r\n    //Arrange\r\n    const int port = 3007;\r\n    using var server = new MockServer(new TcpServer(port));\r\n    using var client = new TcpClient();\r\n    //Act\r\n    server.Mock.Send(\u0022\u0022).Receive(x =\u003E new byte[] { x[0], x[2], x[6] });\r\n    server.Start();\r\n    await client.ConnectAsync(IPAddress.Parse(\u0022127.0.0.1\u0022), port);\r\n    using var stream = client.GetStream();\r\n    await stream.WriteAsync(request.GetBytes(), 0, request.Length);\r\n    var response = new byte[client.ReceiveBufferSize];\r\n    var bytes = await stream.ReadAsync(response, 0, response.Length);\r\n    client.Close();\r\n    server.Stop();\r\n    //Assert\r\n    Assert.Equal(expected, response.Take(bytes).ToArray().GetString());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Server_Should_Return_Correct_Response_Where_Configed_With_Enything_And_Func_Of_String",
        "Body": "{\r\n    //Arrange\r\n    const int port = 3008;\r\n    using var server = new MockServer(new TcpServer(port));\r\n    using var client = new TcpClient();\r\n    //Act\r\n    server.Mock.Send(\u0022\u0022).Receive(x =\u003E x.Substring(0, 4).ToUpper());\r\n    server.Start();\r\n    await client.ConnectAsync(IPAddress.Parse(\u0022127.0.0.1\u0022), port);\r\n    using var stream = client.GetStream();\r\n    await stream.WriteAsync(request.GetBytes(), 0, request.Length);\r\n    var response = new byte[client.ReceiveBufferSize];\r\n    var bytes = await stream.ReadAsync(response, 0, response.Length);\r\n    client.Close();\r\n    server.Stop();\r\n    //Assert\r\n    Assert.Equal(expected, response.Take(bytes).ToArray().GetString());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MockUdpServerTests",
    "Message": null,
    "ProjectName": "Rony.FunctionalTests",
    "Methods": [
      {
        "Name": "Server_Should_Return_Correct_Response",
        "Body": "{\r\n    //Arrange\r\n    const int port = 3100;\r\n    using var server = new MockServer(new UdpServer(port));\r\n    var request = new byte[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    };\r\n    //Act\r\n    server.Mock.Send(request).Receive(x =\u003E new byte[] { x[1], 10, x[2] });\r\n    server.Start();\r\n    var client = new UdpClient();\r\n    client.Connect(IPAddress.Parse(\u0022127.0.0.1\u0022), port);\r\n    await client.SendAsync(request, request.Length);\r\n    var response = await client.ReceiveAsync();\r\n    client.Close();\r\n    server.Stop();\r\n    //Assert\r\n    Assert.True(response.Buffer.SequenceEqual(new byte[] { 2, 10, 3 }));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Server_Should_Return_Response_To_Any_Request_When_An_Empty_Request_Exists",
        "Body": "{\r\n    //Arrange\r\n    const int port = 3101;\r\n    using var server = new MockServer(new UdpServer(port));\r\n    //Act\r\n    server.Mock.Send(\u0022\u0022).Receive(\u0022I match everything\u0022);\r\n    server.Start();\r\n    var client = new UdpClient();\r\n    client.Connect(IPAddress.Parse(\u0022127.0.0.1\u0022), port);\r\n    var requestBytes = request.GetBytes();\r\n    await client.SendAsync(requestBytes, requestBytes.Length);\r\n    var response = await client.ReceiveAsync();\r\n    client.Close();\r\n    server.Stop();\r\n    //Assert\r\n    Assert.Equal(\u0022I match everything\u0022, response.Buffer.GetString());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Server_Should_Return_Nothing_When_No_Match_Exists",
        "Body": "{\r\n    //Arrange\r\n    const int port = 3102;\r\n    using var server = new MockServer(new UdpServer(port));\r\n    //Act\r\n    server.Mock.Send(\u0022Main Request\u0022).Receive(x =\u003E new byte[] { x[1], 10, x[2] });\r\n    server.Start();\r\n    var client = new UdpClient();\r\n    client.Connect(IPAddress.Parse(\u0022127.0.0.1\u0022), port);\r\n    var requestBytes = request.GetBytes();\r\n    await client.SendAsync(requestBytes, requestBytes.Length);\r\n    var response = await client.ReceiveAsync();\r\n    client.Close();\r\n    server.Stop();\r\n    //Assert\r\n    Assert.Empty(response.Buffer);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Server_Should_Return_Correct_Response_On_Multiple_Requests",
        "Body": "{\r\n    //Arrange\r\n    const int port = 3103;\r\n    using var server = new MockServer(new UdpServer(port));\r\n    //Act\r\n    server.Mock.Send(\u0022123\u0022).Receive(\u0022321\u0022);\r\n    server.Mock.Send(\u0022ABC\u0022).Receive(\u0022CBA\u0022);\r\n    server.Mock.Send(\u0022!@#\u0022).Receive(\u0022$%^\u0022);\r\n    server.Start();\r\n    var client = new UdpClient();\r\n    var endPoint = new IPEndPoint(IPAddress.Parse(\u0022127.0.0.1\u0022), port);\r\n    await client.SendAsync(\u0022ABC\u0022.GetBytes(), 3, endPoint);\r\n    var response = await client.ReceiveAsync();\r\n    client.Close();\r\n    server.Stop();\r\n    //Assert\r\n    Assert.Equal(\u0022CBA\u0022, response.Buffer.GetString());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Server_Should_Return_Correct_Response_On_Many_Request",
        "Body": "{\r\n    //Arrange\r\n    const int port = 3104;\r\n    using var server = new MockServer(new UdpServer(port));\r\n    //Act\r\n    for (int i = 0; i \u003C 10000; i\u002B\u002B)\r\n        server.Mock.Send(i.ToString()).Receive((i \u002B 10000).ToString());\r\n    server.Start();\r\n    for (int i = 0; i \u003C 10000; i\u002B\u002B)\r\n    {\r\n        var client = new UdpClient();\r\n        var endPoint = new IPEndPoint(IPAddress.Parse(\u0022127.0.0.1\u0022), port);\r\n        var request = i.ToString().GetBytes();\r\n        await client.SendAsync(request, request.Length, endPoint);\r\n        var response = await client.ReceiveAsync();\r\n        client.Close();\r\n        //Assert\r\n        Assert.Equal((i \u002B 10000).ToString(), response.Buffer.GetString());\r\n    }\r\n\r\n    server.Stop();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Server_Should_Return_Correct_Response_On_Multi_Thread_Request",
        "Body": "{\r\n    //Arrange\r\n    for (int i = 0; i \u003C 25; i\u002B\u002B)\r\n    {\r\n        ThreadPool.QueueUserWorkItem(new WaitCallback(ConnectServer), i.ToString());\r\n    }\r\n\r\n    //Act\r\n    async void ConnectServer(object input)\r\n    {\r\n        var header = (string)input;\r\n        using var server = new MockServer(new UdpServer(int.Parse(header)));\r\n        for (int i = 0; i \u003C 2000; i\u002B\u002B)\r\n            server.Mock.Send($\u0022{header}-{i}\u0022).Receive($\u0022{header}-{i \u002B 10000}\u0022);\r\n        server.Start();\r\n        for (int i = 0; i \u003C 2000; i\u002B\u002B)\r\n        {\r\n            var client = new UdpClient();\r\n            var endPoint = new IPEndPoint(IPAddress.Parse(\u0022127.0.0.1\u0022), int.Parse(header));\r\n            var request = $\u0022{header}-{i}\u0022.ToString().GetBytes();\r\n            await client.SendAsync(request, request.Length, endPoint);\r\n            var response = await client.ReceiveAsync();\r\n            client.Close();\r\n            //Assert\r\n            Assert.Equal($\u0022{header}-{i \u002B 10000}\u0022, response.Buffer.GetString());\r\n        }\r\n\r\n        server.Stop();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Server_Should_Return_Correct_Response_Where_Configed_With_Enything_And_Func_Of_Byte",
        "Body": "{\r\n    //Arrange\r\n    const int port = 3105;\r\n    using var server = new MockServer(new UdpServer(port));\r\n    //Act\r\n    server.Mock.Send(\u0022\u0022).Receive(x =\u003E new byte[] { x[0], x[2], x[6] });\r\n    server.Start();\r\n    var client = new UdpClient();\r\n    client.Connect(IPAddress.Parse(\u0022127.0.0.1\u0022), port);\r\n    await client.SendAsync(request.GetBytes(), request.Length);\r\n    var response = await client.ReceiveAsync();\r\n    client.Close();\r\n    server.Stop();\r\n    //Assert\r\n    Assert.Equal(expected, response.Buffer.GetString());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Server_Should_Return_Correct_Response_Where_Configed_With_Enything_And_Func_Of_String",
        "Body": "{\r\n    //Arrange\r\n    const int port = 3106;\r\n    using var server = new MockServer(new UdpServer(port));\r\n    //Act\r\n    server.Mock.Send(\u0022\u0022).Receive(x =\u003E x.Substring(0, 4).ToUpper());\r\n    server.Start();\r\n    var client = new UdpClient();\r\n    client.Connect(IPAddress.Parse(\u0022127.0.0.1\u0022), port);\r\n    await client.SendAsync(request.GetBytes(), request.Length);\r\n    var response = await client.ReceiveAsync();\r\n    client.Close();\r\n    server.Stop();\r\n    //Assert\r\n    Assert.Equal(expected, response.Buffer.GetString());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  }
]