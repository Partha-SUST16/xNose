[
  {
    "Name": "Person",
    "Message": "This class has Lack of Cohesion of Test Cases",
    "ProjectName": "UnitTest.ChainingAssertion.Core.Xunit",
    "Methods": [
      {
        "Name": "IsTest",
        "Body": "{\r\n    // \u0022Is\u0022 extend on all object and has three overloads.\r\n    // This same as Assert.Equal(25, Math.Pow(5, 2))\r\n    Math.Pow(5, 2).Is(25);\r\n    // lambda predicate assertion.\r\n    // This same as Assert.True(\u0022foobar\u0022.StartsWith(\u0022foo\u0022) \u0026\u0026 \u0022foobar\u0022.EndWith(\u0022bar\u0022))\r\n    \u0022foobar\u0022.Is(s =\u003E s.StartsWith(\u0022foo\u0022) \u0026\u0026 s.EndsWith(\u0022bar\u0022));\r\n    // has collection assert\r\n    // This same as Assert.Equal(Enumerable.Range(1,5).ToArray(), new[]{1, 2, 3, 4, 5}.ToArray())\r\n    // it is sequence value compare\r\n    Enumerable.Range(1, 5).Is(1, 2, 3, 4, 5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CollectionTest",
        "Body": "{\r\n    // if you want to use CollectionAssert Methods then use Linq to Objects and Is\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.Contains(8).IsTrue();\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.Count(i =\u003E i % 2 != 0).Is(3);\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.IsNotEmpty();\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.All(i =\u003E i \u003C 5).IsFalse();\r\n    // IsOrdered\r\n    var array = new[]\r\n    {\r\n        1,\r\n        5,\r\n        10,\r\n        100\r\n    };\r\n    array.Is(array.OrderBy(x =\u003E x).ToArray());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OthersTest",
        "Body": "{\r\n    // Null Assertions\r\n    var obj = null as object;\r\n    obj.IsNull(); // Assert.Null(obj)\r\n    new object ().IsNotNull(); // Assert.NotNull(obj)\r\n    // Not Assertion\r\n    \u0022foobar\u0022.IsNot(\u0022fooooooo\u0022); // Assert.NotEqual\r\n    new[]\r\n    {\r\n        \u0022a\u0022,\r\n        \u0022z\u0022,\r\n        \u0022x\u0022\r\n    }.IsNot(\u0022a\u0022, \u0022x\u0022, \u0022z\u0022);\r\n    /// Assert.NotEqual\n     // ReferenceEqual Assertion\r\n    var tuple = Tuple.Create(\u0022foo\u0022);\r\n    tuple.IsSameReferenceAs(tuple); // Assert.Same\r\n    tuple.IsNotSameReferenceAs(Tuple.Create(\u0022foo\u0022)); // Assert.NotSame\r\n    // Type Assertion\r\n    \u0022foobar\u0022.IsInstanceOf\u003Cstring\u003E(); // Assert.IsType\r\n    (999).IsNotInstanceOf\u003Cdouble\u003E(); // Assert.IsNotType\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AdvancedCollectionTest",
        "Body": "{\r\n    var lower = new[]\r\n    {\r\n        \u0022a\u0022,\r\n        \u0022b\u0022,\r\n        \u0022c\u0022\r\n    };\r\n    var upper = new[]\r\n    {\r\n        \u0022A\u0022,\r\n        \u0022B\u0022,\r\n        \u0022C\u0022\r\n    };\r\n    // Comparer CollectionAssert, use IEqualityComparer\u003CT\u003E or Func\u003CT,T,bool\u003E delegate\r\n    lower.Is(upper, StringComparer.OrdinalIgnoreCase);\r\n    lower.Is(upper, (x, y) =\u003E x.ToUpper() == y.ToUpper());\r\n    // or you can use Linq to Objects - SequenceEqual\r\n    lower.SequenceEqual(upper, StringComparer.OrdinalIgnoreCase).IsTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExceptionTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E \u0022foo\u0022.StartsWith(null));\r\n//Assert.DoesNotThrow(() =\u003E\r\n//{\r\n//    // code\r\n//});\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestCaseTest",
        "Body": "{\r\n    (x \u002B y).Is(z);\r\n    (x \u002B y \u002B z).Is(i =\u003E i \u003C 1000);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestTestCaseSource",
        "Body": "{\r\n    string.Concat(x, y).Is(z);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DumpTest",
        "Body": "{\r\n    var count = new List\u003Cint\u003E()\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    };\r\n    var person = new Person\r\n    {\r\n        Age = 50,\r\n        FamilyName = \u0022Yamamoto\u0022,\r\n        GivenName = \u0022Tasuke\u0022\r\n    };\r\n    try\r\n    {\r\n        person.Is(p =\u003E p.Age \u003C count.Count \u0026\u0026 p.FamilyName == \u0022Yamada\u0022 \u0026\u0026 p.GivenName == \u0022Tarou\u0022);\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        ex.Message.Is(m =\u003E m.Contains(\u0022Age = 50\u0022) \u0026\u0026 m.Contains(\u0022FamilyName = Yamamoto\u0022) \u0026\u0026 m.Contains(\u0022GivenName = Tasuke\u0022));\r\n        return;\r\n    }\r\n\r\n    Assert.True(false);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StructuralEqualSuccess",
        "Body": "{\r\n    // primitive\r\n    \u0022hoge\u0022.IsStructuralEqual(\u0022hoge\u0022);\r\n    (100).IsStructuralEqual(100);\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsStructuralEqual(new[] { 1, 2, 3 });\r\n    // complex\r\n    new\r\n    {\r\n        Hoge = \u0022aiueo\u0022,\r\n        Huga = 100,\r\n        Tako = new\r\n        {\r\n            k = 10\r\n        }\r\n    }.IsStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } });\r\n    new DummyStructural()\r\n    {\r\n        MyProperty = \u0022aiueo\u0022\r\n    }.IsStructuralEqual(new DummyStructural() { MyProperty = \u0022kakikukeko\u0022 });\r\n    new EmptyClass().IsStructuralEqual(new EmptyClass());\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    s1.IsStructuralEqual(s1);\r\n    s1.IsStructuralEqual(s2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StructuralEqualFailed",
        "Body": "{\r\n    //// type\r\n    object n = null;\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E n.IsStructuralEqual(\u0022a\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E \u0022a\u0022.IsStructuralEqual(n));\r\n    //int i = 10;\r\n    //long l = 10;\r\n    //Assert.Throws\u003CChainingAssertionException\u003E(() =\u003E i.IsStructuralEqual(l));\r\n    // primitive\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E \u0022hoge\u0022.IsStructuralEqual(\u0022hage\u0022)).Message.Is(m =\u003E m.Contains(\u0022expected = hage actual = hoge\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E (100).IsStructuralEqual(101)).Message.Is(m =\u003E m.Contains(\u0022expected = 101 actual = 100\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsStructuralEqual(new[] { 1, 2 })).Message.Is(m =\u003E m.Contains(\u0022sequence Length is different: expected = [2] actual = [3]\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsStructuralEqual(new[] { 1, 2, 4 })).Message.Is(m =\u003E m.Contains(\u0022expected = 4 actual = 3\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsStructuralEqual(new[] { 1, 2, 3, 4 })).Message.Is(m =\u003E m.Contains(\u0022sequence Length is different: expected = [4] actual = [3]\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } }.IsStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 12 } })).Message.Is(m =\u003E m.Contains(\u0022expected = 12 actual = 10\u0022));\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5,\r\n            6\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s3 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 13000\r\n            }\r\n        }\r\n    };\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsStructuralEqual(s2)).Message.Is(m =\u003E m.Contains(\u0022at StructuralEqualTestClass.IntArray, sequence Length is different: expected = [6] actual = [5]\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsStructuralEqual(s3)).Message.Is(m =\u003E m.Contains(\u0022StructuralEqualTestClass.StruStru.MP2.MyProperty\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NotStructuralEqualFailed",
        "Body": "{\r\n    // primitive\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E \u0022hoge\u0022.IsNotStructuralEqual(\u0022hoge\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E (100).IsNotStructuralEqual(100));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsNotStructuralEqual(new[] { 1, 2, 3 }));\r\n    // complex\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } }.IsNotStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } }));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new DummyStructural() { MyProperty = \u0022aiueo\u0022 }.IsNotStructuralEqual(new DummyStructural() { MyProperty = \u0022kakikukeko\u0022 }));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new EmptyClass().IsNotStructuralEqual(new EmptyClass()));\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsNotStructuralEqual(s1));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsNotStructuralEqual(s2));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NotStructuralEqualSuccess",
        "Body": "{\r\n    //// type\r\n    object n = null;\r\n    n.IsNotStructuralEqual(\u0022a\u0022);\r\n    \u0022a\u0022.IsNotStructuralEqual(n);\r\n    //int i = 10;\r\n    //long l = 10;\r\n    //i.IsNotStructuralEqual(l);\r\n    // primitive\r\n    \u0022hoge\u0022.IsNotStructuralEqual(\u0022hage\u0022);\r\n    (100).IsNotStructuralEqual(101);\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsNotStructuralEqual(new[] { 1, 2 });\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsNotStructuralEqual(new[] { 1, 2, 4 });\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsNotStructuralEqual(new[] { 1, 2, 3, 4 });\r\n    new\r\n    {\r\n        Hoge = \u0022aiueo\u0022,\r\n        Huga = 100,\r\n        Tako = new\r\n        {\r\n            k = 10\r\n        }\r\n    }.IsNotStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 12 } });\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5,\r\n            6\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s3 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 13000\r\n            }\r\n        }\r\n    };\r\n    s1.IsNotStructuralEqual(s2);\r\n    s1.IsNotStructuralEqual(s3);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "StructuralEqualTestClass",
    "Message": "This class has Lack of Cohesion of Test Cases",
    "ProjectName": "UnitTest.ChainingAssertion.Core.Xunit",
    "Methods": [
      {
        "Name": "IsTest",
        "Body": "{\r\n    // \u0022Is\u0022 extend on all object and has three overloads.\r\n    // This same as Assert.Equal(25, Math.Pow(5, 2))\r\n    Math.Pow(5, 2).Is(25);\r\n    // lambda predicate assertion.\r\n    // This same as Assert.True(\u0022foobar\u0022.StartsWith(\u0022foo\u0022) \u0026\u0026 \u0022foobar\u0022.EndWith(\u0022bar\u0022))\r\n    \u0022foobar\u0022.Is(s =\u003E s.StartsWith(\u0022foo\u0022) \u0026\u0026 s.EndsWith(\u0022bar\u0022));\r\n    // has collection assert\r\n    // This same as Assert.Equal(Enumerable.Range(1,5).ToArray(), new[]{1, 2, 3, 4, 5}.ToArray())\r\n    // it is sequence value compare\r\n    Enumerable.Range(1, 5).Is(1, 2, 3, 4, 5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CollectionTest",
        "Body": "{\r\n    // if you want to use CollectionAssert Methods then use Linq to Objects and Is\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.Contains(8).IsTrue();\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.Count(i =\u003E i % 2 != 0).Is(3);\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.IsNotEmpty();\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.All(i =\u003E i \u003C 5).IsFalse();\r\n    // IsOrdered\r\n    var array = new[]\r\n    {\r\n        1,\r\n        5,\r\n        10,\r\n        100\r\n    };\r\n    array.Is(array.OrderBy(x =\u003E x).ToArray());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OthersTest",
        "Body": "{\r\n    // Null Assertions\r\n    var obj = null as object;\r\n    obj.IsNull(); // Assert.Null(obj)\r\n    new object ().IsNotNull(); // Assert.NotNull(obj)\r\n    // Not Assertion\r\n    \u0022foobar\u0022.IsNot(\u0022fooooooo\u0022); // Assert.NotEqual\r\n    new[]\r\n    {\r\n        \u0022a\u0022,\r\n        \u0022z\u0022,\r\n        \u0022x\u0022\r\n    }.IsNot(\u0022a\u0022, \u0022x\u0022, \u0022z\u0022);\r\n    /// Assert.NotEqual\n     // ReferenceEqual Assertion\r\n    var tuple = Tuple.Create(\u0022foo\u0022);\r\n    tuple.IsSameReferenceAs(tuple); // Assert.Same\r\n    tuple.IsNotSameReferenceAs(Tuple.Create(\u0022foo\u0022)); // Assert.NotSame\r\n    // Type Assertion\r\n    \u0022foobar\u0022.IsInstanceOf\u003Cstring\u003E(); // Assert.IsType\r\n    (999).IsNotInstanceOf\u003Cdouble\u003E(); // Assert.IsNotType\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AdvancedCollectionTest",
        "Body": "{\r\n    var lower = new[]\r\n    {\r\n        \u0022a\u0022,\r\n        \u0022b\u0022,\r\n        \u0022c\u0022\r\n    };\r\n    var upper = new[]\r\n    {\r\n        \u0022A\u0022,\r\n        \u0022B\u0022,\r\n        \u0022C\u0022\r\n    };\r\n    // Comparer CollectionAssert, use IEqualityComparer\u003CT\u003E or Func\u003CT,T,bool\u003E delegate\r\n    lower.Is(upper, StringComparer.OrdinalIgnoreCase);\r\n    lower.Is(upper, (x, y) =\u003E x.ToUpper() == y.ToUpper());\r\n    // or you can use Linq to Objects - SequenceEqual\r\n    lower.SequenceEqual(upper, StringComparer.OrdinalIgnoreCase).IsTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExceptionTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E \u0022foo\u0022.StartsWith(null));\r\n//Assert.DoesNotThrow(() =\u003E\r\n//{\r\n//    // code\r\n//});\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestCaseTest",
        "Body": "{\r\n    (x \u002B y).Is(z);\r\n    (x \u002B y \u002B z).Is(i =\u003E i \u003C 1000);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestTestCaseSource",
        "Body": "{\r\n    string.Concat(x, y).Is(z);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DumpTest",
        "Body": "{\r\n    var count = new List\u003Cint\u003E()\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    };\r\n    var person = new Person\r\n    {\r\n        Age = 50,\r\n        FamilyName = \u0022Yamamoto\u0022,\r\n        GivenName = \u0022Tasuke\u0022\r\n    };\r\n    try\r\n    {\r\n        person.Is(p =\u003E p.Age \u003C count.Count \u0026\u0026 p.FamilyName == \u0022Yamada\u0022 \u0026\u0026 p.GivenName == \u0022Tarou\u0022);\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        ex.Message.Is(m =\u003E m.Contains(\u0022Age = 50\u0022) \u0026\u0026 m.Contains(\u0022FamilyName = Yamamoto\u0022) \u0026\u0026 m.Contains(\u0022GivenName = Tasuke\u0022));\r\n        return;\r\n    }\r\n\r\n    Assert.True(false);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StructuralEqualSuccess",
        "Body": "{\r\n    // primitive\r\n    \u0022hoge\u0022.IsStructuralEqual(\u0022hoge\u0022);\r\n    (100).IsStructuralEqual(100);\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsStructuralEqual(new[] { 1, 2, 3 });\r\n    // complex\r\n    new\r\n    {\r\n        Hoge = \u0022aiueo\u0022,\r\n        Huga = 100,\r\n        Tako = new\r\n        {\r\n            k = 10\r\n        }\r\n    }.IsStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } });\r\n    new DummyStructural()\r\n    {\r\n        MyProperty = \u0022aiueo\u0022\r\n    }.IsStructuralEqual(new DummyStructural() { MyProperty = \u0022kakikukeko\u0022 });\r\n    new EmptyClass().IsStructuralEqual(new EmptyClass());\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    s1.IsStructuralEqual(s1);\r\n    s1.IsStructuralEqual(s2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StructuralEqualFailed",
        "Body": "{\r\n    //// type\r\n    object n = null;\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E n.IsStructuralEqual(\u0022a\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E \u0022a\u0022.IsStructuralEqual(n));\r\n    //int i = 10;\r\n    //long l = 10;\r\n    //Assert.Throws\u003CChainingAssertionException\u003E(() =\u003E i.IsStructuralEqual(l));\r\n    // primitive\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E \u0022hoge\u0022.IsStructuralEqual(\u0022hage\u0022)).Message.Is(m =\u003E m.Contains(\u0022expected = hage actual = hoge\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E (100).IsStructuralEqual(101)).Message.Is(m =\u003E m.Contains(\u0022expected = 101 actual = 100\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsStructuralEqual(new[] { 1, 2 })).Message.Is(m =\u003E m.Contains(\u0022sequence Length is different: expected = [2] actual = [3]\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsStructuralEqual(new[] { 1, 2, 4 })).Message.Is(m =\u003E m.Contains(\u0022expected = 4 actual = 3\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsStructuralEqual(new[] { 1, 2, 3, 4 })).Message.Is(m =\u003E m.Contains(\u0022sequence Length is different: expected = [4] actual = [3]\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } }.IsStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 12 } })).Message.Is(m =\u003E m.Contains(\u0022expected = 12 actual = 10\u0022));\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5,\r\n            6\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s3 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 13000\r\n            }\r\n        }\r\n    };\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsStructuralEqual(s2)).Message.Is(m =\u003E m.Contains(\u0022at StructuralEqualTestClass.IntArray, sequence Length is different: expected = [6] actual = [5]\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsStructuralEqual(s3)).Message.Is(m =\u003E m.Contains(\u0022StructuralEqualTestClass.StruStru.MP2.MyProperty\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NotStructuralEqualFailed",
        "Body": "{\r\n    // primitive\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E \u0022hoge\u0022.IsNotStructuralEqual(\u0022hoge\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E (100).IsNotStructuralEqual(100));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsNotStructuralEqual(new[] { 1, 2, 3 }));\r\n    // complex\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } }.IsNotStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } }));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new DummyStructural() { MyProperty = \u0022aiueo\u0022 }.IsNotStructuralEqual(new DummyStructural() { MyProperty = \u0022kakikukeko\u0022 }));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new EmptyClass().IsNotStructuralEqual(new EmptyClass()));\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsNotStructuralEqual(s1));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsNotStructuralEqual(s2));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NotStructuralEqualSuccess",
        "Body": "{\r\n    //// type\r\n    object n = null;\r\n    n.IsNotStructuralEqual(\u0022a\u0022);\r\n    \u0022a\u0022.IsNotStructuralEqual(n);\r\n    //int i = 10;\r\n    //long l = 10;\r\n    //i.IsNotStructuralEqual(l);\r\n    // primitive\r\n    \u0022hoge\u0022.IsNotStructuralEqual(\u0022hage\u0022);\r\n    (100).IsNotStructuralEqual(101);\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsNotStructuralEqual(new[] { 1, 2 });\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsNotStructuralEqual(new[] { 1, 2, 4 });\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsNotStructuralEqual(new[] { 1, 2, 3, 4 });\r\n    new\r\n    {\r\n        Hoge = \u0022aiueo\u0022,\r\n        Huga = 100,\r\n        Tako = new\r\n        {\r\n            k = 10\r\n        }\r\n    }.IsNotStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 12 } });\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5,\r\n            6\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s3 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 13000\r\n            }\r\n        }\r\n    };\r\n    s1.IsNotStructuralEqual(s2);\r\n    s1.IsNotStructuralEqual(s3);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DummyStructural",
    "Message": "This class has Lack of Cohesion of Test Cases",
    "ProjectName": "UnitTest.ChainingAssertion.Core.Xunit",
    "Methods": [
      {
        "Name": "IsTest",
        "Body": "{\r\n    // \u0022Is\u0022 extend on all object and has three overloads.\r\n    // This same as Assert.Equal(25, Math.Pow(5, 2))\r\n    Math.Pow(5, 2).Is(25);\r\n    // lambda predicate assertion.\r\n    // This same as Assert.True(\u0022foobar\u0022.StartsWith(\u0022foo\u0022) \u0026\u0026 \u0022foobar\u0022.EndWith(\u0022bar\u0022))\r\n    \u0022foobar\u0022.Is(s =\u003E s.StartsWith(\u0022foo\u0022) \u0026\u0026 s.EndsWith(\u0022bar\u0022));\r\n    // has collection assert\r\n    // This same as Assert.Equal(Enumerable.Range(1,5).ToArray(), new[]{1, 2, 3, 4, 5}.ToArray())\r\n    // it is sequence value compare\r\n    Enumerable.Range(1, 5).Is(1, 2, 3, 4, 5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CollectionTest",
        "Body": "{\r\n    // if you want to use CollectionAssert Methods then use Linq to Objects and Is\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.Contains(8).IsTrue();\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.Count(i =\u003E i % 2 != 0).Is(3);\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.IsNotEmpty();\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.All(i =\u003E i \u003C 5).IsFalse();\r\n    // IsOrdered\r\n    var array = new[]\r\n    {\r\n        1,\r\n        5,\r\n        10,\r\n        100\r\n    };\r\n    array.Is(array.OrderBy(x =\u003E x).ToArray());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OthersTest",
        "Body": "{\r\n    // Null Assertions\r\n    var obj = null as object;\r\n    obj.IsNull(); // Assert.Null(obj)\r\n    new object ().IsNotNull(); // Assert.NotNull(obj)\r\n    // Not Assertion\r\n    \u0022foobar\u0022.IsNot(\u0022fooooooo\u0022); // Assert.NotEqual\r\n    new[]\r\n    {\r\n        \u0022a\u0022,\r\n        \u0022z\u0022,\r\n        \u0022x\u0022\r\n    }.IsNot(\u0022a\u0022, \u0022x\u0022, \u0022z\u0022);\r\n    /// Assert.NotEqual\n     // ReferenceEqual Assertion\r\n    var tuple = Tuple.Create(\u0022foo\u0022);\r\n    tuple.IsSameReferenceAs(tuple); // Assert.Same\r\n    tuple.IsNotSameReferenceAs(Tuple.Create(\u0022foo\u0022)); // Assert.NotSame\r\n    // Type Assertion\r\n    \u0022foobar\u0022.IsInstanceOf\u003Cstring\u003E(); // Assert.IsType\r\n    (999).IsNotInstanceOf\u003Cdouble\u003E(); // Assert.IsNotType\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AdvancedCollectionTest",
        "Body": "{\r\n    var lower = new[]\r\n    {\r\n        \u0022a\u0022,\r\n        \u0022b\u0022,\r\n        \u0022c\u0022\r\n    };\r\n    var upper = new[]\r\n    {\r\n        \u0022A\u0022,\r\n        \u0022B\u0022,\r\n        \u0022C\u0022\r\n    };\r\n    // Comparer CollectionAssert, use IEqualityComparer\u003CT\u003E or Func\u003CT,T,bool\u003E delegate\r\n    lower.Is(upper, StringComparer.OrdinalIgnoreCase);\r\n    lower.Is(upper, (x, y) =\u003E x.ToUpper() == y.ToUpper());\r\n    // or you can use Linq to Objects - SequenceEqual\r\n    lower.SequenceEqual(upper, StringComparer.OrdinalIgnoreCase).IsTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExceptionTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E \u0022foo\u0022.StartsWith(null));\r\n//Assert.DoesNotThrow(() =\u003E\r\n//{\r\n//    // code\r\n//});\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestCaseTest",
        "Body": "{\r\n    (x \u002B y).Is(z);\r\n    (x \u002B y \u002B z).Is(i =\u003E i \u003C 1000);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestTestCaseSource",
        "Body": "{\r\n    string.Concat(x, y).Is(z);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DumpTest",
        "Body": "{\r\n    var count = new List\u003Cint\u003E()\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    };\r\n    var person = new Person\r\n    {\r\n        Age = 50,\r\n        FamilyName = \u0022Yamamoto\u0022,\r\n        GivenName = \u0022Tasuke\u0022\r\n    };\r\n    try\r\n    {\r\n        person.Is(p =\u003E p.Age \u003C count.Count \u0026\u0026 p.FamilyName == \u0022Yamada\u0022 \u0026\u0026 p.GivenName == \u0022Tarou\u0022);\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        ex.Message.Is(m =\u003E m.Contains(\u0022Age = 50\u0022) \u0026\u0026 m.Contains(\u0022FamilyName = Yamamoto\u0022) \u0026\u0026 m.Contains(\u0022GivenName = Tasuke\u0022));\r\n        return;\r\n    }\r\n\r\n    Assert.True(false);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StructuralEqualSuccess",
        "Body": "{\r\n    // primitive\r\n    \u0022hoge\u0022.IsStructuralEqual(\u0022hoge\u0022);\r\n    (100).IsStructuralEqual(100);\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsStructuralEqual(new[] { 1, 2, 3 });\r\n    // complex\r\n    new\r\n    {\r\n        Hoge = \u0022aiueo\u0022,\r\n        Huga = 100,\r\n        Tako = new\r\n        {\r\n            k = 10\r\n        }\r\n    }.IsStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } });\r\n    new DummyStructural()\r\n    {\r\n        MyProperty = \u0022aiueo\u0022\r\n    }.IsStructuralEqual(new DummyStructural() { MyProperty = \u0022kakikukeko\u0022 });\r\n    new EmptyClass().IsStructuralEqual(new EmptyClass());\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    s1.IsStructuralEqual(s1);\r\n    s1.IsStructuralEqual(s2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StructuralEqualFailed",
        "Body": "{\r\n    //// type\r\n    object n = null;\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E n.IsStructuralEqual(\u0022a\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E \u0022a\u0022.IsStructuralEqual(n));\r\n    //int i = 10;\r\n    //long l = 10;\r\n    //Assert.Throws\u003CChainingAssertionException\u003E(() =\u003E i.IsStructuralEqual(l));\r\n    // primitive\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E \u0022hoge\u0022.IsStructuralEqual(\u0022hage\u0022)).Message.Is(m =\u003E m.Contains(\u0022expected = hage actual = hoge\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E (100).IsStructuralEqual(101)).Message.Is(m =\u003E m.Contains(\u0022expected = 101 actual = 100\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsStructuralEqual(new[] { 1, 2 })).Message.Is(m =\u003E m.Contains(\u0022sequence Length is different: expected = [2] actual = [3]\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsStructuralEqual(new[] { 1, 2, 4 })).Message.Is(m =\u003E m.Contains(\u0022expected = 4 actual = 3\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsStructuralEqual(new[] { 1, 2, 3, 4 })).Message.Is(m =\u003E m.Contains(\u0022sequence Length is different: expected = [4] actual = [3]\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } }.IsStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 12 } })).Message.Is(m =\u003E m.Contains(\u0022expected = 12 actual = 10\u0022));\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5,\r\n            6\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s3 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 13000\r\n            }\r\n        }\r\n    };\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsStructuralEqual(s2)).Message.Is(m =\u003E m.Contains(\u0022at StructuralEqualTestClass.IntArray, sequence Length is different: expected = [6] actual = [5]\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsStructuralEqual(s3)).Message.Is(m =\u003E m.Contains(\u0022StructuralEqualTestClass.StruStru.MP2.MyProperty\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NotStructuralEqualFailed",
        "Body": "{\r\n    // primitive\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E \u0022hoge\u0022.IsNotStructuralEqual(\u0022hoge\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E (100).IsNotStructuralEqual(100));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsNotStructuralEqual(new[] { 1, 2, 3 }));\r\n    // complex\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } }.IsNotStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } }));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new DummyStructural() { MyProperty = \u0022aiueo\u0022 }.IsNotStructuralEqual(new DummyStructural() { MyProperty = \u0022kakikukeko\u0022 }));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new EmptyClass().IsNotStructuralEqual(new EmptyClass()));\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsNotStructuralEqual(s1));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsNotStructuralEqual(s2));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NotStructuralEqualSuccess",
        "Body": "{\r\n    //// type\r\n    object n = null;\r\n    n.IsNotStructuralEqual(\u0022a\u0022);\r\n    \u0022a\u0022.IsNotStructuralEqual(n);\r\n    //int i = 10;\r\n    //long l = 10;\r\n    //i.IsNotStructuralEqual(l);\r\n    // primitive\r\n    \u0022hoge\u0022.IsNotStructuralEqual(\u0022hage\u0022);\r\n    (100).IsNotStructuralEqual(101);\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsNotStructuralEqual(new[] { 1, 2 });\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsNotStructuralEqual(new[] { 1, 2, 4 });\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsNotStructuralEqual(new[] { 1, 2, 3, 4 });\r\n    new\r\n    {\r\n        Hoge = \u0022aiueo\u0022,\r\n        Huga = 100,\r\n        Tako = new\r\n        {\r\n            k = 10\r\n        }\r\n    }.IsNotStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 12 } });\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5,\r\n            6\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s3 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 13000\r\n            }\r\n        }\r\n    };\r\n    s1.IsNotStructuralEqual(s2);\r\n    s1.IsNotStructuralEqual(s3);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Stru",
    "Message": "This class has Lack of Cohesion of Test Cases",
    "ProjectName": "UnitTest.ChainingAssertion.Core.Xunit",
    "Methods": [
      {
        "Name": "IsTest",
        "Body": "{\r\n    // \u0022Is\u0022 extend on all object and has three overloads.\r\n    // This same as Assert.Equal(25, Math.Pow(5, 2))\r\n    Math.Pow(5, 2).Is(25);\r\n    // lambda predicate assertion.\r\n    // This same as Assert.True(\u0022foobar\u0022.StartsWith(\u0022foo\u0022) \u0026\u0026 \u0022foobar\u0022.EndWith(\u0022bar\u0022))\r\n    \u0022foobar\u0022.Is(s =\u003E s.StartsWith(\u0022foo\u0022) \u0026\u0026 s.EndsWith(\u0022bar\u0022));\r\n    // has collection assert\r\n    // This same as Assert.Equal(Enumerable.Range(1,5).ToArray(), new[]{1, 2, 3, 4, 5}.ToArray())\r\n    // it is sequence value compare\r\n    Enumerable.Range(1, 5).Is(1, 2, 3, 4, 5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CollectionTest",
        "Body": "{\r\n    // if you want to use CollectionAssert Methods then use Linq to Objects and Is\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.Contains(8).IsTrue();\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.Count(i =\u003E i % 2 != 0).Is(3);\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.IsNotEmpty();\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.All(i =\u003E i \u003C 5).IsFalse();\r\n    // IsOrdered\r\n    var array = new[]\r\n    {\r\n        1,\r\n        5,\r\n        10,\r\n        100\r\n    };\r\n    array.Is(array.OrderBy(x =\u003E x).ToArray());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OthersTest",
        "Body": "{\r\n    // Null Assertions\r\n    var obj = null as object;\r\n    obj.IsNull(); // Assert.Null(obj)\r\n    new object ().IsNotNull(); // Assert.NotNull(obj)\r\n    // Not Assertion\r\n    \u0022foobar\u0022.IsNot(\u0022fooooooo\u0022); // Assert.NotEqual\r\n    new[]\r\n    {\r\n        \u0022a\u0022,\r\n        \u0022z\u0022,\r\n        \u0022x\u0022\r\n    }.IsNot(\u0022a\u0022, \u0022x\u0022, \u0022z\u0022);\r\n    /// Assert.NotEqual\n     // ReferenceEqual Assertion\r\n    var tuple = Tuple.Create(\u0022foo\u0022);\r\n    tuple.IsSameReferenceAs(tuple); // Assert.Same\r\n    tuple.IsNotSameReferenceAs(Tuple.Create(\u0022foo\u0022)); // Assert.NotSame\r\n    // Type Assertion\r\n    \u0022foobar\u0022.IsInstanceOf\u003Cstring\u003E(); // Assert.IsType\r\n    (999).IsNotInstanceOf\u003Cdouble\u003E(); // Assert.IsNotType\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AdvancedCollectionTest",
        "Body": "{\r\n    var lower = new[]\r\n    {\r\n        \u0022a\u0022,\r\n        \u0022b\u0022,\r\n        \u0022c\u0022\r\n    };\r\n    var upper = new[]\r\n    {\r\n        \u0022A\u0022,\r\n        \u0022B\u0022,\r\n        \u0022C\u0022\r\n    };\r\n    // Comparer CollectionAssert, use IEqualityComparer\u003CT\u003E or Func\u003CT,T,bool\u003E delegate\r\n    lower.Is(upper, StringComparer.OrdinalIgnoreCase);\r\n    lower.Is(upper, (x, y) =\u003E x.ToUpper() == y.ToUpper());\r\n    // or you can use Linq to Objects - SequenceEqual\r\n    lower.SequenceEqual(upper, StringComparer.OrdinalIgnoreCase).IsTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExceptionTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E \u0022foo\u0022.StartsWith(null));\r\n//Assert.DoesNotThrow(() =\u003E\r\n//{\r\n//    // code\r\n//});\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestCaseTest",
        "Body": "{\r\n    (x \u002B y).Is(z);\r\n    (x \u002B y \u002B z).Is(i =\u003E i \u003C 1000);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestTestCaseSource",
        "Body": "{\r\n    string.Concat(x, y).Is(z);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DumpTest",
        "Body": "{\r\n    var count = new List\u003Cint\u003E()\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    };\r\n    var person = new Person\r\n    {\r\n        Age = 50,\r\n        FamilyName = \u0022Yamamoto\u0022,\r\n        GivenName = \u0022Tasuke\u0022\r\n    };\r\n    try\r\n    {\r\n        person.Is(p =\u003E p.Age \u003C count.Count \u0026\u0026 p.FamilyName == \u0022Yamada\u0022 \u0026\u0026 p.GivenName == \u0022Tarou\u0022);\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        ex.Message.Is(m =\u003E m.Contains(\u0022Age = 50\u0022) \u0026\u0026 m.Contains(\u0022FamilyName = Yamamoto\u0022) \u0026\u0026 m.Contains(\u0022GivenName = Tasuke\u0022));\r\n        return;\r\n    }\r\n\r\n    Assert.True(false);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StructuralEqualSuccess",
        "Body": "{\r\n    // primitive\r\n    \u0022hoge\u0022.IsStructuralEqual(\u0022hoge\u0022);\r\n    (100).IsStructuralEqual(100);\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsStructuralEqual(new[] { 1, 2, 3 });\r\n    // complex\r\n    new\r\n    {\r\n        Hoge = \u0022aiueo\u0022,\r\n        Huga = 100,\r\n        Tako = new\r\n        {\r\n            k = 10\r\n        }\r\n    }.IsStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } });\r\n    new DummyStructural()\r\n    {\r\n        MyProperty = \u0022aiueo\u0022\r\n    }.IsStructuralEqual(new DummyStructural() { MyProperty = \u0022kakikukeko\u0022 });\r\n    new EmptyClass().IsStructuralEqual(new EmptyClass());\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    s1.IsStructuralEqual(s1);\r\n    s1.IsStructuralEqual(s2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StructuralEqualFailed",
        "Body": "{\r\n    //// type\r\n    object n = null;\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E n.IsStructuralEqual(\u0022a\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E \u0022a\u0022.IsStructuralEqual(n));\r\n    //int i = 10;\r\n    //long l = 10;\r\n    //Assert.Throws\u003CChainingAssertionException\u003E(() =\u003E i.IsStructuralEqual(l));\r\n    // primitive\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E \u0022hoge\u0022.IsStructuralEqual(\u0022hage\u0022)).Message.Is(m =\u003E m.Contains(\u0022expected = hage actual = hoge\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E (100).IsStructuralEqual(101)).Message.Is(m =\u003E m.Contains(\u0022expected = 101 actual = 100\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsStructuralEqual(new[] { 1, 2 })).Message.Is(m =\u003E m.Contains(\u0022sequence Length is different: expected = [2] actual = [3]\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsStructuralEqual(new[] { 1, 2, 4 })).Message.Is(m =\u003E m.Contains(\u0022expected = 4 actual = 3\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsStructuralEqual(new[] { 1, 2, 3, 4 })).Message.Is(m =\u003E m.Contains(\u0022sequence Length is different: expected = [4] actual = [3]\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } }.IsStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 12 } })).Message.Is(m =\u003E m.Contains(\u0022expected = 12 actual = 10\u0022));\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5,\r\n            6\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s3 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 13000\r\n            }\r\n        }\r\n    };\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsStructuralEqual(s2)).Message.Is(m =\u003E m.Contains(\u0022at StructuralEqualTestClass.IntArray, sequence Length is different: expected = [6] actual = [5]\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsStructuralEqual(s3)).Message.Is(m =\u003E m.Contains(\u0022StructuralEqualTestClass.StruStru.MP2.MyProperty\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NotStructuralEqualFailed",
        "Body": "{\r\n    // primitive\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E \u0022hoge\u0022.IsNotStructuralEqual(\u0022hoge\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E (100).IsNotStructuralEqual(100));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsNotStructuralEqual(new[] { 1, 2, 3 }));\r\n    // complex\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } }.IsNotStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } }));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new DummyStructural() { MyProperty = \u0022aiueo\u0022 }.IsNotStructuralEqual(new DummyStructural() { MyProperty = \u0022kakikukeko\u0022 }));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new EmptyClass().IsNotStructuralEqual(new EmptyClass()));\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsNotStructuralEqual(s1));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsNotStructuralEqual(s2));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NotStructuralEqualSuccess",
        "Body": "{\r\n    //// type\r\n    object n = null;\r\n    n.IsNotStructuralEqual(\u0022a\u0022);\r\n    \u0022a\u0022.IsNotStructuralEqual(n);\r\n    //int i = 10;\r\n    //long l = 10;\r\n    //i.IsNotStructuralEqual(l);\r\n    // primitive\r\n    \u0022hoge\u0022.IsNotStructuralEqual(\u0022hage\u0022);\r\n    (100).IsNotStructuralEqual(101);\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsNotStructuralEqual(new[] { 1, 2 });\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsNotStructuralEqual(new[] { 1, 2, 4 });\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsNotStructuralEqual(new[] { 1, 2, 3, 4 });\r\n    new\r\n    {\r\n        Hoge = \u0022aiueo\u0022,\r\n        Huga = 100,\r\n        Tako = new\r\n        {\r\n            k = 10\r\n        }\r\n    }.IsNotStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 12 } });\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5,\r\n            6\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s3 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 13000\r\n            }\r\n        }\r\n    };\r\n    s1.IsNotStructuralEqual(s2);\r\n    s1.IsNotStructuralEqual(s3);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MMM",
    "Message": "This class has Lack of Cohesion of Test Cases",
    "ProjectName": "UnitTest.ChainingAssertion.Core.Xunit",
    "Methods": [
      {
        "Name": "IsTest",
        "Body": "{\r\n    // \u0022Is\u0022 extend on all object and has three overloads.\r\n    // This same as Assert.Equal(25, Math.Pow(5, 2))\r\n    Math.Pow(5, 2).Is(25);\r\n    // lambda predicate assertion.\r\n    // This same as Assert.True(\u0022foobar\u0022.StartsWith(\u0022foo\u0022) \u0026\u0026 \u0022foobar\u0022.EndWith(\u0022bar\u0022))\r\n    \u0022foobar\u0022.Is(s =\u003E s.StartsWith(\u0022foo\u0022) \u0026\u0026 s.EndsWith(\u0022bar\u0022));\r\n    // has collection assert\r\n    // This same as Assert.Equal(Enumerable.Range(1,5).ToArray(), new[]{1, 2, 3, 4, 5}.ToArray())\r\n    // it is sequence value compare\r\n    Enumerable.Range(1, 5).Is(1, 2, 3, 4, 5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CollectionTest",
        "Body": "{\r\n    // if you want to use CollectionAssert Methods then use Linq to Objects and Is\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.Contains(8).IsTrue();\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.Count(i =\u003E i % 2 != 0).Is(3);\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.IsNotEmpty();\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.All(i =\u003E i \u003C 5).IsFalse();\r\n    // IsOrdered\r\n    var array = new[]\r\n    {\r\n        1,\r\n        5,\r\n        10,\r\n        100\r\n    };\r\n    array.Is(array.OrderBy(x =\u003E x).ToArray());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OthersTest",
        "Body": "{\r\n    // Null Assertions\r\n    var obj = null as object;\r\n    obj.IsNull(); // Assert.Null(obj)\r\n    new object ().IsNotNull(); // Assert.NotNull(obj)\r\n    // Not Assertion\r\n    \u0022foobar\u0022.IsNot(\u0022fooooooo\u0022); // Assert.NotEqual\r\n    new[]\r\n    {\r\n        \u0022a\u0022,\r\n        \u0022z\u0022,\r\n        \u0022x\u0022\r\n    }.IsNot(\u0022a\u0022, \u0022x\u0022, \u0022z\u0022);\r\n    /// Assert.NotEqual\n     // ReferenceEqual Assertion\r\n    var tuple = Tuple.Create(\u0022foo\u0022);\r\n    tuple.IsSameReferenceAs(tuple); // Assert.Same\r\n    tuple.IsNotSameReferenceAs(Tuple.Create(\u0022foo\u0022)); // Assert.NotSame\r\n    // Type Assertion\r\n    \u0022foobar\u0022.IsInstanceOf\u003Cstring\u003E(); // Assert.IsType\r\n    (999).IsNotInstanceOf\u003Cdouble\u003E(); // Assert.IsNotType\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AdvancedCollectionTest",
        "Body": "{\r\n    var lower = new[]\r\n    {\r\n        \u0022a\u0022,\r\n        \u0022b\u0022,\r\n        \u0022c\u0022\r\n    };\r\n    var upper = new[]\r\n    {\r\n        \u0022A\u0022,\r\n        \u0022B\u0022,\r\n        \u0022C\u0022\r\n    };\r\n    // Comparer CollectionAssert, use IEqualityComparer\u003CT\u003E or Func\u003CT,T,bool\u003E delegate\r\n    lower.Is(upper, StringComparer.OrdinalIgnoreCase);\r\n    lower.Is(upper, (x, y) =\u003E x.ToUpper() == y.ToUpper());\r\n    // or you can use Linq to Objects - SequenceEqual\r\n    lower.SequenceEqual(upper, StringComparer.OrdinalIgnoreCase).IsTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExceptionTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E \u0022foo\u0022.StartsWith(null));\r\n//Assert.DoesNotThrow(() =\u003E\r\n//{\r\n//    // code\r\n//});\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestCaseTest",
        "Body": "{\r\n    (x \u002B y).Is(z);\r\n    (x \u002B y \u002B z).Is(i =\u003E i \u003C 1000);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestTestCaseSource",
        "Body": "{\r\n    string.Concat(x, y).Is(z);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DumpTest",
        "Body": "{\r\n    var count = new List\u003Cint\u003E()\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    };\r\n    var person = new Person\r\n    {\r\n        Age = 50,\r\n        FamilyName = \u0022Yamamoto\u0022,\r\n        GivenName = \u0022Tasuke\u0022\r\n    };\r\n    try\r\n    {\r\n        person.Is(p =\u003E p.Age \u003C count.Count \u0026\u0026 p.FamilyName == \u0022Yamada\u0022 \u0026\u0026 p.GivenName == \u0022Tarou\u0022);\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        ex.Message.Is(m =\u003E m.Contains(\u0022Age = 50\u0022) \u0026\u0026 m.Contains(\u0022FamilyName = Yamamoto\u0022) \u0026\u0026 m.Contains(\u0022GivenName = Tasuke\u0022));\r\n        return;\r\n    }\r\n\r\n    Assert.True(false);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StructuralEqualSuccess",
        "Body": "{\r\n    // primitive\r\n    \u0022hoge\u0022.IsStructuralEqual(\u0022hoge\u0022);\r\n    (100).IsStructuralEqual(100);\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsStructuralEqual(new[] { 1, 2, 3 });\r\n    // complex\r\n    new\r\n    {\r\n        Hoge = \u0022aiueo\u0022,\r\n        Huga = 100,\r\n        Tako = new\r\n        {\r\n            k = 10\r\n        }\r\n    }.IsStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } });\r\n    new DummyStructural()\r\n    {\r\n        MyProperty = \u0022aiueo\u0022\r\n    }.IsStructuralEqual(new DummyStructural() { MyProperty = \u0022kakikukeko\u0022 });\r\n    new EmptyClass().IsStructuralEqual(new EmptyClass());\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    s1.IsStructuralEqual(s1);\r\n    s1.IsStructuralEqual(s2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StructuralEqualFailed",
        "Body": "{\r\n    //// type\r\n    object n = null;\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E n.IsStructuralEqual(\u0022a\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E \u0022a\u0022.IsStructuralEqual(n));\r\n    //int i = 10;\r\n    //long l = 10;\r\n    //Assert.Throws\u003CChainingAssertionException\u003E(() =\u003E i.IsStructuralEqual(l));\r\n    // primitive\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E \u0022hoge\u0022.IsStructuralEqual(\u0022hage\u0022)).Message.Is(m =\u003E m.Contains(\u0022expected = hage actual = hoge\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E (100).IsStructuralEqual(101)).Message.Is(m =\u003E m.Contains(\u0022expected = 101 actual = 100\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsStructuralEqual(new[] { 1, 2 })).Message.Is(m =\u003E m.Contains(\u0022sequence Length is different: expected = [2] actual = [3]\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsStructuralEqual(new[] { 1, 2, 4 })).Message.Is(m =\u003E m.Contains(\u0022expected = 4 actual = 3\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsStructuralEqual(new[] { 1, 2, 3, 4 })).Message.Is(m =\u003E m.Contains(\u0022sequence Length is different: expected = [4] actual = [3]\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } }.IsStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 12 } })).Message.Is(m =\u003E m.Contains(\u0022expected = 12 actual = 10\u0022));\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5,\r\n            6\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s3 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 13000\r\n            }\r\n        }\r\n    };\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsStructuralEqual(s2)).Message.Is(m =\u003E m.Contains(\u0022at StructuralEqualTestClass.IntArray, sequence Length is different: expected = [6] actual = [5]\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsStructuralEqual(s3)).Message.Is(m =\u003E m.Contains(\u0022StructuralEqualTestClass.StruStru.MP2.MyProperty\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NotStructuralEqualFailed",
        "Body": "{\r\n    // primitive\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E \u0022hoge\u0022.IsNotStructuralEqual(\u0022hoge\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E (100).IsNotStructuralEqual(100));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsNotStructuralEqual(new[] { 1, 2, 3 }));\r\n    // complex\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } }.IsNotStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } }));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new DummyStructural() { MyProperty = \u0022aiueo\u0022 }.IsNotStructuralEqual(new DummyStructural() { MyProperty = \u0022kakikukeko\u0022 }));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new EmptyClass().IsNotStructuralEqual(new EmptyClass()));\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsNotStructuralEqual(s1));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsNotStructuralEqual(s2));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NotStructuralEqualSuccess",
        "Body": "{\r\n    //// type\r\n    object n = null;\r\n    n.IsNotStructuralEqual(\u0022a\u0022);\r\n    \u0022a\u0022.IsNotStructuralEqual(n);\r\n    //int i = 10;\r\n    //long l = 10;\r\n    //i.IsNotStructuralEqual(l);\r\n    // primitive\r\n    \u0022hoge\u0022.IsNotStructuralEqual(\u0022hage\u0022);\r\n    (100).IsNotStructuralEqual(101);\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsNotStructuralEqual(new[] { 1, 2 });\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsNotStructuralEqual(new[] { 1, 2, 4 });\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsNotStructuralEqual(new[] { 1, 2, 3, 4 });\r\n    new\r\n    {\r\n        Hoge = \u0022aiueo\u0022,\r\n        Huga = 100,\r\n        Tako = new\r\n        {\r\n            k = 10\r\n        }\r\n    }.IsNotStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 12 } });\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5,\r\n            6\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s3 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 13000\r\n            }\r\n        }\r\n    };\r\n    s1.IsNotStructuralEqual(s2);\r\n    s1.IsNotStructuralEqual(s3);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "EmptyClass",
    "Message": "This class has Lack of Cohesion of Test Cases",
    "ProjectName": "UnitTest.ChainingAssertion.Core.Xunit",
    "Methods": [
      {
        "Name": "IsTest",
        "Body": "{\r\n    // \u0022Is\u0022 extend on all object and has three overloads.\r\n    // This same as Assert.Equal(25, Math.Pow(5, 2))\r\n    Math.Pow(5, 2).Is(25);\r\n    // lambda predicate assertion.\r\n    // This same as Assert.True(\u0022foobar\u0022.StartsWith(\u0022foo\u0022) \u0026\u0026 \u0022foobar\u0022.EndWith(\u0022bar\u0022))\r\n    \u0022foobar\u0022.Is(s =\u003E s.StartsWith(\u0022foo\u0022) \u0026\u0026 s.EndsWith(\u0022bar\u0022));\r\n    // has collection assert\r\n    // This same as Assert.Equal(Enumerable.Range(1,5).ToArray(), new[]{1, 2, 3, 4, 5}.ToArray())\r\n    // it is sequence value compare\r\n    Enumerable.Range(1, 5).Is(1, 2, 3, 4, 5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CollectionTest",
        "Body": "{\r\n    // if you want to use CollectionAssert Methods then use Linq to Objects and Is\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.Contains(8).IsTrue();\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.Count(i =\u003E i % 2 != 0).Is(3);\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.IsNotEmpty();\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.All(i =\u003E i \u003C 5).IsFalse();\r\n    // IsOrdered\r\n    var array = new[]\r\n    {\r\n        1,\r\n        5,\r\n        10,\r\n        100\r\n    };\r\n    array.Is(array.OrderBy(x =\u003E x).ToArray());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OthersTest",
        "Body": "{\r\n    // Null Assertions\r\n    var obj = null as object;\r\n    obj.IsNull(); // Assert.Null(obj)\r\n    new object ().IsNotNull(); // Assert.NotNull(obj)\r\n    // Not Assertion\r\n    \u0022foobar\u0022.IsNot(\u0022fooooooo\u0022); // Assert.NotEqual\r\n    new[]\r\n    {\r\n        \u0022a\u0022,\r\n        \u0022z\u0022,\r\n        \u0022x\u0022\r\n    }.IsNot(\u0022a\u0022, \u0022x\u0022, \u0022z\u0022);\r\n    /// Assert.NotEqual\n     // ReferenceEqual Assertion\r\n    var tuple = Tuple.Create(\u0022foo\u0022);\r\n    tuple.IsSameReferenceAs(tuple); // Assert.Same\r\n    tuple.IsNotSameReferenceAs(Tuple.Create(\u0022foo\u0022)); // Assert.NotSame\r\n    // Type Assertion\r\n    \u0022foobar\u0022.IsInstanceOf\u003Cstring\u003E(); // Assert.IsType\r\n    (999).IsNotInstanceOf\u003Cdouble\u003E(); // Assert.IsNotType\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AdvancedCollectionTest",
        "Body": "{\r\n    var lower = new[]\r\n    {\r\n        \u0022a\u0022,\r\n        \u0022b\u0022,\r\n        \u0022c\u0022\r\n    };\r\n    var upper = new[]\r\n    {\r\n        \u0022A\u0022,\r\n        \u0022B\u0022,\r\n        \u0022C\u0022\r\n    };\r\n    // Comparer CollectionAssert, use IEqualityComparer\u003CT\u003E or Func\u003CT,T,bool\u003E delegate\r\n    lower.Is(upper, StringComparer.OrdinalIgnoreCase);\r\n    lower.Is(upper, (x, y) =\u003E x.ToUpper() == y.ToUpper());\r\n    // or you can use Linq to Objects - SequenceEqual\r\n    lower.SequenceEqual(upper, StringComparer.OrdinalIgnoreCase).IsTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExceptionTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E \u0022foo\u0022.StartsWith(null));\r\n//Assert.DoesNotThrow(() =\u003E\r\n//{\r\n//    // code\r\n//});\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestCaseTest",
        "Body": "{\r\n    (x \u002B y).Is(z);\r\n    (x \u002B y \u002B z).Is(i =\u003E i \u003C 1000);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestTestCaseSource",
        "Body": "{\r\n    string.Concat(x, y).Is(z);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DumpTest",
        "Body": "{\r\n    var count = new List\u003Cint\u003E()\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    };\r\n    var person = new Person\r\n    {\r\n        Age = 50,\r\n        FamilyName = \u0022Yamamoto\u0022,\r\n        GivenName = \u0022Tasuke\u0022\r\n    };\r\n    try\r\n    {\r\n        person.Is(p =\u003E p.Age \u003C count.Count \u0026\u0026 p.FamilyName == \u0022Yamada\u0022 \u0026\u0026 p.GivenName == \u0022Tarou\u0022);\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        ex.Message.Is(m =\u003E m.Contains(\u0022Age = 50\u0022) \u0026\u0026 m.Contains(\u0022FamilyName = Yamamoto\u0022) \u0026\u0026 m.Contains(\u0022GivenName = Tasuke\u0022));\r\n        return;\r\n    }\r\n\r\n    Assert.True(false);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StructuralEqualSuccess",
        "Body": "{\r\n    // primitive\r\n    \u0022hoge\u0022.IsStructuralEqual(\u0022hoge\u0022);\r\n    (100).IsStructuralEqual(100);\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsStructuralEqual(new[] { 1, 2, 3 });\r\n    // complex\r\n    new\r\n    {\r\n        Hoge = \u0022aiueo\u0022,\r\n        Huga = 100,\r\n        Tako = new\r\n        {\r\n            k = 10\r\n        }\r\n    }.IsStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } });\r\n    new DummyStructural()\r\n    {\r\n        MyProperty = \u0022aiueo\u0022\r\n    }.IsStructuralEqual(new DummyStructural() { MyProperty = \u0022kakikukeko\u0022 });\r\n    new EmptyClass().IsStructuralEqual(new EmptyClass());\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    s1.IsStructuralEqual(s1);\r\n    s1.IsStructuralEqual(s2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StructuralEqualFailed",
        "Body": "{\r\n    //// type\r\n    object n = null;\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E n.IsStructuralEqual(\u0022a\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E \u0022a\u0022.IsStructuralEqual(n));\r\n    //int i = 10;\r\n    //long l = 10;\r\n    //Assert.Throws\u003CChainingAssertionException\u003E(() =\u003E i.IsStructuralEqual(l));\r\n    // primitive\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E \u0022hoge\u0022.IsStructuralEqual(\u0022hage\u0022)).Message.Is(m =\u003E m.Contains(\u0022expected = hage actual = hoge\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E (100).IsStructuralEqual(101)).Message.Is(m =\u003E m.Contains(\u0022expected = 101 actual = 100\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsStructuralEqual(new[] { 1, 2 })).Message.Is(m =\u003E m.Contains(\u0022sequence Length is different: expected = [2] actual = [3]\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsStructuralEqual(new[] { 1, 2, 4 })).Message.Is(m =\u003E m.Contains(\u0022expected = 4 actual = 3\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsStructuralEqual(new[] { 1, 2, 3, 4 })).Message.Is(m =\u003E m.Contains(\u0022sequence Length is different: expected = [4] actual = [3]\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } }.IsStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 12 } })).Message.Is(m =\u003E m.Contains(\u0022expected = 12 actual = 10\u0022));\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5,\r\n            6\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s3 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 13000\r\n            }\r\n        }\r\n    };\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsStructuralEqual(s2)).Message.Is(m =\u003E m.Contains(\u0022at StructuralEqualTestClass.IntArray, sequence Length is different: expected = [6] actual = [5]\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsStructuralEqual(s3)).Message.Is(m =\u003E m.Contains(\u0022StructuralEqualTestClass.StruStru.MP2.MyProperty\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NotStructuralEqualFailed",
        "Body": "{\r\n    // primitive\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E \u0022hoge\u0022.IsNotStructuralEqual(\u0022hoge\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E (100).IsNotStructuralEqual(100));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsNotStructuralEqual(new[] { 1, 2, 3 }));\r\n    // complex\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } }.IsNotStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } }));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new DummyStructural() { MyProperty = \u0022aiueo\u0022 }.IsNotStructuralEqual(new DummyStructural() { MyProperty = \u0022kakikukeko\u0022 }));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new EmptyClass().IsNotStructuralEqual(new EmptyClass()));\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsNotStructuralEqual(s1));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsNotStructuralEqual(s2));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NotStructuralEqualSuccess",
        "Body": "{\r\n    //// type\r\n    object n = null;\r\n    n.IsNotStructuralEqual(\u0022a\u0022);\r\n    \u0022a\u0022.IsNotStructuralEqual(n);\r\n    //int i = 10;\r\n    //long l = 10;\r\n    //i.IsNotStructuralEqual(l);\r\n    // primitive\r\n    \u0022hoge\u0022.IsNotStructuralEqual(\u0022hage\u0022);\r\n    (100).IsNotStructuralEqual(101);\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsNotStructuralEqual(new[] { 1, 2 });\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsNotStructuralEqual(new[] { 1, 2, 4 });\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsNotStructuralEqual(new[] { 1, 2, 3, 4 });\r\n    new\r\n    {\r\n        Hoge = \u0022aiueo\u0022,\r\n        Huga = 100,\r\n        Tako = new\r\n        {\r\n            k = 10\r\n        }\r\n    }.IsNotStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 12 } });\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5,\r\n            6\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s3 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 13000\r\n            }\r\n        }\r\n    };\r\n    s1.IsNotStructuralEqual(s2);\r\n    s1.IsNotStructuralEqual(s3);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UnitTest",
    "Message": "This class has Lack of Cohesion of Test Cases",
    "ProjectName": "UnitTest.ChainingAssertion.Core.Xunit",
    "Methods": [
      {
        "Name": "IsTest",
        "Body": "{\r\n    // \u0022Is\u0022 extend on all object and has three overloads.\r\n    // This same as Assert.Equal(25, Math.Pow(5, 2))\r\n    Math.Pow(5, 2).Is(25);\r\n    // lambda predicate assertion.\r\n    // This same as Assert.True(\u0022foobar\u0022.StartsWith(\u0022foo\u0022) \u0026\u0026 \u0022foobar\u0022.EndWith(\u0022bar\u0022))\r\n    \u0022foobar\u0022.Is(s =\u003E s.StartsWith(\u0022foo\u0022) \u0026\u0026 s.EndsWith(\u0022bar\u0022));\r\n    // has collection assert\r\n    // This same as Assert.Equal(Enumerable.Range(1,5).ToArray(), new[]{1, 2, 3, 4, 5}.ToArray())\r\n    // it is sequence value compare\r\n    Enumerable.Range(1, 5).Is(1, 2, 3, 4, 5);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CollectionTest",
        "Body": "{\r\n    // if you want to use CollectionAssert Methods then use Linq to Objects and Is\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.Contains(8).IsTrue();\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.Count(i =\u003E i % 2 != 0).Is(3);\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.IsNotEmpty();\r\n    new[]\r\n    {\r\n        1,\r\n        3,\r\n        7,\r\n        8\r\n    }.All(i =\u003E i \u003C 5).IsFalse();\r\n    // IsOrdered\r\n    var array = new[]\r\n    {\r\n        1,\r\n        5,\r\n        10,\r\n        100\r\n    };\r\n    array.Is(array.OrderBy(x =\u003E x).ToArray());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OthersTest",
        "Body": "{\r\n    // Null Assertions\r\n    var obj = null as object;\r\n    obj.IsNull(); // Assert.Null(obj)\r\n    new object ().IsNotNull(); // Assert.NotNull(obj)\r\n    // Not Assertion\r\n    \u0022foobar\u0022.IsNot(\u0022fooooooo\u0022); // Assert.NotEqual\r\n    new[]\r\n    {\r\n        \u0022a\u0022,\r\n        \u0022z\u0022,\r\n        \u0022x\u0022\r\n    }.IsNot(\u0022a\u0022, \u0022x\u0022, \u0022z\u0022);\r\n    /// Assert.NotEqual\n     // ReferenceEqual Assertion\r\n    var tuple = Tuple.Create(\u0022foo\u0022);\r\n    tuple.IsSameReferenceAs(tuple); // Assert.Same\r\n    tuple.IsNotSameReferenceAs(Tuple.Create(\u0022foo\u0022)); // Assert.NotSame\r\n    // Type Assertion\r\n    \u0022foobar\u0022.IsInstanceOf\u003Cstring\u003E(); // Assert.IsType\r\n    (999).IsNotInstanceOf\u003Cdouble\u003E(); // Assert.IsNotType\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AdvancedCollectionTest",
        "Body": "{\r\n    var lower = new[]\r\n    {\r\n        \u0022a\u0022,\r\n        \u0022b\u0022,\r\n        \u0022c\u0022\r\n    };\r\n    var upper = new[]\r\n    {\r\n        \u0022A\u0022,\r\n        \u0022B\u0022,\r\n        \u0022C\u0022\r\n    };\r\n    // Comparer CollectionAssert, use IEqualityComparer\u003CT\u003E or Func\u003CT,T,bool\u003E delegate\r\n    lower.Is(upper, StringComparer.OrdinalIgnoreCase);\r\n    lower.Is(upper, (x, y) =\u003E x.ToUpper() == y.ToUpper());\r\n    // or you can use Linq to Objects - SequenceEqual\r\n    lower.SequenceEqual(upper, StringComparer.OrdinalIgnoreCase).IsTrue();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExceptionTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E \u0022foo\u0022.StartsWith(null));\r\n//Assert.DoesNotThrow(() =\u003E\r\n//{\r\n//    // code\r\n//});\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestCaseTest",
        "Body": "{\r\n    (x \u002B y).Is(z);\r\n    (x \u002B y \u002B z).Is(i =\u003E i \u003C 1000);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestTestCaseSource",
        "Body": "{\r\n    string.Concat(x, y).Is(z);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DumpTest",
        "Body": "{\r\n    var count = new List\u003Cint\u003E()\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    };\r\n    var person = new Person\r\n    {\r\n        Age = 50,\r\n        FamilyName = \u0022Yamamoto\u0022,\r\n        GivenName = \u0022Tasuke\u0022\r\n    };\r\n    try\r\n    {\r\n        person.Is(p =\u003E p.Age \u003C count.Count \u0026\u0026 p.FamilyName == \u0022Yamada\u0022 \u0026\u0026 p.GivenName == \u0022Tarou\u0022);\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        ex.Message.Is(m =\u003E m.Contains(\u0022Age = 50\u0022) \u0026\u0026 m.Contains(\u0022FamilyName = Yamamoto\u0022) \u0026\u0026 m.Contains(\u0022GivenName = Tasuke\u0022));\r\n        return;\r\n    }\r\n\r\n    Assert.True(false);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StructuralEqualSuccess",
        "Body": "{\r\n    // primitive\r\n    \u0022hoge\u0022.IsStructuralEqual(\u0022hoge\u0022);\r\n    (100).IsStructuralEqual(100);\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsStructuralEqual(new[] { 1, 2, 3 });\r\n    // complex\r\n    new\r\n    {\r\n        Hoge = \u0022aiueo\u0022,\r\n        Huga = 100,\r\n        Tako = new\r\n        {\r\n            k = 10\r\n        }\r\n    }.IsStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } });\r\n    new DummyStructural()\r\n    {\r\n        MyProperty = \u0022aiueo\u0022\r\n    }.IsStructuralEqual(new DummyStructural() { MyProperty = \u0022kakikukeko\u0022 });\r\n    new EmptyClass().IsStructuralEqual(new EmptyClass());\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    s1.IsStructuralEqual(s1);\r\n    s1.IsStructuralEqual(s2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StructuralEqualFailed",
        "Body": "{\r\n    //// type\r\n    object n = null;\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E n.IsStructuralEqual(\u0022a\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E \u0022a\u0022.IsStructuralEqual(n));\r\n    //int i = 10;\r\n    //long l = 10;\r\n    //Assert.Throws\u003CChainingAssertionException\u003E(() =\u003E i.IsStructuralEqual(l));\r\n    // primitive\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E \u0022hoge\u0022.IsStructuralEqual(\u0022hage\u0022)).Message.Is(m =\u003E m.Contains(\u0022expected = hage actual = hoge\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E (100).IsStructuralEqual(101)).Message.Is(m =\u003E m.Contains(\u0022expected = 101 actual = 100\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsStructuralEqual(new[] { 1, 2 })).Message.Is(m =\u003E m.Contains(\u0022sequence Length is different: expected = [2] actual = [3]\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsStructuralEqual(new[] { 1, 2, 4 })).Message.Is(m =\u003E m.Contains(\u0022expected = 4 actual = 3\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsStructuralEqual(new[] { 1, 2, 3, 4 })).Message.Is(m =\u003E m.Contains(\u0022sequence Length is different: expected = [4] actual = [3]\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } }.IsStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 12 } })).Message.Is(m =\u003E m.Contains(\u0022expected = 12 actual = 10\u0022));\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5,\r\n            6\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s3 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 13000\r\n            }\r\n        }\r\n    };\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsStructuralEqual(s2)).Message.Is(m =\u003E m.Contains(\u0022at StructuralEqualTestClass.IntArray, sequence Length is different: expected = [6] actual = [5]\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsStructuralEqual(s3)).Message.Is(m =\u003E m.Contains(\u0022StructuralEqualTestClass.StruStru.MP2.MyProperty\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NotStructuralEqualFailed",
        "Body": "{\r\n    // primitive\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E \u0022hoge\u0022.IsNotStructuralEqual(\u0022hoge\u0022));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E (100).IsNotStructuralEqual(100));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new[] { 1, 2, 3 }.IsNotStructuralEqual(new[] { 1, 2, 3 }));\r\n    // complex\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } }.IsNotStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 10 } }));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new DummyStructural() { MyProperty = \u0022aiueo\u0022 }.IsNotStructuralEqual(new DummyStructural() { MyProperty = \u0022kakikukeko\u0022 }));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E new EmptyClass().IsNotStructuralEqual(new EmptyClass()));\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsNotStructuralEqual(s1));\r\n    Assert.Throws\u003CChainingAssertionXunitException\u003E(() =\u003E s1.IsNotStructuralEqual(s2));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NotStructuralEqualSuccess",
        "Body": "{\r\n    //// type\r\n    object n = null;\r\n    n.IsNotStructuralEqual(\u0022a\u0022);\r\n    \u0022a\u0022.IsNotStructuralEqual(n);\r\n    //int i = 10;\r\n    //long l = 10;\r\n    //i.IsNotStructuralEqual(l);\r\n    // primitive\r\n    \u0022hoge\u0022.IsNotStructuralEqual(\u0022hage\u0022);\r\n    (100).IsNotStructuralEqual(101);\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsNotStructuralEqual(new[] { 1, 2 });\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsNotStructuralEqual(new[] { 1, 2, 4 });\r\n    new[]\r\n    {\r\n        1,\r\n        2,\r\n        3\r\n    }.IsNotStructuralEqual(new[] { 1, 2, 3, 4 });\r\n    new\r\n    {\r\n        Hoge = \u0022aiueo\u0022,\r\n        Huga = 100,\r\n        Tako = new\r\n        {\r\n            k = 10\r\n        }\r\n    }.IsNotStructuralEqual(new { Hoge = \u0022aiueo\u0022, Huga = 100, Tako = new { k = 12 } });\r\n    var s1 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s2 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5,\r\n            6\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 10000\r\n            }\r\n        }\r\n    };\r\n    var s3 = new StructuralEqualTestClass\r\n    {\r\n        IntPro = 1,\r\n        IntField = 10,\r\n        StrField = \u0022hoge\u0022,\r\n        StrProp = \u0022huga\u0022,\r\n        IntArray = new[]\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        },\r\n        StruStru = new Stru()\r\n        {\r\n            MyProperty = 1000,\r\n            StrArray = new[]\r\n            {\r\n                \u0022hoge\u0022,\r\n                \u0022huga\u0022,\r\n                \u0022tako\u0022\r\n            },\r\n            MP2 = new MMM()\r\n            {\r\n                MyProperty = 13000\r\n            }\r\n        }\r\n    };\r\n    s1.IsNotStructuralEqual(s2);\r\n    s1.IsNotStructuralEqual(s3);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Found"
          }
        ]
      }
    ]
  }
]