[
  {
    "Name": "EnginesControllerTests",
    "Message": null,
    "ProjectName": "xUnitMockApi.UnitTests",
    "Methods": [
      {
        "Name": "ShouldBeConstructed",
        "Body": "{\r\n    var service = new Mock\u003CIEngineService\u003E();\r\n    var controller = new EnginesController(service.Object);\r\n    Assert.NotNull(controller);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldGet",
        "Body": "{\r\n    var service = new Mock\u003CIEngineService\u003E();\r\n    var controller = new EnginesController(service.Object);\r\n    var payload = new EngineViewModel[]\r\n    {\r\n        new EngineViewModel\r\n        {\r\n            Capacity = 2400,\r\n            Configuration = \u0022Inline 4 Vtec\u0022,\r\n            FuelType = \u0022Petrol\u0022\r\n        }\r\n    };\r\n    service.Setup(x =\u003E x.GetEngines()).Returns(payload);\r\n    var result = controller.Get();\r\n    Assert.IsType\u003COkObjectResult\u003E(result);\r\n    Assert.Equal(((OkObjectResult)result).Value, payload);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturnBadRequestIfFailingToCreate",
        "Body": "{\r\n    var service = new Mock\u003CIEngineService\u003E();\r\n    var controller = new EnginesController(service.Object);\r\n    var viewModel = new EngineViewModel\r\n    {\r\n        Capacity = 2400,\r\n        Configuration = \u0022Inline 4 Vtec\u0022,\r\n        FuelType = \u0022Petrol\u0022\r\n    };\r\n    service.Setup(x =\u003E x.CreateNewEngine(viewModel)).Returns(Task.FromResult(false));\r\n    var result = await controller.Post(viewModel);\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreate",
        "Body": "{\r\n    var service = new Mock\u003CIEngineService\u003E();\r\n    var controller = new EnginesController(service.Object);\r\n    var viewModel = new EngineViewModel\r\n    {\r\n        Capacity = 2400,\r\n        Configuration = \u0022Inline 4 Vtec\u0022,\r\n        FuelType = \u0022Petrol\u0022\r\n    };\r\n    service.Setup(x =\u003E x.CreateNewEngine(viewModel)).Returns(Task.FromResult(true));\r\n    var result = await controller.Post(viewModel);\r\n    Assert.IsType\u003CNoContentResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "VehiclesControllerTests",
    "Message": null,
    "ProjectName": "xUnitMockApi.UnitTests",
    "Methods": [
      {
        "Name": "ShouldBeConstructed",
        "Body": "{\r\n    var service = new Mock\u003CIVehicleService\u003E();\r\n    var controller = new VehiclesController(service.Object);\r\n    Assert.NotNull(controller);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldGet",
        "Body": "{\r\n    var service = new Mock\u003CIVehicleService\u003E();\r\n    var controller = new VehiclesController(service.Object);\r\n    var payload = new VehicleViewModel[]\r\n    {\r\n        new VehicleViewModel\r\n        {\r\n            Name = \u0022Test Vehicle\u0022,\r\n            EngineId = 1,\r\n            WheelId = 1\r\n        }\r\n    };\r\n    service.Setup(x =\u003E x.GetVehicles()).Returns(payload);\r\n    var result = controller.Get();\r\n    Assert.IsType\u003COkObjectResult\u003E(result);\r\n    Assert.Equal(((OkObjectResult)result).Value, payload);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturnBadRequestIfFailingToCreate",
        "Body": "{\r\n    var service = new Mock\u003CIVehicleService\u003E();\r\n    var controller = new VehiclesController(service.Object);\r\n    var viewModel = new VehicleViewModel\r\n    {\r\n        Name = \u0022Test Vehicle\u0022,\r\n        EngineId = 1,\r\n        WheelId = 1\r\n    };\r\n    service.Setup(x =\u003E x.CreateNewVehicle(viewModel)).Returns(Task.FromResult(false));\r\n    var result = await controller.Post(viewModel);\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreate",
        "Body": "{\r\n    var service = new Mock\u003CIVehicleService\u003E();\r\n    var controller = new VehiclesController(service.Object);\r\n    var viewModel = new VehicleViewModel\r\n    {\r\n        Name = \u0022Test Vehicle\u0022,\r\n        EngineId = 1,\r\n        WheelId = 1\r\n    };\r\n    service.Setup(x =\u003E x.CreateNewVehicle(viewModel)).Returns(Task.FromResult(true));\r\n    var result = await controller.Post(viewModel);\r\n    Assert.IsType\u003CNoContentResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "WheelsControllerTests",
    "Message": null,
    "ProjectName": "xUnitMockApi.UnitTests",
    "Methods": [
      {
        "Name": "ShouldBeConstructed",
        "Body": "{\r\n    var service = new Mock\u003CIWheelService\u003E();\r\n    var controller = new WheelsController(service.Object);\r\n    Assert.NotNull(controller);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldGet",
        "Body": "{\r\n    var service = new Mock\u003CIWheelService\u003E();\r\n    var controller = new WheelsController(service.Object);\r\n    var payload = new WheelViewModel[]\r\n    {\r\n        new WheelViewModel\r\n        {\r\n            Size = 16,\r\n            Width = 5\r\n        }\r\n    };\r\n    service.Setup(x =\u003E x.GetWheels()).Returns(payload);\r\n    var result = controller.Get();\r\n    Assert.IsType\u003COkObjectResult\u003E(result);\r\n    Assert.Equal(((OkObjectResult)result).Value, payload);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldReturnBadRequestIfFailingToCreate",
        "Body": "{\r\n    var service = new Mock\u003CIWheelService\u003E();\r\n    var controller = new WheelsController(service.Object);\r\n    var viewModel = new WheelViewModel\r\n    {\r\n        Size = 16,\r\n        Width = 5\r\n    };\r\n    service.Setup(x =\u003E x.CreateNewWheel(viewModel)).Returns(Task.FromResult(false));\r\n    var result = await controller.Post(viewModel);\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreate",
        "Body": "{\r\n    var service = new Mock\u003CIWheelService\u003E();\r\n    var controller = new WheelsController(service.Object);\r\n    var viewModel = new WheelViewModel\r\n    {\r\n        Size = 16,\r\n        Width = 5\r\n    };\r\n    service.Setup(x =\u003E x.CreateNewWheel(viewModel)).Returns(Task.FromResult(true));\r\n    var result = await controller.Post(viewModel);\r\n    Assert.IsType\u003CNoContentResult\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "EngineServiceTests",
    "Message": null,
    "ProjectName": "xUnitMockApi.UnitTests",
    "Methods": [
      {
        "Name": "ShouldBeConstructed",
        "Body": "{\r\n    using (var context = new MockContext(emptyDbOptions))\r\n    {\r\n        var service = new EngineService(context);\r\n        Assert.NotNull(service);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldGetNoEnginesWithEmptyDb",
        "Body": "{\r\n    using (var context = new MockContext(emptyDbOptions))\r\n    {\r\n        var service = new EngineService(context);\r\n        Assert.Empty(service.GetEngines());\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldGetEngines",
        "Body": "{\r\n    var dbOptions = DbHelper.GetNewDbOptions\u003CMockContext\u003E();\r\n    await CreateTestDatabase(dbOptions);\r\n    using (var context = new MockContext(dbOptions))\r\n    {\r\n        var service = new EngineService(context);\r\n        var results = service.GetEngines();\r\n        var engine1 = results.First();\r\n        var engine4 = results.Last();\r\n        Assert.Equal(4, results.Count());\r\n        Assert.Equal(2400, engine1.Capacity);\r\n        Assert.Equal(\u0022Inline 4 Vtec\u0022, engine1.Configuration);\r\n        Assert.Equal(\u0022Petrol\u0022, engine1.FuelType);\r\n        Assert.Equal(2000, engine4.Capacity);\r\n        Assert.Equal(\u0022Inline 4 Turbo\u0022, engine4.Configuration);\r\n        Assert.Equal(\u0022Diesel\u0022, engine4.FuelType);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreateEngineWithEmptyDb",
        "Body": "{\r\n    using (var context = new MockContext(DbHelper.GetNewDbOptions\u003CMockContext\u003E()))\r\n    {\r\n        var service = new EngineService(context);\r\n        var engineVm = new EngineViewModel\r\n        {\r\n            Capacity = 1600,\r\n            Configuration = \u0022Inline 4\u0022,\r\n            FuelType = \u0022Petrol\u0022\r\n        };\r\n        var isCreateSuccess = await service.CreateNewEngine(engineVm);\r\n        var engine = context.Engines.First();\r\n        Assert.True(isCreateSuccess);\r\n        Assert.Single(context.Engines);\r\n        Assert.Equal(engineVm.Capacity, engine.Capacity);\r\n        Assert.Equal(engineVm.Configuration, engine.Configuration);\r\n        Assert.Equal(engineVm.FuelType, engine.FuelType);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreateEngineWithExistingDb",
        "Body": "{\r\n    var dbOptions = DbHelper.GetNewDbOptions\u003CMockContext\u003E();\r\n    await CreateTestDatabase(dbOptions);\r\n    using (var context = new MockContext(dbOptions))\r\n    {\r\n        var service = new EngineService(context);\r\n        var engineVm = new EngineViewModel\r\n        {\r\n            Capacity = 1600,\r\n            Configuration = \u0022Inline 4\u0022,\r\n            FuelType = \u0022Petrol\u0022\r\n        };\r\n        var isCreateSuccess = await service.CreateNewEngine(engineVm);\r\n        var engines = context.Engines;\r\n        var engine1 = engines.First();\r\n        var engine5 = engines.Last();\r\n        Assert.True(isCreateSuccess);\r\n        Assert.Equal(5, engines.Count());\r\n        Assert.Equal(2400, engine1.Capacity);\r\n        Assert.Equal(\u0022Inline 4 Vtec\u0022, engine1.Configuration);\r\n        Assert.Equal(\u0022Petrol\u0022, engine1.FuelType);\r\n        Assert.Equal(engineVm.Capacity, engine5.Capacity);\r\n        Assert.Equal(engineVm.Configuration, engine5.Configuration);\r\n        Assert.Equal(engineVm.FuelType, engine5.FuelType);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "VehicleServiceTests",
    "Message": null,
    "ProjectName": "xUnitMockApi.UnitTests",
    "Methods": [
      {
        "Name": "ShouldBeConstructed",
        "Body": "{\r\n    using (var context = new MockContext(emptyDbOptions))\r\n    {\r\n        var service = new VehicleService(context);\r\n        Assert.NotNull(service);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldGetNoVehiclesWithEmptyDb",
        "Body": "{\r\n    using (var context = new MockContext(emptyDbOptions))\r\n    {\r\n        var service = new VehicleService(context);\r\n        Assert.Empty(service.GetVehicles());\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldGetVehicles",
        "Body": "{\r\n    var dbOptions = DbHelper.GetNewDbOptions\u003CMockContext\u003E();\r\n    await CreateTestDatabase(dbOptions);\r\n    using (var context = new MockContext(dbOptions))\r\n    {\r\n        var service = new VehicleService(context);\r\n        var results = service.GetVehicles();\r\n        var vehicle1 = results.First();\r\n        var vehicle4 = results.Last();\r\n        Assert.Equal(4, results.Count());\r\n        Assert.Equal(\u0022Subaru Impreza\u0022, vehicle1.Name);\r\n        Assert.Equal(2, vehicle1.EngineId);\r\n        Assert.Equal(2, vehicle1.WheelId);\r\n        Assert.Equal(\u0022Honda Accord\u0022, vehicle4.Name);\r\n        Assert.Equal(1, vehicle4.EngineId);\r\n        Assert.Equal(3, vehicle4.WheelId);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreateVehicleWithEmptyDb",
        "Body": "{\r\n    using (var context = new MockContext(DbHelper.GetNewDbOptions\u003CMockContext\u003E()))\r\n    {\r\n        var service = new VehicleService(context);\r\n        var vehicleVm = new VehicleViewModel\r\n        {\r\n            Name = \u0022Test Vehicle\u0022\r\n        };\r\n        var isCreateSuccess = await service.CreateNewVehicle(vehicleVm);\r\n        var vehicle = context.Vehicles.First();\r\n        Assert.True(isCreateSuccess);\r\n        Assert.Single(context.Vehicles);\r\n        Assert.Equal(vehicleVm.Name, vehicle.Name);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreateVehicleWithExistingDb",
        "Body": "{\r\n    var dbOptions = DbHelper.GetNewDbOptions\u003CMockContext\u003E();\r\n    await CreateTestDatabase(dbOptions);\r\n    using (var context = new MockContext(dbOptions))\r\n    {\r\n        var service = new VehicleService(context);\r\n        var vehicleVm = new VehicleViewModel\r\n        {\r\n            Name = \u0022Test Vehicle\u0022,\r\n            EngineId = 1,\r\n            WheelId = 1\r\n        };\r\n        var isCreateSuccess = await service.CreateNewVehicle(vehicleVm);\r\n        var vehicles = context.Vehicles;\r\n        var vehicle1 = vehicles.First();\r\n        var vehicle5 = vehicles.Last();\r\n        Assert.True(isCreateSuccess);\r\n        Assert.Equal(5, vehicles.Count());\r\n        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n        // At this point vehicle1.Wheels and vehicle1.Engine are null. \r\n        // Inspecting the context.VehicleWheels and context.VehicleEngines verifies that these \r\n        // actually exist and then inspecting vehicle1.Wheels and vehicle1.Engine are no longer null\r\n        //\r\n        // TL;DR: properties are null, until inspected in context, after which they are no longer null\r\n        // \r\n        // HACK: evaluating vehicleWheels and vehicleEngines manually results in these properties not being null as well\r\n        // Is this expected? Unit test passes/succeeds based on context inspection, etc. Changes not propogating correctly...\r\n        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n        //var wheels = context.VehicleWheels.ToArray();\r\n        //var engines = context.VehicleEngines.ToArray();\r\n        Assert.Equal(\u0022Subaru Impreza\u0022, vehicle1.Name);\r\n        Assert.Equal(2, vehicle1.Engine.EngineId);\r\n        Assert.Equal(2, vehicle1.Wheels.First().WheelId);\r\n        Assert.Equal(\u0022Test Vehicle\u0022, vehicle5.Name);\r\n        Assert.Equal(1, vehicle5.Engine.EngineId);\r\n        Assert.True(vehicle5.Wheels.All(x =\u003E x.WheelId == 1));\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "WheelsServiceTests",
    "Message": null,
    "ProjectName": "xUnitMockApi.UnitTests",
    "Methods": [
      {
        "Name": "ShouldBeConstructed",
        "Body": "{\r\n    using (var context = new MockContext(emptyDbOptions))\r\n    {\r\n        var service = new WheelService(context);\r\n        Assert.NotNull(service);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldGetNoWheelsWithEmptyDb",
        "Body": "{\r\n    using (var context = new MockContext(emptyDbOptions))\r\n    {\r\n        var service = new WheelService(context);\r\n        Assert.Empty(service.GetWheels());\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldGetWheels",
        "Body": "{\r\n    var dbOptions = DbHelper.GetNewDbOptions\u003CMockContext\u003E();\r\n    await CreateTestDatabase(dbOptions);\r\n    using (var context = new MockContext(dbOptions))\r\n    {\r\n        var service = new WheelService(context);\r\n        var results = service.GetWheels();\r\n        var wheel1 = results.First();\r\n        var wheel4 = results.Last();\r\n        Assert.Equal(4, results.Count());\r\n        Assert.Equal(15, wheel1.Size);\r\n        Assert.Equal(5, wheel1.Width);\r\n        Assert.Equal(18, wheel4.Size);\r\n        Assert.Equal(7, wheel4.Width);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreateWheelWithEmptyDb",
        "Body": "{\r\n    using (var context = new MockContext(DbHelper.GetNewDbOptions\u003CMockContext\u003E()))\r\n    {\r\n        var service = new WheelService(context);\r\n        var wheelVm = new WheelViewModel\r\n        {\r\n            Size = 19,\r\n            Width = 7\r\n        };\r\n        var isCreateSuccess = await service.CreateNewWheel(wheelVm);\r\n        var wheel = context.Wheels.First();\r\n        Assert.True(isCreateSuccess);\r\n        Assert.Single(context.Wheels);\r\n        Assert.Equal(wheelVm.Size, wheel.Size);\r\n        Assert.Equal(wheelVm.Width, wheel.Width);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreateWheelWithExistingDb",
        "Body": "{\r\n    var dbOptions = DbHelper.GetNewDbOptions\u003CMockContext\u003E();\r\n    await CreateTestDatabase(dbOptions);\r\n    using (var context = new MockContext(dbOptions))\r\n    {\r\n        var service = new WheelService(context);\r\n        var wheelVm = new WheelViewModel\r\n        {\r\n            Size = 19,\r\n            Width = 7\r\n        };\r\n        var isCreateSuccess = await service.CreateNewWheel(wheelVm);\r\n        var wheels = context.Wheels;\r\n        var wheel1 = wheels.First();\r\n        var wheel5 = wheels.Last();\r\n        Assert.True(isCreateSuccess);\r\n        Assert.Equal(5, wheels.Count());\r\n        Assert.Equal(15, wheel1.Size);\r\n        Assert.Equal(5, wheel1.Width);\r\n        Assert.Equal(wheelVm.Size, wheel5.Size);\r\n        Assert.Equal(wheelVm.Width, wheel5.Width);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CreateAndGetVehiclesWithRelevantEntities",
    "Message": null,
    "ProjectName": "xUnitMockApi.IntegrationTests",
    "Methods": [
      {
        "Name": "ShouldCreateAndFetchNewVehiclesWithNoWheelsOrEnginesAsync",
        "Body": "{\r\n    using (var context = new MockContext(emptyDbOptions))\r\n    {\r\n        // Ensure DB was cleaned up\r\n        context.ResetValueGenerators();\r\n        await context.Database.EnsureDeletedAsync();\r\n        var service = new VehicleService(context);\r\n        var vehicleVm = new VehicleViewModel\r\n        {\r\n            Name = VEHICLE_NAME \u002B 1\r\n        };\r\n        // Ensure DB emtpy\r\n        var noVehicles = service.GetVehicles();\r\n        Assert.Empty(noVehicles);\r\n        // Add new vehicle\r\n        var isCreatedOk = await service.CreateNewVehicle(vehicleVm);\r\n        Assert.True(isCreatedOk);\r\n        // Ensre vehicle added OK\r\n        var oneVehicles = service.GetVehicles();\r\n        Assert.Single(oneVehicles);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreateAndFetchNewVehiclesWithWheelsAndEnginesAsync",
        "Body": "{\r\n    using (var context = new MockContext(DbHelper.GetNewDbOptions\u003CMockContext\u003E()))\r\n    {\r\n        // Ensure DB was cleaned up\r\n        context.ResetValueGenerators();\r\n        await context.Database.EnsureDeletedAsync();\r\n        var vehicleService = new VehicleService(context);\r\n        var wheelService = new WheelService(context);\r\n        var engineService = new EngineService(context);\r\n        var engineVm = new EngineViewModel\r\n        {\r\n            Capacity = 4000,\r\n            Configuration = \u0022V8\u0022,\r\n            FuelType = \u0022Petrol\u0022\r\n        };\r\n        var wheelVm = new WheelViewModel\r\n        {\r\n            Size = 17,\r\n            Width = 7\r\n        };\r\n        // Ensure DB emtpy\r\n        var noVehicles = vehicleService.GetVehicles();\r\n        var noEngines = engineService.GetEngines();\r\n        var noWheels = wheelService.GetWheels();\r\n        Assert.Empty(noVehicles);\r\n        Assert.Empty(noEngines);\r\n        Assert.Empty(noWheels);\r\n        // Add entities\r\n        var isCreatedOk = await engineService.CreateNewEngine(engineVm);\r\n        isCreatedOk = isCreatedOk \u0026\u0026 await wheelService.CreateNewWheel(wheelVm);\r\n        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n        // TODO: This should fail in the second execution due to foreign key constraint. We are trying to add a vehicle\r\n        // with an engine and wheel combination that does not yet exist. This fails during normal execution.\r\n        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n        isCreatedOk = isCreatedOk \u0026\u0026 await vehicleService.CreateNewVehicle(vehicleVm);\r\n        // Ensure all created ok\r\n        Assert.True(isCreatedOk);\r\n        // Ensure vehicle added OK\r\n        var oneEngine = engineService.GetEngines();\r\n        var oneWheel = wheelService.GetWheels();\r\n        var oneVehicles = vehicleService.GetVehicles();\r\n        Assert.Single(oneEngine);\r\n        Assert.Single(oneWheel);\r\n        Assert.Single(oneVehicles);\r\n        // Verify many-to-many tables\r\n        var oneVehicleEngine = context.VehicleEngines;\r\n        var fourVehicleWheels = context.VehicleWheels;\r\n        Assert.Single(oneVehicleEngine);\r\n        Assert.Equal(4, fourVehicleWheels.Count());\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  }
]