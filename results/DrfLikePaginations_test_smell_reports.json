[
  {
    "Name": "Options",
    "Message": null,
    "ProjectName": "Tests",
    "Methods": [
      {
        "Name": "ShouldCreatePaginatedScenarioOptions1",
        "Body": "{\r\n    // Arrange\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(String.Empty);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().BeNull();\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n    paginated.Previous.Should().BeNull();\r\n    var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n    var expectedRetrievedIds = new List\u003Cint\u003E\r\n    {\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6,\r\n        7,\r\n        8,\r\n        9,\r\n        10\r\n    };\r\n    allRetrievedIds.Should().Equal(expectedRetrievedIds);\r\n    var paginatedNext = paginated.Next;\r\n    paginatedNext.Should().StartWith(\u0022https://www.willianantunes.com/?\u0022);\r\n    var paginationSetup = BuildPaginationSetup(paginated.Next)!;\r\n    paginationSetup.Reverse.Should().BeFalse();\r\n    int.Parse(paginationSetup.Position!).Should().Be(10);\r\n    int.Parse(paginationSetup.Limit!).Should().Be(_defaultPageLimit);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioOptions2",
        "Body": "{\r\n    // Arrange\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit, \u0022-Id\u0022);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(String.Empty);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().BeNull();\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n    paginated.Previous.Should().BeNull();\r\n    var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n    var expectedRetrievedIds = new List\u003Cint\u003E\r\n    {\r\n        50,\r\n        49,\r\n        48,\r\n        47,\r\n        46,\r\n        45,\r\n        44,\r\n        43,\r\n        42,\r\n        41\r\n    };\r\n    allRetrievedIds.Should().Equal(expectedRetrievedIds);\r\n    var paginatedNext = paginated.Next;\r\n    paginatedNext.Should().StartWith(\u0022https://www.willianantunes.com/?\u0022);\r\n    var paginationSetup = BuildPaginationSetup(paginated.Next)!;\r\n    paginationSetup.Reverse.Should().BeFalse();\r\n    int.Parse(paginationSetup.Position!).Should().Be(41);\r\n    int.Parse(paginationSetup.Limit!).Should().Be(_defaultPageLimit);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioOptions3",
        "Body": "{\r\n    // Arrange\r\n    var invalidField = \u0022-1Id\u0022;\r\n    var pattern = @\u0022^-?([a-zA-Z]\u002B)$\u0022;\r\n    // Act\r\n    Action act = () =\u003E new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit, invalidField);\r\n    ;\r\n    // Assert\r\n    var expectedMessage = $\u0022The field {invalidField} does not match the pattern: {pattern}\u0022;\r\n    act.Should().Throw\u003CProvidedFieldForOrderingIsWrongException\u003E().WithMessage(expectedMessage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioOptions4",
        "Body": "{\r\n    // Arrange\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var queryString = \u0022cursor=INVALID\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().BeNull();\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n    paginated.Previous.Should().BeNull();\r\n    var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n    var expectedRetrievedIds = new List\u003Cint\u003E\r\n    {\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6,\r\n        7,\r\n        8,\r\n        9,\r\n        10\r\n    };\r\n    allRetrievedIds.Should().Equal(expectedRetrievedIds);\r\n    var paginatedNext = paginated.Next;\r\n    paginatedNext.Should().StartWith(\u0022https://www.willianantunes.com/?\u0022);\r\n    var paginationSetup = BuildPaginationSetup(paginated.Next)!;\r\n    paginationSetup.Reverse.Should().BeFalse();\r\n    int.Parse(paginationSetup.Position!).Should().Be(10);\r\n    int.Parse(paginationSetup.Limit!).Should().Be(_defaultPageLimit);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation1",
        "Body": "{\r\n    // First arrangement\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(String.Empty);\r\n    var shouldGetNextPagination = true;\r\n    var listOfResults = new List\u003CList\u003Cint\u003E\u003E();\r\n    var listOfPrevious = new List\u003CPaginationSetup?\u003E();\r\n    var listOfNext = new List\u003CPaginationSetup?\u003E();\r\n    // Act\r\n    while (shouldGetNextPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().BeNull();\r\n        paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n        var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n        listOfResults.Add(allRetrievedIds);\r\n        listOfPrevious.Add(BuildPaginationSetup(paginated.Previous));\r\n        listOfNext.Add(BuildPaginationSetup(paginated.Next));\r\n        if (paginated.Next is null)\r\n            shouldGetNextPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Next.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003CPaginationSetup?\u003E\r\n    {\r\n        null,\r\n        new(true, \u002211\u0022, \u002210\u0022),\r\n        new(true, \u002221\u0022, \u002210\u0022),\r\n        new(true, \u002231\u0022, \u002210\u0022),\r\n        new(true, \u002241\u0022, \u002210\u0022),\r\n    };\r\n    var expectedListOfNext = new List\u003CPaginationSetup?\u003E\r\n    {\r\n        new(false, \u002210\u0022, \u002210\u0022),\r\n        new(false, \u002220\u0022, \u002210\u0022),\r\n        new(false, \u002230\u0022, \u002210\u0022),\r\n        new(false, \u002240\u0022, \u002210\u0022),\r\n        null\r\n    };\r\n    var expectedListOfResults = new List\u003CList\u003Cint\u003E\u003E\r\n    {\r\n        new()\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5,\r\n            6,\r\n            7,\r\n            8,\r\n            9,\r\n            10\r\n        },\r\n        new()\r\n        {\r\n            11,\r\n            12,\r\n            13,\r\n            14,\r\n            15,\r\n            16,\r\n            17,\r\n            18,\r\n            19,\r\n            20\r\n        },\r\n        new()\r\n        {\r\n            21,\r\n            22,\r\n            23,\r\n            24,\r\n            25,\r\n            26,\r\n            27,\r\n            28,\r\n            29,\r\n            30\r\n        },\r\n        new()\r\n        {\r\n            31,\r\n            32,\r\n            33,\r\n            34,\r\n            35,\r\n            36,\r\n            37,\r\n            38,\r\n            39,\r\n            40\r\n        },\r\n        new()\r\n        {\r\n            41,\r\n            42,\r\n            43,\r\n            44,\r\n            45,\r\n            46,\r\n            47,\r\n            48,\r\n            49,\r\n            50\r\n        },\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n    listOfResults.Should().HaveCount(5);\r\n    foreach (var(result, index)in listOfResults.Select((item, index) =\u003E (item, index)))\r\n        result.Should().Equal(expectedListOfResults[index]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation2",
        "Body": "{\r\n    // First arrangement\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit, \u0022-Id\u0022);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(String.Empty);\r\n    var shouldGetNextPagination = true;\r\n    var listOfResults = new List\u003CList\u003Cint\u003E\u003E();\r\n    var listOfPrevious = new List\u003CPaginationSetup?\u003E();\r\n    var listOfNext = new List\u003CPaginationSetup?\u003E();\r\n    // Act\r\n    while (shouldGetNextPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().BeNull();\r\n        paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n        var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n        listOfResults.Add(allRetrievedIds);\r\n        listOfPrevious.Add(BuildPaginationSetup(paginated.Previous));\r\n        listOfNext.Add(BuildPaginationSetup(paginated.Next));\r\n        if (paginated.Next is null)\r\n            shouldGetNextPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Next.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003CPaginationSetup?\u003E\r\n    {\r\n        null,\r\n        new(true, \u002240\u0022, \u002210\u0022),\r\n        new(true, \u002230\u0022, \u002210\u0022),\r\n        new(true, \u002220\u0022, \u002210\u0022),\r\n        new(true, \u002210\u0022, \u002210\u0022),\r\n    };\r\n    var expectedListOfNext = new List\u003CPaginationSetup?\u003E\r\n    {\r\n        new(false, \u002241\u0022, \u002210\u0022),\r\n        new(false, \u002231\u0022, \u002210\u0022),\r\n        new(false, \u002221\u0022, \u002210\u0022),\r\n        new(false, \u002211\u0022, \u002210\u0022),\r\n        null\r\n    };\r\n    var expectedListOfResults = new List\u003CList\u003Cint\u003E\u003E\r\n    {\r\n        new()\r\n        {\r\n            50,\r\n            49,\r\n            48,\r\n            47,\r\n            46,\r\n            45,\r\n            44,\r\n            43,\r\n            42,\r\n            41\r\n        },\r\n        new()\r\n        {\r\n            40,\r\n            39,\r\n            38,\r\n            37,\r\n            36,\r\n            35,\r\n            34,\r\n            33,\r\n            32,\r\n            31\r\n        },\r\n        new()\r\n        {\r\n            30,\r\n            29,\r\n            28,\r\n            27,\r\n            26,\r\n            25,\r\n            24,\r\n            23,\r\n            22,\r\n            21\r\n        },\r\n        new()\r\n        {\r\n            20,\r\n            19,\r\n            18,\r\n            17,\r\n            16,\r\n            15,\r\n            14,\r\n            13,\r\n            12,\r\n            11\r\n        },\r\n        new()\r\n        {\r\n            10,\r\n            9,\r\n            8,\r\n            7,\r\n            6,\r\n            5,\r\n            4,\r\n            3,\r\n            2,\r\n            1\r\n        },\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n    listOfResults.Should().HaveCount(5);\r\n    foreach (var(result, index)in listOfResults.Select((item, index) =\u003E (item, index)))\r\n        result.Should().Equal(expectedListOfResults[index]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation3",
        "Body": "{\r\n    // First arrangement\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var cursorQueryString = CreateCursorQueryString(true, \u002251\u0022);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(cursorQueryString);\r\n    var shouldGetPreviousPagination = true;\r\n    var listOfResults = new List\u003CList\u003Cint\u003E\u003E();\r\n    var listOfPrevious = new List\u003CPaginationSetup?\u003E();\r\n    var listOfNext = new List\u003CPaginationSetup?\u003E();\r\n    // Act\r\n    while (shouldGetPreviousPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().BeNull();\r\n        paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n        var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n        listOfResults.Add(allRetrievedIds);\r\n        listOfPrevious.Add(BuildPaginationSetup(paginated.Previous));\r\n        listOfNext.Add(BuildPaginationSetup(paginated.Next));\r\n        if (paginated.Previous is null)\r\n            shouldGetPreviousPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Previous.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003CPaginationSetup?\u003E\r\n    {\r\n        new(true, \u002241\u0022, \u002210\u0022),\r\n        new(true, \u002231\u0022, \u002210\u0022),\r\n        new(true, \u002221\u0022, \u002210\u0022),\r\n        new(true, \u002211\u0022, \u002210\u0022),\r\n        null,\r\n    };\r\n    var expectedListOfNext = new List\u003CPaginationSetup?\u003E\r\n    {\r\n        new(false, \u002250\u0022, \u002210\u0022),\r\n        new(false, \u002240\u0022, \u002210\u0022),\r\n        new(false, \u002230\u0022, \u002210\u0022),\r\n        new(false, \u002220\u0022, \u002210\u0022),\r\n        new(false, \u002210\u0022, \u002210\u0022),\r\n    };\r\n    var expectedListOfResults = new List\u003CList\u003Cint\u003E\u003E\r\n    {\r\n        new()\r\n        {\r\n            41,\r\n            42,\r\n            43,\r\n            44,\r\n            45,\r\n            46,\r\n            47,\r\n            48,\r\n            49,\r\n            50\r\n        },\r\n        new()\r\n        {\r\n            31,\r\n            32,\r\n            33,\r\n            34,\r\n            35,\r\n            36,\r\n            37,\r\n            38,\r\n            39,\r\n            40\r\n        },\r\n        new()\r\n        {\r\n            21,\r\n            22,\r\n            23,\r\n            24,\r\n            25,\r\n            26,\r\n            27,\r\n            28,\r\n            29,\r\n            30\r\n        },\r\n        new()\r\n        {\r\n            11,\r\n            12,\r\n            13,\r\n            14,\r\n            15,\r\n            16,\r\n            17,\r\n            18,\r\n            19,\r\n            20\r\n        },\r\n        new()\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5,\r\n            6,\r\n            7,\r\n            8,\r\n            9,\r\n            10\r\n        },\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n    foreach (var(result, index)in listOfResults.Select((item, index) =\u003E (item, index)))\r\n        result.Should().Equal(expectedListOfResults[index]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation4",
        "Body": "{\r\n    // First arrangement\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit, \u0022-Id\u0022);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var cursorQueryString = CreateCursorQueryString(true, \u00220\u0022);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(cursorQueryString);\r\n    var shouldGetPreviousPagination = true;\r\n    var listOfResults = new List\u003CList\u003Cint\u003E\u003E();\r\n    var listOfPrevious = new List\u003CPaginationSetup?\u003E();\r\n    var listOfNext = new List\u003CPaginationSetup?\u003E();\r\n    // Act\r\n    while (shouldGetPreviousPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().BeNull();\r\n        paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n        var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n        listOfResults.Add(allRetrievedIds);\r\n        listOfPrevious.Add(BuildPaginationSetup(paginated.Previous));\r\n        listOfNext.Add(BuildPaginationSetup(paginated.Next));\r\n        if (paginated.Previous is null)\r\n            shouldGetPreviousPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Previous.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003CPaginationSetup?\u003E\r\n    {\r\n        new(true, \u002210\u0022, \u002210\u0022),\r\n        new(true, \u002220\u0022, \u002210\u0022),\r\n        new(true, \u002230\u0022, \u002210\u0022),\r\n        new(true, \u002240\u0022, \u002210\u0022),\r\n        null,\r\n    };\r\n    var expectedListOfNext = new List\u003CPaginationSetup?\u003E\r\n    {\r\n        new(false, \u00221\u0022, \u002210\u0022),\r\n        new(false, \u002211\u0022, \u002210\u0022),\r\n        new(false, \u002221\u0022, \u002210\u0022),\r\n        new(false, \u002231\u0022, \u002210\u0022),\r\n        new(false, \u002241\u0022, \u002210\u0022),\r\n    };\r\n    var expectedListOfResults = new List\u003CList\u003Cint\u003E\u003E\r\n    {\r\n        new()\r\n        {\r\n            10,\r\n            9,\r\n            8,\r\n            7,\r\n            6,\r\n            5,\r\n            4,\r\n            3,\r\n            2,\r\n            1\r\n        },\r\n        new()\r\n        {\r\n            20,\r\n            19,\r\n            18,\r\n            17,\r\n            16,\r\n            15,\r\n            14,\r\n            13,\r\n            12,\r\n            11\r\n        },\r\n        new()\r\n        {\r\n            30,\r\n            29,\r\n            28,\r\n            27,\r\n            26,\r\n            25,\r\n            24,\r\n            23,\r\n            22,\r\n            21\r\n        },\r\n        new()\r\n        {\r\n            40,\r\n            39,\r\n            38,\r\n            37,\r\n            36,\r\n            35,\r\n            34,\r\n            33,\r\n            32,\r\n            31\r\n        },\r\n        new()\r\n        {\r\n            50,\r\n            49,\r\n            48,\r\n            47,\r\n            46,\r\n            45,\r\n            44,\r\n            43,\r\n            42,\r\n            41\r\n        },\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n    foreach (var(result, index)in listOfResults.Select((item, index) =\u003E (item, index)))\r\n        result.Should().Equal(expectedListOfResults[index]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation5",
        "Body": "{\r\n    // Arrange\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var cursorQueryString = CreateCursorQueryString(false, \u00221000\u0022);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(cursorQueryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().BeNull();\r\n    paginated.Results.Should().HaveCount(0);\r\n    paginated.Previous.Should().BeNull();\r\n    paginated.Next.Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation6",
        "Body": "{\r\n    // Arrange\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var cursorQueryString = CreateCursorQueryString(true, \u00221\u0022);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(cursorQueryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().BeNull();\r\n    paginated.Results.Should().HaveCount(0);\r\n    paginated.Previous.Should().BeNull();\r\n    paginated.Next.Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Navigations",
    "Message": null,
    "ProjectName": "Tests",
    "Methods": [
      {
        "Name": "ShouldCreatePaginatedScenarioOptions1",
        "Body": "{\r\n    // Arrange\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(String.Empty);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().BeNull();\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n    paginated.Previous.Should().BeNull();\r\n    var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n    var expectedRetrievedIds = new List\u003Cint\u003E\r\n    {\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6,\r\n        7,\r\n        8,\r\n        9,\r\n        10\r\n    };\r\n    allRetrievedIds.Should().Equal(expectedRetrievedIds);\r\n    var paginatedNext = paginated.Next;\r\n    paginatedNext.Should().StartWith(\u0022https://www.willianantunes.com/?\u0022);\r\n    var paginationSetup = BuildPaginationSetup(paginated.Next)!;\r\n    paginationSetup.Reverse.Should().BeFalse();\r\n    int.Parse(paginationSetup.Position!).Should().Be(10);\r\n    int.Parse(paginationSetup.Limit!).Should().Be(_defaultPageLimit);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioOptions2",
        "Body": "{\r\n    // Arrange\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit, \u0022-Id\u0022);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(String.Empty);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().BeNull();\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n    paginated.Previous.Should().BeNull();\r\n    var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n    var expectedRetrievedIds = new List\u003Cint\u003E\r\n    {\r\n        50,\r\n        49,\r\n        48,\r\n        47,\r\n        46,\r\n        45,\r\n        44,\r\n        43,\r\n        42,\r\n        41\r\n    };\r\n    allRetrievedIds.Should().Equal(expectedRetrievedIds);\r\n    var paginatedNext = paginated.Next;\r\n    paginatedNext.Should().StartWith(\u0022https://www.willianantunes.com/?\u0022);\r\n    var paginationSetup = BuildPaginationSetup(paginated.Next)!;\r\n    paginationSetup.Reverse.Should().BeFalse();\r\n    int.Parse(paginationSetup.Position!).Should().Be(41);\r\n    int.Parse(paginationSetup.Limit!).Should().Be(_defaultPageLimit);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioOptions3",
        "Body": "{\r\n    // Arrange\r\n    var invalidField = \u0022-1Id\u0022;\r\n    var pattern = @\u0022^-?([a-zA-Z]\u002B)$\u0022;\r\n    // Act\r\n    Action act = () =\u003E new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit, invalidField);\r\n    ;\r\n    // Assert\r\n    var expectedMessage = $\u0022The field {invalidField} does not match the pattern: {pattern}\u0022;\r\n    act.Should().Throw\u003CProvidedFieldForOrderingIsWrongException\u003E().WithMessage(expectedMessage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioOptions4",
        "Body": "{\r\n    // Arrange\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var queryString = \u0022cursor=INVALID\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().BeNull();\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n    paginated.Previous.Should().BeNull();\r\n    var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n    var expectedRetrievedIds = new List\u003Cint\u003E\r\n    {\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6,\r\n        7,\r\n        8,\r\n        9,\r\n        10\r\n    };\r\n    allRetrievedIds.Should().Equal(expectedRetrievedIds);\r\n    var paginatedNext = paginated.Next;\r\n    paginatedNext.Should().StartWith(\u0022https://www.willianantunes.com/?\u0022);\r\n    var paginationSetup = BuildPaginationSetup(paginated.Next)!;\r\n    paginationSetup.Reverse.Should().BeFalse();\r\n    int.Parse(paginationSetup.Position!).Should().Be(10);\r\n    int.Parse(paginationSetup.Limit!).Should().Be(_defaultPageLimit);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation1",
        "Body": "{\r\n    // First arrangement\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(String.Empty);\r\n    var shouldGetNextPagination = true;\r\n    var listOfResults = new List\u003CList\u003Cint\u003E\u003E();\r\n    var listOfPrevious = new List\u003CPaginationSetup?\u003E();\r\n    var listOfNext = new List\u003CPaginationSetup?\u003E();\r\n    // Act\r\n    while (shouldGetNextPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().BeNull();\r\n        paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n        var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n        listOfResults.Add(allRetrievedIds);\r\n        listOfPrevious.Add(BuildPaginationSetup(paginated.Previous));\r\n        listOfNext.Add(BuildPaginationSetup(paginated.Next));\r\n        if (paginated.Next is null)\r\n            shouldGetNextPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Next.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003CPaginationSetup?\u003E\r\n    {\r\n        null,\r\n        new(true, \u002211\u0022, \u002210\u0022),\r\n        new(true, \u002221\u0022, \u002210\u0022),\r\n        new(true, \u002231\u0022, \u002210\u0022),\r\n        new(true, \u002241\u0022, \u002210\u0022),\r\n    };\r\n    var expectedListOfNext = new List\u003CPaginationSetup?\u003E\r\n    {\r\n        new(false, \u002210\u0022, \u002210\u0022),\r\n        new(false, \u002220\u0022, \u002210\u0022),\r\n        new(false, \u002230\u0022, \u002210\u0022),\r\n        new(false, \u002240\u0022, \u002210\u0022),\r\n        null\r\n    };\r\n    var expectedListOfResults = new List\u003CList\u003Cint\u003E\u003E\r\n    {\r\n        new()\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5,\r\n            6,\r\n            7,\r\n            8,\r\n            9,\r\n            10\r\n        },\r\n        new()\r\n        {\r\n            11,\r\n            12,\r\n            13,\r\n            14,\r\n            15,\r\n            16,\r\n            17,\r\n            18,\r\n            19,\r\n            20\r\n        },\r\n        new()\r\n        {\r\n            21,\r\n            22,\r\n            23,\r\n            24,\r\n            25,\r\n            26,\r\n            27,\r\n            28,\r\n            29,\r\n            30\r\n        },\r\n        new()\r\n        {\r\n            31,\r\n            32,\r\n            33,\r\n            34,\r\n            35,\r\n            36,\r\n            37,\r\n            38,\r\n            39,\r\n            40\r\n        },\r\n        new()\r\n        {\r\n            41,\r\n            42,\r\n            43,\r\n            44,\r\n            45,\r\n            46,\r\n            47,\r\n            48,\r\n            49,\r\n            50\r\n        },\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n    listOfResults.Should().HaveCount(5);\r\n    foreach (var(result, index)in listOfResults.Select((item, index) =\u003E (item, index)))\r\n        result.Should().Equal(expectedListOfResults[index]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation2",
        "Body": "{\r\n    // First arrangement\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit, \u0022-Id\u0022);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(String.Empty);\r\n    var shouldGetNextPagination = true;\r\n    var listOfResults = new List\u003CList\u003Cint\u003E\u003E();\r\n    var listOfPrevious = new List\u003CPaginationSetup?\u003E();\r\n    var listOfNext = new List\u003CPaginationSetup?\u003E();\r\n    // Act\r\n    while (shouldGetNextPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().BeNull();\r\n        paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n        var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n        listOfResults.Add(allRetrievedIds);\r\n        listOfPrevious.Add(BuildPaginationSetup(paginated.Previous));\r\n        listOfNext.Add(BuildPaginationSetup(paginated.Next));\r\n        if (paginated.Next is null)\r\n            shouldGetNextPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Next.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003CPaginationSetup?\u003E\r\n    {\r\n        null,\r\n        new(true, \u002240\u0022, \u002210\u0022),\r\n        new(true, \u002230\u0022, \u002210\u0022),\r\n        new(true, \u002220\u0022, \u002210\u0022),\r\n        new(true, \u002210\u0022, \u002210\u0022),\r\n    };\r\n    var expectedListOfNext = new List\u003CPaginationSetup?\u003E\r\n    {\r\n        new(false, \u002241\u0022, \u002210\u0022),\r\n        new(false, \u002231\u0022, \u002210\u0022),\r\n        new(false, \u002221\u0022, \u002210\u0022),\r\n        new(false, \u002211\u0022, \u002210\u0022),\r\n        null\r\n    };\r\n    var expectedListOfResults = new List\u003CList\u003Cint\u003E\u003E\r\n    {\r\n        new()\r\n        {\r\n            50,\r\n            49,\r\n            48,\r\n            47,\r\n            46,\r\n            45,\r\n            44,\r\n            43,\r\n            42,\r\n            41\r\n        },\r\n        new()\r\n        {\r\n            40,\r\n            39,\r\n            38,\r\n            37,\r\n            36,\r\n            35,\r\n            34,\r\n            33,\r\n            32,\r\n            31\r\n        },\r\n        new()\r\n        {\r\n            30,\r\n            29,\r\n            28,\r\n            27,\r\n            26,\r\n            25,\r\n            24,\r\n            23,\r\n            22,\r\n            21\r\n        },\r\n        new()\r\n        {\r\n            20,\r\n            19,\r\n            18,\r\n            17,\r\n            16,\r\n            15,\r\n            14,\r\n            13,\r\n            12,\r\n            11\r\n        },\r\n        new()\r\n        {\r\n            10,\r\n            9,\r\n            8,\r\n            7,\r\n            6,\r\n            5,\r\n            4,\r\n            3,\r\n            2,\r\n            1\r\n        },\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n    listOfResults.Should().HaveCount(5);\r\n    foreach (var(result, index)in listOfResults.Select((item, index) =\u003E (item, index)))\r\n        result.Should().Equal(expectedListOfResults[index]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation3",
        "Body": "{\r\n    // First arrangement\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var cursorQueryString = CreateCursorQueryString(true, \u002251\u0022);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(cursorQueryString);\r\n    var shouldGetPreviousPagination = true;\r\n    var listOfResults = new List\u003CList\u003Cint\u003E\u003E();\r\n    var listOfPrevious = new List\u003CPaginationSetup?\u003E();\r\n    var listOfNext = new List\u003CPaginationSetup?\u003E();\r\n    // Act\r\n    while (shouldGetPreviousPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().BeNull();\r\n        paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n        var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n        listOfResults.Add(allRetrievedIds);\r\n        listOfPrevious.Add(BuildPaginationSetup(paginated.Previous));\r\n        listOfNext.Add(BuildPaginationSetup(paginated.Next));\r\n        if (paginated.Previous is null)\r\n            shouldGetPreviousPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Previous.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003CPaginationSetup?\u003E\r\n    {\r\n        new(true, \u002241\u0022, \u002210\u0022),\r\n        new(true, \u002231\u0022, \u002210\u0022),\r\n        new(true, \u002221\u0022, \u002210\u0022),\r\n        new(true, \u002211\u0022, \u002210\u0022),\r\n        null,\r\n    };\r\n    var expectedListOfNext = new List\u003CPaginationSetup?\u003E\r\n    {\r\n        new(false, \u002250\u0022, \u002210\u0022),\r\n        new(false, \u002240\u0022, \u002210\u0022),\r\n        new(false, \u002230\u0022, \u002210\u0022),\r\n        new(false, \u002220\u0022, \u002210\u0022),\r\n        new(false, \u002210\u0022, \u002210\u0022),\r\n    };\r\n    var expectedListOfResults = new List\u003CList\u003Cint\u003E\u003E\r\n    {\r\n        new()\r\n        {\r\n            41,\r\n            42,\r\n            43,\r\n            44,\r\n            45,\r\n            46,\r\n            47,\r\n            48,\r\n            49,\r\n            50\r\n        },\r\n        new()\r\n        {\r\n            31,\r\n            32,\r\n            33,\r\n            34,\r\n            35,\r\n            36,\r\n            37,\r\n            38,\r\n            39,\r\n            40\r\n        },\r\n        new()\r\n        {\r\n            21,\r\n            22,\r\n            23,\r\n            24,\r\n            25,\r\n            26,\r\n            27,\r\n            28,\r\n            29,\r\n            30\r\n        },\r\n        new()\r\n        {\r\n            11,\r\n            12,\r\n            13,\r\n            14,\r\n            15,\r\n            16,\r\n            17,\r\n            18,\r\n            19,\r\n            20\r\n        },\r\n        new()\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5,\r\n            6,\r\n            7,\r\n            8,\r\n            9,\r\n            10\r\n        },\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n    foreach (var(result, index)in listOfResults.Select((item, index) =\u003E (item, index)))\r\n        result.Should().Equal(expectedListOfResults[index]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation4",
        "Body": "{\r\n    // First arrangement\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit, \u0022-Id\u0022);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var cursorQueryString = CreateCursorQueryString(true, \u00220\u0022);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(cursorQueryString);\r\n    var shouldGetPreviousPagination = true;\r\n    var listOfResults = new List\u003CList\u003Cint\u003E\u003E();\r\n    var listOfPrevious = new List\u003CPaginationSetup?\u003E();\r\n    var listOfNext = new List\u003CPaginationSetup?\u003E();\r\n    // Act\r\n    while (shouldGetPreviousPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().BeNull();\r\n        paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n        var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n        listOfResults.Add(allRetrievedIds);\r\n        listOfPrevious.Add(BuildPaginationSetup(paginated.Previous));\r\n        listOfNext.Add(BuildPaginationSetup(paginated.Next));\r\n        if (paginated.Previous is null)\r\n            shouldGetPreviousPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Previous.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003CPaginationSetup?\u003E\r\n    {\r\n        new(true, \u002210\u0022, \u002210\u0022),\r\n        new(true, \u002220\u0022, \u002210\u0022),\r\n        new(true, \u002230\u0022, \u002210\u0022),\r\n        new(true, \u002240\u0022, \u002210\u0022),\r\n        null,\r\n    };\r\n    var expectedListOfNext = new List\u003CPaginationSetup?\u003E\r\n    {\r\n        new(false, \u00221\u0022, \u002210\u0022),\r\n        new(false, \u002211\u0022, \u002210\u0022),\r\n        new(false, \u002221\u0022, \u002210\u0022),\r\n        new(false, \u002231\u0022, \u002210\u0022),\r\n        new(false, \u002241\u0022, \u002210\u0022),\r\n    };\r\n    var expectedListOfResults = new List\u003CList\u003Cint\u003E\u003E\r\n    {\r\n        new()\r\n        {\r\n            10,\r\n            9,\r\n            8,\r\n            7,\r\n            6,\r\n            5,\r\n            4,\r\n            3,\r\n            2,\r\n            1\r\n        },\r\n        new()\r\n        {\r\n            20,\r\n            19,\r\n            18,\r\n            17,\r\n            16,\r\n            15,\r\n            14,\r\n            13,\r\n            12,\r\n            11\r\n        },\r\n        new()\r\n        {\r\n            30,\r\n            29,\r\n            28,\r\n            27,\r\n            26,\r\n            25,\r\n            24,\r\n            23,\r\n            22,\r\n            21\r\n        },\r\n        new()\r\n        {\r\n            40,\r\n            39,\r\n            38,\r\n            37,\r\n            36,\r\n            35,\r\n            34,\r\n            33,\r\n            32,\r\n            31\r\n        },\r\n        new()\r\n        {\r\n            50,\r\n            49,\r\n            48,\r\n            47,\r\n            46,\r\n            45,\r\n            44,\r\n            43,\r\n            42,\r\n            41\r\n        },\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n    foreach (var(result, index)in listOfResults.Select((item, index) =\u003E (item, index)))\r\n        result.Should().Equal(expectedListOfResults[index]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation5",
        "Body": "{\r\n    // Arrange\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var cursorQueryString = CreateCursorQueryString(false, \u00221000\u0022);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(cursorQueryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().BeNull();\r\n    paginated.Results.Should().HaveCount(0);\r\n    paginated.Previous.Should().BeNull();\r\n    paginated.Next.Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation6",
        "Body": "{\r\n    // Arrange\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var cursorQueryString = CreateCursorQueryString(true, \u00221\u0022);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(cursorQueryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().BeNull();\r\n    paginated.Results.Should().HaveCount(0);\r\n    paginated.Previous.Should().BeNull();\r\n    paginated.Next.Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CursorPaginationITests",
    "Message": null,
    "ProjectName": "Tests",
    "Methods": [
      {
        "Name": "ShouldCreatePaginatedScenarioOptions1",
        "Body": "{\r\n    // Arrange\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(String.Empty);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().BeNull();\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n    paginated.Previous.Should().BeNull();\r\n    var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n    var expectedRetrievedIds = new List\u003Cint\u003E\r\n    {\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6,\r\n        7,\r\n        8,\r\n        9,\r\n        10\r\n    };\r\n    allRetrievedIds.Should().Equal(expectedRetrievedIds);\r\n    var paginatedNext = paginated.Next;\r\n    paginatedNext.Should().StartWith(\u0022https://www.willianantunes.com/?\u0022);\r\n    var paginationSetup = BuildPaginationSetup(paginated.Next)!;\r\n    paginationSetup.Reverse.Should().BeFalse();\r\n    int.Parse(paginationSetup.Position!).Should().Be(10);\r\n    int.Parse(paginationSetup.Limit!).Should().Be(_defaultPageLimit);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioOptions2",
        "Body": "{\r\n    // Arrange\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit, \u0022-Id\u0022);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(String.Empty);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().BeNull();\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n    paginated.Previous.Should().BeNull();\r\n    var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n    var expectedRetrievedIds = new List\u003Cint\u003E\r\n    {\r\n        50,\r\n        49,\r\n        48,\r\n        47,\r\n        46,\r\n        45,\r\n        44,\r\n        43,\r\n        42,\r\n        41\r\n    };\r\n    allRetrievedIds.Should().Equal(expectedRetrievedIds);\r\n    var paginatedNext = paginated.Next;\r\n    paginatedNext.Should().StartWith(\u0022https://www.willianantunes.com/?\u0022);\r\n    var paginationSetup = BuildPaginationSetup(paginated.Next)!;\r\n    paginationSetup.Reverse.Should().BeFalse();\r\n    int.Parse(paginationSetup.Position!).Should().Be(41);\r\n    int.Parse(paginationSetup.Limit!).Should().Be(_defaultPageLimit);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioOptions3",
        "Body": "{\r\n    // Arrange\r\n    var invalidField = \u0022-1Id\u0022;\r\n    var pattern = @\u0022^-?([a-zA-Z]\u002B)$\u0022;\r\n    // Act\r\n    Action act = () =\u003E new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit, invalidField);\r\n    ;\r\n    // Assert\r\n    var expectedMessage = $\u0022The field {invalidField} does not match the pattern: {pattern}\u0022;\r\n    act.Should().Throw\u003CProvidedFieldForOrderingIsWrongException\u003E().WithMessage(expectedMessage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioOptions4",
        "Body": "{\r\n    // Arrange\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var queryString = \u0022cursor=INVALID\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().BeNull();\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n    paginated.Previous.Should().BeNull();\r\n    var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n    var expectedRetrievedIds = new List\u003Cint\u003E\r\n    {\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6,\r\n        7,\r\n        8,\r\n        9,\r\n        10\r\n    };\r\n    allRetrievedIds.Should().Equal(expectedRetrievedIds);\r\n    var paginatedNext = paginated.Next;\r\n    paginatedNext.Should().StartWith(\u0022https://www.willianantunes.com/?\u0022);\r\n    var paginationSetup = BuildPaginationSetup(paginated.Next)!;\r\n    paginationSetup.Reverse.Should().BeFalse();\r\n    int.Parse(paginationSetup.Position!).Should().Be(10);\r\n    int.Parse(paginationSetup.Limit!).Should().Be(_defaultPageLimit);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation1",
        "Body": "{\r\n    // First arrangement\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(String.Empty);\r\n    var shouldGetNextPagination = true;\r\n    var listOfResults = new List\u003CList\u003Cint\u003E\u003E();\r\n    var listOfPrevious = new List\u003CPaginationSetup?\u003E();\r\n    var listOfNext = new List\u003CPaginationSetup?\u003E();\r\n    // Act\r\n    while (shouldGetNextPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().BeNull();\r\n        paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n        var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n        listOfResults.Add(allRetrievedIds);\r\n        listOfPrevious.Add(BuildPaginationSetup(paginated.Previous));\r\n        listOfNext.Add(BuildPaginationSetup(paginated.Next));\r\n        if (paginated.Next is null)\r\n            shouldGetNextPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Next.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003CPaginationSetup?\u003E\r\n    {\r\n        null,\r\n        new(true, \u002211\u0022, \u002210\u0022),\r\n        new(true, \u002221\u0022, \u002210\u0022),\r\n        new(true, \u002231\u0022, \u002210\u0022),\r\n        new(true, \u002241\u0022, \u002210\u0022),\r\n    };\r\n    var expectedListOfNext = new List\u003CPaginationSetup?\u003E\r\n    {\r\n        new(false, \u002210\u0022, \u002210\u0022),\r\n        new(false, \u002220\u0022, \u002210\u0022),\r\n        new(false, \u002230\u0022, \u002210\u0022),\r\n        new(false, \u002240\u0022, \u002210\u0022),\r\n        null\r\n    };\r\n    var expectedListOfResults = new List\u003CList\u003Cint\u003E\u003E\r\n    {\r\n        new()\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5,\r\n            6,\r\n            7,\r\n            8,\r\n            9,\r\n            10\r\n        },\r\n        new()\r\n        {\r\n            11,\r\n            12,\r\n            13,\r\n            14,\r\n            15,\r\n            16,\r\n            17,\r\n            18,\r\n            19,\r\n            20\r\n        },\r\n        new()\r\n        {\r\n            21,\r\n            22,\r\n            23,\r\n            24,\r\n            25,\r\n            26,\r\n            27,\r\n            28,\r\n            29,\r\n            30\r\n        },\r\n        new()\r\n        {\r\n            31,\r\n            32,\r\n            33,\r\n            34,\r\n            35,\r\n            36,\r\n            37,\r\n            38,\r\n            39,\r\n            40\r\n        },\r\n        new()\r\n        {\r\n            41,\r\n            42,\r\n            43,\r\n            44,\r\n            45,\r\n            46,\r\n            47,\r\n            48,\r\n            49,\r\n            50\r\n        },\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n    listOfResults.Should().HaveCount(5);\r\n    foreach (var(result, index)in listOfResults.Select((item, index) =\u003E (item, index)))\r\n        result.Should().Equal(expectedListOfResults[index]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation2",
        "Body": "{\r\n    // First arrangement\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit, \u0022-Id\u0022);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(String.Empty);\r\n    var shouldGetNextPagination = true;\r\n    var listOfResults = new List\u003CList\u003Cint\u003E\u003E();\r\n    var listOfPrevious = new List\u003CPaginationSetup?\u003E();\r\n    var listOfNext = new List\u003CPaginationSetup?\u003E();\r\n    // Act\r\n    while (shouldGetNextPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().BeNull();\r\n        paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n        var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n        listOfResults.Add(allRetrievedIds);\r\n        listOfPrevious.Add(BuildPaginationSetup(paginated.Previous));\r\n        listOfNext.Add(BuildPaginationSetup(paginated.Next));\r\n        if (paginated.Next is null)\r\n            shouldGetNextPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Next.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003CPaginationSetup?\u003E\r\n    {\r\n        null,\r\n        new(true, \u002240\u0022, \u002210\u0022),\r\n        new(true, \u002230\u0022, \u002210\u0022),\r\n        new(true, \u002220\u0022, \u002210\u0022),\r\n        new(true, \u002210\u0022, \u002210\u0022),\r\n    };\r\n    var expectedListOfNext = new List\u003CPaginationSetup?\u003E\r\n    {\r\n        new(false, \u002241\u0022, \u002210\u0022),\r\n        new(false, \u002231\u0022, \u002210\u0022),\r\n        new(false, \u002221\u0022, \u002210\u0022),\r\n        new(false, \u002211\u0022, \u002210\u0022),\r\n        null\r\n    };\r\n    var expectedListOfResults = new List\u003CList\u003Cint\u003E\u003E\r\n    {\r\n        new()\r\n        {\r\n            50,\r\n            49,\r\n            48,\r\n            47,\r\n            46,\r\n            45,\r\n            44,\r\n            43,\r\n            42,\r\n            41\r\n        },\r\n        new()\r\n        {\r\n            40,\r\n            39,\r\n            38,\r\n            37,\r\n            36,\r\n            35,\r\n            34,\r\n            33,\r\n            32,\r\n            31\r\n        },\r\n        new()\r\n        {\r\n            30,\r\n            29,\r\n            28,\r\n            27,\r\n            26,\r\n            25,\r\n            24,\r\n            23,\r\n            22,\r\n            21\r\n        },\r\n        new()\r\n        {\r\n            20,\r\n            19,\r\n            18,\r\n            17,\r\n            16,\r\n            15,\r\n            14,\r\n            13,\r\n            12,\r\n            11\r\n        },\r\n        new()\r\n        {\r\n            10,\r\n            9,\r\n            8,\r\n            7,\r\n            6,\r\n            5,\r\n            4,\r\n            3,\r\n            2,\r\n            1\r\n        },\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n    listOfResults.Should().HaveCount(5);\r\n    foreach (var(result, index)in listOfResults.Select((item, index) =\u003E (item, index)))\r\n        result.Should().Equal(expectedListOfResults[index]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation3",
        "Body": "{\r\n    // First arrangement\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var cursorQueryString = CreateCursorQueryString(true, \u002251\u0022);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(cursorQueryString);\r\n    var shouldGetPreviousPagination = true;\r\n    var listOfResults = new List\u003CList\u003Cint\u003E\u003E();\r\n    var listOfPrevious = new List\u003CPaginationSetup?\u003E();\r\n    var listOfNext = new List\u003CPaginationSetup?\u003E();\r\n    // Act\r\n    while (shouldGetPreviousPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().BeNull();\r\n        paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n        var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n        listOfResults.Add(allRetrievedIds);\r\n        listOfPrevious.Add(BuildPaginationSetup(paginated.Previous));\r\n        listOfNext.Add(BuildPaginationSetup(paginated.Next));\r\n        if (paginated.Previous is null)\r\n            shouldGetPreviousPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Previous.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003CPaginationSetup?\u003E\r\n    {\r\n        new(true, \u002241\u0022, \u002210\u0022),\r\n        new(true, \u002231\u0022, \u002210\u0022),\r\n        new(true, \u002221\u0022, \u002210\u0022),\r\n        new(true, \u002211\u0022, \u002210\u0022),\r\n        null,\r\n    };\r\n    var expectedListOfNext = new List\u003CPaginationSetup?\u003E\r\n    {\r\n        new(false, \u002250\u0022, \u002210\u0022),\r\n        new(false, \u002240\u0022, \u002210\u0022),\r\n        new(false, \u002230\u0022, \u002210\u0022),\r\n        new(false, \u002220\u0022, \u002210\u0022),\r\n        new(false, \u002210\u0022, \u002210\u0022),\r\n    };\r\n    var expectedListOfResults = new List\u003CList\u003Cint\u003E\u003E\r\n    {\r\n        new()\r\n        {\r\n            41,\r\n            42,\r\n            43,\r\n            44,\r\n            45,\r\n            46,\r\n            47,\r\n            48,\r\n            49,\r\n            50\r\n        },\r\n        new()\r\n        {\r\n            31,\r\n            32,\r\n            33,\r\n            34,\r\n            35,\r\n            36,\r\n            37,\r\n            38,\r\n            39,\r\n            40\r\n        },\r\n        new()\r\n        {\r\n            21,\r\n            22,\r\n            23,\r\n            24,\r\n            25,\r\n            26,\r\n            27,\r\n            28,\r\n            29,\r\n            30\r\n        },\r\n        new()\r\n        {\r\n            11,\r\n            12,\r\n            13,\r\n            14,\r\n            15,\r\n            16,\r\n            17,\r\n            18,\r\n            19,\r\n            20\r\n        },\r\n        new()\r\n        {\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5,\r\n            6,\r\n            7,\r\n            8,\r\n            9,\r\n            10\r\n        },\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n    foreach (var(result, index)in listOfResults.Select((item, index) =\u003E (item, index)))\r\n        result.Should().Equal(expectedListOfResults[index]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation4",
        "Body": "{\r\n    // First arrangement\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit, \u0022-Id\u0022);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var cursorQueryString = CreateCursorQueryString(true, \u00220\u0022);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(cursorQueryString);\r\n    var shouldGetPreviousPagination = true;\r\n    var listOfResults = new List\u003CList\u003Cint\u003E\u003E();\r\n    var listOfPrevious = new List\u003CPaginationSetup?\u003E();\r\n    var listOfNext = new List\u003CPaginationSetup?\u003E();\r\n    // Act\r\n    while (shouldGetPreviousPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().BeNull();\r\n        paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n        var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n        listOfResults.Add(allRetrievedIds);\r\n        listOfPrevious.Add(BuildPaginationSetup(paginated.Previous));\r\n        listOfNext.Add(BuildPaginationSetup(paginated.Next));\r\n        if (paginated.Previous is null)\r\n            shouldGetPreviousPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Previous.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003CPaginationSetup?\u003E\r\n    {\r\n        new(true, \u002210\u0022, \u002210\u0022),\r\n        new(true, \u002220\u0022, \u002210\u0022),\r\n        new(true, \u002230\u0022, \u002210\u0022),\r\n        new(true, \u002240\u0022, \u002210\u0022),\r\n        null,\r\n    };\r\n    var expectedListOfNext = new List\u003CPaginationSetup?\u003E\r\n    {\r\n        new(false, \u00221\u0022, \u002210\u0022),\r\n        new(false, \u002211\u0022, \u002210\u0022),\r\n        new(false, \u002221\u0022, \u002210\u0022),\r\n        new(false, \u002231\u0022, \u002210\u0022),\r\n        new(false, \u002241\u0022, \u002210\u0022),\r\n    };\r\n    var expectedListOfResults = new List\u003CList\u003Cint\u003E\u003E\r\n    {\r\n        new()\r\n        {\r\n            10,\r\n            9,\r\n            8,\r\n            7,\r\n            6,\r\n            5,\r\n            4,\r\n            3,\r\n            2,\r\n            1\r\n        },\r\n        new()\r\n        {\r\n            20,\r\n            19,\r\n            18,\r\n            17,\r\n            16,\r\n            15,\r\n            14,\r\n            13,\r\n            12,\r\n            11\r\n        },\r\n        new()\r\n        {\r\n            30,\r\n            29,\r\n            28,\r\n            27,\r\n            26,\r\n            25,\r\n            24,\r\n            23,\r\n            22,\r\n            21\r\n        },\r\n        new()\r\n        {\r\n            40,\r\n            39,\r\n            38,\r\n            37,\r\n            36,\r\n            35,\r\n            34,\r\n            33,\r\n            32,\r\n            31\r\n        },\r\n        new()\r\n        {\r\n            50,\r\n            49,\r\n            48,\r\n            47,\r\n            46,\r\n            45,\r\n            44,\r\n            43,\r\n            42,\r\n            41\r\n        },\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n    foreach (var(result, index)in listOfResults.Select((item, index) =\u003E (item, index)))\r\n        result.Should().Equal(expectedListOfResults[index]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation5",
        "Body": "{\r\n    // Arrange\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var cursorQueryString = CreateCursorQueryString(false, \u00221000\u0022);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(cursorQueryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().BeNull();\r\n    paginated.Results.Should().HaveCount(0);\r\n    paginated.Previous.Should().BeNull();\r\n    paginated.Next.Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation6",
        "Body": "{\r\n    // Arrange\r\n    _pagination = new CursorPagination(_defaultPageLimit, _defaultMaxPageLimit);\r\n    var query = await CreateScenarioWith50Situations(_dbContext);\r\n    var cursorQueryString = CreateCursorQueryString(true, \u00221\u0022);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(cursorQueryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().BeNull();\r\n    paginated.Results.Should().HaveCount(0);\r\n    paginated.Previous.Should().BeNull();\r\n    paginated.Next.Should().BeNull();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Options",
    "Message": null,
    "ProjectName": "Tests",
    "Methods": [
      {
        "Name": "ShouldCreatePaginatedScenarioOptions1",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(String.Empty);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n    paginated.Previous.Should().BeNull();\r\n    var expectedNext = $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022;\r\n    paginated.Next.Should().Be(expectedNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioOptions2",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryString = \u0022offset=jafar\u0026limit=aladdin\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n    paginated.Previous.Should().BeNull();\r\n    var expectedNext = $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022;\r\n    paginated.Next.Should().Be(expectedNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioOptions3",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var offsetValue = 23;\r\n    var queryString = $\u0022offset={offsetValue}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n    var expectedPrevious = $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={offsetValue - _defaultPageLimit}\u0022;\r\n    paginated.Previous.Should().Be(expectedPrevious);\r\n    var expectedNext = $\u0022{_url}/?limit=10\u0026offset={offsetValue \u002B _defaultPageLimit}\u0022;\r\n    paginated.Next.Should().Be(expectedNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioOptions4",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryString = \u0022limit=1000\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    paginated.Results.Should().HaveCount(_defaultMaxPageLimit);\r\n    paginated.Previous.Should().BeNull();\r\n    var expectedNext = $\u0022{_url}/?limit={_defaultMaxPageLimit}\u0026offset={_defaultMaxPageLimit}\u0022;\r\n    paginated.Next.Should().Be(expectedNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation1",
        "Body": "{\r\n    // First arrangement\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(String.Empty);\r\n    var shouldGetNextPagination = true;\r\n    var listOfPrevious = new List\u003Cstring\u003E();\r\n    var listOfNext = new List\u003Cstring\u003E();\r\n    // Act\r\n    while (shouldGetNextPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().Be(50);\r\n        paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n        listOfPrevious.Add(paginated.Previous);\r\n        listOfNext.Add(paginated.Next);\r\n        if (paginated.Next is null)\r\n            shouldGetNextPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Next.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003Cstring\u003E\r\n    {\r\n        null,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 1)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 2)}\u0022,\r\n    };\r\n    var expectedListOfNext = new List\u003Cstring\u003E\r\n    {\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 1)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 2)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 3)}\u0022,\r\n        null\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation2",
        "Body": "{\r\n    // First arrangement\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var robotPersonFilter = true;\r\n    var filterQueryString = $\u0022robot={robotPersonFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    var shouldGetNextPagination = true;\r\n    var listOfResults = new List\u003CList\u003Cint\u003E\u003E();\r\n    var listOfPrevious = new List\u003Cstring?\u003E();\r\n    var listOfNext = new List\u003Cstring?\u003E();\r\n    // Act\r\n    while (shouldGetNextPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().Be(25);\r\n        var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n        listOfResults.Add(allRetrievedIds);\r\n        listOfPrevious.Add(paginated.Previous);\r\n        listOfNext.Add(paginated.Next);\r\n        if (paginated.Next is null)\r\n            shouldGetNextPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Next.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003Cstring?\u003E\r\n    {\r\n        null,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n    };\r\n    var expectedListOfNext = new List\u003Cstring?\u003E\r\n    {\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B _defaultPageLimit}\u0022,\r\n        null\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n    listOfResults.Should().HaveCount(3);\r\n    var expectedListOfResults = new List\u003CList\u003Cint\u003E\u003E\r\n    {\r\n        new()\r\n        {\r\n            2,\r\n            4,\r\n            6,\r\n            8,\r\n            10,\r\n            12,\r\n            14,\r\n            16,\r\n            18,\r\n            20\r\n        },\r\n        new()\r\n        {\r\n            22,\r\n            24,\r\n            26,\r\n            28,\r\n            30,\r\n            32,\r\n            34,\r\n            36,\r\n            38,\r\n            40\r\n        },\r\n        new()\r\n        {\r\n            42,\r\n            44,\r\n            46,\r\n            48,\r\n            50\r\n        },\r\n    };\r\n    foreach (var(result, index)in listOfResults.Select((item, index) =\u003E (item, index)))\r\n        result.Should().Equal(expectedListOfResults[index]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation3",
        "Body": "{\r\n    // First arrangement\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryString = \u0022offset=40\u0026limit=10\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    var shouldGetPreviousPagination = true;\r\n    var listOfPrevious = new List\u003Cstring\u003E();\r\n    var listOfNext = new List\u003Cstring\u003E();\r\n    // Act\r\n    while (shouldGetPreviousPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().Be(50);\r\n        paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n        listOfPrevious.Add(paginated.Previous);\r\n        listOfNext.Add(paginated.Next);\r\n        if (paginated.Previous is null)\r\n            shouldGetPreviousPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Previous.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003Cstring\u003E\r\n    {\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 2)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 1)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0022,\r\n        null,\r\n    };\r\n    var expectedListOfNext = new List\u003Cstring\u003E\r\n    {\r\n        null,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 3)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 2)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 1)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation4",
        "Body": "{\r\n    // First arrangement\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var robotPersonFilter = true;\r\n    var queryString = $\u0022robot={robotPersonFilter}\u0026offset=20\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    var shouldGetPreviousPagination = true;\r\n    var listOfResults = new List\u003CList\u003Cint\u003E\u003E();\r\n    var listOfPrevious = new List\u003Cstring?\u003E();\r\n    var listOfNext = new List\u003Cstring?\u003E();\r\n    // Act\r\n    while (shouldGetPreviousPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().Be(25);\r\n        var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n        listOfResults.Add(allRetrievedIds);\r\n        listOfPrevious.Add(paginated.Previous);\r\n        listOfNext.Add(paginated.Next);\r\n        if (paginated.Previous is null)\r\n            shouldGetPreviousPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Previous.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003Cstring?\u003E\r\n    {\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0022,\r\n        null,\r\n    };\r\n    var expectedListOfNext = new List\u003Cstring?\u003E\r\n    {\r\n        null,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B _defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n    listOfResults.Should().HaveCount(3);\r\n    var expectedListOfResults = new List\u003CList\u003Cint\u003E\u003E\r\n    {\r\n        new()\r\n        {\r\n            42,\r\n            44,\r\n            46,\r\n            48,\r\n            50\r\n        },\r\n        new()\r\n        {\r\n            22,\r\n            24,\r\n            26,\r\n            28,\r\n            30,\r\n            32,\r\n            34,\r\n            36,\r\n            38,\r\n            40\r\n        },\r\n        new()\r\n        {\r\n            2,\r\n            4,\r\n            6,\r\n            8,\r\n            10,\r\n            12,\r\n            14,\r\n            16,\r\n            18,\r\n            20\r\n        },\r\n    };\r\n    foreach (var(result, index)in listOfResults.Select((item, index) =\u003E (item, index)))\r\n        result.Should().Equal(expectedListOfResults[index]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario1",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var greetingsFilter = \u0022Bonjour\u0022;\r\n    var filterQueryString = $\u0022greetings={greetingsFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    var expectedResult = 5;\r\n    _dbContext.Entities.Count(p =\u003E p.Greetings == greetingsFilter).Should().Be(expectedResult);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(expectedResult);\r\n    paginated.Results.Should().HaveCount(expectedResult);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario2",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var idToFilter = 1;\r\n    var filterQueryString = $\u0022id={idToFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(1);\r\n    paginated.Results.Should().HaveCount(1);\r\n    var person = paginated.Results.First();\r\n    person.Id.Should().Be(idToFilter);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario3",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var robotPersonFilter = true;\r\n    var filterQueryString = $\u0022robot={robotPersonFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    var expectedResult = 25;\r\n    _dbContext.Entities.Count(p =\u003E p.Robot == robotPersonFilter).Should().Be(expectedResult);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(expectedResult);\r\n    paginated.Results.Should().HaveCount(expectedResult);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario4",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var robotPersonFilter = true;\r\n    var greetingsFilter = \u0022Hola\u0022;\r\n    var filterQueryString = $\u0022robot={robotPersonFilter}\u0026greetings={greetingsFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    var expectedResult = 5;\r\n    _dbContext.Entities.Count(p =\u003E p.Robot == robotPersonFilter \u0026\u0026 p.Greetings == greetingsFilter).Should().Be(expectedResult);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(expectedResult);\r\n    paginated.Results.Should().HaveCount(expectedResult);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario5",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var idToFilter = 2;\r\n    var robotPersonFilter = true;\r\n    var greetingsFilter = \u0022Hola\u0022;\r\n    var filterQueryString = $\u0022robot={robotPersonFilter}\u0026greetings={greetingsFilter}\u0026id={idToFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    var expectedResult = 1;\r\n    _dbContext.Entities.Count(p =\u003E p.Robot == robotPersonFilter \u0026\u0026 p.Greetings == greetingsFilter \u0026\u0026 p.Id == idToFilter).Should().Be(expectedResult);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(expectedResult);\r\n    paginated.Results.Should().HaveCount(expectedResult);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario6",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var wrongIdToFilter = \u0022jafar\u0022;\r\n    var filterQueryString = $\u0022id={wrongIdToFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRefreshModel",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(string.Empty);\r\n    Func\u003CPerson, PersonDto\u003E transform = p =\u003E new PersonDto(p.Id, p.Name, p.Greetings, p.Robot);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams, transform);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    foreach (var personDto in paginated.Results)\r\n    {\r\n        var person = _dbContext.Entities.Find(personDto.Identification);\r\n        personDto.Salute.Should().Be(person.Greetings);\r\n        personDto.HonestName.Should().Be(person.Name);\r\n        personDto.AmRobot.Should().Be(person.Robot);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Navigations",
    "Message": null,
    "ProjectName": "Tests",
    "Methods": [
      {
        "Name": "ShouldCreatePaginatedScenarioOptions1",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(String.Empty);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n    paginated.Previous.Should().BeNull();\r\n    var expectedNext = $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022;\r\n    paginated.Next.Should().Be(expectedNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioOptions2",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryString = \u0022offset=jafar\u0026limit=aladdin\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n    paginated.Previous.Should().BeNull();\r\n    var expectedNext = $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022;\r\n    paginated.Next.Should().Be(expectedNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioOptions3",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var offsetValue = 23;\r\n    var queryString = $\u0022offset={offsetValue}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n    var expectedPrevious = $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={offsetValue - _defaultPageLimit}\u0022;\r\n    paginated.Previous.Should().Be(expectedPrevious);\r\n    var expectedNext = $\u0022{_url}/?limit=10\u0026offset={offsetValue \u002B _defaultPageLimit}\u0022;\r\n    paginated.Next.Should().Be(expectedNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioOptions4",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryString = \u0022limit=1000\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    paginated.Results.Should().HaveCount(_defaultMaxPageLimit);\r\n    paginated.Previous.Should().BeNull();\r\n    var expectedNext = $\u0022{_url}/?limit={_defaultMaxPageLimit}\u0026offset={_defaultMaxPageLimit}\u0022;\r\n    paginated.Next.Should().Be(expectedNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation1",
        "Body": "{\r\n    // First arrangement\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(String.Empty);\r\n    var shouldGetNextPagination = true;\r\n    var listOfPrevious = new List\u003Cstring\u003E();\r\n    var listOfNext = new List\u003Cstring\u003E();\r\n    // Act\r\n    while (shouldGetNextPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().Be(50);\r\n        paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n        listOfPrevious.Add(paginated.Previous);\r\n        listOfNext.Add(paginated.Next);\r\n        if (paginated.Next is null)\r\n            shouldGetNextPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Next.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003Cstring\u003E\r\n    {\r\n        null,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 1)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 2)}\u0022,\r\n    };\r\n    var expectedListOfNext = new List\u003Cstring\u003E\r\n    {\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 1)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 2)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 3)}\u0022,\r\n        null\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation2",
        "Body": "{\r\n    // First arrangement\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var robotPersonFilter = true;\r\n    var filterQueryString = $\u0022robot={robotPersonFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    var shouldGetNextPagination = true;\r\n    var listOfResults = new List\u003CList\u003Cint\u003E\u003E();\r\n    var listOfPrevious = new List\u003Cstring?\u003E();\r\n    var listOfNext = new List\u003Cstring?\u003E();\r\n    // Act\r\n    while (shouldGetNextPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().Be(25);\r\n        var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n        listOfResults.Add(allRetrievedIds);\r\n        listOfPrevious.Add(paginated.Previous);\r\n        listOfNext.Add(paginated.Next);\r\n        if (paginated.Next is null)\r\n            shouldGetNextPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Next.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003Cstring?\u003E\r\n    {\r\n        null,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n    };\r\n    var expectedListOfNext = new List\u003Cstring?\u003E\r\n    {\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B _defaultPageLimit}\u0022,\r\n        null\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n    listOfResults.Should().HaveCount(3);\r\n    var expectedListOfResults = new List\u003CList\u003Cint\u003E\u003E\r\n    {\r\n        new()\r\n        {\r\n            2,\r\n            4,\r\n            6,\r\n            8,\r\n            10,\r\n            12,\r\n            14,\r\n            16,\r\n            18,\r\n            20\r\n        },\r\n        new()\r\n        {\r\n            22,\r\n            24,\r\n            26,\r\n            28,\r\n            30,\r\n            32,\r\n            34,\r\n            36,\r\n            38,\r\n            40\r\n        },\r\n        new()\r\n        {\r\n            42,\r\n            44,\r\n            46,\r\n            48,\r\n            50\r\n        },\r\n    };\r\n    foreach (var(result, index)in listOfResults.Select((item, index) =\u003E (item, index)))\r\n        result.Should().Equal(expectedListOfResults[index]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation3",
        "Body": "{\r\n    // First arrangement\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryString = \u0022offset=40\u0026limit=10\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    var shouldGetPreviousPagination = true;\r\n    var listOfPrevious = new List\u003Cstring\u003E();\r\n    var listOfNext = new List\u003Cstring\u003E();\r\n    // Act\r\n    while (shouldGetPreviousPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().Be(50);\r\n        paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n        listOfPrevious.Add(paginated.Previous);\r\n        listOfNext.Add(paginated.Next);\r\n        if (paginated.Previous is null)\r\n            shouldGetPreviousPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Previous.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003Cstring\u003E\r\n    {\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 2)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 1)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0022,\r\n        null,\r\n    };\r\n    var expectedListOfNext = new List\u003Cstring\u003E\r\n    {\r\n        null,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 3)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 2)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 1)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation4",
        "Body": "{\r\n    // First arrangement\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var robotPersonFilter = true;\r\n    var queryString = $\u0022robot={robotPersonFilter}\u0026offset=20\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    var shouldGetPreviousPagination = true;\r\n    var listOfResults = new List\u003CList\u003Cint\u003E\u003E();\r\n    var listOfPrevious = new List\u003Cstring?\u003E();\r\n    var listOfNext = new List\u003Cstring?\u003E();\r\n    // Act\r\n    while (shouldGetPreviousPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().Be(25);\r\n        var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n        listOfResults.Add(allRetrievedIds);\r\n        listOfPrevious.Add(paginated.Previous);\r\n        listOfNext.Add(paginated.Next);\r\n        if (paginated.Previous is null)\r\n            shouldGetPreviousPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Previous.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003Cstring?\u003E\r\n    {\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0022,\r\n        null,\r\n    };\r\n    var expectedListOfNext = new List\u003Cstring?\u003E\r\n    {\r\n        null,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B _defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n    listOfResults.Should().HaveCount(3);\r\n    var expectedListOfResults = new List\u003CList\u003Cint\u003E\u003E\r\n    {\r\n        new()\r\n        {\r\n            42,\r\n            44,\r\n            46,\r\n            48,\r\n            50\r\n        },\r\n        new()\r\n        {\r\n            22,\r\n            24,\r\n            26,\r\n            28,\r\n            30,\r\n            32,\r\n            34,\r\n            36,\r\n            38,\r\n            40\r\n        },\r\n        new()\r\n        {\r\n            2,\r\n            4,\r\n            6,\r\n            8,\r\n            10,\r\n            12,\r\n            14,\r\n            16,\r\n            18,\r\n            20\r\n        },\r\n    };\r\n    foreach (var(result, index)in listOfResults.Select((item, index) =\u003E (item, index)))\r\n        result.Should().Equal(expectedListOfResults[index]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario1",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var greetingsFilter = \u0022Bonjour\u0022;\r\n    var filterQueryString = $\u0022greetings={greetingsFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    var expectedResult = 5;\r\n    _dbContext.Entities.Count(p =\u003E p.Greetings == greetingsFilter).Should().Be(expectedResult);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(expectedResult);\r\n    paginated.Results.Should().HaveCount(expectedResult);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario2",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var idToFilter = 1;\r\n    var filterQueryString = $\u0022id={idToFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(1);\r\n    paginated.Results.Should().HaveCount(1);\r\n    var person = paginated.Results.First();\r\n    person.Id.Should().Be(idToFilter);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario3",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var robotPersonFilter = true;\r\n    var filterQueryString = $\u0022robot={robotPersonFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    var expectedResult = 25;\r\n    _dbContext.Entities.Count(p =\u003E p.Robot == robotPersonFilter).Should().Be(expectedResult);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(expectedResult);\r\n    paginated.Results.Should().HaveCount(expectedResult);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario4",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var robotPersonFilter = true;\r\n    var greetingsFilter = \u0022Hola\u0022;\r\n    var filterQueryString = $\u0022robot={robotPersonFilter}\u0026greetings={greetingsFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    var expectedResult = 5;\r\n    _dbContext.Entities.Count(p =\u003E p.Robot == robotPersonFilter \u0026\u0026 p.Greetings == greetingsFilter).Should().Be(expectedResult);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(expectedResult);\r\n    paginated.Results.Should().HaveCount(expectedResult);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario5",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var idToFilter = 2;\r\n    var robotPersonFilter = true;\r\n    var greetingsFilter = \u0022Hola\u0022;\r\n    var filterQueryString = $\u0022robot={robotPersonFilter}\u0026greetings={greetingsFilter}\u0026id={idToFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    var expectedResult = 1;\r\n    _dbContext.Entities.Count(p =\u003E p.Robot == robotPersonFilter \u0026\u0026 p.Greetings == greetingsFilter \u0026\u0026 p.Id == idToFilter).Should().Be(expectedResult);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(expectedResult);\r\n    paginated.Results.Should().HaveCount(expectedResult);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario6",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var wrongIdToFilter = \u0022jafar\u0022;\r\n    var filterQueryString = $\u0022id={wrongIdToFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRefreshModel",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(string.Empty);\r\n    Func\u003CPerson, PersonDto\u003E transform = p =\u003E new PersonDto(p.Id, p.Name, p.Greetings, p.Robot);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams, transform);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    foreach (var personDto in paginated.Results)\r\n    {\r\n        var person = _dbContext.Entities.Find(personDto.Identification);\r\n        personDto.Salute.Should().Be(person.Greetings);\r\n        personDto.HonestName.Should().Be(person.Name);\r\n        personDto.AmRobot.Should().Be(person.Robot);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Queries",
    "Message": null,
    "ProjectName": "Tests",
    "Methods": [
      {
        "Name": "ShouldCreatePaginatedScenarioOptions1",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(String.Empty);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n    paginated.Previous.Should().BeNull();\r\n    var expectedNext = $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022;\r\n    paginated.Next.Should().Be(expectedNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioOptions2",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryString = \u0022offset=jafar\u0026limit=aladdin\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n    paginated.Previous.Should().BeNull();\r\n    var expectedNext = $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022;\r\n    paginated.Next.Should().Be(expectedNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioOptions3",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var offsetValue = 23;\r\n    var queryString = $\u0022offset={offsetValue}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n    var expectedPrevious = $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={offsetValue - _defaultPageLimit}\u0022;\r\n    paginated.Previous.Should().Be(expectedPrevious);\r\n    var expectedNext = $\u0022{_url}/?limit=10\u0026offset={offsetValue \u002B _defaultPageLimit}\u0022;\r\n    paginated.Next.Should().Be(expectedNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioOptions4",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryString = \u0022limit=1000\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    paginated.Results.Should().HaveCount(_defaultMaxPageLimit);\r\n    paginated.Previous.Should().BeNull();\r\n    var expectedNext = $\u0022{_url}/?limit={_defaultMaxPageLimit}\u0026offset={_defaultMaxPageLimit}\u0022;\r\n    paginated.Next.Should().Be(expectedNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation1",
        "Body": "{\r\n    // First arrangement\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(String.Empty);\r\n    var shouldGetNextPagination = true;\r\n    var listOfPrevious = new List\u003Cstring\u003E();\r\n    var listOfNext = new List\u003Cstring\u003E();\r\n    // Act\r\n    while (shouldGetNextPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().Be(50);\r\n        paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n        listOfPrevious.Add(paginated.Previous);\r\n        listOfNext.Add(paginated.Next);\r\n        if (paginated.Next is null)\r\n            shouldGetNextPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Next.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003Cstring\u003E\r\n    {\r\n        null,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 1)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 2)}\u0022,\r\n    };\r\n    var expectedListOfNext = new List\u003Cstring\u003E\r\n    {\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 1)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 2)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 3)}\u0022,\r\n        null\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation2",
        "Body": "{\r\n    // First arrangement\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var robotPersonFilter = true;\r\n    var filterQueryString = $\u0022robot={robotPersonFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    var shouldGetNextPagination = true;\r\n    var listOfResults = new List\u003CList\u003Cint\u003E\u003E();\r\n    var listOfPrevious = new List\u003Cstring?\u003E();\r\n    var listOfNext = new List\u003Cstring?\u003E();\r\n    // Act\r\n    while (shouldGetNextPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().Be(25);\r\n        var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n        listOfResults.Add(allRetrievedIds);\r\n        listOfPrevious.Add(paginated.Previous);\r\n        listOfNext.Add(paginated.Next);\r\n        if (paginated.Next is null)\r\n            shouldGetNextPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Next.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003Cstring?\u003E\r\n    {\r\n        null,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n    };\r\n    var expectedListOfNext = new List\u003Cstring?\u003E\r\n    {\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B _defaultPageLimit}\u0022,\r\n        null\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n    listOfResults.Should().HaveCount(3);\r\n    var expectedListOfResults = new List\u003CList\u003Cint\u003E\u003E\r\n    {\r\n        new()\r\n        {\r\n            2,\r\n            4,\r\n            6,\r\n            8,\r\n            10,\r\n            12,\r\n            14,\r\n            16,\r\n            18,\r\n            20\r\n        },\r\n        new()\r\n        {\r\n            22,\r\n            24,\r\n            26,\r\n            28,\r\n            30,\r\n            32,\r\n            34,\r\n            36,\r\n            38,\r\n            40\r\n        },\r\n        new()\r\n        {\r\n            42,\r\n            44,\r\n            46,\r\n            48,\r\n            50\r\n        },\r\n    };\r\n    foreach (var(result, index)in listOfResults.Select((item, index) =\u003E (item, index)))\r\n        result.Should().Equal(expectedListOfResults[index]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation3",
        "Body": "{\r\n    // First arrangement\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryString = \u0022offset=40\u0026limit=10\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    var shouldGetPreviousPagination = true;\r\n    var listOfPrevious = new List\u003Cstring\u003E();\r\n    var listOfNext = new List\u003Cstring\u003E();\r\n    // Act\r\n    while (shouldGetPreviousPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().Be(50);\r\n        paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n        listOfPrevious.Add(paginated.Previous);\r\n        listOfNext.Add(paginated.Next);\r\n        if (paginated.Previous is null)\r\n            shouldGetPreviousPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Previous.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003Cstring\u003E\r\n    {\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 2)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 1)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0022,\r\n        null,\r\n    };\r\n    var expectedListOfNext = new List\u003Cstring\u003E\r\n    {\r\n        null,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 3)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 2)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 1)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation4",
        "Body": "{\r\n    // First arrangement\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var robotPersonFilter = true;\r\n    var queryString = $\u0022robot={robotPersonFilter}\u0026offset=20\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    var shouldGetPreviousPagination = true;\r\n    var listOfResults = new List\u003CList\u003Cint\u003E\u003E();\r\n    var listOfPrevious = new List\u003Cstring?\u003E();\r\n    var listOfNext = new List\u003Cstring?\u003E();\r\n    // Act\r\n    while (shouldGetPreviousPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().Be(25);\r\n        var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n        listOfResults.Add(allRetrievedIds);\r\n        listOfPrevious.Add(paginated.Previous);\r\n        listOfNext.Add(paginated.Next);\r\n        if (paginated.Previous is null)\r\n            shouldGetPreviousPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Previous.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003Cstring?\u003E\r\n    {\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0022,\r\n        null,\r\n    };\r\n    var expectedListOfNext = new List\u003Cstring?\u003E\r\n    {\r\n        null,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B _defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n    listOfResults.Should().HaveCount(3);\r\n    var expectedListOfResults = new List\u003CList\u003Cint\u003E\u003E\r\n    {\r\n        new()\r\n        {\r\n            42,\r\n            44,\r\n            46,\r\n            48,\r\n            50\r\n        },\r\n        new()\r\n        {\r\n            22,\r\n            24,\r\n            26,\r\n            28,\r\n            30,\r\n            32,\r\n            34,\r\n            36,\r\n            38,\r\n            40\r\n        },\r\n        new()\r\n        {\r\n            2,\r\n            4,\r\n            6,\r\n            8,\r\n            10,\r\n            12,\r\n            14,\r\n            16,\r\n            18,\r\n            20\r\n        },\r\n    };\r\n    foreach (var(result, index)in listOfResults.Select((item, index) =\u003E (item, index)))\r\n        result.Should().Equal(expectedListOfResults[index]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario1",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var greetingsFilter = \u0022Bonjour\u0022;\r\n    var filterQueryString = $\u0022greetings={greetingsFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    var expectedResult = 5;\r\n    _dbContext.Entities.Count(p =\u003E p.Greetings == greetingsFilter).Should().Be(expectedResult);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(expectedResult);\r\n    paginated.Results.Should().HaveCount(expectedResult);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario2",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var idToFilter = 1;\r\n    var filterQueryString = $\u0022id={idToFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(1);\r\n    paginated.Results.Should().HaveCount(1);\r\n    var person = paginated.Results.First();\r\n    person.Id.Should().Be(idToFilter);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario3",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var robotPersonFilter = true;\r\n    var filterQueryString = $\u0022robot={robotPersonFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    var expectedResult = 25;\r\n    _dbContext.Entities.Count(p =\u003E p.Robot == robotPersonFilter).Should().Be(expectedResult);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(expectedResult);\r\n    paginated.Results.Should().HaveCount(expectedResult);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario4",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var robotPersonFilter = true;\r\n    var greetingsFilter = \u0022Hola\u0022;\r\n    var filterQueryString = $\u0022robot={robotPersonFilter}\u0026greetings={greetingsFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    var expectedResult = 5;\r\n    _dbContext.Entities.Count(p =\u003E p.Robot == robotPersonFilter \u0026\u0026 p.Greetings == greetingsFilter).Should().Be(expectedResult);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(expectedResult);\r\n    paginated.Results.Should().HaveCount(expectedResult);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario5",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var idToFilter = 2;\r\n    var robotPersonFilter = true;\r\n    var greetingsFilter = \u0022Hola\u0022;\r\n    var filterQueryString = $\u0022robot={robotPersonFilter}\u0026greetings={greetingsFilter}\u0026id={idToFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    var expectedResult = 1;\r\n    _dbContext.Entities.Count(p =\u003E p.Robot == robotPersonFilter \u0026\u0026 p.Greetings == greetingsFilter \u0026\u0026 p.Id == idToFilter).Should().Be(expectedResult);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(expectedResult);\r\n    paginated.Results.Should().HaveCount(expectedResult);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario6",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var wrongIdToFilter = \u0022jafar\u0022;\r\n    var filterQueryString = $\u0022id={wrongIdToFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRefreshModel",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(string.Empty);\r\n    Func\u003CPerson, PersonDto\u003E transform = p =\u003E new PersonDto(p.Id, p.Name, p.Greetings, p.Robot);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams, transform);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    foreach (var personDto in paginated.Results)\r\n    {\r\n        var person = _dbContext.Entities.Find(personDto.Identification);\r\n        personDto.Salute.Should().Be(person.Greetings);\r\n        personDto.HonestName.Should().Be(person.Name);\r\n        personDto.AmRobot.Should().Be(person.Robot);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RefreshingModel",
    "Message": null,
    "ProjectName": "Tests",
    "Methods": [
      {
        "Name": "ShouldCreatePaginatedScenarioOptions1",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(String.Empty);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n    paginated.Previous.Should().BeNull();\r\n    var expectedNext = $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022;\r\n    paginated.Next.Should().Be(expectedNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioOptions2",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryString = \u0022offset=jafar\u0026limit=aladdin\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n    paginated.Previous.Should().BeNull();\r\n    var expectedNext = $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022;\r\n    paginated.Next.Should().Be(expectedNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioOptions3",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var offsetValue = 23;\r\n    var queryString = $\u0022offset={offsetValue}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n    var expectedPrevious = $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={offsetValue - _defaultPageLimit}\u0022;\r\n    paginated.Previous.Should().Be(expectedPrevious);\r\n    var expectedNext = $\u0022{_url}/?limit=10\u0026offset={offsetValue \u002B _defaultPageLimit}\u0022;\r\n    paginated.Next.Should().Be(expectedNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioOptions4",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryString = \u0022limit=1000\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    paginated.Results.Should().HaveCount(_defaultMaxPageLimit);\r\n    paginated.Previous.Should().BeNull();\r\n    var expectedNext = $\u0022{_url}/?limit={_defaultMaxPageLimit}\u0026offset={_defaultMaxPageLimit}\u0022;\r\n    paginated.Next.Should().Be(expectedNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation1",
        "Body": "{\r\n    // First arrangement\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(String.Empty);\r\n    var shouldGetNextPagination = true;\r\n    var listOfPrevious = new List\u003Cstring\u003E();\r\n    var listOfNext = new List\u003Cstring\u003E();\r\n    // Act\r\n    while (shouldGetNextPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().Be(50);\r\n        paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n        listOfPrevious.Add(paginated.Previous);\r\n        listOfNext.Add(paginated.Next);\r\n        if (paginated.Next is null)\r\n            shouldGetNextPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Next.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003Cstring\u003E\r\n    {\r\n        null,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 1)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 2)}\u0022,\r\n    };\r\n    var expectedListOfNext = new List\u003Cstring\u003E\r\n    {\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 1)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 2)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 3)}\u0022,\r\n        null\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation2",
        "Body": "{\r\n    // First arrangement\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var robotPersonFilter = true;\r\n    var filterQueryString = $\u0022robot={robotPersonFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    var shouldGetNextPagination = true;\r\n    var listOfResults = new List\u003CList\u003Cint\u003E\u003E();\r\n    var listOfPrevious = new List\u003Cstring?\u003E();\r\n    var listOfNext = new List\u003Cstring?\u003E();\r\n    // Act\r\n    while (shouldGetNextPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().Be(25);\r\n        var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n        listOfResults.Add(allRetrievedIds);\r\n        listOfPrevious.Add(paginated.Previous);\r\n        listOfNext.Add(paginated.Next);\r\n        if (paginated.Next is null)\r\n            shouldGetNextPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Next.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003Cstring?\u003E\r\n    {\r\n        null,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n    };\r\n    var expectedListOfNext = new List\u003Cstring?\u003E\r\n    {\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B _defaultPageLimit}\u0022,\r\n        null\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n    listOfResults.Should().HaveCount(3);\r\n    var expectedListOfResults = new List\u003CList\u003Cint\u003E\u003E\r\n    {\r\n        new()\r\n        {\r\n            2,\r\n            4,\r\n            6,\r\n            8,\r\n            10,\r\n            12,\r\n            14,\r\n            16,\r\n            18,\r\n            20\r\n        },\r\n        new()\r\n        {\r\n            22,\r\n            24,\r\n            26,\r\n            28,\r\n            30,\r\n            32,\r\n            34,\r\n            36,\r\n            38,\r\n            40\r\n        },\r\n        new()\r\n        {\r\n            42,\r\n            44,\r\n            46,\r\n            48,\r\n            50\r\n        },\r\n    };\r\n    foreach (var(result, index)in listOfResults.Select((item, index) =\u003E (item, index)))\r\n        result.Should().Equal(expectedListOfResults[index]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation3",
        "Body": "{\r\n    // First arrangement\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryString = \u0022offset=40\u0026limit=10\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    var shouldGetPreviousPagination = true;\r\n    var listOfPrevious = new List\u003Cstring\u003E();\r\n    var listOfNext = new List\u003Cstring\u003E();\r\n    // Act\r\n    while (shouldGetPreviousPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().Be(50);\r\n        paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n        listOfPrevious.Add(paginated.Previous);\r\n        listOfNext.Add(paginated.Next);\r\n        if (paginated.Previous is null)\r\n            shouldGetPreviousPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Previous.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003Cstring\u003E\r\n    {\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 2)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 1)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0022,\r\n        null,\r\n    };\r\n    var expectedListOfNext = new List\u003Cstring\u003E\r\n    {\r\n        null,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 3)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 2)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 1)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation4",
        "Body": "{\r\n    // First arrangement\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var robotPersonFilter = true;\r\n    var queryString = $\u0022robot={robotPersonFilter}\u0026offset=20\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    var shouldGetPreviousPagination = true;\r\n    var listOfResults = new List\u003CList\u003Cint\u003E\u003E();\r\n    var listOfPrevious = new List\u003Cstring?\u003E();\r\n    var listOfNext = new List\u003Cstring?\u003E();\r\n    // Act\r\n    while (shouldGetPreviousPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().Be(25);\r\n        var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n        listOfResults.Add(allRetrievedIds);\r\n        listOfPrevious.Add(paginated.Previous);\r\n        listOfNext.Add(paginated.Next);\r\n        if (paginated.Previous is null)\r\n            shouldGetPreviousPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Previous.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003Cstring?\u003E\r\n    {\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0022,\r\n        null,\r\n    };\r\n    var expectedListOfNext = new List\u003Cstring?\u003E\r\n    {\r\n        null,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B _defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n    listOfResults.Should().HaveCount(3);\r\n    var expectedListOfResults = new List\u003CList\u003Cint\u003E\u003E\r\n    {\r\n        new()\r\n        {\r\n            42,\r\n            44,\r\n            46,\r\n            48,\r\n            50\r\n        },\r\n        new()\r\n        {\r\n            22,\r\n            24,\r\n            26,\r\n            28,\r\n            30,\r\n            32,\r\n            34,\r\n            36,\r\n            38,\r\n            40\r\n        },\r\n        new()\r\n        {\r\n            2,\r\n            4,\r\n            6,\r\n            8,\r\n            10,\r\n            12,\r\n            14,\r\n            16,\r\n            18,\r\n            20\r\n        },\r\n    };\r\n    foreach (var(result, index)in listOfResults.Select((item, index) =\u003E (item, index)))\r\n        result.Should().Equal(expectedListOfResults[index]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario1",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var greetingsFilter = \u0022Bonjour\u0022;\r\n    var filterQueryString = $\u0022greetings={greetingsFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    var expectedResult = 5;\r\n    _dbContext.Entities.Count(p =\u003E p.Greetings == greetingsFilter).Should().Be(expectedResult);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(expectedResult);\r\n    paginated.Results.Should().HaveCount(expectedResult);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario2",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var idToFilter = 1;\r\n    var filterQueryString = $\u0022id={idToFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(1);\r\n    paginated.Results.Should().HaveCount(1);\r\n    var person = paginated.Results.First();\r\n    person.Id.Should().Be(idToFilter);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario3",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var robotPersonFilter = true;\r\n    var filterQueryString = $\u0022robot={robotPersonFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    var expectedResult = 25;\r\n    _dbContext.Entities.Count(p =\u003E p.Robot == robotPersonFilter).Should().Be(expectedResult);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(expectedResult);\r\n    paginated.Results.Should().HaveCount(expectedResult);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario4",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var robotPersonFilter = true;\r\n    var greetingsFilter = \u0022Hola\u0022;\r\n    var filterQueryString = $\u0022robot={robotPersonFilter}\u0026greetings={greetingsFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    var expectedResult = 5;\r\n    _dbContext.Entities.Count(p =\u003E p.Robot == robotPersonFilter \u0026\u0026 p.Greetings == greetingsFilter).Should().Be(expectedResult);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(expectedResult);\r\n    paginated.Results.Should().HaveCount(expectedResult);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario5",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var idToFilter = 2;\r\n    var robotPersonFilter = true;\r\n    var greetingsFilter = \u0022Hola\u0022;\r\n    var filterQueryString = $\u0022robot={robotPersonFilter}\u0026greetings={greetingsFilter}\u0026id={idToFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    var expectedResult = 1;\r\n    _dbContext.Entities.Count(p =\u003E p.Robot == robotPersonFilter \u0026\u0026 p.Greetings == greetingsFilter \u0026\u0026 p.Id == idToFilter).Should().Be(expectedResult);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(expectedResult);\r\n    paginated.Results.Should().HaveCount(expectedResult);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario6",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var wrongIdToFilter = \u0022jafar\u0022;\r\n    var filterQueryString = $\u0022id={wrongIdToFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRefreshModel",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(string.Empty);\r\n    Func\u003CPerson, PersonDto\u003E transform = p =\u003E new PersonDto(p.Id, p.Name, p.Greetings, p.Robot);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams, transform);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    foreach (var personDto in paginated.Results)\r\n    {\r\n        var person = _dbContext.Entities.Find(personDto.Identification);\r\n        personDto.Salute.Should().Be(person.Greetings);\r\n        personDto.HonestName.Should().Be(person.Name);\r\n        personDto.AmRobot.Should().Be(person.Robot);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "LimitOffsetPaginationITests",
    "Message": null,
    "ProjectName": "Tests",
    "Methods": [
      {
        "Name": "ShouldCreatePaginatedScenarioOptions1",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(String.Empty);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n    paginated.Previous.Should().BeNull();\r\n    var expectedNext = $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022;\r\n    paginated.Next.Should().Be(expectedNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioOptions2",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryString = \u0022offset=jafar\u0026limit=aladdin\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n    paginated.Previous.Should().BeNull();\r\n    var expectedNext = $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022;\r\n    paginated.Next.Should().Be(expectedNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioOptions3",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var offsetValue = 23;\r\n    var queryString = $\u0022offset={offsetValue}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n    var expectedPrevious = $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={offsetValue - _defaultPageLimit}\u0022;\r\n    paginated.Previous.Should().Be(expectedPrevious);\r\n    var expectedNext = $\u0022{_url}/?limit=10\u0026offset={offsetValue \u002B _defaultPageLimit}\u0022;\r\n    paginated.Next.Should().Be(expectedNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioOptions4",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryString = \u0022limit=1000\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    paginated.Results.Should().HaveCount(_defaultMaxPageLimit);\r\n    paginated.Previous.Should().BeNull();\r\n    var expectedNext = $\u0022{_url}/?limit={_defaultMaxPageLimit}\u0026offset={_defaultMaxPageLimit}\u0022;\r\n    paginated.Next.Should().Be(expectedNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation1",
        "Body": "{\r\n    // First arrangement\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(String.Empty);\r\n    var shouldGetNextPagination = true;\r\n    var listOfPrevious = new List\u003Cstring\u003E();\r\n    var listOfNext = new List\u003Cstring\u003E();\r\n    // Act\r\n    while (shouldGetNextPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().Be(50);\r\n        paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n        listOfPrevious.Add(paginated.Previous);\r\n        listOfNext.Add(paginated.Next);\r\n        if (paginated.Next is null)\r\n            shouldGetNextPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Next.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003Cstring\u003E\r\n    {\r\n        null,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 1)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 2)}\u0022,\r\n    };\r\n    var expectedListOfNext = new List\u003Cstring\u003E\r\n    {\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 1)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 2)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 3)}\u0022,\r\n        null\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation2",
        "Body": "{\r\n    // First arrangement\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var robotPersonFilter = true;\r\n    var filterQueryString = $\u0022robot={robotPersonFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    var shouldGetNextPagination = true;\r\n    var listOfResults = new List\u003CList\u003Cint\u003E\u003E();\r\n    var listOfPrevious = new List\u003Cstring?\u003E();\r\n    var listOfNext = new List\u003Cstring?\u003E();\r\n    // Act\r\n    while (shouldGetNextPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().Be(25);\r\n        var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n        listOfResults.Add(allRetrievedIds);\r\n        listOfPrevious.Add(paginated.Previous);\r\n        listOfNext.Add(paginated.Next);\r\n        if (paginated.Next is null)\r\n            shouldGetNextPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Next.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003Cstring?\u003E\r\n    {\r\n        null,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n    };\r\n    var expectedListOfNext = new List\u003Cstring?\u003E\r\n    {\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B _defaultPageLimit}\u0022,\r\n        null\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n    listOfResults.Should().HaveCount(3);\r\n    var expectedListOfResults = new List\u003CList\u003Cint\u003E\u003E\r\n    {\r\n        new()\r\n        {\r\n            2,\r\n            4,\r\n            6,\r\n            8,\r\n            10,\r\n            12,\r\n            14,\r\n            16,\r\n            18,\r\n            20\r\n        },\r\n        new()\r\n        {\r\n            22,\r\n            24,\r\n            26,\r\n            28,\r\n            30,\r\n            32,\r\n            34,\r\n            36,\r\n            38,\r\n            40\r\n        },\r\n        new()\r\n        {\r\n            42,\r\n            44,\r\n            46,\r\n            48,\r\n            50\r\n        },\r\n    };\r\n    foreach (var(result, index)in listOfResults.Select((item, index) =\u003E (item, index)))\r\n        result.Should().Equal(expectedListOfResults[index]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation3",
        "Body": "{\r\n    // First arrangement\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryString = \u0022offset=40\u0026limit=10\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    var shouldGetPreviousPagination = true;\r\n    var listOfPrevious = new List\u003Cstring\u003E();\r\n    var listOfNext = new List\u003Cstring\u003E();\r\n    // Act\r\n    while (shouldGetPreviousPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().Be(50);\r\n        paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n        listOfPrevious.Add(paginated.Previous);\r\n        listOfNext.Add(paginated.Next);\r\n        if (paginated.Previous is null)\r\n            shouldGetPreviousPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Previous.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003Cstring\u003E\r\n    {\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 2)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 1)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0022,\r\n        null,\r\n    };\r\n    var expectedListOfNext = new List\u003Cstring\u003E\r\n    {\r\n        null,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 3)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 2)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B (_defaultPageLimit * 1)}\u0022,\r\n        $\u0022{_url}/?limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldCreatePaginatedScenarioNavigation4",
        "Body": "{\r\n    // First arrangement\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var robotPersonFilter = true;\r\n    var queryString = $\u0022robot={robotPersonFilter}\u0026offset=20\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(queryString);\r\n    var shouldGetPreviousPagination = true;\r\n    var listOfResults = new List\u003CList\u003Cint\u003E\u003E();\r\n    var listOfPrevious = new List\u003Cstring?\u003E();\r\n    var listOfNext = new List\u003Cstring?\u003E();\r\n    // Act\r\n    while (shouldGetPreviousPagination)\r\n    {\r\n        var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n        paginated.Count.Should().Be(25);\r\n        var allRetrievedIds = paginated.Results.Select(v =\u003E v.Id).ToList();\r\n        listOfResults.Add(allRetrievedIds);\r\n        listOfPrevious.Add(paginated.Previous);\r\n        listOfNext.Add(paginated.Next);\r\n        if (paginated.Previous is null)\r\n            shouldGetPreviousPagination = false;\r\n        else\r\n        {\r\n            var queryStrings = paginated.Previous.Split(\u0022?\u0022)[1];\r\n            queryParams = Http.RetrieveQueryCollectionFromQueryString(queryStrings);\r\n        }\r\n    }\r\n\r\n    // Assert\r\n    var expectedListOfPrevious = new List\u003Cstring?\u003E\r\n    {\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0022,\r\n        null,\r\n    };\r\n    var expectedListOfNext = new List\u003Cstring?\u003E\r\n    {\r\n        null,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit \u002B _defaultPageLimit}\u0022,\r\n        $\u0022{_url}/?robot=True\u0026limit={_defaultPageLimit}\u0026offset={_defaultPageLimit}\u0022,\r\n    };\r\n    listOfPrevious.Should().Equal(expectedListOfPrevious);\r\n    listOfNext.Should().Equal(expectedListOfNext);\r\n    listOfResults.Should().HaveCount(3);\r\n    var expectedListOfResults = new List\u003CList\u003Cint\u003E\u003E\r\n    {\r\n        new()\r\n        {\r\n            42,\r\n            44,\r\n            46,\r\n            48,\r\n            50\r\n        },\r\n        new()\r\n        {\r\n            22,\r\n            24,\r\n            26,\r\n            28,\r\n            30,\r\n            32,\r\n            34,\r\n            36,\r\n            38,\r\n            40\r\n        },\r\n        new()\r\n        {\r\n            2,\r\n            4,\r\n            6,\r\n            8,\r\n            10,\r\n            12,\r\n            14,\r\n            16,\r\n            18,\r\n            20\r\n        },\r\n    };\r\n    foreach (var(result, index)in listOfResults.Select((item, index) =\u003E (item, index)))\r\n        result.Should().Equal(expectedListOfResults[index]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario1",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var greetingsFilter = \u0022Bonjour\u0022;\r\n    var filterQueryString = $\u0022greetings={greetingsFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    var expectedResult = 5;\r\n    _dbContext.Entities.Count(p =\u003E p.Greetings == greetingsFilter).Should().Be(expectedResult);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(expectedResult);\r\n    paginated.Results.Should().HaveCount(expectedResult);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario2",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var idToFilter = 1;\r\n    var filterQueryString = $\u0022id={idToFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(1);\r\n    paginated.Results.Should().HaveCount(1);\r\n    var person = paginated.Results.First();\r\n    person.Id.Should().Be(idToFilter);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario3",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var robotPersonFilter = true;\r\n    var filterQueryString = $\u0022robot={robotPersonFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    var expectedResult = 25;\r\n    _dbContext.Entities.Count(p =\u003E p.Robot == robotPersonFilter).Should().Be(expectedResult);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(expectedResult);\r\n    paginated.Results.Should().HaveCount(expectedResult);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario4",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var robotPersonFilter = true;\r\n    var greetingsFilter = \u0022Hola\u0022;\r\n    var filterQueryString = $\u0022robot={robotPersonFilter}\u0026greetings={greetingsFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    var expectedResult = 5;\r\n    _dbContext.Entities.Count(p =\u003E p.Robot == robotPersonFilter \u0026\u0026 p.Greetings == greetingsFilter).Should().Be(expectedResult);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(expectedResult);\r\n    paginated.Results.Should().HaveCount(expectedResult);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario5",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var idToFilter = 2;\r\n    var robotPersonFilter = true;\r\n    var greetingsFilter = \u0022Hola\u0022;\r\n    var filterQueryString = $\u0022robot={robotPersonFilter}\u0026greetings={greetingsFilter}\u0026id={idToFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    var expectedResult = 1;\r\n    _dbContext.Entities.Count(p =\u003E p.Robot == robotPersonFilter \u0026\u0026 p.Greetings == greetingsFilter \u0026\u0026 p.Id == idToFilter).Should().Be(expectedResult);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(expectedResult);\r\n    paginated.Results.Should().HaveCount(expectedResult);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldQueryThroughNameScenario6",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var wrongIdToFilter = \u0022jafar\u0022;\r\n    var filterQueryString = $\u0022id={wrongIdToFilter}\u0022;\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(filterQueryString);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    paginated.Results.Should().HaveCount(_defaultPageLimit);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ShouldRefreshModel",
        "Body": "{\r\n    // Arrange\r\n    var query = await CreateScenarioWith50People(_dbContext);\r\n    var queryParams = Http.RetrieveQueryCollectionFromQueryString(string.Empty);\r\n    Func\u003CPerson, PersonDto\u003E transform = p =\u003E new PersonDto(p.Id, p.Name, p.Greetings, p.Robot);\r\n    // Act\r\n    var paginated = await _pagination.CreateAsync(query, _url, queryParams, transform);\r\n    // Assert\r\n    paginated.Count.Should().Be(50);\r\n    foreach (var personDto in paginated.Results)\r\n    {\r\n        var person = _dbContext.Entities.Find(personDto.Identification);\r\n        personDto.Salute.Should().Be(person.Greetings);\r\n        personDto.HonestName.Should().Be(person.Name);\r\n        personDto.AmRobot.Should().Be(person.Robot);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  }
]