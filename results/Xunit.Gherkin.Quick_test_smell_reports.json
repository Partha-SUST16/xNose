[
  {
    "Name": "DataTableArgumentTests",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "DigestScenarioStepValues_Throws_Error_If_No_Arguments_And_No_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var sut = new DataTableArgument();\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.DigestScenarioStepValues(new string[0], null));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Throws_Error_If_Arguments_Present_But_No_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var sut = new DataTableArgument();\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.DigestScenarioStepValues(new string[] { \u00221\u0022, \u00222\u0022, \u00223\u0022 }, null));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_Value_As_DataTable_When_Only_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var sut = new DataTableArgument();\r\n    var dataTable = new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) });\r\n    //act.\r\n    sut.DigestScenarioStepValues(new string[0], dataTable);\r\n    //assert.\r\n    Assert.Same(dataTable, sut.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_Value_As_DataTable_When_DataTable_And_Other_Args_Present",
        "Body": "{\r\n    //arrange.\r\n    var sut = new DataTableArgument();\r\n    var dataTable = new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) });\r\n    //act.\r\n    sut.DigestScenarioStepValues(new string[] { \u00221\u0022, \u00222\u0022, \u00223\u0022 }, dataTable);\r\n    //assert.\r\n    Assert.Same(dataTable, sut.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsSameAs_Identifies_Similar_Instances",
        "Body": "{\r\n    //arrange.\r\n    var sut = new DataTableArgument();\r\n    var other = new DataTableArgument();\r\n    //act.\r\n    var same = sut.IsSameAs(other);\r\n    //assert.\r\n    Assert.True(same);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsSameAs_Distinguishes_Different_Instances",
        "Body": "{\r\n    //arrange.\r\n    var sut = new DataTableArgument();\r\n    var other = new Mock\u003CStepMethodArgument\u003E().Object;\r\n    //act.\r\n    var same = sut.IsSameAs(other);\r\n    //assert.\r\n    Assert.False(same);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Clone_Creates_Similar_Instance",
        "Body": "{\r\n    //arrange.\r\n    var sut = new DataTableArgument();\r\n    //act.\r\n    var clone = sut.Clone();\r\n    //assert.\r\n    Assert.True(clone.IsSameAs(sut));\r\n    Assert.NotSame(clone, sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DocStringArgumentTests",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "DigestScenarioStepValues_Throws_Error_If_No_Arguments_And_No_DocString",
        "Body": "{\r\n    //arrange.\r\n    var sut = new DocStringArgument();\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.DigestScenarioStepValues(new string[0], null));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Throws_Error_If_Arguments_Present_But_No_DocString",
        "Body": "{\r\n    //arrange.\r\n    var sut = new DocStringArgument();\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.DigestScenarioStepValues(new string[] { \u00221\u0022, \u00222\u0022, \u00223\u0022 }, null));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_Value_As_DocString_When_Only_DocString",
        "Body": "{\r\n    //arrange.\r\n    var sut = new DocStringArgument();\r\n    var docStringContent = @\u0022some content\n\u002B\u002B\u002B\nwith multi lines\n---\nin it\u0022;\r\n    var docString = new Gherkin.Ast.DocString(null, null, docStringContent);\r\n    //act.\r\n    sut.DigestScenarioStepValues(new string[0], docString);\r\n    //assert.\r\n    Assert.Same(docString, sut.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_Value_As_DataTable_When_DataTable_And_Other_Args_Present",
        "Body": "{\r\n    //arrange.\r\n    var sut = new DocStringArgument();\r\n    var docStringContent = @\u0022some content\n\u002B\u002B\u002B\nwith multi lines\n---\nin it\u0022;\r\n    var docString = new Gherkin.Ast.DocString(null, null, docStringContent);\r\n    //act.\r\n    sut.DigestScenarioStepValues(new string[] { \u00221\u0022, \u00222\u0022, \u00223\u0022 }, docString);\r\n    //assert.\r\n    Assert.Same(docString, sut.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsSameAs_Identifies_Similar_Instances",
        "Body": "{\r\n    //arrange.\r\n    var sut = new DocStringArgument();\r\n    var other = new DocStringArgument();\r\n    //act.\r\n    var same = sut.IsSameAs(other);\r\n    //assert.\r\n    Assert.True(same);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsSameAs_Distinguishes_Different_Instances",
        "Body": "{\r\n    //arrange.\r\n    var sut = new DocStringArgument();\r\n    var other = new Mock\u003CStepMethodArgument\u003E().Object;\r\n    //act.\r\n    var same = sut.IsSameAs(other);\r\n    //assert.\r\n    Assert.False(same);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Clone_Creates_Similar_Instance",
        "Body": "{\r\n    //arrange.\r\n    var sut = new DocStringArgument();\r\n    //act.\r\n    var clone = sut.Clone();\r\n    //assert.\r\n    Assert.True(clone.IsSameAs(sut));\r\n    Assert.NotSame(clone, sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MyFeature",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Require_ClassType",
        "Body": "{\r\n    //act / assert.\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E MissingFeatureClassInfo.FromMissingFeatureClassType(null));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Construct_InfoClass_With_Search_Pattern",
        "Body": "{\r\n    //act.\r\n    var sut = FeatureClassInfo.FromFeatureClassType(classType);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.IsType(pathInfoType, sut.PathInfo);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MyFeatureWithPattern",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Require_ClassType",
        "Body": "{\r\n    //act / assert.\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E MissingFeatureClassInfo.FromMissingFeatureClassType(null));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Construct_InfoClass_With_Search_Pattern",
        "Body": "{\r\n    //act.\r\n    var sut = FeatureClassInfo.FromFeatureClassType(classType);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.IsType(pathInfoType, sut.PathInfo);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MyFeatureWithFileNameAndPattern",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Require_ClassType",
        "Body": "{\r\n    //act / assert.\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E MissingFeatureClassInfo.FromMissingFeatureClassType(null));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Construct_InfoClass_With_Search_Pattern",
        "Body": "{\r\n    //act.\r\n    var sut = FeatureClassInfo.FromFeatureClassType(classType);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.IsType(pathInfoType, sut.PathInfo);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureClassInfo_FromFeatureClassType_Should",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Require_ClassType",
        "Body": "{\r\n    //act / assert.\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E MissingFeatureClassInfo.FromMissingFeatureClassType(null));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Construct_InfoClass_With_Search_Pattern",
        "Body": "{\r\n    //act.\r\n    var sut = FeatureClassInfo.FromFeatureClassType(classType);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.IsType(pathInfoType, sut.PathInfo);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithoutFilePath",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "FromFeatureInstance_Creates_FeatureClass_With_Default_FilePath_If_No_Attribute",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithoutFilePath();\r\n    //act.\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromFeatureInstance_Creates_FeatureClass_With_FilePath_From_Attribute",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithFilePath();\r\n    //act.\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromFeatureInstance_DoesNotAllow_AsyncVoid_Steps",
        "Body": "{\r\n    var featureInstance = new FeatureWithAsyncVoidStep();\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E FeatureClass.FromFeatureInstance(featureInstance));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScenario_Extracts_Scenario_Without_Background",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022some scenario name 123\u0022;\r\n    var featureInstance = new FeatureWithMatchingScenarioStepsToExtract();\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    var gherkinScenario = CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase), \u0022And \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase), \u0022When \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep3Text, \u0022Then \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase) }).Feature.Children.First() as Gherkin.Ast.Scenario;\r\n    //act.\r\n    var scenario = sut.ExtractScenario(gherkinScenario);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScnario_Extracts_Scenario_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario213\u0022;\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    var gherknScenario = CreateGherkinDocument(scenarioName, new string[] { \u0022When \u0022 \u002B FeatureWithDataTableScenarioStep.Steptext }, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) })).Feature.Children.First() as Gherkin.Ast.Scenario;\r\n    //act.\r\n    var scenario = sut.ExtractScenario(gherknScenario);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScenario_Extracts_Scenario_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    var scenarioName = \u0022scenario-121kh2\u0022;\r\n    var docStringContent = @\u0022some content\n    \u002B\u002B\u002B\n    with multi lines\n    ---\n    in it\u0022;\r\n    var gherkinScenario = CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithDocStringScenarioStep.StepWithDocStringText }, new Gherkin.Ast.DocString(null, null, docStringContent)).Feature.Children.First() as Gherkin.Ast.Scenario;\r\n    //act.\r\n    var scenario = sut.ExtractScenario(gherkinScenario);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScenario_Extracts_Steps_With_Multiple_Patterns",
        "Body": "{\r\n    //arrange.\r\n    var sut = FeatureClass.FromFeatureInstance(new FeatureWithMultipleStepPatterns());\r\n    //act.\r\n    var scenario = sut.ExtractScenario(CreateGherkinDocument(\u0022scenario 123\u0022, new string[] { \u0022Given something else\u0022 }).Feature.Children.OfType\u003CGherkin.Ast.Scenario\u003E().First());\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithFilePath",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "FromFeatureInstance_Creates_FeatureClass_With_Default_FilePath_If_No_Attribute",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithoutFilePath();\r\n    //act.\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromFeatureInstance_Creates_FeatureClass_With_FilePath_From_Attribute",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithFilePath();\r\n    //act.\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromFeatureInstance_DoesNotAllow_AsyncVoid_Steps",
        "Body": "{\r\n    var featureInstance = new FeatureWithAsyncVoidStep();\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E FeatureClass.FromFeatureInstance(featureInstance));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScenario_Extracts_Scenario_Without_Background",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022some scenario name 123\u0022;\r\n    var featureInstance = new FeatureWithMatchingScenarioStepsToExtract();\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    var gherkinScenario = CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase), \u0022And \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase), \u0022When \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep3Text, \u0022Then \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase) }).Feature.Children.First() as Gherkin.Ast.Scenario;\r\n    //act.\r\n    var scenario = sut.ExtractScenario(gherkinScenario);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScnario_Extracts_Scenario_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario213\u0022;\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    var gherknScenario = CreateGherkinDocument(scenarioName, new string[] { \u0022When \u0022 \u002B FeatureWithDataTableScenarioStep.Steptext }, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) })).Feature.Children.First() as Gherkin.Ast.Scenario;\r\n    //act.\r\n    var scenario = sut.ExtractScenario(gherknScenario);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScenario_Extracts_Scenario_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    var scenarioName = \u0022scenario-121kh2\u0022;\r\n    var docStringContent = @\u0022some content\n    \u002B\u002B\u002B\n    with multi lines\n    ---\n    in it\u0022;\r\n    var gherkinScenario = CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithDocStringScenarioStep.StepWithDocStringText }, new Gherkin.Ast.DocString(null, null, docStringContent)).Feature.Children.First() as Gherkin.Ast.Scenario;\r\n    //act.\r\n    var scenario = sut.ExtractScenario(gherkinScenario);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScenario_Extracts_Steps_With_Multiple_Patterns",
        "Body": "{\r\n    //arrange.\r\n    var sut = FeatureClass.FromFeatureInstance(new FeatureWithMultipleStepPatterns());\r\n    //act.\r\n    var scenario = sut.ExtractScenario(CreateGherkinDocument(\u0022scenario 123\u0022, new string[] { \u0022Given something else\u0022 }).Feature.Children.OfType\u003CGherkin.Ast.Scenario\u003E().First());\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithAsyncVoidStep",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "FromFeatureInstance_Creates_FeatureClass_With_Default_FilePath_If_No_Attribute",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithoutFilePath();\r\n    //act.\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromFeatureInstance_Creates_FeatureClass_With_FilePath_From_Attribute",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithFilePath();\r\n    //act.\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromFeatureInstance_DoesNotAllow_AsyncVoid_Steps",
        "Body": "{\r\n    var featureInstance = new FeatureWithAsyncVoidStep();\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E FeatureClass.FromFeatureInstance(featureInstance));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScenario_Extracts_Scenario_Without_Background",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022some scenario name 123\u0022;\r\n    var featureInstance = new FeatureWithMatchingScenarioStepsToExtract();\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    var gherkinScenario = CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase), \u0022And \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase), \u0022When \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep3Text, \u0022Then \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase) }).Feature.Children.First() as Gherkin.Ast.Scenario;\r\n    //act.\r\n    var scenario = sut.ExtractScenario(gherkinScenario);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScnario_Extracts_Scenario_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario213\u0022;\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    var gherknScenario = CreateGherkinDocument(scenarioName, new string[] { \u0022When \u0022 \u002B FeatureWithDataTableScenarioStep.Steptext }, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) })).Feature.Children.First() as Gherkin.Ast.Scenario;\r\n    //act.\r\n    var scenario = sut.ExtractScenario(gherknScenario);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScenario_Extracts_Scenario_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    var scenarioName = \u0022scenario-121kh2\u0022;\r\n    var docStringContent = @\u0022some content\n    \u002B\u002B\u002B\n    with multi lines\n    ---\n    in it\u0022;\r\n    var gherkinScenario = CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithDocStringScenarioStep.StepWithDocStringText }, new Gherkin.Ast.DocString(null, null, docStringContent)).Feature.Children.First() as Gherkin.Ast.Scenario;\r\n    //act.\r\n    var scenario = sut.ExtractScenario(gherkinScenario);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScenario_Extracts_Steps_With_Multiple_Patterns",
        "Body": "{\r\n    //arrange.\r\n    var sut = FeatureClass.FromFeatureInstance(new FeatureWithMultipleStepPatterns());\r\n    //act.\r\n    var scenario = sut.ExtractScenario(CreateGherkinDocument(\u0022scenario 123\u0022, new string[] { \u0022Given something else\u0022 }).Feature.Children.OfType\u003CGherkin.Ast.Scenario\u003E().First());\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithMatchingScenarioStepsToExtract",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "FromFeatureInstance_Creates_FeatureClass_With_Default_FilePath_If_No_Attribute",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithoutFilePath();\r\n    //act.\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromFeatureInstance_Creates_FeatureClass_With_FilePath_From_Attribute",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithFilePath();\r\n    //act.\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromFeatureInstance_DoesNotAllow_AsyncVoid_Steps",
        "Body": "{\r\n    var featureInstance = new FeatureWithAsyncVoidStep();\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E FeatureClass.FromFeatureInstance(featureInstance));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScenario_Extracts_Scenario_Without_Background",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022some scenario name 123\u0022;\r\n    var featureInstance = new FeatureWithMatchingScenarioStepsToExtract();\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    var gherkinScenario = CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase), \u0022And \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase), \u0022When \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep3Text, \u0022Then \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase) }).Feature.Children.First() as Gherkin.Ast.Scenario;\r\n    //act.\r\n    var scenario = sut.ExtractScenario(gherkinScenario);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScnario_Extracts_Scenario_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario213\u0022;\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    var gherknScenario = CreateGherkinDocument(scenarioName, new string[] { \u0022When \u0022 \u002B FeatureWithDataTableScenarioStep.Steptext }, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) })).Feature.Children.First() as Gherkin.Ast.Scenario;\r\n    //act.\r\n    var scenario = sut.ExtractScenario(gherknScenario);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScenario_Extracts_Scenario_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    var scenarioName = \u0022scenario-121kh2\u0022;\r\n    var docStringContent = @\u0022some content\n    \u002B\u002B\u002B\n    with multi lines\n    ---\n    in it\u0022;\r\n    var gherkinScenario = CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithDocStringScenarioStep.StepWithDocStringText }, new Gherkin.Ast.DocString(null, null, docStringContent)).Feature.Children.First() as Gherkin.Ast.Scenario;\r\n    //act.\r\n    var scenario = sut.ExtractScenario(gherkinScenario);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScenario_Extracts_Steps_With_Multiple_Patterns",
        "Body": "{\r\n    //arrange.\r\n    var sut = FeatureClass.FromFeatureInstance(new FeatureWithMultipleStepPatterns());\r\n    //act.\r\n    var scenario = sut.ExtractScenario(CreateGherkinDocument(\u0022scenario 123\u0022, new string[] { \u0022Given something else\u0022 }).Feature.Children.OfType\u003CGherkin.Ast.Scenario\u003E().First());\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithDataTableScenarioStep",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "FromFeatureInstance_Creates_FeatureClass_With_Default_FilePath_If_No_Attribute",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithoutFilePath();\r\n    //act.\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromFeatureInstance_Creates_FeatureClass_With_FilePath_From_Attribute",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithFilePath();\r\n    //act.\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromFeatureInstance_DoesNotAllow_AsyncVoid_Steps",
        "Body": "{\r\n    var featureInstance = new FeatureWithAsyncVoidStep();\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E FeatureClass.FromFeatureInstance(featureInstance));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScenario_Extracts_Scenario_Without_Background",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022some scenario name 123\u0022;\r\n    var featureInstance = new FeatureWithMatchingScenarioStepsToExtract();\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    var gherkinScenario = CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase), \u0022And \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase), \u0022When \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep3Text, \u0022Then \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase) }).Feature.Children.First() as Gherkin.Ast.Scenario;\r\n    //act.\r\n    var scenario = sut.ExtractScenario(gherkinScenario);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScnario_Extracts_Scenario_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario213\u0022;\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    var gherknScenario = CreateGherkinDocument(scenarioName, new string[] { \u0022When \u0022 \u002B FeatureWithDataTableScenarioStep.Steptext }, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) })).Feature.Children.First() as Gherkin.Ast.Scenario;\r\n    //act.\r\n    var scenario = sut.ExtractScenario(gherknScenario);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScenario_Extracts_Scenario_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    var scenarioName = \u0022scenario-121kh2\u0022;\r\n    var docStringContent = @\u0022some content\n    \u002B\u002B\u002B\n    with multi lines\n    ---\n    in it\u0022;\r\n    var gherkinScenario = CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithDocStringScenarioStep.StepWithDocStringText }, new Gherkin.Ast.DocString(null, null, docStringContent)).Feature.Children.First() as Gherkin.Ast.Scenario;\r\n    //act.\r\n    var scenario = sut.ExtractScenario(gherkinScenario);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScenario_Extracts_Steps_With_Multiple_Patterns",
        "Body": "{\r\n    //arrange.\r\n    var sut = FeatureClass.FromFeatureInstance(new FeatureWithMultipleStepPatterns());\r\n    //act.\r\n    var scenario = sut.ExtractScenario(CreateGherkinDocument(\u0022scenario 123\u0022, new string[] { \u0022Given something else\u0022 }).Feature.Children.OfType\u003CGherkin.Ast.Scenario\u003E().First());\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithDocStringScenarioStep",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "FromFeatureInstance_Creates_FeatureClass_With_Default_FilePath_If_No_Attribute",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithoutFilePath();\r\n    //act.\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromFeatureInstance_Creates_FeatureClass_With_FilePath_From_Attribute",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithFilePath();\r\n    //act.\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromFeatureInstance_DoesNotAllow_AsyncVoid_Steps",
        "Body": "{\r\n    var featureInstance = new FeatureWithAsyncVoidStep();\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E FeatureClass.FromFeatureInstance(featureInstance));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScenario_Extracts_Scenario_Without_Background",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022some scenario name 123\u0022;\r\n    var featureInstance = new FeatureWithMatchingScenarioStepsToExtract();\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    var gherkinScenario = CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase), \u0022And \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase), \u0022When \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep3Text, \u0022Then \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase) }).Feature.Children.First() as Gherkin.Ast.Scenario;\r\n    //act.\r\n    var scenario = sut.ExtractScenario(gherkinScenario);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScnario_Extracts_Scenario_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario213\u0022;\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    var gherknScenario = CreateGherkinDocument(scenarioName, new string[] { \u0022When \u0022 \u002B FeatureWithDataTableScenarioStep.Steptext }, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) })).Feature.Children.First() as Gherkin.Ast.Scenario;\r\n    //act.\r\n    var scenario = sut.ExtractScenario(gherknScenario);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScenario_Extracts_Scenario_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    var scenarioName = \u0022scenario-121kh2\u0022;\r\n    var docStringContent = @\u0022some content\n    \u002B\u002B\u002B\n    with multi lines\n    ---\n    in it\u0022;\r\n    var gherkinScenario = CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithDocStringScenarioStep.StepWithDocStringText }, new Gherkin.Ast.DocString(null, null, docStringContent)).Feature.Children.First() as Gherkin.Ast.Scenario;\r\n    //act.\r\n    var scenario = sut.ExtractScenario(gherkinScenario);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScenario_Extracts_Steps_With_Multiple_Patterns",
        "Body": "{\r\n    //arrange.\r\n    var sut = FeatureClass.FromFeatureInstance(new FeatureWithMultipleStepPatterns());\r\n    //act.\r\n    var scenario = sut.ExtractScenario(CreateGherkinDocument(\u0022scenario 123\u0022, new string[] { \u0022Given something else\u0022 }).Feature.Children.OfType\u003CGherkin.Ast.Scenario\u003E().First());\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithMultipleStepPatterns",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "FromFeatureInstance_Creates_FeatureClass_With_Default_FilePath_If_No_Attribute",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithoutFilePath();\r\n    //act.\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromFeatureInstance_Creates_FeatureClass_With_FilePath_From_Attribute",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithFilePath();\r\n    //act.\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromFeatureInstance_DoesNotAllow_AsyncVoid_Steps",
        "Body": "{\r\n    var featureInstance = new FeatureWithAsyncVoidStep();\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E FeatureClass.FromFeatureInstance(featureInstance));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScenario_Extracts_Scenario_Without_Background",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022some scenario name 123\u0022;\r\n    var featureInstance = new FeatureWithMatchingScenarioStepsToExtract();\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    var gherkinScenario = CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase), \u0022And \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase), \u0022When \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep3Text, \u0022Then \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase) }).Feature.Children.First() as Gherkin.Ast.Scenario;\r\n    //act.\r\n    var scenario = sut.ExtractScenario(gherkinScenario);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScnario_Extracts_Scenario_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario213\u0022;\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    var gherknScenario = CreateGherkinDocument(scenarioName, new string[] { \u0022When \u0022 \u002B FeatureWithDataTableScenarioStep.Steptext }, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) })).Feature.Children.First() as Gherkin.Ast.Scenario;\r\n    //act.\r\n    var scenario = sut.ExtractScenario(gherknScenario);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScenario_Extracts_Scenario_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    var scenarioName = \u0022scenario-121kh2\u0022;\r\n    var docStringContent = @\u0022some content\n    \u002B\u002B\u002B\n    with multi lines\n    ---\n    in it\u0022;\r\n    var gherkinScenario = CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithDocStringScenarioStep.StepWithDocStringText }, new Gherkin.Ast.DocString(null, null, docStringContent)).Feature.Children.First() as Gherkin.Ast.Scenario;\r\n    //act.\r\n    var scenario = sut.ExtractScenario(gherkinScenario);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScenario_Extracts_Steps_With_Multiple_Patterns",
        "Body": "{\r\n    //arrange.\r\n    var sut = FeatureClass.FromFeatureInstance(new FeatureWithMultipleStepPatterns());\r\n    //act.\r\n    var scenario = sut.ExtractScenario(CreateGherkinDocument(\u0022scenario 123\u0022, new string[] { \u0022Given something else\u0022 }).Feature.Children.OfType\u003CGherkin.Ast.Scenario\u003E().First());\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureClassTests",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "FromFeatureInstance_Creates_FeatureClass_With_Default_FilePath_If_No_Attribute",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithoutFilePath();\r\n    //act.\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromFeatureInstance_Creates_FeatureClass_With_FilePath_From_Attribute",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithFilePath();\r\n    //act.\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromFeatureInstance_DoesNotAllow_AsyncVoid_Steps",
        "Body": "{\r\n    var featureInstance = new FeatureWithAsyncVoidStep();\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E FeatureClass.FromFeatureInstance(featureInstance));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScenario_Extracts_Scenario_Without_Background",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022some scenario name 123\u0022;\r\n    var featureInstance = new FeatureWithMatchingScenarioStepsToExtract();\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    var gherkinScenario = CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase), \u0022And \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase), \u0022When \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep3Text, \u0022Then \u0022 \u002B FeatureWithMatchingScenarioStepsToExtract.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase) }).Feature.Children.First() as Gherkin.Ast.Scenario;\r\n    //act.\r\n    var scenario = sut.ExtractScenario(gherkinScenario);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScnario_Extracts_Scenario_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario213\u0022;\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    var gherknScenario = CreateGherkinDocument(scenarioName, new string[] { \u0022When \u0022 \u002B FeatureWithDataTableScenarioStep.Steptext }, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) })).Feature.Children.First() as Gherkin.Ast.Scenario;\r\n    //act.\r\n    var scenario = sut.ExtractScenario(gherknScenario);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScenario_Extracts_Scenario_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var sut = FeatureClass.FromFeatureInstance(featureInstance);\r\n    var scenarioName = \u0022scenario-121kh2\u0022;\r\n    var docStringContent = @\u0022some content\n    \u002B\u002B\u002B\n    with multi lines\n    ---\n    in it\u0022;\r\n    var gherkinScenario = CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithDocStringScenarioStep.StepWithDocStringText }, new Gherkin.Ast.DocString(null, null, docStringContent)).Feature.Children.First() as Gherkin.Ast.Scenario;\r\n    //act.\r\n    var scenario = sut.ExtractScenario(gherkinScenario);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExtractScenario_Extracts_Steps_With_Multiple_Patterns",
        "Body": "{\r\n    //arrange.\r\n    var sut = FeatureClass.FromFeatureInstance(new FeatureWithMultipleStepPatterns());\r\n    //act.\r\n    var scenario = sut.ExtractScenario(CreateGherkinDocument(\u0022scenario 123\u0022, new string[] { \u0022Given something else\u0022 }).Feature.Children.OfType\u003CGherkin.Ast.Scenario\u003E().First());\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MyFeature",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Require_FeatureClassType",
        "Body": "{\r\n    //act / assert.\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E _sut.Discover(null));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Throw_When_Feature_File_Not_Found",
        "Body": "{\r\n    //arrange.\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns\u003CFeatureFile\u003E(null).Verifiable();\r\n    //act / assert.\r\n    Assert.Throws\u003CFileNotFoundException\u003E(() =\u003E _sut.Discover(featureClassType));\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Find_Scenarios_In_Feature_File",
        "Body": "{\r\n    //arrange.\r\n    var gherkinFeature = new GherkinFeatureBuilder().WithScenario(\u0022scenario1\u0022, steps =\u003E steps.Given(\u0022step 1\u0022, null)).Build();\r\n    _featureFileRepository.Setup(r =\u003E r.GetFeatureFilePaths()).Returns(new List\u003Cstring\u003E { fileName });\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(fileName)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(gherkinFeature, null))).Verifiable();\r\n    //act.\r\n    var features = _sut.Discover(featureClassType);\r\n    var featureFile = features.First();\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureFile.Feature);\r\n    Assert.Same(gherkinFeature, featureFile.Feature);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Find_Scenarios_In_Many_Feature_Files_Sharing_Pattern",
        "Body": "{\r\n    //arrange.\r\n    _featureFileRepository.Setup(r =\u003E r.GetFeatureFilePaths()).Returns(new List\u003CString\u003E(files)).Verifiable();\r\n    int i = 0;\r\n    files.ToList().ForEach(file =\u003E\r\n    {\r\n        var gherkinFeature = new GherkinFeatureBuilder().WithScenario($\u0022First scenario from Feature File {i \u002B 1}\u0022, steps =\u003E steps.Given(\u0022step 1\u0022, null)).Build();\r\n        _featureFileRepository.Setup(r =\u003E r.GetByFilePath(file)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(gherkinFeature, null))).Verifiable();\r\n        \u002B\u002Bi;\r\n    });\r\n    //act.\r\n    var features = _sut.Discover(featureClassType);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    i = 0;\r\n    features.ToList().ForEach(feature =\u003E\r\n    {\r\n        Assert.NotNull(feature.Feature);\r\n        Assert.Equal(files[i], feature.Path);\r\n        // let\u0027s check scenarios are correct\r\n        Assert.Equal($\u0022First scenario from Feature File {i \u002B 1}\u0022, feature.Feature.Children.First().Name);\r\n        \u002B\u002Bi;\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MyFeatureWithAttribute",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Require_FeatureClassType",
        "Body": "{\r\n    //act / assert.\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E _sut.Discover(null));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Throw_When_Feature_File_Not_Found",
        "Body": "{\r\n    //arrange.\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns\u003CFeatureFile\u003E(null).Verifiable();\r\n    //act / assert.\r\n    Assert.Throws\u003CFileNotFoundException\u003E(() =\u003E _sut.Discover(featureClassType));\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Find_Scenarios_In_Feature_File",
        "Body": "{\r\n    //arrange.\r\n    var gherkinFeature = new GherkinFeatureBuilder().WithScenario(\u0022scenario1\u0022, steps =\u003E steps.Given(\u0022step 1\u0022, null)).Build();\r\n    _featureFileRepository.Setup(r =\u003E r.GetFeatureFilePaths()).Returns(new List\u003Cstring\u003E { fileName });\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(fileName)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(gherkinFeature, null))).Verifiable();\r\n    //act.\r\n    var features = _sut.Discover(featureClassType);\r\n    var featureFile = features.First();\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureFile.Feature);\r\n    Assert.Same(gherkinFeature, featureFile.Feature);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Find_Scenarios_In_Many_Feature_Files_Sharing_Pattern",
        "Body": "{\r\n    //arrange.\r\n    _featureFileRepository.Setup(r =\u003E r.GetFeatureFilePaths()).Returns(new List\u003CString\u003E(files)).Verifiable();\r\n    int i = 0;\r\n    files.ToList().ForEach(file =\u003E\r\n    {\r\n        var gherkinFeature = new GherkinFeatureBuilder().WithScenario($\u0022First scenario from Feature File {i \u002B 1}\u0022, steps =\u003E steps.Given(\u0022step 1\u0022, null)).Build();\r\n        _featureFileRepository.Setup(r =\u003E r.GetByFilePath(file)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(gherkinFeature, null))).Verifiable();\r\n        \u002B\u002Bi;\r\n    });\r\n    //act.\r\n    var features = _sut.Discover(featureClassType);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    i = 0;\r\n    features.ToList().ForEach(feature =\u003E\r\n    {\r\n        Assert.NotNull(feature.Feature);\r\n        Assert.Equal(files[i], feature.Path);\r\n        // let\u0027s check scenarios are correct\r\n        Assert.Equal($\u0022First scenario from Feature File {i \u002B 1}\u0022, feature.Feature.Children.First().Name);\r\n        \u002B\u002Bi;\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AddFeature",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Require_FeatureClassType",
        "Body": "{\r\n    //act / assert.\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E _sut.Discover(null));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Throw_When_Feature_File_Not_Found",
        "Body": "{\r\n    //arrange.\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns\u003CFeatureFile\u003E(null).Verifiable();\r\n    //act / assert.\r\n    Assert.Throws\u003CFileNotFoundException\u003E(() =\u003E _sut.Discover(featureClassType));\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Find_Scenarios_In_Feature_File",
        "Body": "{\r\n    //arrange.\r\n    var gherkinFeature = new GherkinFeatureBuilder().WithScenario(\u0022scenario1\u0022, steps =\u003E steps.Given(\u0022step 1\u0022, null)).Build();\r\n    _featureFileRepository.Setup(r =\u003E r.GetFeatureFilePaths()).Returns(new List\u003Cstring\u003E { fileName });\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(fileName)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(gherkinFeature, null))).Verifiable();\r\n    //act.\r\n    var features = _sut.Discover(featureClassType);\r\n    var featureFile = features.First();\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureFile.Feature);\r\n    Assert.Same(gherkinFeature, featureFile.Feature);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Find_Scenarios_In_Many_Feature_Files_Sharing_Pattern",
        "Body": "{\r\n    //arrange.\r\n    _featureFileRepository.Setup(r =\u003E r.GetFeatureFilePaths()).Returns(new List\u003CString\u003E(files)).Verifiable();\r\n    int i = 0;\r\n    files.ToList().ForEach(file =\u003E\r\n    {\r\n        var gherkinFeature = new GherkinFeatureBuilder().WithScenario($\u0022First scenario from Feature File {i \u002B 1}\u0022, steps =\u003E steps.Given(\u0022step 1\u0022, null)).Build();\r\n        _featureFileRepository.Setup(r =\u003E r.GetByFilePath(file)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(gherkinFeature, null))).Verifiable();\r\n        \u002B\u002Bi;\r\n    });\r\n    //act.\r\n    var features = _sut.Discover(featureClassType);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    i = 0;\r\n    features.ToList().ForEach(feature =\u003E\r\n    {\r\n        Assert.NotNull(feature.Feature);\r\n        Assert.Equal(files[i], feature.Path);\r\n        // let\u0027s check scenarios are correct\r\n        Assert.Equal($\u0022First scenario from Feature File {i \u002B 1}\u0022, feature.Feature.Children.First().Name);\r\n        \u002B\u002Bi;\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ComplexFeature",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Require_FeatureClassType",
        "Body": "{\r\n    //act / assert.\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E _sut.Discover(null));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Throw_When_Feature_File_Not_Found",
        "Body": "{\r\n    //arrange.\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns\u003CFeatureFile\u003E(null).Verifiable();\r\n    //act / assert.\r\n    Assert.Throws\u003CFileNotFoundException\u003E(() =\u003E _sut.Discover(featureClassType));\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Find_Scenarios_In_Feature_File",
        "Body": "{\r\n    //arrange.\r\n    var gherkinFeature = new GherkinFeatureBuilder().WithScenario(\u0022scenario1\u0022, steps =\u003E steps.Given(\u0022step 1\u0022, null)).Build();\r\n    _featureFileRepository.Setup(r =\u003E r.GetFeatureFilePaths()).Returns(new List\u003Cstring\u003E { fileName });\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(fileName)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(gherkinFeature, null))).Verifiable();\r\n    //act.\r\n    var features = _sut.Discover(featureClassType);\r\n    var featureFile = features.First();\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureFile.Feature);\r\n    Assert.Same(gherkinFeature, featureFile.Feature);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Find_Scenarios_In_Many_Feature_Files_Sharing_Pattern",
        "Body": "{\r\n    //arrange.\r\n    _featureFileRepository.Setup(r =\u003E r.GetFeatureFilePaths()).Returns(new List\u003CString\u003E(files)).Verifiable();\r\n    int i = 0;\r\n    files.ToList().ForEach(file =\u003E\r\n    {\r\n        var gherkinFeature = new GherkinFeatureBuilder().WithScenario($\u0022First scenario from Feature File {i \u002B 1}\u0022, steps =\u003E steps.Given(\u0022step 1\u0022, null)).Build();\r\n        _featureFileRepository.Setup(r =\u003E r.GetByFilePath(file)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(gherkinFeature, null))).Verifiable();\r\n        \u002B\u002Bi;\r\n    });\r\n    //act.\r\n    var features = _sut.Discover(featureClassType);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    i = 0;\r\n    features.ToList().ForEach(feature =\u003E\r\n    {\r\n        Assert.NotNull(feature.Feature);\r\n        Assert.Equal(files[i], feature.Path);\r\n        // let\u0027s check scenarios are correct\r\n        Assert.Equal($\u0022First scenario from Feature File {i \u002B 1}\u0022, feature.Feature.Children.First().Name);\r\n        \u002B\u002Bi;\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureDiscoveryModel_Discover_Should",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Require_FeatureClassType",
        "Body": "{\r\n    //act / assert.\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E _sut.Discover(null));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Throw_When_Feature_File_Not_Found",
        "Body": "{\r\n    //arrange.\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns\u003CFeatureFile\u003E(null).Verifiable();\r\n    //act / assert.\r\n    Assert.Throws\u003CFileNotFoundException\u003E(() =\u003E _sut.Discover(featureClassType));\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Find_Scenarios_In_Feature_File",
        "Body": "{\r\n    //arrange.\r\n    var gherkinFeature = new GherkinFeatureBuilder().WithScenario(\u0022scenario1\u0022, steps =\u003E steps.Given(\u0022step 1\u0022, null)).Build();\r\n    _featureFileRepository.Setup(r =\u003E r.GetFeatureFilePaths()).Returns(new List\u003Cstring\u003E { fileName });\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(fileName)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(gherkinFeature, null))).Verifiable();\r\n    //act.\r\n    var features = _sut.Discover(featureClassType);\r\n    var featureFile = features.First();\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureFile.Feature);\r\n    Assert.Same(gherkinFeature, featureFile.Feature);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Find_Scenarios_In_Many_Feature_Files_Sharing_Pattern",
        "Body": "{\r\n    //arrange.\r\n    _featureFileRepository.Setup(r =\u003E r.GetFeatureFilePaths()).Returns(new List\u003CString\u003E(files)).Verifiable();\r\n    int i = 0;\r\n    files.ToList().ForEach(file =\u003E\r\n    {\r\n        var gherkinFeature = new GherkinFeatureBuilder().WithScenario($\u0022First scenario from Feature File {i \u002B 1}\u0022, steps =\u003E steps.Given(\u0022step 1\u0022, null)).Build();\r\n        _featureFileRepository.Setup(r =\u003E r.GetByFilePath(file)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(gherkinFeature, null))).Verifiable();\r\n        \u002B\u002Bi;\r\n    });\r\n    //act.\r\n    var features = _sut.Discover(featureClassType);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    i = 0;\r\n    features.ToList().ForEach(feature =\u003E\r\n    {\r\n        Assert.NotNull(feature.Feature);\r\n        Assert.Equal(files[i], feature.Path);\r\n        // let\u0027s check scenarios are correct\r\n        Assert.Equal($\u0022First scenario from Feature File {i \u002B 1}\u0022, feature.Feature.Children.First().Name);\r\n        \u002B\u002Bi;\r\n    });\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureFileTests",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Ctor_Initializes_Properties",
        "Body": "{\r\n    //arrange.\r\n    var gherkinDocument = new Gherkin.Ast.GherkinDocument(null, null);\r\n    //act.\r\n    var sut = new FeatureFile(gherkinDocument);\r\n    //assert.\r\n    Assert.Same(gherkinDocument, sut.GherkinDocument);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetScenario_Retrieves_If_Found",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022name exists\u0022;\r\n    var sut = new FeatureFile(CreateGherkinDocumentWithScenario(scenarioName));\r\n    //act.\r\n    var scenario = sut.GetScenario(scenarioName);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n    Assert.Same(sut.GherkinDocument.Feature.Children.First(), scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetScenario_Gives_Null_If_Not_Found",
        "Body": "{\r\n    //arrange.\r\n    var sut = new FeatureFile(CreateGherkinDocumentWithScenario(\u0022existing\u0022));\r\n    //act.\r\n    var scenario = sut.GetScenario(\u0022non-existing\u0022);\r\n    //assert.\r\n    Assert.Null(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetScenarioOutline_Retrieves_If_Found",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022name exists\u0022;\r\n    var sut = new FeatureFile(CreateGherkinDocumentWithScenarioOutline(scenarioName));\r\n    //act.\r\n    var scenario = sut.GetScenarioOutline(scenarioName);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n    Assert.Same(sut.GherkinDocument.Feature.Children.First(), scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetScenarioOutline_Gives_Null_If_Not_Found",
        "Body": "{\r\n    //arrange.\r\n    var sut = new FeatureFile(CreateGherkinDocumentWithScenarioOutline(\u0022existing\u0022));\r\n    //act.\r\n    var scenario = sut.GetScenarioOutline(\u0022non-existing\u0022);\r\n    //assert.\r\n    Assert.Null(scenario);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetBackground_Retrieves_If_Present",
        "Body": "{\r\n    var sut = new FeatureFile(CreateGherkinDocumentWithBackground());\r\n    var background = sut.GetBackground();\r\n    Assert.NotNull(background);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetBackground_Gives_Null_If_Not_Present",
        "Body": "{\r\n    var sut = new FeatureFile(CreateGherkinDocumentWithScenario(\u0022test\u0022));\r\n    var background = sut.GetBackground();\r\n    Assert.Null(background);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "GherkinFeatureTests",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "GetScenarioTags_Requires_Arguments",
        "Body": "{\r\n    //act / assert.\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E feature.GetScenarioTags(scenarioName));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetScenarioTags_Retrieves_Tags_Of_Feature_And_Scenario_Combined",
        "Body": "{\r\n    //arrange.\r\n    var featureTags = new Gherkin.Ast.Tag[]\r\n    {\r\n        new Gherkin.Ast.Tag(null, \u0022featuretag-1\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022featuretag-2\u0022)\r\n    };\r\n    var scenarioTags = new Gherkin.Ast.Tag[]\r\n    {\r\n        new Gherkin.Ast.Tag(null, \u0022scenarioTag-1\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022scenarioTag-2\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022scenarioTag-3\u0022)\r\n    };\r\n    var scenarioName = \u0022scenario name 123\u0022;\r\n    var feature = new Gherkin.Ast.Feature(featureTags, null, null, null, null, null, new Gherkin.Ast.ScenarioDefinition[] { new Gherkin.Ast.Scenario(scenarioTags, null, null, scenarioName, null, null) });\r\n    //act.\r\n    var scenarioTagNames = feature.GetScenarioTags(scenarioName);\r\n    //assert.\r\n    Assert.NotNull(scenarioTagNames);\r\n    var expectedTagNames = featureTags.Union(scenarioTags).Select(t =\u003E t.Name);\r\n    Assert.Equal(expectedTagNames, scenarioTagNames);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsScenarioIgnored_Requires_Arguments",
        "Body": "{\r\n    //act / assert.\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E feature.IsScenarioIgnored(scenarioName));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsScenarioIgnored_Does_Not_Treat_Ignored_If_No_Ignore_Tag",
        "Body": "{\r\n    //arrange.\r\n    var featureTags = new Gherkin.Ast.Tag[]\r\n    {\r\n        new Gherkin.Ast.Tag(null, \u0022featuretag-1\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022featuretag-2\u0022)\r\n    };\r\n    var scenarioTags = new Gherkin.Ast.Tag[]\r\n    {\r\n        new Gherkin.Ast.Tag(null, \u0022scenarioTag-1\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022scenarioTag-2\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022scenarioTag-3\u0022)\r\n    };\r\n    var scenarioName = \u0022scenario name 123\u0022;\r\n    var feature = new Gherkin.Ast.Feature(featureTags, null, null, null, null, null, new Gherkin.Ast.ScenarioDefinition[] { new Gherkin.Ast.Scenario(scenarioTags, null, null, scenarioName, null, null) });\r\n    //act.\r\n    var isIgnored = feature.IsScenarioIgnored(scenarioName);\r\n    //assert.\r\n    Assert.False(isIgnored);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsScenarioIgnored_Treats_Ignored_If_Feature_Is_Ignored",
        "Body": "{\r\n    //arrange.\r\n    var featureTags = new Gherkin.Ast.Tag[]\r\n    {\r\n        new Gherkin.Ast.Tag(null, \u0022featuretag-1\u0022),\r\n        new Gherkin.Ast.Tag(null, GherkinFeatureExtensions.IgnoreTag)\r\n    };\r\n    var scenarioTags = new Gherkin.Ast.Tag[]\r\n    {\r\n        new Gherkin.Ast.Tag(null, \u0022scenarioTag-1\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022scenarioTag-2\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022scenarioTag-3\u0022)\r\n    };\r\n    var scenarioName = \u0022scenario name 123\u0022;\r\n    var feature = new Gherkin.Ast.Feature(featureTags, null, null, null, null, null, new Gherkin.Ast.ScenarioDefinition[] { new Gherkin.Ast.Scenario(scenarioTags, null, null, scenarioName, null, null) });\r\n    //act.\r\n    var isIgnored = feature.IsScenarioIgnored(scenarioName);\r\n    //assert.\r\n    Assert.True(isIgnored);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsScenarioIgnored_Treats_Ignored_If_Scenario_Is_Ignored",
        "Body": "{\r\n    //arrange.\r\n    var featureTags = new Gherkin.Ast.Tag[]\r\n    {\r\n        new Gherkin.Ast.Tag(null, \u0022featuretag-1\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022featuretag-2\u0022)\r\n    };\r\n    var scenarioTags = new Gherkin.Ast.Tag[]\r\n    {\r\n        new Gherkin.Ast.Tag(null, \u0022scenarioTag-1\u0022),\r\n        new Gherkin.Ast.Tag(null, GherkinFeatureExtensions.IgnoreTag),\r\n        new Gherkin.Ast.Tag(null, \u0022scenarioTag-3\u0022)\r\n    };\r\n    var scenarioName = \u0022scenario name 123\u0022;\r\n    var feature = new Gherkin.Ast.Feature(featureTags, null, null, null, null, null, new Gherkin.Ast.ScenarioDefinition[] { new Gherkin.Ast.Scenario(scenarioTags, null, null, scenarioName, null, null) });\r\n    //act.\r\n    var isIgnored = feature.IsScenarioIgnored(scenarioName);\r\n    //assert.\r\n    Assert.True(isIgnored);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetExamplesTags_Requires_Arguments",
        "Body": "{\r\n    //act / assert.\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E feature.GetExamplesTags(scenarioOutlineName, examplesName));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetExamplesTags_Retrieves_Tags_Of_Feature_And_OutLine_And_Examples_Combined",
        "Body": "{\r\n    //arrange.\r\n    var featureTags = new Gherkin.Ast.Tag[]\r\n    {\r\n        new Gherkin.Ast.Tag(null, \u0022featuretag-1\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022featuretag-2\u0022)\r\n    };\r\n    var outlineTags = new Gherkin.Ast.Tag[]\r\n    {\r\n        new Gherkin.Ast.Tag(null, \u0022outlinetag-1\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022outlinetag-2\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022outlinetag-3\u0022)\r\n    };\r\n    var examplesTags = new Gherkin.Ast.Tag[]\r\n    {\r\n        new Gherkin.Ast.Tag(null, \u0022examplestag-1\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022examplestag-2\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022examplestag-2\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022examplestag-3\u0022)\r\n    };\r\n    var scenarioOutlineName = \u0022scenario name 123\u0022;\r\n    var examplesName = \u0022examples name 123\u0022;\r\n    var feature = new Gherkin.Ast.Feature(featureTags, null, null, null, null, null, new Gherkin.Ast.ScenarioDefinition[] { new Gherkin.Ast.ScenarioOutline(outlineTags, null, null, scenarioOutlineName, null, null, new Gherkin.Ast.Examples[] { new Gherkin.Ast.Examples(examplesTags, null, null, examplesName, null, null, null) }) });\r\n    //act.\r\n    var examplesTagNames = feature.GetExamplesTags(scenarioOutlineName, examplesName);\r\n    //assert.\r\n    Assert.NotNull(examplesTagNames);\r\n    var expectedTagNames = featureTags.Union(outlineTags).Union(examplesTags).Select(t =\u003E t.Name);\r\n    Assert.Equal(expectedTagNames, examplesTagNames);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsExamplesIgnored_Requires_Arguments",
        "Body": "{\r\n    //act / assert.\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E feature.IsExamplesIgnored(scenarioOutlineName, examplesName));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsExamplesIgnored_Does_Not_Treat_Ignored_If_No_Ignore_Tag",
        "Body": "{\r\n    //arrange.\r\n    var featureTags = new Gherkin.Ast.Tag[]\r\n    {\r\n        new Gherkin.Ast.Tag(null, \u0022featuretag-1\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022featuretag-2\u0022)\r\n    };\r\n    var outlineTags = new Gherkin.Ast.Tag[]\r\n    {\r\n        new Gherkin.Ast.Tag(null, \u0022outlinetag-1\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022outlinetag-2\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022outlinetag-3\u0022)\r\n    };\r\n    var examplesTags = new Gherkin.Ast.Tag[]\r\n    {\r\n        new Gherkin.Ast.Tag(null, \u0022examplestag-1\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022examplestag-2\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022examplestag-2\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022examplestag-3\u0022)\r\n    };\r\n    var scenarioOutlineName = \u0022scenario name 123\u0022;\r\n    var examplesName = \u0022examples name 123\u0022;\r\n    var feature = new Gherkin.Ast.Feature(featureTags, null, null, null, null, null, new Gherkin.Ast.ScenarioDefinition[] { new Gherkin.Ast.ScenarioOutline(outlineTags, null, null, scenarioOutlineName, null, null, new Gherkin.Ast.Examples[] { new Gherkin.Ast.Examples(examplesTags, null, null, examplesName, null, null, null) }) });\r\n    //act.\r\n    var isIgnored = feature.IsExamplesIgnored(scenarioOutlineName, examplesName);\r\n    //assert.\r\n    Assert.False(isIgnored);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsExamplesIgnored_Treats_Ignored_If_Feature_Is_Ignored",
        "Body": "{\r\n    //arrange.\r\n    var featureTags = new Gherkin.Ast.Tag[]\r\n    {\r\n        new Gherkin.Ast.Tag(null, \u0022featuretag-1\u0022),\r\n        new Gherkin.Ast.Tag(null, GherkinFeatureExtensions.IgnoreTag)\r\n    };\r\n    var outlineTags = new Gherkin.Ast.Tag[]\r\n    {\r\n        new Gherkin.Ast.Tag(null, \u0022outlinetag-1\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022outlinetag-2\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022outlinetag-3\u0022)\r\n    };\r\n    var examplesTags = new Gherkin.Ast.Tag[]\r\n    {\r\n        new Gherkin.Ast.Tag(null, \u0022examplestag-1\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022examplestag-2\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022examplestag-2\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022examplestag-3\u0022)\r\n    };\r\n    var scenarioOutlineName = \u0022scenario name 123\u0022;\r\n    var examplesName = \u0022examples name 123\u0022;\r\n    var feature = new Gherkin.Ast.Feature(featureTags, null, null, null, null, null, new Gherkin.Ast.ScenarioDefinition[] { new Gherkin.Ast.ScenarioOutline(outlineTags, null, null, scenarioOutlineName, null, null, new Gherkin.Ast.Examples[] { new Gherkin.Ast.Examples(examplesTags, null, null, examplesName, null, null, null) }) });\r\n    //act.\r\n    var isIgnored = feature.IsExamplesIgnored(scenarioOutlineName, examplesName);\r\n    //assert.\r\n    Assert.True(isIgnored);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsExamplesIgnored_Treats_Ignored_If_ScenarioOutline_Is_Ignored",
        "Body": "{\r\n    //arrange.\r\n    var featureTags = new Gherkin.Ast.Tag[]\r\n    {\r\n        new Gherkin.Ast.Tag(null, \u0022featuretag-1\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022featuretag-1\u0022)\r\n    };\r\n    var outlineTags = new Gherkin.Ast.Tag[]\r\n    {\r\n        new Gherkin.Ast.Tag(null, \u0022outlinetag-1\u0022),\r\n        new Gherkin.Ast.Tag(null, GherkinFeatureExtensions.IgnoreTag),\r\n        new Gherkin.Ast.Tag(null, \u0022outlinetag-3\u0022)\r\n    };\r\n    var examplesTags = new Gherkin.Ast.Tag[]\r\n    {\r\n        new Gherkin.Ast.Tag(null, \u0022examplestag-1\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022examplestag-2\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022examplestag-2\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022examplestag-3\u0022)\r\n    };\r\n    var scenarioOutlineName = \u0022scenario name 123\u0022;\r\n    var examplesName = \u0022examples name 123\u0022;\r\n    var feature = new Gherkin.Ast.Feature(featureTags, null, null, null, null, null, new Gherkin.Ast.ScenarioDefinition[] { new Gherkin.Ast.ScenarioOutline(outlineTags, null, null, scenarioOutlineName, null, null, new Gherkin.Ast.Examples[] { new Gherkin.Ast.Examples(examplesTags, null, null, examplesName, null, null, null) }) });\r\n    //act.\r\n    var isIgnored = feature.IsExamplesIgnored(scenarioOutlineName, examplesName);\r\n    //assert.\r\n    Assert.True(isIgnored);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsExamplesIgnored_Treats_Ignored_If_Examples_Is_Ignored",
        "Body": "{\r\n    //arrange.\r\n    var featureTags = new Gherkin.Ast.Tag[]\r\n    {\r\n        new Gherkin.Ast.Tag(null, \u0022featuretag-1\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022featuretag-2\u0022)\r\n    };\r\n    var outlineTags = new Gherkin.Ast.Tag[]\r\n    {\r\n        new Gherkin.Ast.Tag(null, \u0022outlinetag-1\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022outlinetag-2\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022outlinetag-3\u0022)\r\n    };\r\n    var examplesTags = new Gherkin.Ast.Tag[]\r\n    {\r\n        new Gherkin.Ast.Tag(null, \u0022examplestag-1\u0022),\r\n        new Gherkin.Ast.Tag(null, \u0022examplestag-2\u0022),\r\n        new Gherkin.Ast.Tag(null, GherkinFeatureExtensions.IgnoreTag),\r\n        new Gherkin.Ast.Tag(null, \u0022examplestag-3\u0022)\r\n    };\r\n    var scenarioOutlineName = \u0022scenario name 123\u0022;\r\n    var examplesName = \u0022examples name 123\u0022;\r\n    var feature = new Gherkin.Ast.Feature(featureTags, null, null, null, null, null, new Gherkin.Ast.ScenarioDefinition[] { new Gherkin.Ast.ScenarioOutline(outlineTags, null, null, scenarioOutlineName, null, null, new Gherkin.Ast.Examples[] { new Gherkin.Ast.Examples(examplesTags, null, null, examplesName, null, null, null) }) });\r\n    //act.\r\n    var isIgnored = feature.IsExamplesIgnored(scenarioOutlineName, examplesName);\r\n    //assert.\r\n    Assert.True(isIgnored);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "GherkinScenarioTests",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "ApplyBackground_WithNoBackground_ThrowsArgumentNullException",
        "Body": "{\r\n    var scenario = CreateTestScenario();\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E scenario.ApplyBackground(null));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ApplyBackground_WithBackground_PrependsBackgroundSteps",
        "Body": "{\r\n    var scenario = CreateTestScenario();\r\n    var backgroundSteps = new Gherkin.Ast.Step[]\r\n    {\r\n        new Gherkin.Ast.Step(null, null, \u0022background\u0022, null)\r\n    };\r\n    var background = new Gherkin.Ast.Background(null, null, null, null, backgroundSteps);\r\n    var modified = scenario.ApplyBackground(background);\r\n    Assert.Equal(scenario.Location, modified.Location);\r\n    Assert.Equal(scenario.Keyword, modified.Keyword);\r\n    Assert.Equal(scenario.Name, modified.Name);\r\n    Assert.Equal(scenario.Description, modified.Description);\r\n    Assert.Equal(2, modified.Steps.Count());\r\n    Assert.Equal(\u0022background\u0022, modified.Steps.ElementAt(0).Text);\r\n    Assert.Equal(\u0022step\u0022, modified.Steps.ElementAt(1).Text);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "GherkinScenarioOutlineTests",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "ApplyExampleRow_Throws_Error_When_Example_Not_Found",
        "Body": "{\r\n    //arrange.\r\n    var sut = new Gherkin.Ast.ScenarioOutline(null, null, null, \u0022outline123\u0022, null, new Gherkin.Ast.Step[] { }, new Gherkin.Ast.Examples[] { new Gherkin.Ast.Examples(null, null, null, \u0022existing example\u0022, null, new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { }), new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { }) }) });\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.ApplyExampleRow(exampleName, exampleRowIndex));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ApplyExampleRow_Digests_Row_Values_Into_Scenario",
        "Body": "{\r\n    //arrange.\r\n    var sut = new Gherkin.Ast.ScenarioOutline(null, null, null, \u0022outline123\u0022, null, new Gherkin.Ast.Step[] { new Gherkin.Ast.Step(null, \u0022Given\u0022, \u0022I chose \u003Ca\u003E as first number\u0022, null), new Gherkin.Ast.Step(null, \u0022And\u0022, \u0022I chose \u003Cb\u003E as second number\u0022, null), new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022I press add\u0022, null), new Gherkin.Ast.Step(null, \u0022Then\u0022, \u0022the result should be \u003Csum\u003E on the screen\u0022, null), }, new Gherkin.Ast.Examples[] { new Gherkin.Ast.Examples(null, null, null, \u0022existing example\u0022, null, new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022sum\u0022) }), new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022) }) }) });\r\n    //act.\r\n    var scenario = sut.ApplyExampleRow(\u0022existing example\u0022, 0);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n    Assert.Equal(sut.Name, scenario.Name);\r\n    Assert.Equal(sut.Steps.Count(), scenario.Steps.Count());\r\n    Assert.Equal(4, scenario.Steps.Count());\r\n    var sutSteps = sut.Steps.ToList();\r\n    var scenarioSteps = scenario.Steps.ToList();\r\n    ValidateStep(scenarioSteps[0], \u0022Given\u0022, \u0022I chose 1 as first number\u0022, sutSteps[0]);\r\n    ValidateStep(scenarioSteps[1], \u0022And\u0022, \u0022I chose 2 as second number\u0022, sutSteps[1]);\r\n    ValidateStep(scenarioSteps[2], \u0022When\u0022, \u0022I press add\u0022, sutSteps[2]);\r\n    ValidateStep(scenarioSteps[3], \u0022Then\u0022, \u0022the result should be 3 on the screen\u0022, sutSteps[3]);\r\n    void ValidateStep(Gherkin.Ast.Step step, string keyword, string text, Gherkin.Ast.Step other)\r\n    {\r\n        Assert.NotSame(other, step);\r\n        Assert.Equal(keyword, step.Keyword);\r\n        Assert.Equal(text, step.Text);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ApplyExampleRow_Digests_Row_Values_Into_Scenario_With_Multiple_Placeholders_Per_Step",
        "Body": "{\r\n    //arrange.\r\n    var sut = new Gherkin.Ast.ScenarioOutline(null, null, null, \u0022outline123\u0022, null, new Gherkin.Ast.Step[] { new Gherkin.Ast.Step(null, \u0022Given\u0022, \u0022I chose \u003Ca\u003E as first number and \u003Cb\u003E as second number\u0022, null), new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022I press add\u0022, null), new Gherkin.Ast.Step(null, \u0022Then\u0022, \u0022the result should be \u003Csum\u003E on the screen\u0022, null), }, new Gherkin.Ast.Examples[] { new Gherkin.Ast.Examples(null, null, null, \u0022existing example\u0022, null, new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022sum\u0022) }), new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022) }) }) });\r\n    //act.\r\n    var scenario = sut.ApplyExampleRow(\u0022existing example\u0022, 0);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n    Assert.Equal(sut.Name, scenario.Name);\r\n    Assert.Equal(sut.Steps.Count(), scenario.Steps.Count());\r\n    Assert.Equal(3, scenario.Steps.Count());\r\n    var sutSteps = sut.Steps.ToList();\r\n    var scenarioSteps = scenario.Steps.ToList();\r\n    ValidateStep(scenarioSteps[0], \u0022Given\u0022, \u0022I chose 1 as first number and 2 as second number\u0022, sutSteps[0]);\r\n    ValidateStep(scenarioSteps[1], \u0022When\u0022, \u0022I press add\u0022, sutSteps[1]);\r\n    ValidateStep(scenarioSteps[2], \u0022Then\u0022, \u0022the result should be 3 on the screen\u0022, sutSteps[2]);\r\n    void ValidateStep(Gherkin.Ast.Step step, string keyword, string text, Gherkin.Ast.Step other)\r\n    {\r\n        Assert.NotSame(other, step);\r\n        Assert.Equal(keyword, step.Keyword);\r\n        Assert.Equal(text, step.Text);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ApplyExampleRow_Digests_Row_Values_Into_Scenario_With_DataTable_In_Step",
        "Body": "{\r\n    //arrange.\r\n    var sut = new Gherkin.Ast.ScenarioOutline(null, null, null, \u0022outline123\u0022, null, new Gherkin.Ast.Step[] { new Gherkin.Ast.Step(null, \u0022Given\u0022, \u0022I pass a datatable with tokens\u0022, new DataTable(new[] { new TableRow(null, new[] { new TableCell(null, \u0022Column1\u0022), new TableCell(null, \u0022Column2\u0022) }), new TableRow(null, new[] { new TableCell(null, \u0022\u003Ca\u003E\u0022), new TableCell(null, \u0022data with \u003Cb\u003E in the middle\u0022) }), new TableRow(null, new[] { new TableCell(null, \u0022\u003Cb\u003E\u0022), new TableCell(null, \u0022\u003Ca\u003E\u0022) }) })), new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022I apply a sample row\u0022, null), new Gherkin.Ast.Step(null, \u0022Then\u0022, \u0022the data table should be populated\u0022, null), }, new Gherkin.Ast.Examples[] { new Gherkin.Ast.Examples(null, null, null, \u0022existing example\u0022, null, new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), }), new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022) }) }) });\r\n    //act.\r\n    var scenario = sut.ApplyExampleRow(\u0022existing example\u0022, 0);\r\n    //assert.\r\n    Assert.NotNull(scenario);\r\n    Assert.Equal(sut.Name, scenario.Name);\r\n    Assert.Equal(sut.Steps.Count(), scenario.Steps.Count());\r\n    Assert.Equal(3, scenario.Steps.Count());\r\n    var scenarioSteps = scenario.Steps.ToList();\r\n    Assert.IsType\u003CDataTable\u003E(scenarioSteps[0].Argument);\r\n    var dataTable = (DataTable)scenarioSteps[0].Argument;\r\n    var rows = dataTable.Rows.ToList();\r\n    ValidateRow(rows[0], \u0022Column1\u0022, \u0022Column2\u0022);\r\n    ValidateRow(rows[1], \u00221\u0022, \u0022data with 2 in the middle\u0022);\r\n    ValidateRow(rows[2], \u00222\u0022, \u00221\u0022);\r\n    void ValidateRow(TableRow row, string expectedColumn0Value, string expectedColumn1Value)\r\n    {\r\n        var cells = row.Cells.ToArray();\r\n        Assert.Equal(cells[0].Value, expectedColumn0Value);\r\n        Assert.Equal(cells[1].Value, expectedColumn1Value);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ClassWithMethod",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "IsSameAs_Identifies_Similar_Instances",
        "Body": "{\r\n    //arrange.\r\n    var target = new ClassWithMethod();\r\n    var sut = MethodInfoWrapper.FromMethodInfo(target.GetType().GetMethod(nameof(ClassWithMethod.MethodToCall)), target);\r\n    var other = MethodInfoWrapper.FromMethodInfo(target.GetType().GetMethod(nameof(ClassWithMethod.MethodToCall)), target);\r\n    //act.\r\n    var same = sut.IsSameAs(other) \u0026\u0026 other.IsSameAs(sut);\r\n    //assert.\r\n    Assert.True(same);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMethodName_Returns_Wrapped_Method_Name",
        "Body": "{\r\n    //arrange.\r\n    var target = new ClassWithMethod();\r\n    var sut = MethodInfoWrapper.FromMethodInfo(target.GetType().GetMethod(nameof(ClassWithMethod.MethodToCall)), target);\r\n    //act.\r\n    var name = sut.GetMethodName();\r\n    //assert.\r\n    Assert.Equal(nameof(ClassWithMethod.MethodToCall), name);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InvokeMethod_Invokes_Underlying_Method",
        "Body": "{\r\n    //arrange.\r\n    var target = new ClassWithMethod();\r\n    var sut = MethodInfoWrapper.FromMethodInfo(target.GetType().GetMethod(nameof(ClassWithMethod.MethodToCall)), target);\r\n    //act.\r\n    await sut.InvokeMethodAsync(null);\r\n    //assert.\r\n    Assert.True(target.Called);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InvokeMethod_Invokes_Underlying_Async_Method",
        "Body": "{\r\n    //arrange.\r\n    var target = new ClassWithMethod();\r\n    var sut = MethodInfoWrapper.FromMethodInfo(target.GetType().GetMethod(nameof(ClassWithMethod.MethodToCallAsync)), target);\r\n    //act.\r\n    await sut.InvokeMethodAsync(null);\r\n    //assert.\r\n    Assert.True(target.Called);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_DoesNotAllow_AsyncVoid_Steps",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithAsyncVoidStep();\r\n    var methodInfoWithAsyncVoid = typeof(FeatureWithAsyncVoidStep).GetMethod(nameof(FeatureWithAsyncVoidStep.StepWithAsyncVoid));\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E MethodInfoWrapper.FromMethodInfo(methodInfoWithAsyncVoid, featureInstance));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithAsyncVoidStep",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "IsSameAs_Identifies_Similar_Instances",
        "Body": "{\r\n    //arrange.\r\n    var target = new ClassWithMethod();\r\n    var sut = MethodInfoWrapper.FromMethodInfo(target.GetType().GetMethod(nameof(ClassWithMethod.MethodToCall)), target);\r\n    var other = MethodInfoWrapper.FromMethodInfo(target.GetType().GetMethod(nameof(ClassWithMethod.MethodToCall)), target);\r\n    //act.\r\n    var same = sut.IsSameAs(other) \u0026\u0026 other.IsSameAs(sut);\r\n    //assert.\r\n    Assert.True(same);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMethodName_Returns_Wrapped_Method_Name",
        "Body": "{\r\n    //arrange.\r\n    var target = new ClassWithMethod();\r\n    var sut = MethodInfoWrapper.FromMethodInfo(target.GetType().GetMethod(nameof(ClassWithMethod.MethodToCall)), target);\r\n    //act.\r\n    var name = sut.GetMethodName();\r\n    //assert.\r\n    Assert.Equal(nameof(ClassWithMethod.MethodToCall), name);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InvokeMethod_Invokes_Underlying_Method",
        "Body": "{\r\n    //arrange.\r\n    var target = new ClassWithMethod();\r\n    var sut = MethodInfoWrapper.FromMethodInfo(target.GetType().GetMethod(nameof(ClassWithMethod.MethodToCall)), target);\r\n    //act.\r\n    await sut.InvokeMethodAsync(null);\r\n    //assert.\r\n    Assert.True(target.Called);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InvokeMethod_Invokes_Underlying_Async_Method",
        "Body": "{\r\n    //arrange.\r\n    var target = new ClassWithMethod();\r\n    var sut = MethodInfoWrapper.FromMethodInfo(target.GetType().GetMethod(nameof(ClassWithMethod.MethodToCallAsync)), target);\r\n    //act.\r\n    await sut.InvokeMethodAsync(null);\r\n    //assert.\r\n    Assert.True(target.Called);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_DoesNotAllow_AsyncVoid_Steps",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithAsyncVoidStep();\r\n    var methodInfoWithAsyncVoid = typeof(FeatureWithAsyncVoidStep).GetMethod(nameof(FeatureWithAsyncVoidStep.StepWithAsyncVoid));\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E MethodInfoWrapper.FromMethodInfo(methodInfoWithAsyncVoid, featureInstance));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MethodInfoWrapperTests",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "IsSameAs_Identifies_Similar_Instances",
        "Body": "{\r\n    //arrange.\r\n    var target = new ClassWithMethod();\r\n    var sut = MethodInfoWrapper.FromMethodInfo(target.GetType().GetMethod(nameof(ClassWithMethod.MethodToCall)), target);\r\n    var other = MethodInfoWrapper.FromMethodInfo(target.GetType().GetMethod(nameof(ClassWithMethod.MethodToCall)), target);\r\n    //act.\r\n    var same = sut.IsSameAs(other) \u0026\u0026 other.IsSameAs(sut);\r\n    //assert.\r\n    Assert.True(same);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMethodName_Returns_Wrapped_Method_Name",
        "Body": "{\r\n    //arrange.\r\n    var target = new ClassWithMethod();\r\n    var sut = MethodInfoWrapper.FromMethodInfo(target.GetType().GetMethod(nameof(ClassWithMethod.MethodToCall)), target);\r\n    //act.\r\n    var name = sut.GetMethodName();\r\n    //assert.\r\n    Assert.Equal(nameof(ClassWithMethod.MethodToCall), name);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InvokeMethod_Invokes_Underlying_Method",
        "Body": "{\r\n    //arrange.\r\n    var target = new ClassWithMethod();\r\n    var sut = MethodInfoWrapper.FromMethodInfo(target.GetType().GetMethod(nameof(ClassWithMethod.MethodToCall)), target);\r\n    //act.\r\n    await sut.InvokeMethodAsync(null);\r\n    //assert.\r\n    Assert.True(target.Called);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InvokeMethod_Invokes_Underlying_Async_Method",
        "Body": "{\r\n    //arrange.\r\n    var target = new ClassWithMethod();\r\n    var sut = MethodInfoWrapper.FromMethodInfo(target.GetType().GetMethod(nameof(ClassWithMethod.MethodToCallAsync)), target);\r\n    //act.\r\n    await sut.InvokeMethodAsync(null);\r\n    //assert.\r\n    Assert.True(target.Called);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_DoesNotAllow_AsyncVoid_Steps",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithAsyncVoidStep();\r\n    var methodInfoWithAsyncVoid = typeof(FeatureWithAsyncVoidStep).GetMethod(nameof(FeatureWithAsyncVoidStep.StepWithAsyncVoid));\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E MethodInfoWrapper.FromMethodInfo(methodInfoWithAsyncVoid, featureInstance));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MyFeature",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Require_ClassType",
        "Body": "{\r\n    //act / assert.\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E MissingFeatureClassInfo.FromMissingFeatureClassType(null));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Construct_InfoClass_With_Search_Pattern",
        "Body": "{\r\n    //act.\r\n    var sut = MissingFeatureClassInfo.FromMissingFeatureClassType(classType);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.Equal(pattern, sut.FileNameSearchPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MyFeatureWithPattern",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Require_ClassType",
        "Body": "{\r\n    //act / assert.\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E MissingFeatureClassInfo.FromMissingFeatureClassType(null));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Construct_InfoClass_With_Search_Pattern",
        "Body": "{\r\n    //act.\r\n    var sut = MissingFeatureClassInfo.FromMissingFeatureClassType(classType);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.Equal(pattern, sut.FileNameSearchPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MissingFeatureClassInfo_FromMissingFeatureClassType_Should",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Require_ClassType",
        "Body": "{\r\n    //act / assert.\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E MissingFeatureClassInfo.FromMissingFeatureClassType(null));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Construct_InfoClass_With_Search_Pattern",
        "Body": "{\r\n    //act.\r\n    var sut = MissingFeatureClassInfo.FromMissingFeatureClassType(classType);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.Equal(pattern, sut.FileNameSearchPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithExactPath",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Find_Features_with_exact_path_That_Are_Not_Implemented",
        "Body": "{\r\n    //arrange.\r\n    _featureFileRepository.Setup(r =\u003E r.GetFeatureFilePaths()).Returns(new List\u003Cstring\u003E { \u0022path1/feature1.feature\u0022, \u0022path2/feature2.feature\u0022 }).Verifiable();\r\n    _featureClassInfoRepository.Setup(r =\u003E r.GetFeatureClassesInfo()).Returns(new List\u003CFeatureClassInfo\u003E { FeatureClassInfo.FromFeatureClassType(typeof(FeatureWithExactPath)) }).Verifiable();\r\n    var expectedFeature = new GherkinFeatureBuilder().Build();\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(\u0022path2/feature2.feature\u0022)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(expectedFeature, null))).Verifiable();\r\n    //act.\r\n    var features = _sut.Discover();\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    _featureClassInfoRepository.Verify();\r\n    _featureFileRepository.Verify(r =\u003E r.GetByFilePath(\u0022path1/feature1.feature\u0022), Times.Never);\r\n    Assert.NotNull(features);\r\n    Assert.Single(features);\r\n    Assert.Same(expectedFeature, features[0]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Find_features_with_pattern_name_that_are_not_implemented",
        "Body": "{\r\n    //arrange.\r\n    _featureFileRepository.Setup(r =\u003E r.GetFeatureFilePaths()).Returns(new List\u003Cstring\u003E { \u0022path1/feature1.feature\u0022, \u0022path2/feature2.feature\u0022 }).Verifiable();\r\n    _featureClassInfoRepository.Setup(r =\u003E r.GetFeatureClassesInfo()).Returns(new List\u003CFeatureClassInfo\u003E { FeatureClassInfo.FromFeatureClassType(typeof(FeatureWithPatternName)) }).Verifiable();\r\n    var expectedFeature = new GherkinFeatureBuilder().Build();\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(\u0022path2/feature2.feature\u0022)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(expectedFeature, null))).Verifiable();\r\n    //act.\r\n    var features = _sut.Discover();\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    _featureClassInfoRepository.Verify();\r\n    _featureFileRepository.Verify(r =\u003E r.GetByFilePath(\u0022path1/feature1.feature\u0022), Times.Never);\r\n    Assert.NotNull(features);\r\n    Assert.Single(features);\r\n    Assert.Same(expectedFeature, features[0]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Find_features_with_pattern_folder_that_are_not_implemented",
        "Body": "{\r\n    //arrange.\r\n    _featureFileRepository.Setup(r =\u003E r.GetFeatureFilePaths()).Returns(new List\u003Cstring\u003E { \u0022path1/feature1.feature\u0022, \u0022path2/feature2.feature\u0022 }).Verifiable();\r\n    _featureClassInfoRepository.Setup(r =\u003E r.GetFeatureClassesInfo()).Returns(new List\u003CFeatureClassInfo\u003E { FeatureClassInfo.FromFeatureClassType(typeof(FeatureWithPatternFolder)) }).Verifiable();\r\n    var expectedFeatures = new List\u003CGherkin.Ast.Feature\u003E\r\n    {\r\n        new GherkinFeatureBuilder().Build(),\r\n        new GherkinFeatureBuilder().Build()\r\n    };\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(\u0022path1/feature1.feature\u0022)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(expectedFeatures[0], null))).Verifiable();\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(\u0022path2/feature2.feature\u0022)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(expectedFeatures[1], null))).Verifiable();\r\n    //act.\r\n    var features = _sut.Discover();\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    _featureClassInfoRepository.Verify();\r\n    Assert.NotNull(features);\r\n    Assert.Equal(2, features.Count);\r\n    Assert.Same(expectedFeatures[0], features[0]);\r\n    Assert.Same(expectedFeatures[1], features[1]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithPatternName",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Find_Features_with_exact_path_That_Are_Not_Implemented",
        "Body": "{\r\n    //arrange.\r\n    _featureFileRepository.Setup(r =\u003E r.GetFeatureFilePaths()).Returns(new List\u003Cstring\u003E { \u0022path1/feature1.feature\u0022, \u0022path2/feature2.feature\u0022 }).Verifiable();\r\n    _featureClassInfoRepository.Setup(r =\u003E r.GetFeatureClassesInfo()).Returns(new List\u003CFeatureClassInfo\u003E { FeatureClassInfo.FromFeatureClassType(typeof(FeatureWithExactPath)) }).Verifiable();\r\n    var expectedFeature = new GherkinFeatureBuilder().Build();\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(\u0022path2/feature2.feature\u0022)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(expectedFeature, null))).Verifiable();\r\n    //act.\r\n    var features = _sut.Discover();\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    _featureClassInfoRepository.Verify();\r\n    _featureFileRepository.Verify(r =\u003E r.GetByFilePath(\u0022path1/feature1.feature\u0022), Times.Never);\r\n    Assert.NotNull(features);\r\n    Assert.Single(features);\r\n    Assert.Same(expectedFeature, features[0]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Find_features_with_pattern_name_that_are_not_implemented",
        "Body": "{\r\n    //arrange.\r\n    _featureFileRepository.Setup(r =\u003E r.GetFeatureFilePaths()).Returns(new List\u003Cstring\u003E { \u0022path1/feature1.feature\u0022, \u0022path2/feature2.feature\u0022 }).Verifiable();\r\n    _featureClassInfoRepository.Setup(r =\u003E r.GetFeatureClassesInfo()).Returns(new List\u003CFeatureClassInfo\u003E { FeatureClassInfo.FromFeatureClassType(typeof(FeatureWithPatternName)) }).Verifiable();\r\n    var expectedFeature = new GherkinFeatureBuilder().Build();\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(\u0022path2/feature2.feature\u0022)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(expectedFeature, null))).Verifiable();\r\n    //act.\r\n    var features = _sut.Discover();\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    _featureClassInfoRepository.Verify();\r\n    _featureFileRepository.Verify(r =\u003E r.GetByFilePath(\u0022path1/feature1.feature\u0022), Times.Never);\r\n    Assert.NotNull(features);\r\n    Assert.Single(features);\r\n    Assert.Same(expectedFeature, features[0]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Find_features_with_pattern_folder_that_are_not_implemented",
        "Body": "{\r\n    //arrange.\r\n    _featureFileRepository.Setup(r =\u003E r.GetFeatureFilePaths()).Returns(new List\u003Cstring\u003E { \u0022path1/feature1.feature\u0022, \u0022path2/feature2.feature\u0022 }).Verifiable();\r\n    _featureClassInfoRepository.Setup(r =\u003E r.GetFeatureClassesInfo()).Returns(new List\u003CFeatureClassInfo\u003E { FeatureClassInfo.FromFeatureClassType(typeof(FeatureWithPatternFolder)) }).Verifiable();\r\n    var expectedFeatures = new List\u003CGherkin.Ast.Feature\u003E\r\n    {\r\n        new GherkinFeatureBuilder().Build(),\r\n        new GherkinFeatureBuilder().Build()\r\n    };\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(\u0022path1/feature1.feature\u0022)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(expectedFeatures[0], null))).Verifiable();\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(\u0022path2/feature2.feature\u0022)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(expectedFeatures[1], null))).Verifiable();\r\n    //act.\r\n    var features = _sut.Discover();\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    _featureClassInfoRepository.Verify();\r\n    Assert.NotNull(features);\r\n    Assert.Equal(2, features.Count);\r\n    Assert.Same(expectedFeatures[0], features[0]);\r\n    Assert.Same(expectedFeatures[1], features[1]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithPatternFolder",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Find_Features_with_exact_path_That_Are_Not_Implemented",
        "Body": "{\r\n    //arrange.\r\n    _featureFileRepository.Setup(r =\u003E r.GetFeatureFilePaths()).Returns(new List\u003Cstring\u003E { \u0022path1/feature1.feature\u0022, \u0022path2/feature2.feature\u0022 }).Verifiable();\r\n    _featureClassInfoRepository.Setup(r =\u003E r.GetFeatureClassesInfo()).Returns(new List\u003CFeatureClassInfo\u003E { FeatureClassInfo.FromFeatureClassType(typeof(FeatureWithExactPath)) }).Verifiable();\r\n    var expectedFeature = new GherkinFeatureBuilder().Build();\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(\u0022path2/feature2.feature\u0022)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(expectedFeature, null))).Verifiable();\r\n    //act.\r\n    var features = _sut.Discover();\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    _featureClassInfoRepository.Verify();\r\n    _featureFileRepository.Verify(r =\u003E r.GetByFilePath(\u0022path1/feature1.feature\u0022), Times.Never);\r\n    Assert.NotNull(features);\r\n    Assert.Single(features);\r\n    Assert.Same(expectedFeature, features[0]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Find_features_with_pattern_name_that_are_not_implemented",
        "Body": "{\r\n    //arrange.\r\n    _featureFileRepository.Setup(r =\u003E r.GetFeatureFilePaths()).Returns(new List\u003Cstring\u003E { \u0022path1/feature1.feature\u0022, \u0022path2/feature2.feature\u0022 }).Verifiable();\r\n    _featureClassInfoRepository.Setup(r =\u003E r.GetFeatureClassesInfo()).Returns(new List\u003CFeatureClassInfo\u003E { FeatureClassInfo.FromFeatureClassType(typeof(FeatureWithPatternName)) }).Verifiable();\r\n    var expectedFeature = new GherkinFeatureBuilder().Build();\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(\u0022path2/feature2.feature\u0022)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(expectedFeature, null))).Verifiable();\r\n    //act.\r\n    var features = _sut.Discover();\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    _featureClassInfoRepository.Verify();\r\n    _featureFileRepository.Verify(r =\u003E r.GetByFilePath(\u0022path1/feature1.feature\u0022), Times.Never);\r\n    Assert.NotNull(features);\r\n    Assert.Single(features);\r\n    Assert.Same(expectedFeature, features[0]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Find_features_with_pattern_folder_that_are_not_implemented",
        "Body": "{\r\n    //arrange.\r\n    _featureFileRepository.Setup(r =\u003E r.GetFeatureFilePaths()).Returns(new List\u003Cstring\u003E { \u0022path1/feature1.feature\u0022, \u0022path2/feature2.feature\u0022 }).Verifiable();\r\n    _featureClassInfoRepository.Setup(r =\u003E r.GetFeatureClassesInfo()).Returns(new List\u003CFeatureClassInfo\u003E { FeatureClassInfo.FromFeatureClassType(typeof(FeatureWithPatternFolder)) }).Verifiable();\r\n    var expectedFeatures = new List\u003CGherkin.Ast.Feature\u003E\r\n    {\r\n        new GherkinFeatureBuilder().Build(),\r\n        new GherkinFeatureBuilder().Build()\r\n    };\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(\u0022path1/feature1.feature\u0022)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(expectedFeatures[0], null))).Verifiable();\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(\u0022path2/feature2.feature\u0022)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(expectedFeatures[1], null))).Verifiable();\r\n    //act.\r\n    var features = _sut.Discover();\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    _featureClassInfoRepository.Verify();\r\n    Assert.NotNull(features);\r\n    Assert.Equal(2, features.Count);\r\n    Assert.Same(expectedFeatures[0], features[0]);\r\n    Assert.Same(expectedFeatures[1], features[1]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MissingFeatureDiscoveryModel_Discover_Should",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Find_Features_with_exact_path_That_Are_Not_Implemented",
        "Body": "{\r\n    //arrange.\r\n    _featureFileRepository.Setup(r =\u003E r.GetFeatureFilePaths()).Returns(new List\u003Cstring\u003E { \u0022path1/feature1.feature\u0022, \u0022path2/feature2.feature\u0022 }).Verifiable();\r\n    _featureClassInfoRepository.Setup(r =\u003E r.GetFeatureClassesInfo()).Returns(new List\u003CFeatureClassInfo\u003E { FeatureClassInfo.FromFeatureClassType(typeof(FeatureWithExactPath)) }).Verifiable();\r\n    var expectedFeature = new GherkinFeatureBuilder().Build();\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(\u0022path2/feature2.feature\u0022)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(expectedFeature, null))).Verifiable();\r\n    //act.\r\n    var features = _sut.Discover();\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    _featureClassInfoRepository.Verify();\r\n    _featureFileRepository.Verify(r =\u003E r.GetByFilePath(\u0022path1/feature1.feature\u0022), Times.Never);\r\n    Assert.NotNull(features);\r\n    Assert.Single(features);\r\n    Assert.Same(expectedFeature, features[0]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Find_features_with_pattern_name_that_are_not_implemented",
        "Body": "{\r\n    //arrange.\r\n    _featureFileRepository.Setup(r =\u003E r.GetFeatureFilePaths()).Returns(new List\u003Cstring\u003E { \u0022path1/feature1.feature\u0022, \u0022path2/feature2.feature\u0022 }).Verifiable();\r\n    _featureClassInfoRepository.Setup(r =\u003E r.GetFeatureClassesInfo()).Returns(new List\u003CFeatureClassInfo\u003E { FeatureClassInfo.FromFeatureClassType(typeof(FeatureWithPatternName)) }).Verifiable();\r\n    var expectedFeature = new GherkinFeatureBuilder().Build();\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(\u0022path2/feature2.feature\u0022)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(expectedFeature, null))).Verifiable();\r\n    //act.\r\n    var features = _sut.Discover();\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    _featureClassInfoRepository.Verify();\r\n    _featureFileRepository.Verify(r =\u003E r.GetByFilePath(\u0022path1/feature1.feature\u0022), Times.Never);\r\n    Assert.NotNull(features);\r\n    Assert.Single(features);\r\n    Assert.Same(expectedFeature, features[0]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Find_features_with_pattern_folder_that_are_not_implemented",
        "Body": "{\r\n    //arrange.\r\n    _featureFileRepository.Setup(r =\u003E r.GetFeatureFilePaths()).Returns(new List\u003Cstring\u003E { \u0022path1/feature1.feature\u0022, \u0022path2/feature2.feature\u0022 }).Verifiable();\r\n    _featureClassInfoRepository.Setup(r =\u003E r.GetFeatureClassesInfo()).Returns(new List\u003CFeatureClassInfo\u003E { FeatureClassInfo.FromFeatureClassType(typeof(FeatureWithPatternFolder)) }).Verifiable();\r\n    var expectedFeatures = new List\u003CGherkin.Ast.Feature\u003E\r\n    {\r\n        new GherkinFeatureBuilder().Build(),\r\n        new GherkinFeatureBuilder().Build()\r\n    };\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(\u0022path1/feature1.feature\u0022)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(expectedFeatures[0], null))).Verifiable();\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(\u0022path2/feature2.feature\u0022)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(expectedFeatures[1], null))).Verifiable();\r\n    //act.\r\n    var features = _sut.Discover();\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    _featureClassInfoRepository.Verify();\r\n    Assert.NotNull(features);\r\n    Assert.Equal(2, features.Count);\r\n    Assert.Same(expectedFeatures[0], features[0]);\r\n    Assert.Same(expectedFeatures[1], features[1]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PrimitiveTypeArgumentTests",
    "Message": "This class has Lack of Cohesion of Test Cases",
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Clone_Creates_Similar_Instance",
        "Body": "{\r\n    //arrange.\r\n    var sut = new PrimitiveTypeArgument(GetParamAt(0), 123);\r\n    //act.\r\n    var clone = sut.Clone();\r\n    //assert.\r\n    Assert.True(clone.IsSameAs(sut));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Takes_Value_By_Index",
        "Body": "{\r\n    //arrange.\r\n    var sut = new PrimitiveTypeArgument(GetParamAt(index), index);\r\n    var arguments = new dynamic[]\r\n    {\r\n        123,\r\n        \u0022Ana\u0022,\r\n        new DateTime(2018, 5, 23)\r\n    };\r\n    var argumentsAsString = new string[]\r\n    {\r\n        $\u0022{arguments[0]}\u0022,\r\n        $\u0022{arguments[1]}\u0022,\r\n        $\u0022{arguments[2].Month}/{arguments[2].Day}/{arguments[2].Year}\u0022};\r\n    var step = new Gherkin.Ast.Step(null, \u0022Then\u0022, $@\u0022I should have {argumentsAsString[0]} apples from {argumentsAsString[1]} by {argumentsAsString[2]}\u0022, null);\r\n    //act.\r\n    sut.DigestScenarioStepValues(argumentsAsString, step.Argument);\r\n    //assert.\r\n    Assert.Equal(arguments[index], sut.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UselessFeature",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "ExecuteScenario_Requires_FeatureInstance",
        "Body": "{\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(null, \u0022valid scenario name\u0022, \u0022valid route\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Requires_ScenarioName",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var featureInstance = new UselessFeature();\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_All_Scenario_Steps",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps)}.feature\u0022;\r\n    var scenarioName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { step1Text, step2Text, step3Text, step4Text }))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(4, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(12, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(15, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep3), featureInstance.CallStack[2].Key);\r\n    Assert.Null(featureInstance.CallStack[2].Value);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep4), featureInstance.CallStack[3].Key);\r\n    Assert.NotNull(featureInstance.CallStack[3].Value);\r\n    Assert.Single(featureInstance.CallStack[3].Value);\r\n    Assert.Equal(27, featureInstance.CallStack[3].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Successful_Scenario_Steps_And_Skips_The_Rest",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps_And_Throwing)}.feature\u0022;\r\n    var scenarioName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { step1Text, step2Text, step3Text, step4Text }))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps_And_Throwing();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    var exceptiion = await Assert.ThrowsAsync\u003CTargetInvocationException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath));\r\n    Assert.IsType\u003CInvalidOperationException\u003E(exceptiion.InnerException);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(2, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(12, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(15, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: FAILED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: SKIPPED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: SKIPPED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Background_Steps_First",
        "Body": "{\r\n    var gherkinFeaure = new GherkinFeatureBuilder().WithBackground(sb =\u003E sb.Given(\u0022given background\u0022, null).When(\u0022when background\u0022, null).Then(\u0022then background\u0022, null)).WithScenario(\u0022test scenario\u0022, sb =\u003E sb.Then(\u0022step one\u0022, null)).Build();\r\n    var gherkinDocument = new Gherkin.Ast.GherkinDocument(gherkinFeaure, new Gherkin.Ast.Comment[0]);\r\n    var featurePath = $\u0022{nameof(FeatureWithBackgroundSteps)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featurePath)).Returns(new FeatureFile(gherkinDocument)).Verifiable();\r\n    var featureInstance = new FeatureWithBackgroundSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, \u0022test scenario\u0022, featurePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(\u0022abcd\u0022, featureInstance.OrderValidator);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Given given background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022When when background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Then then background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Then step one: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_ScenarioStep_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario123\u0022;\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = $\u0022{nameof(FeatureWithDataTableScenarioStep)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022When \u0022 \u002B FeatureWithDataTableScenarioStep.Steptext }, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) })))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDataTable);\r\n    Assert.Equal(3, featureInstance.ReceivedDataTable.Rows.Count());\r\n    AssertDataTableCell(0, 0, \u0022First argument\u0022);\r\n    AssertDataTableCell(0, 1, \u0022Second argument\u0022);\r\n    AssertDataTableCell(0, 2, \u0022Result\u0022);\r\n    AssertDataTableCell(1, 0, \u00221\u0022);\r\n    AssertDataTableCell(1, 1, \u00222\u0022);\r\n    AssertDataTableCell(1, 2, \u00223\u0022);\r\n    AssertDataTableCell(2, 0, \u0022a\u0022);\r\n    AssertDataTableCell(2, 1, \u0022b\u0022);\r\n    AssertDataTableCell(2, 2, \u0022c\u0022);\r\n    void AssertDataTableCell(int rowIndex, int cellIndex, string value)\r\n    {\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.Count() \u003E rowIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex));\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.Count() \u003E cellIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.ElementAt(cellIndex));\r\n        Assert.Equal(\u0022First argument\u0022, featureInstance.ReceivedDataTable.Rows.ElementAt(0).Cells.ElementAt(0).Value);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_ScenarioStep_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var docStringContent = \u0022some content\u0022 \u002B Environment.NewLine \u002B \u0022\u002B\u002B\u002B\u0022 \u002B Environment.NewLine \u002B \u0022with multi lines\u0022 \u002B Environment.NewLine \u002B \u0022---\u0022 \u002B Environment.NewLine \u002B \u0022in it\u0022;\r\n    var scenarioName = \u0022scenario 1231121\u0022;\r\n    var featureFilePath = nameof(FeatureWithDocStringScenarioStep) \u002B \u0022.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithDocStringScenarioStep.StepWithDocStringText }, new Gherkin.Ast.DocString(null, null, docStringContent)))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDocString);\r\n    Assert.Equal(docStringContent, featureInstance.ReceivedDocString.Content);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Scenario_With_Shared_StepMethod",
        "Body": "{\r\n    //arrange.\r\n    const string scenarioName = \u0022scenario 123\u0022;\r\n    var featureInstance = new FeatureWithSharedStepMethod();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = nameof(FeatureWithSharedStepMethod) \u002B \u0022.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022Given I chose 1 as first number\u0022, \u0022And I chose 2 as second number\u0022, \u0022And I chose 3 as third number\u0022, \u0022When I choose 4 as fourth number\u0022, \u0022And I choose 5 as fifth number\u0022, \u0022And I choose 6 as sixth number\u0022, $\u0022Then Result should be {1 \u002B 2 \u002B 3 \u002B 4 \u002B 5 \u002B 6} on the screen\u0022 })));\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    Assert.Equal(7, featureInstance.CallStack.Count);\r\n    Assert_Callback(0, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 1);\r\n    Assert_Callback(1, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 2);\r\n    Assert_Callback(2, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 3);\r\n    Assert_Callback(3, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 4);\r\n    Assert_Callback(4, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 5);\r\n    Assert_Callback(5, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 6);\r\n    Assert_Callback(6, nameof(FeatureWithSharedStepMethod.Result_should_be_x_on_the_screen), (1 \u002B 2 \u002B 3 \u002B 4 \u002B 5 \u002B 6));\r\n    void Assert_Callback(int index, string methodName, int value)\r\n    {\r\n        Assert.Equal(methodName, featureInstance.CallStack[index].Key);\r\n        Assert.NotNull(featureInstance.CallStack[index].Value);\r\n        Assert.Single(featureInstance.CallStack[index].Value);\r\n        Assert.Equal(value, featureInstance.CallStack[index].Value[0]);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Scenario_With_Star_Notation",
        "Body": "{\r\n    //arrange.\r\n    var gherkinFeature = new GherkinFeatureBuilder().WithScenario(\u0022S\u0022, steps =\u003E steps.Star(\u0022I have some cukes\u0022, null)).Build();\r\n    var featureFilePath = $\u0022{nameof(FeatureWithStarNotation)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(gherkinFeature, null))).Verifiable();\r\n    var featureInstance = new FeatureWithStarNotation();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, \u0022S\u0022, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Single(featureInstance.CallStack);\r\n    Assert.Equal(nameof(FeatureWithStarNotation.I_Have_Some_Cukes), featureInstance.CallStack[0].Key);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_DoesNotAllow_AsyncVoid_Steps",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var feature = new FeatureWithAsyncVoidStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    feature.InternalOutput = output.Object;\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CInvalidOperationException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(feature, \u0022S\u0022, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithScenarioSteps",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "ExecuteScenario_Requires_FeatureInstance",
        "Body": "{\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(null, \u0022valid scenario name\u0022, \u0022valid route\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Requires_ScenarioName",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var featureInstance = new UselessFeature();\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_All_Scenario_Steps",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps)}.feature\u0022;\r\n    var scenarioName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { step1Text, step2Text, step3Text, step4Text }))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(4, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(12, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(15, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep3), featureInstance.CallStack[2].Key);\r\n    Assert.Null(featureInstance.CallStack[2].Value);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep4), featureInstance.CallStack[3].Key);\r\n    Assert.NotNull(featureInstance.CallStack[3].Value);\r\n    Assert.Single(featureInstance.CallStack[3].Value);\r\n    Assert.Equal(27, featureInstance.CallStack[3].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Successful_Scenario_Steps_And_Skips_The_Rest",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps_And_Throwing)}.feature\u0022;\r\n    var scenarioName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { step1Text, step2Text, step3Text, step4Text }))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps_And_Throwing();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    var exceptiion = await Assert.ThrowsAsync\u003CTargetInvocationException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath));\r\n    Assert.IsType\u003CInvalidOperationException\u003E(exceptiion.InnerException);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(2, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(12, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(15, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: FAILED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: SKIPPED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: SKIPPED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Background_Steps_First",
        "Body": "{\r\n    var gherkinFeaure = new GherkinFeatureBuilder().WithBackground(sb =\u003E sb.Given(\u0022given background\u0022, null).When(\u0022when background\u0022, null).Then(\u0022then background\u0022, null)).WithScenario(\u0022test scenario\u0022, sb =\u003E sb.Then(\u0022step one\u0022, null)).Build();\r\n    var gherkinDocument = new Gherkin.Ast.GherkinDocument(gherkinFeaure, new Gherkin.Ast.Comment[0]);\r\n    var featurePath = $\u0022{nameof(FeatureWithBackgroundSteps)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featurePath)).Returns(new FeatureFile(gherkinDocument)).Verifiable();\r\n    var featureInstance = new FeatureWithBackgroundSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, \u0022test scenario\u0022, featurePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(\u0022abcd\u0022, featureInstance.OrderValidator);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Given given background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022When when background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Then then background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Then step one: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_ScenarioStep_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario123\u0022;\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = $\u0022{nameof(FeatureWithDataTableScenarioStep)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022When \u0022 \u002B FeatureWithDataTableScenarioStep.Steptext }, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) })))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDataTable);\r\n    Assert.Equal(3, featureInstance.ReceivedDataTable.Rows.Count());\r\n    AssertDataTableCell(0, 0, \u0022First argument\u0022);\r\n    AssertDataTableCell(0, 1, \u0022Second argument\u0022);\r\n    AssertDataTableCell(0, 2, \u0022Result\u0022);\r\n    AssertDataTableCell(1, 0, \u00221\u0022);\r\n    AssertDataTableCell(1, 1, \u00222\u0022);\r\n    AssertDataTableCell(1, 2, \u00223\u0022);\r\n    AssertDataTableCell(2, 0, \u0022a\u0022);\r\n    AssertDataTableCell(2, 1, \u0022b\u0022);\r\n    AssertDataTableCell(2, 2, \u0022c\u0022);\r\n    void AssertDataTableCell(int rowIndex, int cellIndex, string value)\r\n    {\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.Count() \u003E rowIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex));\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.Count() \u003E cellIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.ElementAt(cellIndex));\r\n        Assert.Equal(\u0022First argument\u0022, featureInstance.ReceivedDataTable.Rows.ElementAt(0).Cells.ElementAt(0).Value);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_ScenarioStep_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var docStringContent = \u0022some content\u0022 \u002B Environment.NewLine \u002B \u0022\u002B\u002B\u002B\u0022 \u002B Environment.NewLine \u002B \u0022with multi lines\u0022 \u002B Environment.NewLine \u002B \u0022---\u0022 \u002B Environment.NewLine \u002B \u0022in it\u0022;\r\n    var scenarioName = \u0022scenario 1231121\u0022;\r\n    var featureFilePath = nameof(FeatureWithDocStringScenarioStep) \u002B \u0022.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithDocStringScenarioStep.StepWithDocStringText }, new Gherkin.Ast.DocString(null, null, docStringContent)))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDocString);\r\n    Assert.Equal(docStringContent, featureInstance.ReceivedDocString.Content);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Scenario_With_Shared_StepMethod",
        "Body": "{\r\n    //arrange.\r\n    const string scenarioName = \u0022scenario 123\u0022;\r\n    var featureInstance = new FeatureWithSharedStepMethod();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = nameof(FeatureWithSharedStepMethod) \u002B \u0022.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022Given I chose 1 as first number\u0022, \u0022And I chose 2 as second number\u0022, \u0022And I chose 3 as third number\u0022, \u0022When I choose 4 as fourth number\u0022, \u0022And I choose 5 as fifth number\u0022, \u0022And I choose 6 as sixth number\u0022, $\u0022Then Result should be {1 \u002B 2 \u002B 3 \u002B 4 \u002B 5 \u002B 6} on the screen\u0022 })));\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    Assert.Equal(7, featureInstance.CallStack.Count);\r\n    Assert_Callback(0, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 1);\r\n    Assert_Callback(1, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 2);\r\n    Assert_Callback(2, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 3);\r\n    Assert_Callback(3, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 4);\r\n    Assert_Callback(4, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 5);\r\n    Assert_Callback(5, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 6);\r\n    Assert_Callback(6, nameof(FeatureWithSharedStepMethod.Result_should_be_x_on_the_screen), (1 \u002B 2 \u002B 3 \u002B 4 \u002B 5 \u002B 6));\r\n    void Assert_Callback(int index, string methodName, int value)\r\n    {\r\n        Assert.Equal(methodName, featureInstance.CallStack[index].Key);\r\n        Assert.NotNull(featureInstance.CallStack[index].Value);\r\n        Assert.Single(featureInstance.CallStack[index].Value);\r\n        Assert.Equal(value, featureInstance.CallStack[index].Value[0]);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Scenario_With_Star_Notation",
        "Body": "{\r\n    //arrange.\r\n    var gherkinFeature = new GherkinFeatureBuilder().WithScenario(\u0022S\u0022, steps =\u003E steps.Star(\u0022I have some cukes\u0022, null)).Build();\r\n    var featureFilePath = $\u0022{nameof(FeatureWithStarNotation)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(gherkinFeature, null))).Verifiable();\r\n    var featureInstance = new FeatureWithStarNotation();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, \u0022S\u0022, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Single(featureInstance.CallStack);\r\n    Assert.Equal(nameof(FeatureWithStarNotation.I_Have_Some_Cukes), featureInstance.CallStack[0].Key);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_DoesNotAllow_AsyncVoid_Steps",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var feature = new FeatureWithAsyncVoidStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    feature.InternalOutput = output.Object;\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CInvalidOperationException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(feature, \u0022S\u0022, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithScenarioSteps_And_Throwing",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "ExecuteScenario_Requires_FeatureInstance",
        "Body": "{\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(null, \u0022valid scenario name\u0022, \u0022valid route\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Requires_ScenarioName",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var featureInstance = new UselessFeature();\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_All_Scenario_Steps",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps)}.feature\u0022;\r\n    var scenarioName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { step1Text, step2Text, step3Text, step4Text }))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(4, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(12, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(15, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep3), featureInstance.CallStack[2].Key);\r\n    Assert.Null(featureInstance.CallStack[2].Value);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep4), featureInstance.CallStack[3].Key);\r\n    Assert.NotNull(featureInstance.CallStack[3].Value);\r\n    Assert.Single(featureInstance.CallStack[3].Value);\r\n    Assert.Equal(27, featureInstance.CallStack[3].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Successful_Scenario_Steps_And_Skips_The_Rest",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps_And_Throwing)}.feature\u0022;\r\n    var scenarioName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { step1Text, step2Text, step3Text, step4Text }))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps_And_Throwing();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    var exceptiion = await Assert.ThrowsAsync\u003CTargetInvocationException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath));\r\n    Assert.IsType\u003CInvalidOperationException\u003E(exceptiion.InnerException);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(2, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(12, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(15, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: FAILED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: SKIPPED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: SKIPPED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Background_Steps_First",
        "Body": "{\r\n    var gherkinFeaure = new GherkinFeatureBuilder().WithBackground(sb =\u003E sb.Given(\u0022given background\u0022, null).When(\u0022when background\u0022, null).Then(\u0022then background\u0022, null)).WithScenario(\u0022test scenario\u0022, sb =\u003E sb.Then(\u0022step one\u0022, null)).Build();\r\n    var gherkinDocument = new Gherkin.Ast.GherkinDocument(gherkinFeaure, new Gherkin.Ast.Comment[0]);\r\n    var featurePath = $\u0022{nameof(FeatureWithBackgroundSteps)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featurePath)).Returns(new FeatureFile(gherkinDocument)).Verifiable();\r\n    var featureInstance = new FeatureWithBackgroundSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, \u0022test scenario\u0022, featurePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(\u0022abcd\u0022, featureInstance.OrderValidator);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Given given background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022When when background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Then then background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Then step one: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_ScenarioStep_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario123\u0022;\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = $\u0022{nameof(FeatureWithDataTableScenarioStep)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022When \u0022 \u002B FeatureWithDataTableScenarioStep.Steptext }, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) })))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDataTable);\r\n    Assert.Equal(3, featureInstance.ReceivedDataTable.Rows.Count());\r\n    AssertDataTableCell(0, 0, \u0022First argument\u0022);\r\n    AssertDataTableCell(0, 1, \u0022Second argument\u0022);\r\n    AssertDataTableCell(0, 2, \u0022Result\u0022);\r\n    AssertDataTableCell(1, 0, \u00221\u0022);\r\n    AssertDataTableCell(1, 1, \u00222\u0022);\r\n    AssertDataTableCell(1, 2, \u00223\u0022);\r\n    AssertDataTableCell(2, 0, \u0022a\u0022);\r\n    AssertDataTableCell(2, 1, \u0022b\u0022);\r\n    AssertDataTableCell(2, 2, \u0022c\u0022);\r\n    void AssertDataTableCell(int rowIndex, int cellIndex, string value)\r\n    {\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.Count() \u003E rowIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex));\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.Count() \u003E cellIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.ElementAt(cellIndex));\r\n        Assert.Equal(\u0022First argument\u0022, featureInstance.ReceivedDataTable.Rows.ElementAt(0).Cells.ElementAt(0).Value);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_ScenarioStep_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var docStringContent = \u0022some content\u0022 \u002B Environment.NewLine \u002B \u0022\u002B\u002B\u002B\u0022 \u002B Environment.NewLine \u002B \u0022with multi lines\u0022 \u002B Environment.NewLine \u002B \u0022---\u0022 \u002B Environment.NewLine \u002B \u0022in it\u0022;\r\n    var scenarioName = \u0022scenario 1231121\u0022;\r\n    var featureFilePath = nameof(FeatureWithDocStringScenarioStep) \u002B \u0022.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithDocStringScenarioStep.StepWithDocStringText }, new Gherkin.Ast.DocString(null, null, docStringContent)))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDocString);\r\n    Assert.Equal(docStringContent, featureInstance.ReceivedDocString.Content);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Scenario_With_Shared_StepMethod",
        "Body": "{\r\n    //arrange.\r\n    const string scenarioName = \u0022scenario 123\u0022;\r\n    var featureInstance = new FeatureWithSharedStepMethod();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = nameof(FeatureWithSharedStepMethod) \u002B \u0022.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022Given I chose 1 as first number\u0022, \u0022And I chose 2 as second number\u0022, \u0022And I chose 3 as third number\u0022, \u0022When I choose 4 as fourth number\u0022, \u0022And I choose 5 as fifth number\u0022, \u0022And I choose 6 as sixth number\u0022, $\u0022Then Result should be {1 \u002B 2 \u002B 3 \u002B 4 \u002B 5 \u002B 6} on the screen\u0022 })));\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    Assert.Equal(7, featureInstance.CallStack.Count);\r\n    Assert_Callback(0, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 1);\r\n    Assert_Callback(1, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 2);\r\n    Assert_Callback(2, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 3);\r\n    Assert_Callback(3, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 4);\r\n    Assert_Callback(4, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 5);\r\n    Assert_Callback(5, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 6);\r\n    Assert_Callback(6, nameof(FeatureWithSharedStepMethod.Result_should_be_x_on_the_screen), (1 \u002B 2 \u002B 3 \u002B 4 \u002B 5 \u002B 6));\r\n    void Assert_Callback(int index, string methodName, int value)\r\n    {\r\n        Assert.Equal(methodName, featureInstance.CallStack[index].Key);\r\n        Assert.NotNull(featureInstance.CallStack[index].Value);\r\n        Assert.Single(featureInstance.CallStack[index].Value);\r\n        Assert.Equal(value, featureInstance.CallStack[index].Value[0]);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Scenario_With_Star_Notation",
        "Body": "{\r\n    //arrange.\r\n    var gherkinFeature = new GherkinFeatureBuilder().WithScenario(\u0022S\u0022, steps =\u003E steps.Star(\u0022I have some cukes\u0022, null)).Build();\r\n    var featureFilePath = $\u0022{nameof(FeatureWithStarNotation)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(gherkinFeature, null))).Verifiable();\r\n    var featureInstance = new FeatureWithStarNotation();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, \u0022S\u0022, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Single(featureInstance.CallStack);\r\n    Assert.Equal(nameof(FeatureWithStarNotation.I_Have_Some_Cukes), featureInstance.CallStack[0].Key);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_DoesNotAllow_AsyncVoid_Steps",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var feature = new FeatureWithAsyncVoidStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    feature.InternalOutput = output.Object;\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CInvalidOperationException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(feature, \u0022S\u0022, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithBackgroundSteps",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "ExecuteScenario_Requires_FeatureInstance",
        "Body": "{\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(null, \u0022valid scenario name\u0022, \u0022valid route\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Requires_ScenarioName",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var featureInstance = new UselessFeature();\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_All_Scenario_Steps",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps)}.feature\u0022;\r\n    var scenarioName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { step1Text, step2Text, step3Text, step4Text }))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(4, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(12, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(15, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep3), featureInstance.CallStack[2].Key);\r\n    Assert.Null(featureInstance.CallStack[2].Value);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep4), featureInstance.CallStack[3].Key);\r\n    Assert.NotNull(featureInstance.CallStack[3].Value);\r\n    Assert.Single(featureInstance.CallStack[3].Value);\r\n    Assert.Equal(27, featureInstance.CallStack[3].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Successful_Scenario_Steps_And_Skips_The_Rest",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps_And_Throwing)}.feature\u0022;\r\n    var scenarioName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { step1Text, step2Text, step3Text, step4Text }))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps_And_Throwing();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    var exceptiion = await Assert.ThrowsAsync\u003CTargetInvocationException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath));\r\n    Assert.IsType\u003CInvalidOperationException\u003E(exceptiion.InnerException);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(2, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(12, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(15, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: FAILED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: SKIPPED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: SKIPPED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Background_Steps_First",
        "Body": "{\r\n    var gherkinFeaure = new GherkinFeatureBuilder().WithBackground(sb =\u003E sb.Given(\u0022given background\u0022, null).When(\u0022when background\u0022, null).Then(\u0022then background\u0022, null)).WithScenario(\u0022test scenario\u0022, sb =\u003E sb.Then(\u0022step one\u0022, null)).Build();\r\n    var gherkinDocument = new Gherkin.Ast.GherkinDocument(gherkinFeaure, new Gherkin.Ast.Comment[0]);\r\n    var featurePath = $\u0022{nameof(FeatureWithBackgroundSteps)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featurePath)).Returns(new FeatureFile(gherkinDocument)).Verifiable();\r\n    var featureInstance = new FeatureWithBackgroundSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, \u0022test scenario\u0022, featurePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(\u0022abcd\u0022, featureInstance.OrderValidator);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Given given background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022When when background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Then then background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Then step one: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_ScenarioStep_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario123\u0022;\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = $\u0022{nameof(FeatureWithDataTableScenarioStep)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022When \u0022 \u002B FeatureWithDataTableScenarioStep.Steptext }, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) })))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDataTable);\r\n    Assert.Equal(3, featureInstance.ReceivedDataTable.Rows.Count());\r\n    AssertDataTableCell(0, 0, \u0022First argument\u0022);\r\n    AssertDataTableCell(0, 1, \u0022Second argument\u0022);\r\n    AssertDataTableCell(0, 2, \u0022Result\u0022);\r\n    AssertDataTableCell(1, 0, \u00221\u0022);\r\n    AssertDataTableCell(1, 1, \u00222\u0022);\r\n    AssertDataTableCell(1, 2, \u00223\u0022);\r\n    AssertDataTableCell(2, 0, \u0022a\u0022);\r\n    AssertDataTableCell(2, 1, \u0022b\u0022);\r\n    AssertDataTableCell(2, 2, \u0022c\u0022);\r\n    void AssertDataTableCell(int rowIndex, int cellIndex, string value)\r\n    {\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.Count() \u003E rowIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex));\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.Count() \u003E cellIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.ElementAt(cellIndex));\r\n        Assert.Equal(\u0022First argument\u0022, featureInstance.ReceivedDataTable.Rows.ElementAt(0).Cells.ElementAt(0).Value);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_ScenarioStep_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var docStringContent = \u0022some content\u0022 \u002B Environment.NewLine \u002B \u0022\u002B\u002B\u002B\u0022 \u002B Environment.NewLine \u002B \u0022with multi lines\u0022 \u002B Environment.NewLine \u002B \u0022---\u0022 \u002B Environment.NewLine \u002B \u0022in it\u0022;\r\n    var scenarioName = \u0022scenario 1231121\u0022;\r\n    var featureFilePath = nameof(FeatureWithDocStringScenarioStep) \u002B \u0022.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithDocStringScenarioStep.StepWithDocStringText }, new Gherkin.Ast.DocString(null, null, docStringContent)))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDocString);\r\n    Assert.Equal(docStringContent, featureInstance.ReceivedDocString.Content);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Scenario_With_Shared_StepMethod",
        "Body": "{\r\n    //arrange.\r\n    const string scenarioName = \u0022scenario 123\u0022;\r\n    var featureInstance = new FeatureWithSharedStepMethod();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = nameof(FeatureWithSharedStepMethod) \u002B \u0022.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022Given I chose 1 as first number\u0022, \u0022And I chose 2 as second number\u0022, \u0022And I chose 3 as third number\u0022, \u0022When I choose 4 as fourth number\u0022, \u0022And I choose 5 as fifth number\u0022, \u0022And I choose 6 as sixth number\u0022, $\u0022Then Result should be {1 \u002B 2 \u002B 3 \u002B 4 \u002B 5 \u002B 6} on the screen\u0022 })));\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    Assert.Equal(7, featureInstance.CallStack.Count);\r\n    Assert_Callback(0, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 1);\r\n    Assert_Callback(1, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 2);\r\n    Assert_Callback(2, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 3);\r\n    Assert_Callback(3, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 4);\r\n    Assert_Callback(4, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 5);\r\n    Assert_Callback(5, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 6);\r\n    Assert_Callback(6, nameof(FeatureWithSharedStepMethod.Result_should_be_x_on_the_screen), (1 \u002B 2 \u002B 3 \u002B 4 \u002B 5 \u002B 6));\r\n    void Assert_Callback(int index, string methodName, int value)\r\n    {\r\n        Assert.Equal(methodName, featureInstance.CallStack[index].Key);\r\n        Assert.NotNull(featureInstance.CallStack[index].Value);\r\n        Assert.Single(featureInstance.CallStack[index].Value);\r\n        Assert.Equal(value, featureInstance.CallStack[index].Value[0]);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Scenario_With_Star_Notation",
        "Body": "{\r\n    //arrange.\r\n    var gherkinFeature = new GherkinFeatureBuilder().WithScenario(\u0022S\u0022, steps =\u003E steps.Star(\u0022I have some cukes\u0022, null)).Build();\r\n    var featureFilePath = $\u0022{nameof(FeatureWithStarNotation)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(gherkinFeature, null))).Verifiable();\r\n    var featureInstance = new FeatureWithStarNotation();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, \u0022S\u0022, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Single(featureInstance.CallStack);\r\n    Assert.Equal(nameof(FeatureWithStarNotation.I_Have_Some_Cukes), featureInstance.CallStack[0].Key);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_DoesNotAllow_AsyncVoid_Steps",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var feature = new FeatureWithAsyncVoidStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    feature.InternalOutput = output.Object;\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CInvalidOperationException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(feature, \u0022S\u0022, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithDataTableScenarioStep",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "ExecuteScenario_Requires_FeatureInstance",
        "Body": "{\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(null, \u0022valid scenario name\u0022, \u0022valid route\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Requires_ScenarioName",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var featureInstance = new UselessFeature();\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_All_Scenario_Steps",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps)}.feature\u0022;\r\n    var scenarioName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { step1Text, step2Text, step3Text, step4Text }))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(4, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(12, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(15, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep3), featureInstance.CallStack[2].Key);\r\n    Assert.Null(featureInstance.CallStack[2].Value);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep4), featureInstance.CallStack[3].Key);\r\n    Assert.NotNull(featureInstance.CallStack[3].Value);\r\n    Assert.Single(featureInstance.CallStack[3].Value);\r\n    Assert.Equal(27, featureInstance.CallStack[3].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Successful_Scenario_Steps_And_Skips_The_Rest",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps_And_Throwing)}.feature\u0022;\r\n    var scenarioName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { step1Text, step2Text, step3Text, step4Text }))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps_And_Throwing();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    var exceptiion = await Assert.ThrowsAsync\u003CTargetInvocationException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath));\r\n    Assert.IsType\u003CInvalidOperationException\u003E(exceptiion.InnerException);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(2, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(12, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(15, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: FAILED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: SKIPPED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: SKIPPED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Background_Steps_First",
        "Body": "{\r\n    var gherkinFeaure = new GherkinFeatureBuilder().WithBackground(sb =\u003E sb.Given(\u0022given background\u0022, null).When(\u0022when background\u0022, null).Then(\u0022then background\u0022, null)).WithScenario(\u0022test scenario\u0022, sb =\u003E sb.Then(\u0022step one\u0022, null)).Build();\r\n    var gherkinDocument = new Gherkin.Ast.GherkinDocument(gherkinFeaure, new Gherkin.Ast.Comment[0]);\r\n    var featurePath = $\u0022{nameof(FeatureWithBackgroundSteps)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featurePath)).Returns(new FeatureFile(gherkinDocument)).Verifiable();\r\n    var featureInstance = new FeatureWithBackgroundSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, \u0022test scenario\u0022, featurePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(\u0022abcd\u0022, featureInstance.OrderValidator);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Given given background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022When when background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Then then background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Then step one: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_ScenarioStep_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario123\u0022;\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = $\u0022{nameof(FeatureWithDataTableScenarioStep)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022When \u0022 \u002B FeatureWithDataTableScenarioStep.Steptext }, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) })))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDataTable);\r\n    Assert.Equal(3, featureInstance.ReceivedDataTable.Rows.Count());\r\n    AssertDataTableCell(0, 0, \u0022First argument\u0022);\r\n    AssertDataTableCell(0, 1, \u0022Second argument\u0022);\r\n    AssertDataTableCell(0, 2, \u0022Result\u0022);\r\n    AssertDataTableCell(1, 0, \u00221\u0022);\r\n    AssertDataTableCell(1, 1, \u00222\u0022);\r\n    AssertDataTableCell(1, 2, \u00223\u0022);\r\n    AssertDataTableCell(2, 0, \u0022a\u0022);\r\n    AssertDataTableCell(2, 1, \u0022b\u0022);\r\n    AssertDataTableCell(2, 2, \u0022c\u0022);\r\n    void AssertDataTableCell(int rowIndex, int cellIndex, string value)\r\n    {\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.Count() \u003E rowIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex));\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.Count() \u003E cellIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.ElementAt(cellIndex));\r\n        Assert.Equal(\u0022First argument\u0022, featureInstance.ReceivedDataTable.Rows.ElementAt(0).Cells.ElementAt(0).Value);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_ScenarioStep_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var docStringContent = \u0022some content\u0022 \u002B Environment.NewLine \u002B \u0022\u002B\u002B\u002B\u0022 \u002B Environment.NewLine \u002B \u0022with multi lines\u0022 \u002B Environment.NewLine \u002B \u0022---\u0022 \u002B Environment.NewLine \u002B \u0022in it\u0022;\r\n    var scenarioName = \u0022scenario 1231121\u0022;\r\n    var featureFilePath = nameof(FeatureWithDocStringScenarioStep) \u002B \u0022.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithDocStringScenarioStep.StepWithDocStringText }, new Gherkin.Ast.DocString(null, null, docStringContent)))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDocString);\r\n    Assert.Equal(docStringContent, featureInstance.ReceivedDocString.Content);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Scenario_With_Shared_StepMethod",
        "Body": "{\r\n    //arrange.\r\n    const string scenarioName = \u0022scenario 123\u0022;\r\n    var featureInstance = new FeatureWithSharedStepMethod();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = nameof(FeatureWithSharedStepMethod) \u002B \u0022.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022Given I chose 1 as first number\u0022, \u0022And I chose 2 as second number\u0022, \u0022And I chose 3 as third number\u0022, \u0022When I choose 4 as fourth number\u0022, \u0022And I choose 5 as fifth number\u0022, \u0022And I choose 6 as sixth number\u0022, $\u0022Then Result should be {1 \u002B 2 \u002B 3 \u002B 4 \u002B 5 \u002B 6} on the screen\u0022 })));\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    Assert.Equal(7, featureInstance.CallStack.Count);\r\n    Assert_Callback(0, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 1);\r\n    Assert_Callback(1, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 2);\r\n    Assert_Callback(2, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 3);\r\n    Assert_Callback(3, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 4);\r\n    Assert_Callback(4, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 5);\r\n    Assert_Callback(5, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 6);\r\n    Assert_Callback(6, nameof(FeatureWithSharedStepMethod.Result_should_be_x_on_the_screen), (1 \u002B 2 \u002B 3 \u002B 4 \u002B 5 \u002B 6));\r\n    void Assert_Callback(int index, string methodName, int value)\r\n    {\r\n        Assert.Equal(methodName, featureInstance.CallStack[index].Key);\r\n        Assert.NotNull(featureInstance.CallStack[index].Value);\r\n        Assert.Single(featureInstance.CallStack[index].Value);\r\n        Assert.Equal(value, featureInstance.CallStack[index].Value[0]);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Scenario_With_Star_Notation",
        "Body": "{\r\n    //arrange.\r\n    var gherkinFeature = new GherkinFeatureBuilder().WithScenario(\u0022S\u0022, steps =\u003E steps.Star(\u0022I have some cukes\u0022, null)).Build();\r\n    var featureFilePath = $\u0022{nameof(FeatureWithStarNotation)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(gherkinFeature, null))).Verifiable();\r\n    var featureInstance = new FeatureWithStarNotation();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, \u0022S\u0022, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Single(featureInstance.CallStack);\r\n    Assert.Equal(nameof(FeatureWithStarNotation.I_Have_Some_Cukes), featureInstance.CallStack[0].Key);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_DoesNotAllow_AsyncVoid_Steps",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var feature = new FeatureWithAsyncVoidStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    feature.InternalOutput = output.Object;\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CInvalidOperationException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(feature, \u0022S\u0022, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithDocStringScenarioStep",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "ExecuteScenario_Requires_FeatureInstance",
        "Body": "{\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(null, \u0022valid scenario name\u0022, \u0022valid route\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Requires_ScenarioName",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var featureInstance = new UselessFeature();\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_All_Scenario_Steps",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps)}.feature\u0022;\r\n    var scenarioName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { step1Text, step2Text, step3Text, step4Text }))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(4, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(12, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(15, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep3), featureInstance.CallStack[2].Key);\r\n    Assert.Null(featureInstance.CallStack[2].Value);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep4), featureInstance.CallStack[3].Key);\r\n    Assert.NotNull(featureInstance.CallStack[3].Value);\r\n    Assert.Single(featureInstance.CallStack[3].Value);\r\n    Assert.Equal(27, featureInstance.CallStack[3].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Successful_Scenario_Steps_And_Skips_The_Rest",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps_And_Throwing)}.feature\u0022;\r\n    var scenarioName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { step1Text, step2Text, step3Text, step4Text }))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps_And_Throwing();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    var exceptiion = await Assert.ThrowsAsync\u003CTargetInvocationException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath));\r\n    Assert.IsType\u003CInvalidOperationException\u003E(exceptiion.InnerException);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(2, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(12, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(15, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: FAILED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: SKIPPED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: SKIPPED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Background_Steps_First",
        "Body": "{\r\n    var gherkinFeaure = new GherkinFeatureBuilder().WithBackground(sb =\u003E sb.Given(\u0022given background\u0022, null).When(\u0022when background\u0022, null).Then(\u0022then background\u0022, null)).WithScenario(\u0022test scenario\u0022, sb =\u003E sb.Then(\u0022step one\u0022, null)).Build();\r\n    var gherkinDocument = new Gherkin.Ast.GherkinDocument(gherkinFeaure, new Gherkin.Ast.Comment[0]);\r\n    var featurePath = $\u0022{nameof(FeatureWithBackgroundSteps)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featurePath)).Returns(new FeatureFile(gherkinDocument)).Verifiable();\r\n    var featureInstance = new FeatureWithBackgroundSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, \u0022test scenario\u0022, featurePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(\u0022abcd\u0022, featureInstance.OrderValidator);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Given given background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022When when background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Then then background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Then step one: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_ScenarioStep_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario123\u0022;\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = $\u0022{nameof(FeatureWithDataTableScenarioStep)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022When \u0022 \u002B FeatureWithDataTableScenarioStep.Steptext }, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) })))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDataTable);\r\n    Assert.Equal(3, featureInstance.ReceivedDataTable.Rows.Count());\r\n    AssertDataTableCell(0, 0, \u0022First argument\u0022);\r\n    AssertDataTableCell(0, 1, \u0022Second argument\u0022);\r\n    AssertDataTableCell(0, 2, \u0022Result\u0022);\r\n    AssertDataTableCell(1, 0, \u00221\u0022);\r\n    AssertDataTableCell(1, 1, \u00222\u0022);\r\n    AssertDataTableCell(1, 2, \u00223\u0022);\r\n    AssertDataTableCell(2, 0, \u0022a\u0022);\r\n    AssertDataTableCell(2, 1, \u0022b\u0022);\r\n    AssertDataTableCell(2, 2, \u0022c\u0022);\r\n    void AssertDataTableCell(int rowIndex, int cellIndex, string value)\r\n    {\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.Count() \u003E rowIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex));\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.Count() \u003E cellIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.ElementAt(cellIndex));\r\n        Assert.Equal(\u0022First argument\u0022, featureInstance.ReceivedDataTable.Rows.ElementAt(0).Cells.ElementAt(0).Value);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_ScenarioStep_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var docStringContent = \u0022some content\u0022 \u002B Environment.NewLine \u002B \u0022\u002B\u002B\u002B\u0022 \u002B Environment.NewLine \u002B \u0022with multi lines\u0022 \u002B Environment.NewLine \u002B \u0022---\u0022 \u002B Environment.NewLine \u002B \u0022in it\u0022;\r\n    var scenarioName = \u0022scenario 1231121\u0022;\r\n    var featureFilePath = nameof(FeatureWithDocStringScenarioStep) \u002B \u0022.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithDocStringScenarioStep.StepWithDocStringText }, new Gherkin.Ast.DocString(null, null, docStringContent)))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDocString);\r\n    Assert.Equal(docStringContent, featureInstance.ReceivedDocString.Content);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Scenario_With_Shared_StepMethod",
        "Body": "{\r\n    //arrange.\r\n    const string scenarioName = \u0022scenario 123\u0022;\r\n    var featureInstance = new FeatureWithSharedStepMethod();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = nameof(FeatureWithSharedStepMethod) \u002B \u0022.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022Given I chose 1 as first number\u0022, \u0022And I chose 2 as second number\u0022, \u0022And I chose 3 as third number\u0022, \u0022When I choose 4 as fourth number\u0022, \u0022And I choose 5 as fifth number\u0022, \u0022And I choose 6 as sixth number\u0022, $\u0022Then Result should be {1 \u002B 2 \u002B 3 \u002B 4 \u002B 5 \u002B 6} on the screen\u0022 })));\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    Assert.Equal(7, featureInstance.CallStack.Count);\r\n    Assert_Callback(0, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 1);\r\n    Assert_Callback(1, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 2);\r\n    Assert_Callback(2, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 3);\r\n    Assert_Callback(3, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 4);\r\n    Assert_Callback(4, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 5);\r\n    Assert_Callback(5, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 6);\r\n    Assert_Callback(6, nameof(FeatureWithSharedStepMethod.Result_should_be_x_on_the_screen), (1 \u002B 2 \u002B 3 \u002B 4 \u002B 5 \u002B 6));\r\n    void Assert_Callback(int index, string methodName, int value)\r\n    {\r\n        Assert.Equal(methodName, featureInstance.CallStack[index].Key);\r\n        Assert.NotNull(featureInstance.CallStack[index].Value);\r\n        Assert.Single(featureInstance.CallStack[index].Value);\r\n        Assert.Equal(value, featureInstance.CallStack[index].Value[0]);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Scenario_With_Star_Notation",
        "Body": "{\r\n    //arrange.\r\n    var gherkinFeature = new GherkinFeatureBuilder().WithScenario(\u0022S\u0022, steps =\u003E steps.Star(\u0022I have some cukes\u0022, null)).Build();\r\n    var featureFilePath = $\u0022{nameof(FeatureWithStarNotation)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(gherkinFeature, null))).Verifiable();\r\n    var featureInstance = new FeatureWithStarNotation();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, \u0022S\u0022, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Single(featureInstance.CallStack);\r\n    Assert.Equal(nameof(FeatureWithStarNotation.I_Have_Some_Cukes), featureInstance.CallStack[0].Key);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_DoesNotAllow_AsyncVoid_Steps",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var feature = new FeatureWithAsyncVoidStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    feature.InternalOutput = output.Object;\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CInvalidOperationException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(feature, \u0022S\u0022, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithSharedStepMethod",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "ExecuteScenario_Requires_FeatureInstance",
        "Body": "{\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(null, \u0022valid scenario name\u0022, \u0022valid route\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Requires_ScenarioName",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var featureInstance = new UselessFeature();\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_All_Scenario_Steps",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps)}.feature\u0022;\r\n    var scenarioName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { step1Text, step2Text, step3Text, step4Text }))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(4, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(12, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(15, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep3), featureInstance.CallStack[2].Key);\r\n    Assert.Null(featureInstance.CallStack[2].Value);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep4), featureInstance.CallStack[3].Key);\r\n    Assert.NotNull(featureInstance.CallStack[3].Value);\r\n    Assert.Single(featureInstance.CallStack[3].Value);\r\n    Assert.Equal(27, featureInstance.CallStack[3].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Successful_Scenario_Steps_And_Skips_The_Rest",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps_And_Throwing)}.feature\u0022;\r\n    var scenarioName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { step1Text, step2Text, step3Text, step4Text }))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps_And_Throwing();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    var exceptiion = await Assert.ThrowsAsync\u003CTargetInvocationException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath));\r\n    Assert.IsType\u003CInvalidOperationException\u003E(exceptiion.InnerException);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(2, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(12, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(15, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: FAILED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: SKIPPED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: SKIPPED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Background_Steps_First",
        "Body": "{\r\n    var gherkinFeaure = new GherkinFeatureBuilder().WithBackground(sb =\u003E sb.Given(\u0022given background\u0022, null).When(\u0022when background\u0022, null).Then(\u0022then background\u0022, null)).WithScenario(\u0022test scenario\u0022, sb =\u003E sb.Then(\u0022step one\u0022, null)).Build();\r\n    var gherkinDocument = new Gherkin.Ast.GherkinDocument(gherkinFeaure, new Gherkin.Ast.Comment[0]);\r\n    var featurePath = $\u0022{nameof(FeatureWithBackgroundSteps)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featurePath)).Returns(new FeatureFile(gherkinDocument)).Verifiable();\r\n    var featureInstance = new FeatureWithBackgroundSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, \u0022test scenario\u0022, featurePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(\u0022abcd\u0022, featureInstance.OrderValidator);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Given given background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022When when background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Then then background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Then step one: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_ScenarioStep_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario123\u0022;\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = $\u0022{nameof(FeatureWithDataTableScenarioStep)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022When \u0022 \u002B FeatureWithDataTableScenarioStep.Steptext }, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) })))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDataTable);\r\n    Assert.Equal(3, featureInstance.ReceivedDataTable.Rows.Count());\r\n    AssertDataTableCell(0, 0, \u0022First argument\u0022);\r\n    AssertDataTableCell(0, 1, \u0022Second argument\u0022);\r\n    AssertDataTableCell(0, 2, \u0022Result\u0022);\r\n    AssertDataTableCell(1, 0, \u00221\u0022);\r\n    AssertDataTableCell(1, 1, \u00222\u0022);\r\n    AssertDataTableCell(1, 2, \u00223\u0022);\r\n    AssertDataTableCell(2, 0, \u0022a\u0022);\r\n    AssertDataTableCell(2, 1, \u0022b\u0022);\r\n    AssertDataTableCell(2, 2, \u0022c\u0022);\r\n    void AssertDataTableCell(int rowIndex, int cellIndex, string value)\r\n    {\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.Count() \u003E rowIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex));\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.Count() \u003E cellIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.ElementAt(cellIndex));\r\n        Assert.Equal(\u0022First argument\u0022, featureInstance.ReceivedDataTable.Rows.ElementAt(0).Cells.ElementAt(0).Value);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_ScenarioStep_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var docStringContent = \u0022some content\u0022 \u002B Environment.NewLine \u002B \u0022\u002B\u002B\u002B\u0022 \u002B Environment.NewLine \u002B \u0022with multi lines\u0022 \u002B Environment.NewLine \u002B \u0022---\u0022 \u002B Environment.NewLine \u002B \u0022in it\u0022;\r\n    var scenarioName = \u0022scenario 1231121\u0022;\r\n    var featureFilePath = nameof(FeatureWithDocStringScenarioStep) \u002B \u0022.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithDocStringScenarioStep.StepWithDocStringText }, new Gherkin.Ast.DocString(null, null, docStringContent)))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDocString);\r\n    Assert.Equal(docStringContent, featureInstance.ReceivedDocString.Content);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Scenario_With_Shared_StepMethod",
        "Body": "{\r\n    //arrange.\r\n    const string scenarioName = \u0022scenario 123\u0022;\r\n    var featureInstance = new FeatureWithSharedStepMethod();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = nameof(FeatureWithSharedStepMethod) \u002B \u0022.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022Given I chose 1 as first number\u0022, \u0022And I chose 2 as second number\u0022, \u0022And I chose 3 as third number\u0022, \u0022When I choose 4 as fourth number\u0022, \u0022And I choose 5 as fifth number\u0022, \u0022And I choose 6 as sixth number\u0022, $\u0022Then Result should be {1 \u002B 2 \u002B 3 \u002B 4 \u002B 5 \u002B 6} on the screen\u0022 })));\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    Assert.Equal(7, featureInstance.CallStack.Count);\r\n    Assert_Callback(0, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 1);\r\n    Assert_Callback(1, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 2);\r\n    Assert_Callback(2, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 3);\r\n    Assert_Callback(3, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 4);\r\n    Assert_Callback(4, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 5);\r\n    Assert_Callback(5, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 6);\r\n    Assert_Callback(6, nameof(FeatureWithSharedStepMethod.Result_should_be_x_on_the_screen), (1 \u002B 2 \u002B 3 \u002B 4 \u002B 5 \u002B 6));\r\n    void Assert_Callback(int index, string methodName, int value)\r\n    {\r\n        Assert.Equal(methodName, featureInstance.CallStack[index].Key);\r\n        Assert.NotNull(featureInstance.CallStack[index].Value);\r\n        Assert.Single(featureInstance.CallStack[index].Value);\r\n        Assert.Equal(value, featureInstance.CallStack[index].Value[0]);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Scenario_With_Star_Notation",
        "Body": "{\r\n    //arrange.\r\n    var gherkinFeature = new GherkinFeatureBuilder().WithScenario(\u0022S\u0022, steps =\u003E steps.Star(\u0022I have some cukes\u0022, null)).Build();\r\n    var featureFilePath = $\u0022{nameof(FeatureWithStarNotation)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(gherkinFeature, null))).Verifiable();\r\n    var featureInstance = new FeatureWithStarNotation();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, \u0022S\u0022, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Single(featureInstance.CallStack);\r\n    Assert.Equal(nameof(FeatureWithStarNotation.I_Have_Some_Cukes), featureInstance.CallStack[0].Key);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_DoesNotAllow_AsyncVoid_Steps",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var feature = new FeatureWithAsyncVoidStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    feature.InternalOutput = output.Object;\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CInvalidOperationException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(feature, \u0022S\u0022, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithStarNotation",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "ExecuteScenario_Requires_FeatureInstance",
        "Body": "{\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(null, \u0022valid scenario name\u0022, \u0022valid route\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Requires_ScenarioName",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var featureInstance = new UselessFeature();\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_All_Scenario_Steps",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps)}.feature\u0022;\r\n    var scenarioName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { step1Text, step2Text, step3Text, step4Text }))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(4, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(12, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(15, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep3), featureInstance.CallStack[2].Key);\r\n    Assert.Null(featureInstance.CallStack[2].Value);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep4), featureInstance.CallStack[3].Key);\r\n    Assert.NotNull(featureInstance.CallStack[3].Value);\r\n    Assert.Single(featureInstance.CallStack[3].Value);\r\n    Assert.Equal(27, featureInstance.CallStack[3].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Successful_Scenario_Steps_And_Skips_The_Rest",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps_And_Throwing)}.feature\u0022;\r\n    var scenarioName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { step1Text, step2Text, step3Text, step4Text }))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps_And_Throwing();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    var exceptiion = await Assert.ThrowsAsync\u003CTargetInvocationException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath));\r\n    Assert.IsType\u003CInvalidOperationException\u003E(exceptiion.InnerException);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(2, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(12, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(15, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: FAILED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: SKIPPED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: SKIPPED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Background_Steps_First",
        "Body": "{\r\n    var gherkinFeaure = new GherkinFeatureBuilder().WithBackground(sb =\u003E sb.Given(\u0022given background\u0022, null).When(\u0022when background\u0022, null).Then(\u0022then background\u0022, null)).WithScenario(\u0022test scenario\u0022, sb =\u003E sb.Then(\u0022step one\u0022, null)).Build();\r\n    var gherkinDocument = new Gherkin.Ast.GherkinDocument(gherkinFeaure, new Gherkin.Ast.Comment[0]);\r\n    var featurePath = $\u0022{nameof(FeatureWithBackgroundSteps)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featurePath)).Returns(new FeatureFile(gherkinDocument)).Verifiable();\r\n    var featureInstance = new FeatureWithBackgroundSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, \u0022test scenario\u0022, featurePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(\u0022abcd\u0022, featureInstance.OrderValidator);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Given given background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022When when background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Then then background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Then step one: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_ScenarioStep_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario123\u0022;\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = $\u0022{nameof(FeatureWithDataTableScenarioStep)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022When \u0022 \u002B FeatureWithDataTableScenarioStep.Steptext }, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) })))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDataTable);\r\n    Assert.Equal(3, featureInstance.ReceivedDataTable.Rows.Count());\r\n    AssertDataTableCell(0, 0, \u0022First argument\u0022);\r\n    AssertDataTableCell(0, 1, \u0022Second argument\u0022);\r\n    AssertDataTableCell(0, 2, \u0022Result\u0022);\r\n    AssertDataTableCell(1, 0, \u00221\u0022);\r\n    AssertDataTableCell(1, 1, \u00222\u0022);\r\n    AssertDataTableCell(1, 2, \u00223\u0022);\r\n    AssertDataTableCell(2, 0, \u0022a\u0022);\r\n    AssertDataTableCell(2, 1, \u0022b\u0022);\r\n    AssertDataTableCell(2, 2, \u0022c\u0022);\r\n    void AssertDataTableCell(int rowIndex, int cellIndex, string value)\r\n    {\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.Count() \u003E rowIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex));\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.Count() \u003E cellIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.ElementAt(cellIndex));\r\n        Assert.Equal(\u0022First argument\u0022, featureInstance.ReceivedDataTable.Rows.ElementAt(0).Cells.ElementAt(0).Value);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_ScenarioStep_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var docStringContent = \u0022some content\u0022 \u002B Environment.NewLine \u002B \u0022\u002B\u002B\u002B\u0022 \u002B Environment.NewLine \u002B \u0022with multi lines\u0022 \u002B Environment.NewLine \u002B \u0022---\u0022 \u002B Environment.NewLine \u002B \u0022in it\u0022;\r\n    var scenarioName = \u0022scenario 1231121\u0022;\r\n    var featureFilePath = nameof(FeatureWithDocStringScenarioStep) \u002B \u0022.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithDocStringScenarioStep.StepWithDocStringText }, new Gherkin.Ast.DocString(null, null, docStringContent)))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDocString);\r\n    Assert.Equal(docStringContent, featureInstance.ReceivedDocString.Content);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Scenario_With_Shared_StepMethod",
        "Body": "{\r\n    //arrange.\r\n    const string scenarioName = \u0022scenario 123\u0022;\r\n    var featureInstance = new FeatureWithSharedStepMethod();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = nameof(FeatureWithSharedStepMethod) \u002B \u0022.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022Given I chose 1 as first number\u0022, \u0022And I chose 2 as second number\u0022, \u0022And I chose 3 as third number\u0022, \u0022When I choose 4 as fourth number\u0022, \u0022And I choose 5 as fifth number\u0022, \u0022And I choose 6 as sixth number\u0022, $\u0022Then Result should be {1 \u002B 2 \u002B 3 \u002B 4 \u002B 5 \u002B 6} on the screen\u0022 })));\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    Assert.Equal(7, featureInstance.CallStack.Count);\r\n    Assert_Callback(0, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 1);\r\n    Assert_Callback(1, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 2);\r\n    Assert_Callback(2, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 3);\r\n    Assert_Callback(3, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 4);\r\n    Assert_Callback(4, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 5);\r\n    Assert_Callback(5, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 6);\r\n    Assert_Callback(6, nameof(FeatureWithSharedStepMethod.Result_should_be_x_on_the_screen), (1 \u002B 2 \u002B 3 \u002B 4 \u002B 5 \u002B 6));\r\n    void Assert_Callback(int index, string methodName, int value)\r\n    {\r\n        Assert.Equal(methodName, featureInstance.CallStack[index].Key);\r\n        Assert.NotNull(featureInstance.CallStack[index].Value);\r\n        Assert.Single(featureInstance.CallStack[index].Value);\r\n        Assert.Equal(value, featureInstance.CallStack[index].Value[0]);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Scenario_With_Star_Notation",
        "Body": "{\r\n    //arrange.\r\n    var gherkinFeature = new GherkinFeatureBuilder().WithScenario(\u0022S\u0022, steps =\u003E steps.Star(\u0022I have some cukes\u0022, null)).Build();\r\n    var featureFilePath = $\u0022{nameof(FeatureWithStarNotation)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(gherkinFeature, null))).Verifiable();\r\n    var featureInstance = new FeatureWithStarNotation();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, \u0022S\u0022, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Single(featureInstance.CallStack);\r\n    Assert.Equal(nameof(FeatureWithStarNotation.I_Have_Some_Cukes), featureInstance.CallStack[0].Key);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_DoesNotAllow_AsyncVoid_Steps",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var feature = new FeatureWithAsyncVoidStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    feature.InternalOutput = output.Object;\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CInvalidOperationException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(feature, \u0022S\u0022, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithAsyncVoidStep",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "ExecuteScenario_Requires_FeatureInstance",
        "Body": "{\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(null, \u0022valid scenario name\u0022, \u0022valid route\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Requires_ScenarioName",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var featureInstance = new UselessFeature();\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_All_Scenario_Steps",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps)}.feature\u0022;\r\n    var scenarioName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { step1Text, step2Text, step3Text, step4Text }))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(4, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(12, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(15, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep3), featureInstance.CallStack[2].Key);\r\n    Assert.Null(featureInstance.CallStack[2].Value);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep4), featureInstance.CallStack[3].Key);\r\n    Assert.NotNull(featureInstance.CallStack[3].Value);\r\n    Assert.Single(featureInstance.CallStack[3].Value);\r\n    Assert.Equal(27, featureInstance.CallStack[3].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Successful_Scenario_Steps_And_Skips_The_Rest",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps_And_Throwing)}.feature\u0022;\r\n    var scenarioName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { step1Text, step2Text, step3Text, step4Text }))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps_And_Throwing();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    var exceptiion = await Assert.ThrowsAsync\u003CTargetInvocationException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath));\r\n    Assert.IsType\u003CInvalidOperationException\u003E(exceptiion.InnerException);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(2, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(12, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(15, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: FAILED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: SKIPPED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: SKIPPED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Background_Steps_First",
        "Body": "{\r\n    var gherkinFeaure = new GherkinFeatureBuilder().WithBackground(sb =\u003E sb.Given(\u0022given background\u0022, null).When(\u0022when background\u0022, null).Then(\u0022then background\u0022, null)).WithScenario(\u0022test scenario\u0022, sb =\u003E sb.Then(\u0022step one\u0022, null)).Build();\r\n    var gherkinDocument = new Gherkin.Ast.GherkinDocument(gherkinFeaure, new Gherkin.Ast.Comment[0]);\r\n    var featurePath = $\u0022{nameof(FeatureWithBackgroundSteps)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featurePath)).Returns(new FeatureFile(gherkinDocument)).Verifiable();\r\n    var featureInstance = new FeatureWithBackgroundSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, \u0022test scenario\u0022, featurePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(\u0022abcd\u0022, featureInstance.OrderValidator);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Given given background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022When when background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Then then background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Then step one: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_ScenarioStep_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario123\u0022;\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = $\u0022{nameof(FeatureWithDataTableScenarioStep)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022When \u0022 \u002B FeatureWithDataTableScenarioStep.Steptext }, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) })))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDataTable);\r\n    Assert.Equal(3, featureInstance.ReceivedDataTable.Rows.Count());\r\n    AssertDataTableCell(0, 0, \u0022First argument\u0022);\r\n    AssertDataTableCell(0, 1, \u0022Second argument\u0022);\r\n    AssertDataTableCell(0, 2, \u0022Result\u0022);\r\n    AssertDataTableCell(1, 0, \u00221\u0022);\r\n    AssertDataTableCell(1, 1, \u00222\u0022);\r\n    AssertDataTableCell(1, 2, \u00223\u0022);\r\n    AssertDataTableCell(2, 0, \u0022a\u0022);\r\n    AssertDataTableCell(2, 1, \u0022b\u0022);\r\n    AssertDataTableCell(2, 2, \u0022c\u0022);\r\n    void AssertDataTableCell(int rowIndex, int cellIndex, string value)\r\n    {\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.Count() \u003E rowIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex));\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.Count() \u003E cellIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.ElementAt(cellIndex));\r\n        Assert.Equal(\u0022First argument\u0022, featureInstance.ReceivedDataTable.Rows.ElementAt(0).Cells.ElementAt(0).Value);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_ScenarioStep_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var docStringContent = \u0022some content\u0022 \u002B Environment.NewLine \u002B \u0022\u002B\u002B\u002B\u0022 \u002B Environment.NewLine \u002B \u0022with multi lines\u0022 \u002B Environment.NewLine \u002B \u0022---\u0022 \u002B Environment.NewLine \u002B \u0022in it\u0022;\r\n    var scenarioName = \u0022scenario 1231121\u0022;\r\n    var featureFilePath = nameof(FeatureWithDocStringScenarioStep) \u002B \u0022.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithDocStringScenarioStep.StepWithDocStringText }, new Gherkin.Ast.DocString(null, null, docStringContent)))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDocString);\r\n    Assert.Equal(docStringContent, featureInstance.ReceivedDocString.Content);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Scenario_With_Shared_StepMethod",
        "Body": "{\r\n    //arrange.\r\n    const string scenarioName = \u0022scenario 123\u0022;\r\n    var featureInstance = new FeatureWithSharedStepMethod();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = nameof(FeatureWithSharedStepMethod) \u002B \u0022.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022Given I chose 1 as first number\u0022, \u0022And I chose 2 as second number\u0022, \u0022And I chose 3 as third number\u0022, \u0022When I choose 4 as fourth number\u0022, \u0022And I choose 5 as fifth number\u0022, \u0022And I choose 6 as sixth number\u0022, $\u0022Then Result should be {1 \u002B 2 \u002B 3 \u002B 4 \u002B 5 \u002B 6} on the screen\u0022 })));\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    Assert.Equal(7, featureInstance.CallStack.Count);\r\n    Assert_Callback(0, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 1);\r\n    Assert_Callback(1, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 2);\r\n    Assert_Callback(2, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 3);\r\n    Assert_Callback(3, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 4);\r\n    Assert_Callback(4, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 5);\r\n    Assert_Callback(5, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 6);\r\n    Assert_Callback(6, nameof(FeatureWithSharedStepMethod.Result_should_be_x_on_the_screen), (1 \u002B 2 \u002B 3 \u002B 4 \u002B 5 \u002B 6));\r\n    void Assert_Callback(int index, string methodName, int value)\r\n    {\r\n        Assert.Equal(methodName, featureInstance.CallStack[index].Key);\r\n        Assert.NotNull(featureInstance.CallStack[index].Value);\r\n        Assert.Single(featureInstance.CallStack[index].Value);\r\n        Assert.Equal(value, featureInstance.CallStack[index].Value[0]);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Scenario_With_Star_Notation",
        "Body": "{\r\n    //arrange.\r\n    var gherkinFeature = new GherkinFeatureBuilder().WithScenario(\u0022S\u0022, steps =\u003E steps.Star(\u0022I have some cukes\u0022, null)).Build();\r\n    var featureFilePath = $\u0022{nameof(FeatureWithStarNotation)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(gherkinFeature, null))).Verifiable();\r\n    var featureInstance = new FeatureWithStarNotation();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, \u0022S\u0022, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Single(featureInstance.CallStack);\r\n    Assert.Equal(nameof(FeatureWithStarNotation.I_Have_Some_Cukes), featureInstance.CallStack[0].Key);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_DoesNotAllow_AsyncVoid_Steps",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var feature = new FeatureWithAsyncVoidStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    feature.InternalOutput = output.Object;\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CInvalidOperationException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(feature, \u0022S\u0022, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ScenarioExecutorTests",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "ExecuteScenario_Requires_FeatureInstance",
        "Body": "{\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(null, \u0022valid scenario name\u0022, \u0022valid route\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Requires_ScenarioName",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var featureInstance = new UselessFeature();\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_All_Scenario_Steps",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps)}.feature\u0022;\r\n    var scenarioName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { step1Text, step2Text, step3Text, step4Text }))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(4, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(12, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(15, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep3), featureInstance.CallStack[2].Key);\r\n    Assert.Null(featureInstance.CallStack[2].Value);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep4), featureInstance.CallStack[3].Key);\r\n    Assert.NotNull(featureInstance.CallStack[3].Value);\r\n    Assert.Single(featureInstance.CallStack[3].Value);\r\n    Assert.Equal(27, featureInstance.CallStack[3].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Successful_Scenario_Steps_And_Skips_The_Rest",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, \u002212\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, \u002215\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, \u002227\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps_And_Throwing)}.feature\u0022;\r\n    var scenarioName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { step1Text, step2Text, step3Text, step4Text }))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps_And_Throwing();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    var exceptiion = await Assert.ThrowsAsync\u003CTargetInvocationException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath));\r\n    Assert.IsType\u003CInvalidOperationException\u003E(exceptiion.InnerException);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(2, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(12, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(15, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: FAILED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: SKIPPED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: SKIPPED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Background_Steps_First",
        "Body": "{\r\n    var gherkinFeaure = new GherkinFeatureBuilder().WithBackground(sb =\u003E sb.Given(\u0022given background\u0022, null).When(\u0022when background\u0022, null).Then(\u0022then background\u0022, null)).WithScenario(\u0022test scenario\u0022, sb =\u003E sb.Then(\u0022step one\u0022, null)).Build();\r\n    var gherkinDocument = new Gherkin.Ast.GherkinDocument(gherkinFeaure, new Gherkin.Ast.Comment[0]);\r\n    var featurePath = $\u0022{nameof(FeatureWithBackgroundSteps)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featurePath)).Returns(new FeatureFile(gherkinDocument)).Verifiable();\r\n    var featureInstance = new FeatureWithBackgroundSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, \u0022test scenario\u0022, featurePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(\u0022abcd\u0022, featureInstance.OrderValidator);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Given given background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022When when background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Then then background: PASSED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022Then step one: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_ScenarioStep_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario123\u0022;\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = $\u0022{nameof(FeatureWithDataTableScenarioStep)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022When \u0022 \u002B FeatureWithDataTableScenarioStep.Steptext }, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) })))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDataTable);\r\n    Assert.Equal(3, featureInstance.ReceivedDataTable.Rows.Count());\r\n    AssertDataTableCell(0, 0, \u0022First argument\u0022);\r\n    AssertDataTableCell(0, 1, \u0022Second argument\u0022);\r\n    AssertDataTableCell(0, 2, \u0022Result\u0022);\r\n    AssertDataTableCell(1, 0, \u00221\u0022);\r\n    AssertDataTableCell(1, 1, \u00222\u0022);\r\n    AssertDataTableCell(1, 2, \u00223\u0022);\r\n    AssertDataTableCell(2, 0, \u0022a\u0022);\r\n    AssertDataTableCell(2, 1, \u0022b\u0022);\r\n    AssertDataTableCell(2, 2, \u0022c\u0022);\r\n    void AssertDataTableCell(int rowIndex, int cellIndex, string value)\r\n    {\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.Count() \u003E rowIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex));\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.Count() \u003E cellIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.ElementAt(cellIndex));\r\n        Assert.Equal(\u0022First argument\u0022, featureInstance.ReceivedDataTable.Rows.ElementAt(0).Cells.ElementAt(0).Value);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_ScenarioStep_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var docStringContent = \u0022some content\u0022 \u002B Environment.NewLine \u002B \u0022\u002B\u002B\u002B\u0022 \u002B Environment.NewLine \u002B \u0022with multi lines\u0022 \u002B Environment.NewLine \u002B \u0022---\u0022 \u002B Environment.NewLine \u002B \u0022in it\u0022;\r\n    var scenarioName = \u0022scenario 1231121\u0022;\r\n    var featureFilePath = nameof(FeatureWithDocStringScenarioStep) \u002B \u0022.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022Given \u0022 \u002B FeatureWithDocStringScenarioStep.StepWithDocStringText }, new Gherkin.Ast.DocString(null, null, docStringContent)))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDocString);\r\n    Assert.Equal(docStringContent, featureInstance.ReceivedDocString.Content);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Scenario_With_Shared_StepMethod",
        "Body": "{\r\n    //arrange.\r\n    const string scenarioName = \u0022scenario 123\u0022;\r\n    var featureInstance = new FeatureWithSharedStepMethod();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = nameof(FeatureWithSharedStepMethod) \u002B \u0022.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioName, new string[] { \u0022Given I chose 1 as first number\u0022, \u0022And I chose 2 as second number\u0022, \u0022And I chose 3 as third number\u0022, \u0022When I choose 4 as fourth number\u0022, \u0022And I choose 5 as fifth number\u0022, \u0022And I choose 6 as sixth number\u0022, $\u0022Then Result should be {1 \u002B 2 \u002B 3 \u002B 4 \u002B 5 \u002B 6} on the screen\u0022 })));\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, scenarioName, featureFilePath);\r\n    //assert.\r\n    Assert.Equal(7, featureInstance.CallStack.Count);\r\n    Assert_Callback(0, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 1);\r\n    Assert_Callback(1, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 2);\r\n    Assert_Callback(2, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 3);\r\n    Assert_Callback(3, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 4);\r\n    Assert_Callback(4, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 5);\r\n    Assert_Callback(5, nameof(FeatureWithSharedStepMethod.Selecting_numbers), 6);\r\n    Assert_Callback(6, nameof(FeatureWithSharedStepMethod.Result_should_be_x_on_the_screen), (1 \u002B 2 \u002B 3 \u002B 4 \u002B 5 \u002B 6));\r\n    void Assert_Callback(int index, string methodName, int value)\r\n    {\r\n        Assert.Equal(methodName, featureInstance.CallStack[index].Key);\r\n        Assert.NotNull(featureInstance.CallStack[index].Value);\r\n        Assert.Single(featureInstance.CallStack[index].Value);\r\n        Assert.Equal(value, featureInstance.CallStack[index].Value[0]);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_Executes_Scenario_With_Star_Notation",
        "Body": "{\r\n    //arrange.\r\n    var gherkinFeature = new GherkinFeatureBuilder().WithScenario(\u0022S\u0022, steps =\u003E steps.Star(\u0022I have some cukes\u0022, null)).Build();\r\n    var featureFilePath = $\u0022{nameof(FeatureWithStarNotation)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(gherkinFeature, null))).Verifiable();\r\n    var featureInstance = new FeatureWithStarNotation();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioAsync(featureInstance, \u0022S\u0022, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Single(featureInstance.CallStack);\r\n    Assert.Equal(nameof(FeatureWithStarNotation.I_Have_Some_Cukes), featureInstance.CallStack[0].Key);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenario_DoesNotAllow_AsyncVoid_Steps",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var feature = new FeatureWithAsyncVoidStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    feature.InternalOutput = output.Object;\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CInvalidOperationException\u003E(async () =\u003E await _sut.ExecuteScenarioAsync(feature, \u0022S\u0022, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureForNullArgumentTests",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "ExecuteScenarioOutlineAsync_Requires_FeatureInstance",
        "Body": "{\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioOutlineAsync(null, \u0022scenario name\u0022, \u0022example name\u0022, 0, \u0022\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Requires_Arguments",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var featureInstance = new FeatureForNullArgumentTests();\r\n    //act / assert.\r\n    await Assert.ThrowsAsync(expectedExceptionType, async () =\u003E await _sut.ExecuteScenarioOutlineAsync(featureInstance, scenarioOutlineName, exampleName, exampleRowIndex, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ScenarioOutline_Runs_Background_Steps_First",
        "Body": "{\r\n    var feature = new GherkinFeatureBuilder().WithBackground(sb =\u003E sb.Given(\u0022background\u0022, null)).WithScenarioOutline(\u0022test outline\u0022, sb =\u003E sb.Given(\u0022I chose \u003Ca\u003E as first number\u0022, null).And(\u0022I chose \u003Cb\u003E as second number\u0022, null).When(\u0022I press add\u0022, null).Then(\u0022the result should be \u003Csum\u003E on the screen\u0022, null), eb =\u003E eb.WithExampleHeadings(\u0022a\u0022, \u0022b\u0022, \u0022sum\u0022).WithExamples(\u0022\u0022, db =\u003E db.WithData(\u00221\u0022, \u00222\u0022, \u00223\u0022))).Build();\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(feature, new Gherkin.Ast.Comment[0]))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    await _sut.ExecuteScenarioOutlineAsync(featureInstance, \u0022test outline\u0022, \u0022\u0022, 0, featureFilePath);\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(5, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.BackgroundStep), featureInstance.CallStack[0].Key);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Executes_All_Scenario_Steps",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{a}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{b}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{sum}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps)}.feature\u0022;\r\n    var scenarioOutlineName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioOutlineName))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioOutlineAsync(featureInstance, scenarioOutlineName, exampleName, exampleRowIndex, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(4, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(a, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(b, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep3), featureInstance.CallStack[2].Key);\r\n    Assert.Null(featureInstance.CallStack[2].Value);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep4), featureInstance.CallStack[3].Key);\r\n    Assert.NotNull(featureInstance.CallStack[3].Value);\r\n    Assert.Single(featureInstance.CallStack[3].Value);\r\n    Assert.Equal(sum, featureInstance.CallStack[3].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Executes_Successful_Scenario_Steps_And_Skips_The_Rest",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{a}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{b}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{sum}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps_And_Throwing)}.feature\u0022;\r\n    var outlineName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(outlineName))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps_And_Throwing();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    var exceptiion = await Assert.ThrowsAsync\u003CTargetInvocationException\u003E(async () =\u003E await _sut.ExecuteScenarioOutlineAsync(featureInstance, outlineName, exampleName, exampleRowIndex, featureFilePath));\r\n    Assert.IsType\u003CInvalidOperationException\u003E(exceptiion.InnerException);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(2, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(a, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(b, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: FAILED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: SKIPPED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: SKIPPED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Executes_ScenarioStep_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario123\u0022;\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = $\u0022{nameof(FeatureWithDataTableScenarioStep)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(FeatureWithDataTableScenarioStep.CreateGherkinDocument(scenarioName, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) })))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioOutlineAsync(featureInstance, scenarioName, exampleName, exampleRowIndex, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDataTable);\r\n    Assert.Equal(3, featureInstance.ReceivedDataTable.Rows.Count());\r\n    AssertDataTableCell(0, 0, \u0022First argument\u0022);\r\n    AssertDataTableCell(0, 1, \u0022Second argument\u0022);\r\n    AssertDataTableCell(0, 2, \u0022Result\u0022);\r\n    AssertDataTableCell(1, 0, \u00221\u0022);\r\n    AssertDataTableCell(1, 1, \u00222\u0022);\r\n    AssertDataTableCell(1, 2, \u00223\u0022);\r\n    AssertDataTableCell(2, 0, \u0022a\u0022);\r\n    AssertDataTableCell(2, 1, \u0022b\u0022);\r\n    AssertDataTableCell(2, 2, \u0022c\u0022);\r\n    void AssertDataTableCell(int rowIndex, int cellIndex, string value)\r\n    {\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.Count() \u003E rowIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex));\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.Count() \u003E cellIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.ElementAt(cellIndex));\r\n        Assert.Equal(\u0022First argument\u0022, featureInstance.ReceivedDataTable.Rows.ElementAt(0).Cells.ElementAt(0).Value);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Executes_ScenarioStep_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario123\u0022;\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var docStringContent = \u0022some content\u0022 \u002B Environment.NewLine \u002B \u0022\u002B\u002B\u002B\u0022 \u002B Environment.NewLine \u002B \u0022with multi lines\u0022 \u002B Environment.NewLine \u002B \u0022---\u0022 \u002B Environment.NewLine \u002B \u0022in it\u0022;\r\n    var featureFilePath = $\u0022{nameof(FeatureWithDocStringScenarioStep)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(FeatureWithDocStringScenarioStep.CreateGherkinDocument(scenarioName, new Gherkin.Ast.DocString(null, null, docStringContent)))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioOutlineAsync(featureInstance, scenarioName, exampleName, exampleRowIndex, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDocString);\r\n    Assert.Equal(docStringContent, featureInstance.ReceivedDocString.Content);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithScenarioSteps",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "ExecuteScenarioOutlineAsync_Requires_FeatureInstance",
        "Body": "{\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioOutlineAsync(null, \u0022scenario name\u0022, \u0022example name\u0022, 0, \u0022\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Requires_Arguments",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var featureInstance = new FeatureForNullArgumentTests();\r\n    //act / assert.\r\n    await Assert.ThrowsAsync(expectedExceptionType, async () =\u003E await _sut.ExecuteScenarioOutlineAsync(featureInstance, scenarioOutlineName, exampleName, exampleRowIndex, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ScenarioOutline_Runs_Background_Steps_First",
        "Body": "{\r\n    var feature = new GherkinFeatureBuilder().WithBackground(sb =\u003E sb.Given(\u0022background\u0022, null)).WithScenarioOutline(\u0022test outline\u0022, sb =\u003E sb.Given(\u0022I chose \u003Ca\u003E as first number\u0022, null).And(\u0022I chose \u003Cb\u003E as second number\u0022, null).When(\u0022I press add\u0022, null).Then(\u0022the result should be \u003Csum\u003E on the screen\u0022, null), eb =\u003E eb.WithExampleHeadings(\u0022a\u0022, \u0022b\u0022, \u0022sum\u0022).WithExamples(\u0022\u0022, db =\u003E db.WithData(\u00221\u0022, \u00222\u0022, \u00223\u0022))).Build();\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(feature, new Gherkin.Ast.Comment[0]))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    await _sut.ExecuteScenarioOutlineAsync(featureInstance, \u0022test outline\u0022, \u0022\u0022, 0, featureFilePath);\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(5, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.BackgroundStep), featureInstance.CallStack[0].Key);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Executes_All_Scenario_Steps",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{a}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{b}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{sum}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps)}.feature\u0022;\r\n    var scenarioOutlineName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioOutlineName))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioOutlineAsync(featureInstance, scenarioOutlineName, exampleName, exampleRowIndex, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(4, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(a, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(b, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep3), featureInstance.CallStack[2].Key);\r\n    Assert.Null(featureInstance.CallStack[2].Value);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep4), featureInstance.CallStack[3].Key);\r\n    Assert.NotNull(featureInstance.CallStack[3].Value);\r\n    Assert.Single(featureInstance.CallStack[3].Value);\r\n    Assert.Equal(sum, featureInstance.CallStack[3].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Executes_Successful_Scenario_Steps_And_Skips_The_Rest",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{a}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{b}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{sum}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps_And_Throwing)}.feature\u0022;\r\n    var outlineName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(outlineName))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps_And_Throwing();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    var exceptiion = await Assert.ThrowsAsync\u003CTargetInvocationException\u003E(async () =\u003E await _sut.ExecuteScenarioOutlineAsync(featureInstance, outlineName, exampleName, exampleRowIndex, featureFilePath));\r\n    Assert.IsType\u003CInvalidOperationException\u003E(exceptiion.InnerException);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(2, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(a, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(b, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: FAILED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: SKIPPED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: SKIPPED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Executes_ScenarioStep_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario123\u0022;\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = $\u0022{nameof(FeatureWithDataTableScenarioStep)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(FeatureWithDataTableScenarioStep.CreateGherkinDocument(scenarioName, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) })))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioOutlineAsync(featureInstance, scenarioName, exampleName, exampleRowIndex, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDataTable);\r\n    Assert.Equal(3, featureInstance.ReceivedDataTable.Rows.Count());\r\n    AssertDataTableCell(0, 0, \u0022First argument\u0022);\r\n    AssertDataTableCell(0, 1, \u0022Second argument\u0022);\r\n    AssertDataTableCell(0, 2, \u0022Result\u0022);\r\n    AssertDataTableCell(1, 0, \u00221\u0022);\r\n    AssertDataTableCell(1, 1, \u00222\u0022);\r\n    AssertDataTableCell(1, 2, \u00223\u0022);\r\n    AssertDataTableCell(2, 0, \u0022a\u0022);\r\n    AssertDataTableCell(2, 1, \u0022b\u0022);\r\n    AssertDataTableCell(2, 2, \u0022c\u0022);\r\n    void AssertDataTableCell(int rowIndex, int cellIndex, string value)\r\n    {\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.Count() \u003E rowIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex));\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.Count() \u003E cellIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.ElementAt(cellIndex));\r\n        Assert.Equal(\u0022First argument\u0022, featureInstance.ReceivedDataTable.Rows.ElementAt(0).Cells.ElementAt(0).Value);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Executes_ScenarioStep_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario123\u0022;\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var docStringContent = \u0022some content\u0022 \u002B Environment.NewLine \u002B \u0022\u002B\u002B\u002B\u0022 \u002B Environment.NewLine \u002B \u0022with multi lines\u0022 \u002B Environment.NewLine \u002B \u0022---\u0022 \u002B Environment.NewLine \u002B \u0022in it\u0022;\r\n    var featureFilePath = $\u0022{nameof(FeatureWithDocStringScenarioStep)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(FeatureWithDocStringScenarioStep.CreateGherkinDocument(scenarioName, new Gherkin.Ast.DocString(null, null, docStringContent)))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioOutlineAsync(featureInstance, scenarioName, exampleName, exampleRowIndex, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDocString);\r\n    Assert.Equal(docStringContent, featureInstance.ReceivedDocString.Content);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithScenarioSteps_And_Throwing",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "ExecuteScenarioOutlineAsync_Requires_FeatureInstance",
        "Body": "{\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioOutlineAsync(null, \u0022scenario name\u0022, \u0022example name\u0022, 0, \u0022\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Requires_Arguments",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var featureInstance = new FeatureForNullArgumentTests();\r\n    //act / assert.\r\n    await Assert.ThrowsAsync(expectedExceptionType, async () =\u003E await _sut.ExecuteScenarioOutlineAsync(featureInstance, scenarioOutlineName, exampleName, exampleRowIndex, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ScenarioOutline_Runs_Background_Steps_First",
        "Body": "{\r\n    var feature = new GherkinFeatureBuilder().WithBackground(sb =\u003E sb.Given(\u0022background\u0022, null)).WithScenarioOutline(\u0022test outline\u0022, sb =\u003E sb.Given(\u0022I chose \u003Ca\u003E as first number\u0022, null).And(\u0022I chose \u003Cb\u003E as second number\u0022, null).When(\u0022I press add\u0022, null).Then(\u0022the result should be \u003Csum\u003E on the screen\u0022, null), eb =\u003E eb.WithExampleHeadings(\u0022a\u0022, \u0022b\u0022, \u0022sum\u0022).WithExamples(\u0022\u0022, db =\u003E db.WithData(\u00221\u0022, \u00222\u0022, \u00223\u0022))).Build();\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(feature, new Gherkin.Ast.Comment[0]))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    await _sut.ExecuteScenarioOutlineAsync(featureInstance, \u0022test outline\u0022, \u0022\u0022, 0, featureFilePath);\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(5, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.BackgroundStep), featureInstance.CallStack[0].Key);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Executes_All_Scenario_Steps",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{a}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{b}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{sum}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps)}.feature\u0022;\r\n    var scenarioOutlineName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioOutlineName))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioOutlineAsync(featureInstance, scenarioOutlineName, exampleName, exampleRowIndex, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(4, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(a, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(b, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep3), featureInstance.CallStack[2].Key);\r\n    Assert.Null(featureInstance.CallStack[2].Value);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep4), featureInstance.CallStack[3].Key);\r\n    Assert.NotNull(featureInstance.CallStack[3].Value);\r\n    Assert.Single(featureInstance.CallStack[3].Value);\r\n    Assert.Equal(sum, featureInstance.CallStack[3].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Executes_Successful_Scenario_Steps_And_Skips_The_Rest",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{a}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{b}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{sum}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps_And_Throwing)}.feature\u0022;\r\n    var outlineName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(outlineName))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps_And_Throwing();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    var exceptiion = await Assert.ThrowsAsync\u003CTargetInvocationException\u003E(async () =\u003E await _sut.ExecuteScenarioOutlineAsync(featureInstance, outlineName, exampleName, exampleRowIndex, featureFilePath));\r\n    Assert.IsType\u003CInvalidOperationException\u003E(exceptiion.InnerException);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(2, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(a, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(b, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: FAILED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: SKIPPED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: SKIPPED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Executes_ScenarioStep_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario123\u0022;\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = $\u0022{nameof(FeatureWithDataTableScenarioStep)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(FeatureWithDataTableScenarioStep.CreateGherkinDocument(scenarioName, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) })))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioOutlineAsync(featureInstance, scenarioName, exampleName, exampleRowIndex, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDataTable);\r\n    Assert.Equal(3, featureInstance.ReceivedDataTable.Rows.Count());\r\n    AssertDataTableCell(0, 0, \u0022First argument\u0022);\r\n    AssertDataTableCell(0, 1, \u0022Second argument\u0022);\r\n    AssertDataTableCell(0, 2, \u0022Result\u0022);\r\n    AssertDataTableCell(1, 0, \u00221\u0022);\r\n    AssertDataTableCell(1, 1, \u00222\u0022);\r\n    AssertDataTableCell(1, 2, \u00223\u0022);\r\n    AssertDataTableCell(2, 0, \u0022a\u0022);\r\n    AssertDataTableCell(2, 1, \u0022b\u0022);\r\n    AssertDataTableCell(2, 2, \u0022c\u0022);\r\n    void AssertDataTableCell(int rowIndex, int cellIndex, string value)\r\n    {\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.Count() \u003E rowIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex));\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.Count() \u003E cellIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.ElementAt(cellIndex));\r\n        Assert.Equal(\u0022First argument\u0022, featureInstance.ReceivedDataTable.Rows.ElementAt(0).Cells.ElementAt(0).Value);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Executes_ScenarioStep_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario123\u0022;\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var docStringContent = \u0022some content\u0022 \u002B Environment.NewLine \u002B \u0022\u002B\u002B\u002B\u0022 \u002B Environment.NewLine \u002B \u0022with multi lines\u0022 \u002B Environment.NewLine \u002B \u0022---\u0022 \u002B Environment.NewLine \u002B \u0022in it\u0022;\r\n    var featureFilePath = $\u0022{nameof(FeatureWithDocStringScenarioStep)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(FeatureWithDocStringScenarioStep.CreateGherkinDocument(scenarioName, new Gherkin.Ast.DocString(null, null, docStringContent)))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioOutlineAsync(featureInstance, scenarioName, exampleName, exampleRowIndex, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDocString);\r\n    Assert.Equal(docStringContent, featureInstance.ReceivedDocString.Content);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithDataTableScenarioStep",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "ExecuteScenarioOutlineAsync_Requires_FeatureInstance",
        "Body": "{\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioOutlineAsync(null, \u0022scenario name\u0022, \u0022example name\u0022, 0, \u0022\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Requires_Arguments",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var featureInstance = new FeatureForNullArgumentTests();\r\n    //act / assert.\r\n    await Assert.ThrowsAsync(expectedExceptionType, async () =\u003E await _sut.ExecuteScenarioOutlineAsync(featureInstance, scenarioOutlineName, exampleName, exampleRowIndex, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ScenarioOutline_Runs_Background_Steps_First",
        "Body": "{\r\n    var feature = new GherkinFeatureBuilder().WithBackground(sb =\u003E sb.Given(\u0022background\u0022, null)).WithScenarioOutline(\u0022test outline\u0022, sb =\u003E sb.Given(\u0022I chose \u003Ca\u003E as first number\u0022, null).And(\u0022I chose \u003Cb\u003E as second number\u0022, null).When(\u0022I press add\u0022, null).Then(\u0022the result should be \u003Csum\u003E on the screen\u0022, null), eb =\u003E eb.WithExampleHeadings(\u0022a\u0022, \u0022b\u0022, \u0022sum\u0022).WithExamples(\u0022\u0022, db =\u003E db.WithData(\u00221\u0022, \u00222\u0022, \u00223\u0022))).Build();\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(feature, new Gherkin.Ast.Comment[0]))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    await _sut.ExecuteScenarioOutlineAsync(featureInstance, \u0022test outline\u0022, \u0022\u0022, 0, featureFilePath);\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(5, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.BackgroundStep), featureInstance.CallStack[0].Key);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Executes_All_Scenario_Steps",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{a}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{b}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{sum}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps)}.feature\u0022;\r\n    var scenarioOutlineName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioOutlineName))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioOutlineAsync(featureInstance, scenarioOutlineName, exampleName, exampleRowIndex, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(4, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(a, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(b, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep3), featureInstance.CallStack[2].Key);\r\n    Assert.Null(featureInstance.CallStack[2].Value);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep4), featureInstance.CallStack[3].Key);\r\n    Assert.NotNull(featureInstance.CallStack[3].Value);\r\n    Assert.Single(featureInstance.CallStack[3].Value);\r\n    Assert.Equal(sum, featureInstance.CallStack[3].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Executes_Successful_Scenario_Steps_And_Skips_The_Rest",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{a}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{b}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{sum}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps_And_Throwing)}.feature\u0022;\r\n    var outlineName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(outlineName))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps_And_Throwing();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    var exceptiion = await Assert.ThrowsAsync\u003CTargetInvocationException\u003E(async () =\u003E await _sut.ExecuteScenarioOutlineAsync(featureInstance, outlineName, exampleName, exampleRowIndex, featureFilePath));\r\n    Assert.IsType\u003CInvalidOperationException\u003E(exceptiion.InnerException);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(2, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(a, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(b, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: FAILED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: SKIPPED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: SKIPPED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Executes_ScenarioStep_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario123\u0022;\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = $\u0022{nameof(FeatureWithDataTableScenarioStep)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(FeatureWithDataTableScenarioStep.CreateGherkinDocument(scenarioName, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) })))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioOutlineAsync(featureInstance, scenarioName, exampleName, exampleRowIndex, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDataTable);\r\n    Assert.Equal(3, featureInstance.ReceivedDataTable.Rows.Count());\r\n    AssertDataTableCell(0, 0, \u0022First argument\u0022);\r\n    AssertDataTableCell(0, 1, \u0022Second argument\u0022);\r\n    AssertDataTableCell(0, 2, \u0022Result\u0022);\r\n    AssertDataTableCell(1, 0, \u00221\u0022);\r\n    AssertDataTableCell(1, 1, \u00222\u0022);\r\n    AssertDataTableCell(1, 2, \u00223\u0022);\r\n    AssertDataTableCell(2, 0, \u0022a\u0022);\r\n    AssertDataTableCell(2, 1, \u0022b\u0022);\r\n    AssertDataTableCell(2, 2, \u0022c\u0022);\r\n    void AssertDataTableCell(int rowIndex, int cellIndex, string value)\r\n    {\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.Count() \u003E rowIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex));\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.Count() \u003E cellIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.ElementAt(cellIndex));\r\n        Assert.Equal(\u0022First argument\u0022, featureInstance.ReceivedDataTable.Rows.ElementAt(0).Cells.ElementAt(0).Value);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Executes_ScenarioStep_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario123\u0022;\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var docStringContent = \u0022some content\u0022 \u002B Environment.NewLine \u002B \u0022\u002B\u002B\u002B\u0022 \u002B Environment.NewLine \u002B \u0022with multi lines\u0022 \u002B Environment.NewLine \u002B \u0022---\u0022 \u002B Environment.NewLine \u002B \u0022in it\u0022;\r\n    var featureFilePath = $\u0022{nameof(FeatureWithDocStringScenarioStep)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(FeatureWithDocStringScenarioStep.CreateGherkinDocument(scenarioName, new Gherkin.Ast.DocString(null, null, docStringContent)))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioOutlineAsync(featureInstance, scenarioName, exampleName, exampleRowIndex, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDocString);\r\n    Assert.Equal(docStringContent, featureInstance.ReceivedDocString.Content);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithDocStringScenarioStep",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "ExecuteScenarioOutlineAsync_Requires_FeatureInstance",
        "Body": "{\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioOutlineAsync(null, \u0022scenario name\u0022, \u0022example name\u0022, 0, \u0022\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Requires_Arguments",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var featureInstance = new FeatureForNullArgumentTests();\r\n    //act / assert.\r\n    await Assert.ThrowsAsync(expectedExceptionType, async () =\u003E await _sut.ExecuteScenarioOutlineAsync(featureInstance, scenarioOutlineName, exampleName, exampleRowIndex, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ScenarioOutline_Runs_Background_Steps_First",
        "Body": "{\r\n    var feature = new GherkinFeatureBuilder().WithBackground(sb =\u003E sb.Given(\u0022background\u0022, null)).WithScenarioOutline(\u0022test outline\u0022, sb =\u003E sb.Given(\u0022I chose \u003Ca\u003E as first number\u0022, null).And(\u0022I chose \u003Cb\u003E as second number\u0022, null).When(\u0022I press add\u0022, null).Then(\u0022the result should be \u003Csum\u003E on the screen\u0022, null), eb =\u003E eb.WithExampleHeadings(\u0022a\u0022, \u0022b\u0022, \u0022sum\u0022).WithExamples(\u0022\u0022, db =\u003E db.WithData(\u00221\u0022, \u00222\u0022, \u00223\u0022))).Build();\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(feature, new Gherkin.Ast.Comment[0]))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    await _sut.ExecuteScenarioOutlineAsync(featureInstance, \u0022test outline\u0022, \u0022\u0022, 0, featureFilePath);\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(5, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.BackgroundStep), featureInstance.CallStack[0].Key);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Executes_All_Scenario_Steps",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{a}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{b}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{sum}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps)}.feature\u0022;\r\n    var scenarioOutlineName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioOutlineName))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioOutlineAsync(featureInstance, scenarioOutlineName, exampleName, exampleRowIndex, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(4, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(a, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(b, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep3), featureInstance.CallStack[2].Key);\r\n    Assert.Null(featureInstance.CallStack[2].Value);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep4), featureInstance.CallStack[3].Key);\r\n    Assert.NotNull(featureInstance.CallStack[3].Value);\r\n    Assert.Single(featureInstance.CallStack[3].Value);\r\n    Assert.Equal(sum, featureInstance.CallStack[3].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Executes_Successful_Scenario_Steps_And_Skips_The_Rest",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{a}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{b}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{sum}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps_And_Throwing)}.feature\u0022;\r\n    var outlineName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(outlineName))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps_And_Throwing();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    var exceptiion = await Assert.ThrowsAsync\u003CTargetInvocationException\u003E(async () =\u003E await _sut.ExecuteScenarioOutlineAsync(featureInstance, outlineName, exampleName, exampleRowIndex, featureFilePath));\r\n    Assert.IsType\u003CInvalidOperationException\u003E(exceptiion.InnerException);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(2, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(a, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(b, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: FAILED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: SKIPPED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: SKIPPED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Executes_ScenarioStep_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario123\u0022;\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = $\u0022{nameof(FeatureWithDataTableScenarioStep)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(FeatureWithDataTableScenarioStep.CreateGherkinDocument(scenarioName, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) })))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioOutlineAsync(featureInstance, scenarioName, exampleName, exampleRowIndex, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDataTable);\r\n    Assert.Equal(3, featureInstance.ReceivedDataTable.Rows.Count());\r\n    AssertDataTableCell(0, 0, \u0022First argument\u0022);\r\n    AssertDataTableCell(0, 1, \u0022Second argument\u0022);\r\n    AssertDataTableCell(0, 2, \u0022Result\u0022);\r\n    AssertDataTableCell(1, 0, \u00221\u0022);\r\n    AssertDataTableCell(1, 1, \u00222\u0022);\r\n    AssertDataTableCell(1, 2, \u00223\u0022);\r\n    AssertDataTableCell(2, 0, \u0022a\u0022);\r\n    AssertDataTableCell(2, 1, \u0022b\u0022);\r\n    AssertDataTableCell(2, 2, \u0022c\u0022);\r\n    void AssertDataTableCell(int rowIndex, int cellIndex, string value)\r\n    {\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.Count() \u003E rowIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex));\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.Count() \u003E cellIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.ElementAt(cellIndex));\r\n        Assert.Equal(\u0022First argument\u0022, featureInstance.ReceivedDataTable.Rows.ElementAt(0).Cells.ElementAt(0).Value);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Executes_ScenarioStep_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario123\u0022;\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var docStringContent = \u0022some content\u0022 \u002B Environment.NewLine \u002B \u0022\u002B\u002B\u002B\u0022 \u002B Environment.NewLine \u002B \u0022with multi lines\u0022 \u002B Environment.NewLine \u002B \u0022---\u0022 \u002B Environment.NewLine \u002B \u0022in it\u0022;\r\n    var featureFilePath = $\u0022{nameof(FeatureWithDocStringScenarioStep)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(FeatureWithDocStringScenarioStep.CreateGherkinDocument(scenarioName, new Gherkin.Ast.DocString(null, null, docStringContent)))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioOutlineAsync(featureInstance, scenarioName, exampleName, exampleRowIndex, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDocString);\r\n    Assert.Equal(docStringContent, featureInstance.ReceivedDocString.Content);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ScenarioOutlineExecutorTests",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "ExecuteScenarioOutlineAsync_Requires_FeatureInstance",
        "Body": "{\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(async () =\u003E await _sut.ExecuteScenarioOutlineAsync(null, \u0022scenario name\u0022, \u0022example name\u0022, 0, \u0022\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Requires_Arguments",
        "Body": "{\r\n    //arrange.\r\n    var featureFilePath = \u0022/some/valid/path\u0022;\r\n    var featureInstance = new FeatureForNullArgumentTests();\r\n    //act / assert.\r\n    await Assert.ThrowsAsync(expectedExceptionType, async () =\u003E await _sut.ExecuteScenarioOutlineAsync(featureInstance, scenarioOutlineName, exampleName, exampleRowIndex, featureFilePath));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ScenarioOutline_Runs_Background_Steps_First",
        "Body": "{\r\n    var feature = new GherkinFeatureBuilder().WithBackground(sb =\u003E sb.Given(\u0022background\u0022, null)).WithScenarioOutline(\u0022test outline\u0022, sb =\u003E sb.Given(\u0022I chose \u003Ca\u003E as first number\u0022, null).And(\u0022I chose \u003Cb\u003E as second number\u0022, null).When(\u0022I press add\u0022, null).Then(\u0022the result should be \u003Csum\u003E on the screen\u0022, null), eb =\u003E eb.WithExampleHeadings(\u0022a\u0022, \u0022b\u0022, \u0022sum\u0022).WithExamples(\u0022\u0022, db =\u003E db.WithData(\u00221\u0022, \u00222\u0022, \u00223\u0022))).Build();\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(new Gherkin.Ast.GherkinDocument(feature, new Gherkin.Ast.Comment[0]))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    await _sut.ExecuteScenarioOutlineAsync(featureInstance, \u0022test outline\u0022, \u0022\u0022, 0, featureFilePath);\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(5, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.BackgroundStep), featureInstance.CallStack[0].Key);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Executes_All_Scenario_Steps",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{a}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{b}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{sum}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps)}.feature\u0022;\r\n    var scenarioOutlineName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(scenarioOutlineName))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    await _sut.ExecuteScenarioOutlineAsync(featureInstance, scenarioOutlineName, exampleName, exampleRowIndex, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(4, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(a, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(b, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep3), featureInstance.CallStack[2].Key);\r\n    Assert.Null(featureInstance.CallStack[2].Value);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps.ScenarioStep4), featureInstance.CallStack[3].Key);\r\n    Assert.NotNull(featureInstance.CallStack[3].Value);\r\n    Assert.Single(featureInstance.CallStack[3].Value);\r\n    Assert.Equal(sum, featureInstance.CallStack[3].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Executes_Successful_Scenario_Steps_And_Skips_The_Rest",
        "Body": "{\r\n    //arrange.\r\n    var step1Text = \u0022Given \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep1Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{a}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step2Text = \u0022And \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep2Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{b}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var step3Text = \u0022When \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep3Text;\r\n    var step4Text = \u0022Then \u0022 \u002B FeatureWithScenarioSteps_And_Throwing.ScenarioStep4Text.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{sum}\u0022, StringComparison.InvariantCultureIgnoreCase);\r\n    var featureFilePath = $\u0022{nameof(FeatureWithScenarioSteps_And_Throwing)}.feature\u0022;\r\n    var outlineName = \u0022scenario 12345\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(CreateGherkinDocument(outlineName))).Verifiable();\r\n    var featureInstance = new FeatureWithScenarioSteps_And_Throwing();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    //act.\r\n    var exceptiion = await Assert.ThrowsAsync\u003CTargetInvocationException\u003E(async () =\u003E await _sut.ExecuteScenarioOutlineAsync(featureInstance, outlineName, exampleName, exampleRowIndex, featureFilePath));\r\n    Assert.IsType\u003CInvalidOperationException\u003E(exceptiion.InnerException);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.Equal(2, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep1), featureInstance.CallStack[0].Key);\r\n    Assert.NotNull(featureInstance.CallStack[0].Value);\r\n    Assert.Single(featureInstance.CallStack[0].Value);\r\n    Assert.Equal(a, featureInstance.CallStack[0].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step1Text}: PASSED\u0022), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithScenarioSteps_And_Throwing.ScenarioStep2), featureInstance.CallStack[1].Key);\r\n    Assert.NotNull(featureInstance.CallStack[1].Value);\r\n    Assert.Single(featureInstance.CallStack[1].Value);\r\n    Assert.Equal(b, featureInstance.CallStack[1].Value[0]);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step2Text}: FAILED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step3Text}: SKIPPED\u0022), Times.Once);\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{step4Text}: SKIPPED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Executes_ScenarioStep_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario123\u0022;\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var featureFilePath = $\u0022{nameof(FeatureWithDataTableScenarioStep)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(FeatureWithDataTableScenarioStep.CreateGherkinDocument(scenarioName, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) })))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioOutlineAsync(featureInstance, scenarioName, exampleName, exampleRowIndex, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDataTable);\r\n    Assert.Equal(3, featureInstance.ReceivedDataTable.Rows.Count());\r\n    AssertDataTableCell(0, 0, \u0022First argument\u0022);\r\n    AssertDataTableCell(0, 1, \u0022Second argument\u0022);\r\n    AssertDataTableCell(0, 2, \u0022Result\u0022);\r\n    AssertDataTableCell(1, 0, \u00221\u0022);\r\n    AssertDataTableCell(1, 1, \u00222\u0022);\r\n    AssertDataTableCell(1, 2, \u00223\u0022);\r\n    AssertDataTableCell(2, 0, \u0022a\u0022);\r\n    AssertDataTableCell(2, 1, \u0022b\u0022);\r\n    AssertDataTableCell(2, 2, \u0022c\u0022);\r\n    void AssertDataTableCell(int rowIndex, int cellIndex, string value)\r\n    {\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.Count() \u003E rowIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex));\r\n        Assert.True(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.Count() \u003E cellIndex);\r\n        Assert.NotNull(featureInstance.ReceivedDataTable.Rows.ElementAt(rowIndex).Cells.ElementAt(cellIndex));\r\n        Assert.Equal(\u0022First argument\u0022, featureInstance.ReceivedDataTable.Rows.ElementAt(0).Cells.ElementAt(0).Value);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteScenarioOutlineAsync_Executes_ScenarioStep_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var scenarioName = \u0022scenario123\u0022;\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    featureInstance.InternalOutput = output.Object;\r\n    var docStringContent = \u0022some content\u0022 \u002B Environment.NewLine \u002B \u0022\u002B\u002B\u002B\u0022 \u002B Environment.NewLine \u002B \u0022with multi lines\u0022 \u002B Environment.NewLine \u002B \u0022---\u0022 \u002B Environment.NewLine \u002B \u0022in it\u0022;\r\n    var featureFilePath = $\u0022{nameof(FeatureWithDocStringScenarioStep)}.feature\u0022;\r\n    _featureFileRepository.Setup(r =\u003E r.GetByFilePath(featureFilePath)).Returns(new FeatureFile(FeatureWithDocStringScenarioStep.CreateGherkinDocument(scenarioName, new Gherkin.Ast.DocString(null, null, docStringContent)))).Verifiable();\r\n    //act.\r\n    await _sut.ExecuteScenarioOutlineAsync(featureInstance, scenarioName, exampleName, exampleRowIndex, featureFilePath);\r\n    //assert.\r\n    _featureFileRepository.Verify();\r\n    Assert.NotNull(featureInstance.ReceivedDocString);\r\n    Assert.Equal(docStringContent, featureInstance.ReceivedDocString.Content);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ScenarioOutputTests",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "StepPassed_Logs_Into_Output",
        "Body": "{\r\n    //arrange.\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    var stepText = \u0022Given something 123\u0022;\r\n    var sut = new ScenarioOutput(output.Object);\r\n    //act.\r\n    sut.StepPassed(stepText);\r\n    //assert.\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{stepText}: PASSED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StepFailed_Logs_Into_Output",
        "Body": "{\r\n    //arrange.\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    var stepText = \u0022Given something 123\u0022;\r\n    var sut = new ScenarioOutput(output.Object);\r\n    //act.\r\n    sut.StepFailed(stepText);\r\n    //assert.\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{stepText}: FAILED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StepSkipped_Logs_Into_Output",
        "Body": "{\r\n    //arrange.\r\n    var output = new Mock\u003CITestOutputHelper\u003E();\r\n    var stepText = \u0022Given something 123\u0022;\r\n    var sut = new ScenarioOutput(output.Object);\r\n    //act.\r\n    sut.StepSkipped(stepText);\r\n    //assert.\r\n    output.Verify(o =\u003E o.WriteLine($\u0022{stepText}: SKIPPED\u0022), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ScenarioStepPatternTests",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "ListFromStepAttributes_Creates_List_From_Attributes",
        "Body": "{\r\n    //arrange.\r\n    var attributes = new List\u003CBaseStepDefinitionAttribute\u003E\r\n    {\r\n        new GivenAttribute(\u0022pattern\u0022),\r\n        new WhenAttribute(\u0022other pattern\u0022),\r\n        new ThenAttribute(\u0022yet another pattern\u0022)\r\n    };\r\n    //act.\r\n    var patterns = ScenarioStepPattern.ListFromStepAttributes(attributes);\r\n    //assert.\r\n    Assert.NotNull(patterns);\r\n    Assert.Equal(attributes.Count, patterns.Count);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureForCtorTest",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Execute_Invokes_All_StepMethods",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithStepMethodsToInvoke();\r\n    var sut = new Scenario(new List\u003CStepMethod\u003E { StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep1)), featureInstance), new Gherkin.Ast.Step(null, \u0022Given\u0022, FeatureWithStepMethodsToInvoke.ScenarioStep1Text, null)), StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep2)), featureInstance), new Gherkin.Ast.Step(null, \u0022And\u0022, FeatureWithStepMethodsToInvoke.ScenarioStep2Text, null)), StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep3)), featureInstance), new Gherkin.Ast.Step(null, \u0022When\u0022, FeatureWithStepMethodsToInvoke.ScenarioStep3Text, null)), StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep4)), featureInstance), new Gherkin.Ast.Step(null, \u0022Then\u0022, FeatureWithStepMethodsToInvoke.ScenarioStep4Text, null)) });\r\n    var output = new Mock\u003CIScenarioOutput\u003E();\r\n    //act.\r\n    await sut.ExecuteAsync(output.Object);\r\n    //assert.\r\n    Assert.NotNull(featureInstance.CallStack);\r\n    Assert.Equal(4, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep1), featureInstance.CallStack[0]);\r\n    output.Verify(o =\u003E o.StepPassed(\u0022Given \u0022 \u002B FeatureWithStepMethodsToInvoke.ScenarioStep1Text), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep2), featureInstance.CallStack[1]);\r\n    output.Verify(o =\u003E o.StepPassed(\u0022And \u0022 \u002B FeatureWithStepMethodsToInvoke.ScenarioStep2Text), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep3), featureInstance.CallStack[2]);\r\n    output.Verify(o =\u003E o.StepPassed(\u0022When \u0022 \u002B FeatureWithStepMethodsToInvoke.ScenarioStep3Text), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep4), featureInstance.CallStack[3]);\r\n    output.Verify(o =\u003E o.StepPassed(\u0022Then \u0022 \u002B FeatureWithStepMethodsToInvoke.ScenarioStep4Text), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteAsync_Requires_Output",
        "Body": "{\r\n    //arrange.\r\n    var sut = new Scenario(new List\u003CStepMethod\u003E());\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(() =\u003E sut.ExecuteAsync(null));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Execute_Invokes_Successfult_StepMethods_And_Skips_The_Rest",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithStepMethodsToInvoke_And_Throwing();\r\n    var sut = new Scenario(new List\u003CStepMethod\u003E { StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep1)), featureInstance), new Gherkin.Ast.Step(null, \u0022Given\u0022, FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep1Text, null)), StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep2)), featureInstance), new Gherkin.Ast.Step(null, \u0022And\u0022, FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep2Text, null)), StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep3)), featureInstance), new Gherkin.Ast.Step(null, \u0022When\u0022, FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep3Text, null)), StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep4)), featureInstance), new Gherkin.Ast.Step(null, \u0022Then\u0022, FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep4Text, null)) });\r\n    var output = new Mock\u003CIScenarioOutput\u003E();\r\n    //act.\r\n    var exception = await Assert.ThrowsAsync\u003CTargetInvocationException\u003E(async () =\u003E await sut.ExecuteAsync(output.Object));\r\n    Assert.IsType\u003CInvalidOperationException\u003E(exception.InnerException);\r\n    //assert.\r\n    Assert.NotNull(featureInstance.CallStack);\r\n    Assert.Equal(2, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep1), featureInstance.CallStack[0]);\r\n    output.Verify(o =\u003E o.StepPassed(\u0022Given \u0022 \u002B FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep1Text), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep2), featureInstance.CallStack[1]);\r\n    output.Verify(o =\u003E o.StepFailed(\u0022And \u0022 \u002B FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep2Text), Times.Once);\r\n    output.Verify(o =\u003E o.StepSkipped(\u0022When \u0022 \u002B FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep3Text), Times.Once);\r\n    output.Verify(o =\u003E o.StepSkipped(\u0022Then \u0022 \u002B FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep4Text), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithStepMethodsToInvoke",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Execute_Invokes_All_StepMethods",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithStepMethodsToInvoke();\r\n    var sut = new Scenario(new List\u003CStepMethod\u003E { StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep1)), featureInstance), new Gherkin.Ast.Step(null, \u0022Given\u0022, FeatureWithStepMethodsToInvoke.ScenarioStep1Text, null)), StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep2)), featureInstance), new Gherkin.Ast.Step(null, \u0022And\u0022, FeatureWithStepMethodsToInvoke.ScenarioStep2Text, null)), StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep3)), featureInstance), new Gherkin.Ast.Step(null, \u0022When\u0022, FeatureWithStepMethodsToInvoke.ScenarioStep3Text, null)), StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep4)), featureInstance), new Gherkin.Ast.Step(null, \u0022Then\u0022, FeatureWithStepMethodsToInvoke.ScenarioStep4Text, null)) });\r\n    var output = new Mock\u003CIScenarioOutput\u003E();\r\n    //act.\r\n    await sut.ExecuteAsync(output.Object);\r\n    //assert.\r\n    Assert.NotNull(featureInstance.CallStack);\r\n    Assert.Equal(4, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep1), featureInstance.CallStack[0]);\r\n    output.Verify(o =\u003E o.StepPassed(\u0022Given \u0022 \u002B FeatureWithStepMethodsToInvoke.ScenarioStep1Text), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep2), featureInstance.CallStack[1]);\r\n    output.Verify(o =\u003E o.StepPassed(\u0022And \u0022 \u002B FeatureWithStepMethodsToInvoke.ScenarioStep2Text), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep3), featureInstance.CallStack[2]);\r\n    output.Verify(o =\u003E o.StepPassed(\u0022When \u0022 \u002B FeatureWithStepMethodsToInvoke.ScenarioStep3Text), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep4), featureInstance.CallStack[3]);\r\n    output.Verify(o =\u003E o.StepPassed(\u0022Then \u0022 \u002B FeatureWithStepMethodsToInvoke.ScenarioStep4Text), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteAsync_Requires_Output",
        "Body": "{\r\n    //arrange.\r\n    var sut = new Scenario(new List\u003CStepMethod\u003E());\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(() =\u003E sut.ExecuteAsync(null));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Execute_Invokes_Successfult_StepMethods_And_Skips_The_Rest",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithStepMethodsToInvoke_And_Throwing();\r\n    var sut = new Scenario(new List\u003CStepMethod\u003E { StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep1)), featureInstance), new Gherkin.Ast.Step(null, \u0022Given\u0022, FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep1Text, null)), StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep2)), featureInstance), new Gherkin.Ast.Step(null, \u0022And\u0022, FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep2Text, null)), StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep3)), featureInstance), new Gherkin.Ast.Step(null, \u0022When\u0022, FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep3Text, null)), StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep4)), featureInstance), new Gherkin.Ast.Step(null, \u0022Then\u0022, FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep4Text, null)) });\r\n    var output = new Mock\u003CIScenarioOutput\u003E();\r\n    //act.\r\n    var exception = await Assert.ThrowsAsync\u003CTargetInvocationException\u003E(async () =\u003E await sut.ExecuteAsync(output.Object));\r\n    Assert.IsType\u003CInvalidOperationException\u003E(exception.InnerException);\r\n    //assert.\r\n    Assert.NotNull(featureInstance.CallStack);\r\n    Assert.Equal(2, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep1), featureInstance.CallStack[0]);\r\n    output.Verify(o =\u003E o.StepPassed(\u0022Given \u0022 \u002B FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep1Text), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep2), featureInstance.CallStack[1]);\r\n    output.Verify(o =\u003E o.StepFailed(\u0022And \u0022 \u002B FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep2Text), Times.Once);\r\n    output.Verify(o =\u003E o.StepSkipped(\u0022When \u0022 \u002B FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep3Text), Times.Once);\r\n    output.Verify(o =\u003E o.StepSkipped(\u0022Then \u0022 \u002B FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep4Text), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithStepMethodsToInvoke_And_Throwing",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Execute_Invokes_All_StepMethods",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithStepMethodsToInvoke();\r\n    var sut = new Scenario(new List\u003CStepMethod\u003E { StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep1)), featureInstance), new Gherkin.Ast.Step(null, \u0022Given\u0022, FeatureWithStepMethodsToInvoke.ScenarioStep1Text, null)), StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep2)), featureInstance), new Gherkin.Ast.Step(null, \u0022And\u0022, FeatureWithStepMethodsToInvoke.ScenarioStep2Text, null)), StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep3)), featureInstance), new Gherkin.Ast.Step(null, \u0022When\u0022, FeatureWithStepMethodsToInvoke.ScenarioStep3Text, null)), StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep4)), featureInstance), new Gherkin.Ast.Step(null, \u0022Then\u0022, FeatureWithStepMethodsToInvoke.ScenarioStep4Text, null)) });\r\n    var output = new Mock\u003CIScenarioOutput\u003E();\r\n    //act.\r\n    await sut.ExecuteAsync(output.Object);\r\n    //assert.\r\n    Assert.NotNull(featureInstance.CallStack);\r\n    Assert.Equal(4, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep1), featureInstance.CallStack[0]);\r\n    output.Verify(o =\u003E o.StepPassed(\u0022Given \u0022 \u002B FeatureWithStepMethodsToInvoke.ScenarioStep1Text), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep2), featureInstance.CallStack[1]);\r\n    output.Verify(o =\u003E o.StepPassed(\u0022And \u0022 \u002B FeatureWithStepMethodsToInvoke.ScenarioStep2Text), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep3), featureInstance.CallStack[2]);\r\n    output.Verify(o =\u003E o.StepPassed(\u0022When \u0022 \u002B FeatureWithStepMethodsToInvoke.ScenarioStep3Text), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep4), featureInstance.CallStack[3]);\r\n    output.Verify(o =\u003E o.StepPassed(\u0022Then \u0022 \u002B FeatureWithStepMethodsToInvoke.ScenarioStep4Text), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteAsync_Requires_Output",
        "Body": "{\r\n    //arrange.\r\n    var sut = new Scenario(new List\u003CStepMethod\u003E());\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(() =\u003E sut.ExecuteAsync(null));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Execute_Invokes_Successfult_StepMethods_And_Skips_The_Rest",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithStepMethodsToInvoke_And_Throwing();\r\n    var sut = new Scenario(new List\u003CStepMethod\u003E { StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep1)), featureInstance), new Gherkin.Ast.Step(null, \u0022Given\u0022, FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep1Text, null)), StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep2)), featureInstance), new Gherkin.Ast.Step(null, \u0022And\u0022, FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep2Text, null)), StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep3)), featureInstance), new Gherkin.Ast.Step(null, \u0022When\u0022, FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep3Text, null)), StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep4)), featureInstance), new Gherkin.Ast.Step(null, \u0022Then\u0022, FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep4Text, null)) });\r\n    var output = new Mock\u003CIScenarioOutput\u003E();\r\n    //act.\r\n    var exception = await Assert.ThrowsAsync\u003CTargetInvocationException\u003E(async () =\u003E await sut.ExecuteAsync(output.Object));\r\n    Assert.IsType\u003CInvalidOperationException\u003E(exception.InnerException);\r\n    //assert.\r\n    Assert.NotNull(featureInstance.CallStack);\r\n    Assert.Equal(2, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep1), featureInstance.CallStack[0]);\r\n    output.Verify(o =\u003E o.StepPassed(\u0022Given \u0022 \u002B FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep1Text), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep2), featureInstance.CallStack[1]);\r\n    output.Verify(o =\u003E o.StepFailed(\u0022And \u0022 \u002B FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep2Text), Times.Once);\r\n    output.Verify(o =\u003E o.StepSkipped(\u0022When \u0022 \u002B FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep3Text), Times.Once);\r\n    output.Verify(o =\u003E o.StepSkipped(\u0022Then \u0022 \u002B FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep4Text), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ScenarioTests",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Execute_Invokes_All_StepMethods",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithStepMethodsToInvoke();\r\n    var sut = new Scenario(new List\u003CStepMethod\u003E { StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep1)), featureInstance), new Gherkin.Ast.Step(null, \u0022Given\u0022, FeatureWithStepMethodsToInvoke.ScenarioStep1Text, null)), StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep2)), featureInstance), new Gherkin.Ast.Step(null, \u0022And\u0022, FeatureWithStepMethodsToInvoke.ScenarioStep2Text, null)), StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep3)), featureInstance), new Gherkin.Ast.Step(null, \u0022When\u0022, FeatureWithStepMethodsToInvoke.ScenarioStep3Text, null)), StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep4)), featureInstance), new Gherkin.Ast.Step(null, \u0022Then\u0022, FeatureWithStepMethodsToInvoke.ScenarioStep4Text, null)) });\r\n    var output = new Mock\u003CIScenarioOutput\u003E();\r\n    //act.\r\n    await sut.ExecuteAsync(output.Object);\r\n    //assert.\r\n    Assert.NotNull(featureInstance.CallStack);\r\n    Assert.Equal(4, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep1), featureInstance.CallStack[0]);\r\n    output.Verify(o =\u003E o.StepPassed(\u0022Given \u0022 \u002B FeatureWithStepMethodsToInvoke.ScenarioStep1Text), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep2), featureInstance.CallStack[1]);\r\n    output.Verify(o =\u003E o.StepPassed(\u0022And \u0022 \u002B FeatureWithStepMethodsToInvoke.ScenarioStep2Text), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep3), featureInstance.CallStack[2]);\r\n    output.Verify(o =\u003E o.StepPassed(\u0022When \u0022 \u002B FeatureWithStepMethodsToInvoke.ScenarioStep3Text), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithStepMethodsToInvoke.ScenarioStep4), featureInstance.CallStack[3]);\r\n    output.Verify(o =\u003E o.StepPassed(\u0022Then \u0022 \u002B FeatureWithStepMethodsToInvoke.ScenarioStep4Text), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteAsync_Requires_Output",
        "Body": "{\r\n    //arrange.\r\n    var sut = new Scenario(new List\u003CStepMethod\u003E());\r\n    //act / assert.\r\n    await Assert.ThrowsAsync\u003CArgumentNullException\u003E(() =\u003E sut.ExecuteAsync(null));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Execute_Invokes_Successfult_StepMethods_And_Skips_The_Rest",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithStepMethodsToInvoke_And_Throwing();\r\n    var sut = new Scenario(new List\u003CStepMethod\u003E { StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep1)), featureInstance), new Gherkin.Ast.Step(null, \u0022Given\u0022, FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep1Text, null)), StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep2)), featureInstance), new Gherkin.Ast.Step(null, \u0022And\u0022, FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep2Text, null)), StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep3)), featureInstance), new Gherkin.Ast.Step(null, \u0022When\u0022, FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep3Text, null)), StepMethod.FromStepMethodInfo(StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep4)), featureInstance), new Gherkin.Ast.Step(null, \u0022Then\u0022, FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep4Text, null)) });\r\n    var output = new Mock\u003CIScenarioOutput\u003E();\r\n    //act.\r\n    var exception = await Assert.ThrowsAsync\u003CTargetInvocationException\u003E(async () =\u003E await sut.ExecuteAsync(output.Object));\r\n    Assert.IsType\u003CInvalidOperationException\u003E(exception.InnerException);\r\n    //assert.\r\n    Assert.NotNull(featureInstance.CallStack);\r\n    Assert.Equal(2, featureInstance.CallStack.Count);\r\n    Assert.Equal(nameof(FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep1), featureInstance.CallStack[0]);\r\n    output.Verify(o =\u003E o.StepPassed(\u0022Given \u0022 \u002B FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep1Text), Times.Once);\r\n    Assert.Equal(nameof(FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep2), featureInstance.CallStack[1]);\r\n    output.Verify(o =\u003E o.StepFailed(\u0022And \u0022 \u002B FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep2Text), Times.Once);\r\n    output.Verify(o =\u003E o.StepSkipped(\u0022When \u0022 \u002B FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep3Text), Times.Once);\r\n    output.Verify(o =\u003E o.StepSkipped(\u0022Then \u0022 \u002B FeatureWithStepMethodsToInvoke_And_Throwing.ScenarioStep4Text), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "StepMethodArgumentTests",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "ListFromMethodInfo_Creates_Empty_From_Empty",
        "Body": "{\r\n    //arrange.\r\n    var method = GetPrivateMethod(nameof(MethodWithoutParams));\r\n    //act.\r\n    var args = StepMethodArgument.ListFromMethodInfo(method);\r\n    //assert.\r\n    Assert.NotNull(args);\r\n    Assert.Empty(args);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ListFromParameters_Creates_PrimitiveTypeArguments",
        "Body": "{\r\n    //arrange.\r\n    var method = GetPrivateMethod(nameof(MethodWithPrimitiveParams));\r\n    //act.\r\n    var args = StepMethodArgument.ListFromMethodInfo(method);\r\n    //assert.\r\n    Assert.NotNull(args);\r\n    Assert.Equal(3, args.Count);\r\n    AssertPrimitiveTypeArg(args, 0);\r\n    AssertPrimitiveTypeArg(args, 1);\r\n    AssertPrimitiveTypeArg(args, 2);\r\n    void AssertPrimitiveTypeArg(List\u003CStepMethodArgument\u003E arg, int index)\r\n    {\r\n        Assert.NotNull(arg[index]);\r\n        Assert.IsType\u003CPrimitiveTypeArgument\u003E(arg[index]);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsSameAs_Identifies_Similar_Instances",
        "Body": "{\r\n    //arrange.\r\n    var method = GetPrivateMethod(nameof(MethodWithPrimitiveParams));\r\n    var param0 = StepMethodArgument.ListFromMethodInfo(method)[0];\r\n    var param1 = StepMethodArgument.ListFromMethodInfo(method)[0];\r\n    //act.\r\n    var same = param0.IsSameAs(param1) \u0026\u0026 param1.IsSameAs(param0);\r\n    //assert.\r\n    Assert.True(same);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsSameAs_Distinguishes_Different_Instances",
        "Body": "{\r\n    //arrange.\r\n    var method = GetPrivateMethod(nameof(MethodWithPrimitiveParams));\r\n    var param0 = StepMethodArgument.ListFromMethodInfo(method)[0];\r\n    var param1 = StepMethodArgument.ListFromMethodInfo(method)[1];\r\n    //act.\r\n    var same = param0.IsSameAs(param1) \u0026\u0026 param1.IsSameAs(param0);\r\n    //assert.\r\n    Assert.False(same);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Clone_Creates_Similar_Instance",
        "Body": "{\r\n    //arrange.\r\n    var method = GetPrivateMethod(nameof(MethodWithPrimitiveParams));\r\n    var sut = StepMethodArgument.ListFromMethodInfo(method)[0];\r\n    //act.\r\n    var clone = sut.Clone();\r\n    //assert.\r\n    Assert.NotNull(clone);\r\n    Assert.NotSame(sut, clone);\r\n    Assert.True(clone.IsSameAs(sut));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ListFromParameters_Creates_DataTableArgument",
        "Body": "{\r\n    //arrange / act.\r\n    var args = StepMethodArgument.ListFromMethodInfo(GetPrivateMethod(nameof(MethodWithDataTableArgumentOnly)));\r\n    //assert.\r\n    Assert.NotNull(args);\r\n    Assert.Single(args);\r\n    Assert.NotNull(args[0]);\r\n    Assert.IsType\u003CDataTableArgument\u003E(args[0]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ListFromParameters_Creates_DataTableArgument_And_Others",
        "Body": "{\r\n    //arrange / act.\r\n    var args = StepMethodArgument.ListFromMethodInfo(GetPrivateMethod(nameof(MethodWithDataTableAndOtherArguments)));\r\n    //assert.\r\n    Assert.NotNull(args);\r\n    Assert.Equal(4, args.Count);\r\n    AssertPrimitiveTypeArg(args, 0);\r\n    AssertPrimitiveTypeArg(args, 1);\r\n    AssertPrimitiveTypeArg(args, 2);\r\n    Assert.IsType\u003CDataTableArgument\u003E(args[3]);\r\n    void AssertPrimitiveTypeArg(List\u003CStepMethodArgument\u003E arg, int index)\r\n    {\r\n        Assert.NotNull(arg[index]);\r\n        Assert.IsType\u003CPrimitiveTypeArgument\u003E(arg[index]);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ListFromParameters_Creates_DocStringArgument",
        "Body": "{\r\n    //arrange / act.\r\n    var args = StepMethodArgument.ListFromMethodInfo(GetPrivateMethod(nameof(MethodWithDocStringArgumentOnly)));\r\n    //assert.\r\n    Assert.NotNull(args);\r\n    Assert.Single(args);\r\n    Assert.NotNull(args[0]);\r\n    Assert.IsType\u003CDocStringArgument\u003E(args[0]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ListFromParameters_Creates_DocStringArgument_And_Others",
        "Body": "{\r\n    //arrange / act.\r\n    var args = StepMethodArgument.ListFromMethodInfo(GetPrivateMethod(nameof(MethodWithDocStringAndOtherArguments)));\r\n    //assert.\r\n    Assert.NotNull(args);\r\n    Assert.Equal(4, args.Count);\r\n    AssertPrimitiveTypeArg(args, 0);\r\n    AssertPrimitiveTypeArg(args, 1);\r\n    AssertPrimitiveTypeArg(args, 2);\r\n    Assert.IsType\u003CDocStringArgument\u003E(args[3]);\r\n    void AssertPrimitiveTypeArg(List\u003CStepMethodArgument\u003E arg, int index)\r\n    {\r\n        Assert.NotNull(arg[index]);\r\n        Assert.IsType\u003CPrimitiveTypeArgument\u003E(arg[index]);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureForCtorTest",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Ctor_Initializes_Properties",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.NotNull(sut.ScenarioStepPatterns);\r\n    Assert.Single(sut.ScenarioStepPatterns);\r\n    Assert.Equal(PatternKind.When, sut.ScenarioStepPatterns[0].Kind);\r\n    Assert.Equal(FeatureForCtorTest.WhenStepText, sut.ScenarioStepPatterns[0].OriginalPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Clone_Creates_Similar_Instance",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //act.\r\n    var clone = sut.Clone();\r\n    //assert.\r\n    Assert.NotNull(clone);\r\n    Assert.True(clone.IsSameAs(sut));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsSameAs_Identifies_Similar_Instances",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    var clone = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //act.\r\n    var same = sut.IsSameAs(clone) \u0026\u0026 clone.IsSameAs(sut);\r\n    //assert.\r\n    Assert.True(same);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Expects_Exact_Number_Of_Groups_Not_Less",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForApplyArgumentValues_LessThanNeededGroups();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForApplyArgumentValues_LessThanNeededGroups.Method_With_Arguments)), featureInstance);\r\n    var number = 123;\r\n    var text = \u0022Ana\u0022;\r\n    var date = new DateTime(2018, 5, 23);\r\n    var stepText = FeatureForApplyArgumentValues_LessThanNeededGroups.StepMethodText.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{number}\u0022).Replace(@\u0022(\\w\u002B)\u0022, $\u0022{text}\u0022);\r\n    var step = new Gherkin.Ast.Step(null, \u0022Then\u0022, stepText, null);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.DigestScenarioStepValues(step));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_Primitive_Values",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForApplyArgumentValues();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForApplyArgumentValues.Method_With_Arguments)), featureInstance);\r\n    var number = 123;\r\n    var text = \u0022Ana\u0022;\r\n    var date = new DateTime(2018, 5, 23);\r\n    var stepText = FeatureForApplyArgumentValues.StepMethodText.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{number}\u0022).Replace(@\u0022(\\w\u002B)\u0022, $\u0022{text}\u0022).Replace(@\u0022([\\d/]\u002B)\u0022, $\u0022{date.Month}/{date.Day}/{date.Year}\u0022);\r\n    var step = new Gherkin.Ast.Step(null, keyword, stepText, null);\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(stepText, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Execute_Invokes_StepMethod",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForExecuteTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForExecuteTest.Call_This_Method)), featureInstance);\r\n    //act.\r\n    await sut.ExecuteAsync();\r\n    //assert.\r\n    Assert.True(featureInstance.Called);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetDigestedStepText_Throws_Error_If_Not_Yet_Digested",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new Feature_For_GetDigestedStepTextTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(Feature_For_GetDigestedStepTextTest.When_Something_Method)), featureInstance);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.GetDigestedStepText());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDataTableScenarioStep.When_DataTable_Is_Expected)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_DataTable_Value",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDataTableScenarioStep.When_DataTable_Is_Expected)), featureInstance);\r\n    var step = new Gherkin.Ast.Step(null, \u0022When\u0022, FeatureWithDataTableScenarioStep.Steptext, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) }));\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(FeatureWithDataTableScenarioStep.Steptext, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDocStringScenarioStep.Step_With_DocString_Argument)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_DocString_Value",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDocStringScenarioStep.Step_With_DocString_Argument)), featureInstance);\r\n    var docStringContent = @\u0022some content\n\u002B\u002B\u002B\nwith multi lines\n---\nin it\u0022;\r\n    var step = new Gherkin.Ast.Step(null, \u0022Given\u0022, FeatureWithDocStringScenarioStep.StepWithDocStringText, new Gherkin.Ast.DocString(null, null, docStringContent));\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(FeatureWithDocStringScenarioStep.StepWithDocStringText, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_Multiple_Patterns",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithMultipleStepPatterns();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithMultipleStepPatterns.Step_With_Multiple_Patterns)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.Equal(10, sut.ScenarioStepPatterns.Count);\r\n    AssertPattern(0, PatternKind.Given, \u0022something\u0022);\r\n    AssertPattern(1, PatternKind.Given, \u0022something else\u0022);\r\n    AssertPattern(2, PatternKind.And, \u0022something\u0022);\r\n    AssertPattern(3, PatternKind.And, \u0022something else\u0022);\r\n    AssertPattern(4, PatternKind.When, \u0022something\u0022);\r\n    AssertPattern(5, PatternKind.When, \u0022something else\u0022);\r\n    AssertPattern(6, PatternKind.And, \u0022something\u0022);\r\n    AssertPattern(7, PatternKind.And, \u0022something else\u0022);\r\n    AssertPattern(8, PatternKind.But, \u0022something\u0022);\r\n    AssertPattern(9, PatternKind.But, \u0022something else\u0022);\r\n    void AssertPattern(int index, PatternKind patternKind, string pattern)\r\n    {\r\n        var thePattern = sut.ScenarioStepPatterns[index];\r\n        Assert.NotNull(thePattern);\r\n        Assert.Equal(patternKind, thePattern.Kind);\r\n        Assert.Equal(pattern, thePattern.OriginalPattern);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_DoesNotAllow_AsyncAvoid_Steps",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithAsyncVoidStep();\r\n    var methodInfo = typeof(FeatureWithAsyncVoidStep).GetMethod(nameof(FeatureWithAsyncVoidStep.StepWithAsyncVoid));\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StepMethodInfo.FromMethodInfo(methodInfo, featureInstance));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMethodName_Returns_Wrapped_Method_Name",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMethodName();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForMethodName.Step_Name_Must_Be_This)), featureInstance);\r\n    //act.\r\n    var methodName = sut.GetMethodName();\r\n    //assert.\r\n    Assert.Equal(nameof(FeatureForMethodName.Step_Name_Must_Be_This), methodName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMatchingPattern_Finds_Match_For_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.GetMatchingPattern(new Gherkin.Ast.Step(null, keyword, \u0022this matches\u0022, null));\r\n    //assert.\r\n    Assert.NotNull(match);\r\n    Assert.Equal(PatternKind.When, match.Kind);\r\n    Assert.Equal(\u0022this matches\u0022, match.OriginalPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMatchingPattern_Finds_Nothing_When_No_Match",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.GetMatchingPattern(new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022this does not matches\u0022, null));\r\n    //assert.\r\n    Assert.Null(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Match_IsPositive_For_Corresponding_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.Matches(new Gherkin.Ast.Step(null, keyword, \u0022this matches\u0022, null));\r\n    //assert.\r\n    Assert.True(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Match_IsNegative_For_Different_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.Matches(new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022this does not matches\u0022, null));\r\n    //assert.\r\n    Assert.False(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureForApplyArgumentValues_LessThanNeededGroups",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Ctor_Initializes_Properties",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.NotNull(sut.ScenarioStepPatterns);\r\n    Assert.Single(sut.ScenarioStepPatterns);\r\n    Assert.Equal(PatternKind.When, sut.ScenarioStepPatterns[0].Kind);\r\n    Assert.Equal(FeatureForCtorTest.WhenStepText, sut.ScenarioStepPatterns[0].OriginalPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Clone_Creates_Similar_Instance",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //act.\r\n    var clone = sut.Clone();\r\n    //assert.\r\n    Assert.NotNull(clone);\r\n    Assert.True(clone.IsSameAs(sut));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsSameAs_Identifies_Similar_Instances",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    var clone = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //act.\r\n    var same = sut.IsSameAs(clone) \u0026\u0026 clone.IsSameAs(sut);\r\n    //assert.\r\n    Assert.True(same);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Expects_Exact_Number_Of_Groups_Not_Less",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForApplyArgumentValues_LessThanNeededGroups();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForApplyArgumentValues_LessThanNeededGroups.Method_With_Arguments)), featureInstance);\r\n    var number = 123;\r\n    var text = \u0022Ana\u0022;\r\n    var date = new DateTime(2018, 5, 23);\r\n    var stepText = FeatureForApplyArgumentValues_LessThanNeededGroups.StepMethodText.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{number}\u0022).Replace(@\u0022(\\w\u002B)\u0022, $\u0022{text}\u0022);\r\n    var step = new Gherkin.Ast.Step(null, \u0022Then\u0022, stepText, null);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.DigestScenarioStepValues(step));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_Primitive_Values",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForApplyArgumentValues();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForApplyArgumentValues.Method_With_Arguments)), featureInstance);\r\n    var number = 123;\r\n    var text = \u0022Ana\u0022;\r\n    var date = new DateTime(2018, 5, 23);\r\n    var stepText = FeatureForApplyArgumentValues.StepMethodText.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{number}\u0022).Replace(@\u0022(\\w\u002B)\u0022, $\u0022{text}\u0022).Replace(@\u0022([\\d/]\u002B)\u0022, $\u0022{date.Month}/{date.Day}/{date.Year}\u0022);\r\n    var step = new Gherkin.Ast.Step(null, keyword, stepText, null);\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(stepText, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Execute_Invokes_StepMethod",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForExecuteTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForExecuteTest.Call_This_Method)), featureInstance);\r\n    //act.\r\n    await sut.ExecuteAsync();\r\n    //assert.\r\n    Assert.True(featureInstance.Called);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetDigestedStepText_Throws_Error_If_Not_Yet_Digested",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new Feature_For_GetDigestedStepTextTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(Feature_For_GetDigestedStepTextTest.When_Something_Method)), featureInstance);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.GetDigestedStepText());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDataTableScenarioStep.When_DataTable_Is_Expected)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_DataTable_Value",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDataTableScenarioStep.When_DataTable_Is_Expected)), featureInstance);\r\n    var step = new Gherkin.Ast.Step(null, \u0022When\u0022, FeatureWithDataTableScenarioStep.Steptext, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) }));\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(FeatureWithDataTableScenarioStep.Steptext, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDocStringScenarioStep.Step_With_DocString_Argument)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_DocString_Value",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDocStringScenarioStep.Step_With_DocString_Argument)), featureInstance);\r\n    var docStringContent = @\u0022some content\n\u002B\u002B\u002B\nwith multi lines\n---\nin it\u0022;\r\n    var step = new Gherkin.Ast.Step(null, \u0022Given\u0022, FeatureWithDocStringScenarioStep.StepWithDocStringText, new Gherkin.Ast.DocString(null, null, docStringContent));\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(FeatureWithDocStringScenarioStep.StepWithDocStringText, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_Multiple_Patterns",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithMultipleStepPatterns();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithMultipleStepPatterns.Step_With_Multiple_Patterns)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.Equal(10, sut.ScenarioStepPatterns.Count);\r\n    AssertPattern(0, PatternKind.Given, \u0022something\u0022);\r\n    AssertPattern(1, PatternKind.Given, \u0022something else\u0022);\r\n    AssertPattern(2, PatternKind.And, \u0022something\u0022);\r\n    AssertPattern(3, PatternKind.And, \u0022something else\u0022);\r\n    AssertPattern(4, PatternKind.When, \u0022something\u0022);\r\n    AssertPattern(5, PatternKind.When, \u0022something else\u0022);\r\n    AssertPattern(6, PatternKind.And, \u0022something\u0022);\r\n    AssertPattern(7, PatternKind.And, \u0022something else\u0022);\r\n    AssertPattern(8, PatternKind.But, \u0022something\u0022);\r\n    AssertPattern(9, PatternKind.But, \u0022something else\u0022);\r\n    void AssertPattern(int index, PatternKind patternKind, string pattern)\r\n    {\r\n        var thePattern = sut.ScenarioStepPatterns[index];\r\n        Assert.NotNull(thePattern);\r\n        Assert.Equal(patternKind, thePattern.Kind);\r\n        Assert.Equal(pattern, thePattern.OriginalPattern);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_DoesNotAllow_AsyncAvoid_Steps",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithAsyncVoidStep();\r\n    var methodInfo = typeof(FeatureWithAsyncVoidStep).GetMethod(nameof(FeatureWithAsyncVoidStep.StepWithAsyncVoid));\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StepMethodInfo.FromMethodInfo(methodInfo, featureInstance));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMethodName_Returns_Wrapped_Method_Name",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMethodName();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForMethodName.Step_Name_Must_Be_This)), featureInstance);\r\n    //act.\r\n    var methodName = sut.GetMethodName();\r\n    //assert.\r\n    Assert.Equal(nameof(FeatureForMethodName.Step_Name_Must_Be_This), methodName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMatchingPattern_Finds_Match_For_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.GetMatchingPattern(new Gherkin.Ast.Step(null, keyword, \u0022this matches\u0022, null));\r\n    //assert.\r\n    Assert.NotNull(match);\r\n    Assert.Equal(PatternKind.When, match.Kind);\r\n    Assert.Equal(\u0022this matches\u0022, match.OriginalPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMatchingPattern_Finds_Nothing_When_No_Match",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.GetMatchingPattern(new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022this does not matches\u0022, null));\r\n    //assert.\r\n    Assert.Null(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Match_IsPositive_For_Corresponding_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.Matches(new Gherkin.Ast.Step(null, keyword, \u0022this matches\u0022, null));\r\n    //assert.\r\n    Assert.True(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Match_IsNegative_For_Different_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.Matches(new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022this does not matches\u0022, null));\r\n    //assert.\r\n    Assert.False(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureForApplyArgumentValues",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Ctor_Initializes_Properties",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.NotNull(sut.ScenarioStepPatterns);\r\n    Assert.Single(sut.ScenarioStepPatterns);\r\n    Assert.Equal(PatternKind.When, sut.ScenarioStepPatterns[0].Kind);\r\n    Assert.Equal(FeatureForCtorTest.WhenStepText, sut.ScenarioStepPatterns[0].OriginalPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Clone_Creates_Similar_Instance",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //act.\r\n    var clone = sut.Clone();\r\n    //assert.\r\n    Assert.NotNull(clone);\r\n    Assert.True(clone.IsSameAs(sut));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsSameAs_Identifies_Similar_Instances",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    var clone = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //act.\r\n    var same = sut.IsSameAs(clone) \u0026\u0026 clone.IsSameAs(sut);\r\n    //assert.\r\n    Assert.True(same);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Expects_Exact_Number_Of_Groups_Not_Less",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForApplyArgumentValues_LessThanNeededGroups();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForApplyArgumentValues_LessThanNeededGroups.Method_With_Arguments)), featureInstance);\r\n    var number = 123;\r\n    var text = \u0022Ana\u0022;\r\n    var date = new DateTime(2018, 5, 23);\r\n    var stepText = FeatureForApplyArgumentValues_LessThanNeededGroups.StepMethodText.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{number}\u0022).Replace(@\u0022(\\w\u002B)\u0022, $\u0022{text}\u0022);\r\n    var step = new Gherkin.Ast.Step(null, \u0022Then\u0022, stepText, null);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.DigestScenarioStepValues(step));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_Primitive_Values",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForApplyArgumentValues();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForApplyArgumentValues.Method_With_Arguments)), featureInstance);\r\n    var number = 123;\r\n    var text = \u0022Ana\u0022;\r\n    var date = new DateTime(2018, 5, 23);\r\n    var stepText = FeatureForApplyArgumentValues.StepMethodText.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{number}\u0022).Replace(@\u0022(\\w\u002B)\u0022, $\u0022{text}\u0022).Replace(@\u0022([\\d/]\u002B)\u0022, $\u0022{date.Month}/{date.Day}/{date.Year}\u0022);\r\n    var step = new Gherkin.Ast.Step(null, keyword, stepText, null);\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(stepText, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Execute_Invokes_StepMethod",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForExecuteTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForExecuteTest.Call_This_Method)), featureInstance);\r\n    //act.\r\n    await sut.ExecuteAsync();\r\n    //assert.\r\n    Assert.True(featureInstance.Called);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetDigestedStepText_Throws_Error_If_Not_Yet_Digested",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new Feature_For_GetDigestedStepTextTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(Feature_For_GetDigestedStepTextTest.When_Something_Method)), featureInstance);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.GetDigestedStepText());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDataTableScenarioStep.When_DataTable_Is_Expected)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_DataTable_Value",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDataTableScenarioStep.When_DataTable_Is_Expected)), featureInstance);\r\n    var step = new Gherkin.Ast.Step(null, \u0022When\u0022, FeatureWithDataTableScenarioStep.Steptext, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) }));\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(FeatureWithDataTableScenarioStep.Steptext, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDocStringScenarioStep.Step_With_DocString_Argument)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_DocString_Value",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDocStringScenarioStep.Step_With_DocString_Argument)), featureInstance);\r\n    var docStringContent = @\u0022some content\n\u002B\u002B\u002B\nwith multi lines\n---\nin it\u0022;\r\n    var step = new Gherkin.Ast.Step(null, \u0022Given\u0022, FeatureWithDocStringScenarioStep.StepWithDocStringText, new Gherkin.Ast.DocString(null, null, docStringContent));\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(FeatureWithDocStringScenarioStep.StepWithDocStringText, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_Multiple_Patterns",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithMultipleStepPatterns();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithMultipleStepPatterns.Step_With_Multiple_Patterns)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.Equal(10, sut.ScenarioStepPatterns.Count);\r\n    AssertPattern(0, PatternKind.Given, \u0022something\u0022);\r\n    AssertPattern(1, PatternKind.Given, \u0022something else\u0022);\r\n    AssertPattern(2, PatternKind.And, \u0022something\u0022);\r\n    AssertPattern(3, PatternKind.And, \u0022something else\u0022);\r\n    AssertPattern(4, PatternKind.When, \u0022something\u0022);\r\n    AssertPattern(5, PatternKind.When, \u0022something else\u0022);\r\n    AssertPattern(6, PatternKind.And, \u0022something\u0022);\r\n    AssertPattern(7, PatternKind.And, \u0022something else\u0022);\r\n    AssertPattern(8, PatternKind.But, \u0022something\u0022);\r\n    AssertPattern(9, PatternKind.But, \u0022something else\u0022);\r\n    void AssertPattern(int index, PatternKind patternKind, string pattern)\r\n    {\r\n        var thePattern = sut.ScenarioStepPatterns[index];\r\n        Assert.NotNull(thePattern);\r\n        Assert.Equal(patternKind, thePattern.Kind);\r\n        Assert.Equal(pattern, thePattern.OriginalPattern);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_DoesNotAllow_AsyncAvoid_Steps",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithAsyncVoidStep();\r\n    var methodInfo = typeof(FeatureWithAsyncVoidStep).GetMethod(nameof(FeatureWithAsyncVoidStep.StepWithAsyncVoid));\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StepMethodInfo.FromMethodInfo(methodInfo, featureInstance));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMethodName_Returns_Wrapped_Method_Name",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMethodName();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForMethodName.Step_Name_Must_Be_This)), featureInstance);\r\n    //act.\r\n    var methodName = sut.GetMethodName();\r\n    //assert.\r\n    Assert.Equal(nameof(FeatureForMethodName.Step_Name_Must_Be_This), methodName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMatchingPattern_Finds_Match_For_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.GetMatchingPattern(new Gherkin.Ast.Step(null, keyword, \u0022this matches\u0022, null));\r\n    //assert.\r\n    Assert.NotNull(match);\r\n    Assert.Equal(PatternKind.When, match.Kind);\r\n    Assert.Equal(\u0022this matches\u0022, match.OriginalPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMatchingPattern_Finds_Nothing_When_No_Match",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.GetMatchingPattern(new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022this does not matches\u0022, null));\r\n    //assert.\r\n    Assert.Null(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Match_IsPositive_For_Corresponding_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.Matches(new Gherkin.Ast.Step(null, keyword, \u0022this matches\u0022, null));\r\n    //assert.\r\n    Assert.True(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Match_IsNegative_For_Different_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.Matches(new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022this does not matches\u0022, null));\r\n    //assert.\r\n    Assert.False(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureForExecuteTest",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Ctor_Initializes_Properties",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.NotNull(sut.ScenarioStepPatterns);\r\n    Assert.Single(sut.ScenarioStepPatterns);\r\n    Assert.Equal(PatternKind.When, sut.ScenarioStepPatterns[0].Kind);\r\n    Assert.Equal(FeatureForCtorTest.WhenStepText, sut.ScenarioStepPatterns[0].OriginalPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Clone_Creates_Similar_Instance",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //act.\r\n    var clone = sut.Clone();\r\n    //assert.\r\n    Assert.NotNull(clone);\r\n    Assert.True(clone.IsSameAs(sut));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsSameAs_Identifies_Similar_Instances",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    var clone = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //act.\r\n    var same = sut.IsSameAs(clone) \u0026\u0026 clone.IsSameAs(sut);\r\n    //assert.\r\n    Assert.True(same);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Expects_Exact_Number_Of_Groups_Not_Less",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForApplyArgumentValues_LessThanNeededGroups();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForApplyArgumentValues_LessThanNeededGroups.Method_With_Arguments)), featureInstance);\r\n    var number = 123;\r\n    var text = \u0022Ana\u0022;\r\n    var date = new DateTime(2018, 5, 23);\r\n    var stepText = FeatureForApplyArgumentValues_LessThanNeededGroups.StepMethodText.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{number}\u0022).Replace(@\u0022(\\w\u002B)\u0022, $\u0022{text}\u0022);\r\n    var step = new Gherkin.Ast.Step(null, \u0022Then\u0022, stepText, null);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.DigestScenarioStepValues(step));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_Primitive_Values",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForApplyArgumentValues();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForApplyArgumentValues.Method_With_Arguments)), featureInstance);\r\n    var number = 123;\r\n    var text = \u0022Ana\u0022;\r\n    var date = new DateTime(2018, 5, 23);\r\n    var stepText = FeatureForApplyArgumentValues.StepMethodText.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{number}\u0022).Replace(@\u0022(\\w\u002B)\u0022, $\u0022{text}\u0022).Replace(@\u0022([\\d/]\u002B)\u0022, $\u0022{date.Month}/{date.Day}/{date.Year}\u0022);\r\n    var step = new Gherkin.Ast.Step(null, keyword, stepText, null);\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(stepText, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Execute_Invokes_StepMethod",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForExecuteTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForExecuteTest.Call_This_Method)), featureInstance);\r\n    //act.\r\n    await sut.ExecuteAsync();\r\n    //assert.\r\n    Assert.True(featureInstance.Called);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetDigestedStepText_Throws_Error_If_Not_Yet_Digested",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new Feature_For_GetDigestedStepTextTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(Feature_For_GetDigestedStepTextTest.When_Something_Method)), featureInstance);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.GetDigestedStepText());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDataTableScenarioStep.When_DataTable_Is_Expected)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_DataTable_Value",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDataTableScenarioStep.When_DataTable_Is_Expected)), featureInstance);\r\n    var step = new Gherkin.Ast.Step(null, \u0022When\u0022, FeatureWithDataTableScenarioStep.Steptext, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) }));\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(FeatureWithDataTableScenarioStep.Steptext, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDocStringScenarioStep.Step_With_DocString_Argument)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_DocString_Value",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDocStringScenarioStep.Step_With_DocString_Argument)), featureInstance);\r\n    var docStringContent = @\u0022some content\n\u002B\u002B\u002B\nwith multi lines\n---\nin it\u0022;\r\n    var step = new Gherkin.Ast.Step(null, \u0022Given\u0022, FeatureWithDocStringScenarioStep.StepWithDocStringText, new Gherkin.Ast.DocString(null, null, docStringContent));\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(FeatureWithDocStringScenarioStep.StepWithDocStringText, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_Multiple_Patterns",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithMultipleStepPatterns();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithMultipleStepPatterns.Step_With_Multiple_Patterns)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.Equal(10, sut.ScenarioStepPatterns.Count);\r\n    AssertPattern(0, PatternKind.Given, \u0022something\u0022);\r\n    AssertPattern(1, PatternKind.Given, \u0022something else\u0022);\r\n    AssertPattern(2, PatternKind.And, \u0022something\u0022);\r\n    AssertPattern(3, PatternKind.And, \u0022something else\u0022);\r\n    AssertPattern(4, PatternKind.When, \u0022something\u0022);\r\n    AssertPattern(5, PatternKind.When, \u0022something else\u0022);\r\n    AssertPattern(6, PatternKind.And, \u0022something\u0022);\r\n    AssertPattern(7, PatternKind.And, \u0022something else\u0022);\r\n    AssertPattern(8, PatternKind.But, \u0022something\u0022);\r\n    AssertPattern(9, PatternKind.But, \u0022something else\u0022);\r\n    void AssertPattern(int index, PatternKind patternKind, string pattern)\r\n    {\r\n        var thePattern = sut.ScenarioStepPatterns[index];\r\n        Assert.NotNull(thePattern);\r\n        Assert.Equal(patternKind, thePattern.Kind);\r\n        Assert.Equal(pattern, thePattern.OriginalPattern);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_DoesNotAllow_AsyncAvoid_Steps",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithAsyncVoidStep();\r\n    var methodInfo = typeof(FeatureWithAsyncVoidStep).GetMethod(nameof(FeatureWithAsyncVoidStep.StepWithAsyncVoid));\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StepMethodInfo.FromMethodInfo(methodInfo, featureInstance));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMethodName_Returns_Wrapped_Method_Name",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMethodName();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForMethodName.Step_Name_Must_Be_This)), featureInstance);\r\n    //act.\r\n    var methodName = sut.GetMethodName();\r\n    //assert.\r\n    Assert.Equal(nameof(FeatureForMethodName.Step_Name_Must_Be_This), methodName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMatchingPattern_Finds_Match_For_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.GetMatchingPattern(new Gherkin.Ast.Step(null, keyword, \u0022this matches\u0022, null));\r\n    //assert.\r\n    Assert.NotNull(match);\r\n    Assert.Equal(PatternKind.When, match.Kind);\r\n    Assert.Equal(\u0022this matches\u0022, match.OriginalPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMatchingPattern_Finds_Nothing_When_No_Match",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.GetMatchingPattern(new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022this does not matches\u0022, null));\r\n    //assert.\r\n    Assert.Null(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Match_IsPositive_For_Corresponding_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.Matches(new Gherkin.Ast.Step(null, keyword, \u0022this matches\u0022, null));\r\n    //assert.\r\n    Assert.True(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Match_IsNegative_For_Different_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.Matches(new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022this does not matches\u0022, null));\r\n    //assert.\r\n    Assert.False(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Feature_For_GetDigestedStepTextTest",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Ctor_Initializes_Properties",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.NotNull(sut.ScenarioStepPatterns);\r\n    Assert.Single(sut.ScenarioStepPatterns);\r\n    Assert.Equal(PatternKind.When, sut.ScenarioStepPatterns[0].Kind);\r\n    Assert.Equal(FeatureForCtorTest.WhenStepText, sut.ScenarioStepPatterns[0].OriginalPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Clone_Creates_Similar_Instance",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //act.\r\n    var clone = sut.Clone();\r\n    //assert.\r\n    Assert.NotNull(clone);\r\n    Assert.True(clone.IsSameAs(sut));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsSameAs_Identifies_Similar_Instances",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    var clone = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //act.\r\n    var same = sut.IsSameAs(clone) \u0026\u0026 clone.IsSameAs(sut);\r\n    //assert.\r\n    Assert.True(same);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Expects_Exact_Number_Of_Groups_Not_Less",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForApplyArgumentValues_LessThanNeededGroups();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForApplyArgumentValues_LessThanNeededGroups.Method_With_Arguments)), featureInstance);\r\n    var number = 123;\r\n    var text = \u0022Ana\u0022;\r\n    var date = new DateTime(2018, 5, 23);\r\n    var stepText = FeatureForApplyArgumentValues_LessThanNeededGroups.StepMethodText.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{number}\u0022).Replace(@\u0022(\\w\u002B)\u0022, $\u0022{text}\u0022);\r\n    var step = new Gherkin.Ast.Step(null, \u0022Then\u0022, stepText, null);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.DigestScenarioStepValues(step));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_Primitive_Values",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForApplyArgumentValues();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForApplyArgumentValues.Method_With_Arguments)), featureInstance);\r\n    var number = 123;\r\n    var text = \u0022Ana\u0022;\r\n    var date = new DateTime(2018, 5, 23);\r\n    var stepText = FeatureForApplyArgumentValues.StepMethodText.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{number}\u0022).Replace(@\u0022(\\w\u002B)\u0022, $\u0022{text}\u0022).Replace(@\u0022([\\d/]\u002B)\u0022, $\u0022{date.Month}/{date.Day}/{date.Year}\u0022);\r\n    var step = new Gherkin.Ast.Step(null, keyword, stepText, null);\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(stepText, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Execute_Invokes_StepMethod",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForExecuteTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForExecuteTest.Call_This_Method)), featureInstance);\r\n    //act.\r\n    await sut.ExecuteAsync();\r\n    //assert.\r\n    Assert.True(featureInstance.Called);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetDigestedStepText_Throws_Error_If_Not_Yet_Digested",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new Feature_For_GetDigestedStepTextTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(Feature_For_GetDigestedStepTextTest.When_Something_Method)), featureInstance);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.GetDigestedStepText());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDataTableScenarioStep.When_DataTable_Is_Expected)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_DataTable_Value",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDataTableScenarioStep.When_DataTable_Is_Expected)), featureInstance);\r\n    var step = new Gherkin.Ast.Step(null, \u0022When\u0022, FeatureWithDataTableScenarioStep.Steptext, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) }));\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(FeatureWithDataTableScenarioStep.Steptext, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDocStringScenarioStep.Step_With_DocString_Argument)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_DocString_Value",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDocStringScenarioStep.Step_With_DocString_Argument)), featureInstance);\r\n    var docStringContent = @\u0022some content\n\u002B\u002B\u002B\nwith multi lines\n---\nin it\u0022;\r\n    var step = new Gherkin.Ast.Step(null, \u0022Given\u0022, FeatureWithDocStringScenarioStep.StepWithDocStringText, new Gherkin.Ast.DocString(null, null, docStringContent));\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(FeatureWithDocStringScenarioStep.StepWithDocStringText, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_Multiple_Patterns",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithMultipleStepPatterns();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithMultipleStepPatterns.Step_With_Multiple_Patterns)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.Equal(10, sut.ScenarioStepPatterns.Count);\r\n    AssertPattern(0, PatternKind.Given, \u0022something\u0022);\r\n    AssertPattern(1, PatternKind.Given, \u0022something else\u0022);\r\n    AssertPattern(2, PatternKind.And, \u0022something\u0022);\r\n    AssertPattern(3, PatternKind.And, \u0022something else\u0022);\r\n    AssertPattern(4, PatternKind.When, \u0022something\u0022);\r\n    AssertPattern(5, PatternKind.When, \u0022something else\u0022);\r\n    AssertPattern(6, PatternKind.And, \u0022something\u0022);\r\n    AssertPattern(7, PatternKind.And, \u0022something else\u0022);\r\n    AssertPattern(8, PatternKind.But, \u0022something\u0022);\r\n    AssertPattern(9, PatternKind.But, \u0022something else\u0022);\r\n    void AssertPattern(int index, PatternKind patternKind, string pattern)\r\n    {\r\n        var thePattern = sut.ScenarioStepPatterns[index];\r\n        Assert.NotNull(thePattern);\r\n        Assert.Equal(patternKind, thePattern.Kind);\r\n        Assert.Equal(pattern, thePattern.OriginalPattern);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_DoesNotAllow_AsyncAvoid_Steps",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithAsyncVoidStep();\r\n    var methodInfo = typeof(FeatureWithAsyncVoidStep).GetMethod(nameof(FeatureWithAsyncVoidStep.StepWithAsyncVoid));\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StepMethodInfo.FromMethodInfo(methodInfo, featureInstance));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMethodName_Returns_Wrapped_Method_Name",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMethodName();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForMethodName.Step_Name_Must_Be_This)), featureInstance);\r\n    //act.\r\n    var methodName = sut.GetMethodName();\r\n    //assert.\r\n    Assert.Equal(nameof(FeatureForMethodName.Step_Name_Must_Be_This), methodName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMatchingPattern_Finds_Match_For_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.GetMatchingPattern(new Gherkin.Ast.Step(null, keyword, \u0022this matches\u0022, null));\r\n    //assert.\r\n    Assert.NotNull(match);\r\n    Assert.Equal(PatternKind.When, match.Kind);\r\n    Assert.Equal(\u0022this matches\u0022, match.OriginalPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMatchingPattern_Finds_Nothing_When_No_Match",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.GetMatchingPattern(new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022this does not matches\u0022, null));\r\n    //assert.\r\n    Assert.Null(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Match_IsPositive_For_Corresponding_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.Matches(new Gherkin.Ast.Step(null, keyword, \u0022this matches\u0022, null));\r\n    //assert.\r\n    Assert.True(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Match_IsNegative_For_Different_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.Matches(new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022this does not matches\u0022, null));\r\n    //assert.\r\n    Assert.False(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithDataTableScenarioStep",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Ctor_Initializes_Properties",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.NotNull(sut.ScenarioStepPatterns);\r\n    Assert.Single(sut.ScenarioStepPatterns);\r\n    Assert.Equal(PatternKind.When, sut.ScenarioStepPatterns[0].Kind);\r\n    Assert.Equal(FeatureForCtorTest.WhenStepText, sut.ScenarioStepPatterns[0].OriginalPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Clone_Creates_Similar_Instance",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //act.\r\n    var clone = sut.Clone();\r\n    //assert.\r\n    Assert.NotNull(clone);\r\n    Assert.True(clone.IsSameAs(sut));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsSameAs_Identifies_Similar_Instances",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    var clone = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //act.\r\n    var same = sut.IsSameAs(clone) \u0026\u0026 clone.IsSameAs(sut);\r\n    //assert.\r\n    Assert.True(same);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Expects_Exact_Number_Of_Groups_Not_Less",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForApplyArgumentValues_LessThanNeededGroups();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForApplyArgumentValues_LessThanNeededGroups.Method_With_Arguments)), featureInstance);\r\n    var number = 123;\r\n    var text = \u0022Ana\u0022;\r\n    var date = new DateTime(2018, 5, 23);\r\n    var stepText = FeatureForApplyArgumentValues_LessThanNeededGroups.StepMethodText.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{number}\u0022).Replace(@\u0022(\\w\u002B)\u0022, $\u0022{text}\u0022);\r\n    var step = new Gherkin.Ast.Step(null, \u0022Then\u0022, stepText, null);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.DigestScenarioStepValues(step));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_Primitive_Values",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForApplyArgumentValues();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForApplyArgumentValues.Method_With_Arguments)), featureInstance);\r\n    var number = 123;\r\n    var text = \u0022Ana\u0022;\r\n    var date = new DateTime(2018, 5, 23);\r\n    var stepText = FeatureForApplyArgumentValues.StepMethodText.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{number}\u0022).Replace(@\u0022(\\w\u002B)\u0022, $\u0022{text}\u0022).Replace(@\u0022([\\d/]\u002B)\u0022, $\u0022{date.Month}/{date.Day}/{date.Year}\u0022);\r\n    var step = new Gherkin.Ast.Step(null, keyword, stepText, null);\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(stepText, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Execute_Invokes_StepMethod",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForExecuteTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForExecuteTest.Call_This_Method)), featureInstance);\r\n    //act.\r\n    await sut.ExecuteAsync();\r\n    //assert.\r\n    Assert.True(featureInstance.Called);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetDigestedStepText_Throws_Error_If_Not_Yet_Digested",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new Feature_For_GetDigestedStepTextTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(Feature_For_GetDigestedStepTextTest.When_Something_Method)), featureInstance);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.GetDigestedStepText());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDataTableScenarioStep.When_DataTable_Is_Expected)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_DataTable_Value",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDataTableScenarioStep.When_DataTable_Is_Expected)), featureInstance);\r\n    var step = new Gherkin.Ast.Step(null, \u0022When\u0022, FeatureWithDataTableScenarioStep.Steptext, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) }));\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(FeatureWithDataTableScenarioStep.Steptext, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDocStringScenarioStep.Step_With_DocString_Argument)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_DocString_Value",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDocStringScenarioStep.Step_With_DocString_Argument)), featureInstance);\r\n    var docStringContent = @\u0022some content\n\u002B\u002B\u002B\nwith multi lines\n---\nin it\u0022;\r\n    var step = new Gherkin.Ast.Step(null, \u0022Given\u0022, FeatureWithDocStringScenarioStep.StepWithDocStringText, new Gherkin.Ast.DocString(null, null, docStringContent));\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(FeatureWithDocStringScenarioStep.StepWithDocStringText, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_Multiple_Patterns",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithMultipleStepPatterns();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithMultipleStepPatterns.Step_With_Multiple_Patterns)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.Equal(10, sut.ScenarioStepPatterns.Count);\r\n    AssertPattern(0, PatternKind.Given, \u0022something\u0022);\r\n    AssertPattern(1, PatternKind.Given, \u0022something else\u0022);\r\n    AssertPattern(2, PatternKind.And, \u0022something\u0022);\r\n    AssertPattern(3, PatternKind.And, \u0022something else\u0022);\r\n    AssertPattern(4, PatternKind.When, \u0022something\u0022);\r\n    AssertPattern(5, PatternKind.When, \u0022something else\u0022);\r\n    AssertPattern(6, PatternKind.And, \u0022something\u0022);\r\n    AssertPattern(7, PatternKind.And, \u0022something else\u0022);\r\n    AssertPattern(8, PatternKind.But, \u0022something\u0022);\r\n    AssertPattern(9, PatternKind.But, \u0022something else\u0022);\r\n    void AssertPattern(int index, PatternKind patternKind, string pattern)\r\n    {\r\n        var thePattern = sut.ScenarioStepPatterns[index];\r\n        Assert.NotNull(thePattern);\r\n        Assert.Equal(patternKind, thePattern.Kind);\r\n        Assert.Equal(pattern, thePattern.OriginalPattern);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_DoesNotAllow_AsyncAvoid_Steps",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithAsyncVoidStep();\r\n    var methodInfo = typeof(FeatureWithAsyncVoidStep).GetMethod(nameof(FeatureWithAsyncVoidStep.StepWithAsyncVoid));\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StepMethodInfo.FromMethodInfo(methodInfo, featureInstance));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMethodName_Returns_Wrapped_Method_Name",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMethodName();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForMethodName.Step_Name_Must_Be_This)), featureInstance);\r\n    //act.\r\n    var methodName = sut.GetMethodName();\r\n    //assert.\r\n    Assert.Equal(nameof(FeatureForMethodName.Step_Name_Must_Be_This), methodName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMatchingPattern_Finds_Match_For_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.GetMatchingPattern(new Gherkin.Ast.Step(null, keyword, \u0022this matches\u0022, null));\r\n    //assert.\r\n    Assert.NotNull(match);\r\n    Assert.Equal(PatternKind.When, match.Kind);\r\n    Assert.Equal(\u0022this matches\u0022, match.OriginalPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMatchingPattern_Finds_Nothing_When_No_Match",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.GetMatchingPattern(new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022this does not matches\u0022, null));\r\n    //assert.\r\n    Assert.Null(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Match_IsPositive_For_Corresponding_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.Matches(new Gherkin.Ast.Step(null, keyword, \u0022this matches\u0022, null));\r\n    //assert.\r\n    Assert.True(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Match_IsNegative_For_Different_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.Matches(new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022this does not matches\u0022, null));\r\n    //assert.\r\n    Assert.False(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithDocStringScenarioStep",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Ctor_Initializes_Properties",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.NotNull(sut.ScenarioStepPatterns);\r\n    Assert.Single(sut.ScenarioStepPatterns);\r\n    Assert.Equal(PatternKind.When, sut.ScenarioStepPatterns[0].Kind);\r\n    Assert.Equal(FeatureForCtorTest.WhenStepText, sut.ScenarioStepPatterns[0].OriginalPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Clone_Creates_Similar_Instance",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //act.\r\n    var clone = sut.Clone();\r\n    //assert.\r\n    Assert.NotNull(clone);\r\n    Assert.True(clone.IsSameAs(sut));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsSameAs_Identifies_Similar_Instances",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    var clone = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //act.\r\n    var same = sut.IsSameAs(clone) \u0026\u0026 clone.IsSameAs(sut);\r\n    //assert.\r\n    Assert.True(same);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Expects_Exact_Number_Of_Groups_Not_Less",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForApplyArgumentValues_LessThanNeededGroups();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForApplyArgumentValues_LessThanNeededGroups.Method_With_Arguments)), featureInstance);\r\n    var number = 123;\r\n    var text = \u0022Ana\u0022;\r\n    var date = new DateTime(2018, 5, 23);\r\n    var stepText = FeatureForApplyArgumentValues_LessThanNeededGroups.StepMethodText.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{number}\u0022).Replace(@\u0022(\\w\u002B)\u0022, $\u0022{text}\u0022);\r\n    var step = new Gherkin.Ast.Step(null, \u0022Then\u0022, stepText, null);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.DigestScenarioStepValues(step));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_Primitive_Values",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForApplyArgumentValues();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForApplyArgumentValues.Method_With_Arguments)), featureInstance);\r\n    var number = 123;\r\n    var text = \u0022Ana\u0022;\r\n    var date = new DateTime(2018, 5, 23);\r\n    var stepText = FeatureForApplyArgumentValues.StepMethodText.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{number}\u0022).Replace(@\u0022(\\w\u002B)\u0022, $\u0022{text}\u0022).Replace(@\u0022([\\d/]\u002B)\u0022, $\u0022{date.Month}/{date.Day}/{date.Year}\u0022);\r\n    var step = new Gherkin.Ast.Step(null, keyword, stepText, null);\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(stepText, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Execute_Invokes_StepMethod",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForExecuteTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForExecuteTest.Call_This_Method)), featureInstance);\r\n    //act.\r\n    await sut.ExecuteAsync();\r\n    //assert.\r\n    Assert.True(featureInstance.Called);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetDigestedStepText_Throws_Error_If_Not_Yet_Digested",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new Feature_For_GetDigestedStepTextTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(Feature_For_GetDigestedStepTextTest.When_Something_Method)), featureInstance);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.GetDigestedStepText());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDataTableScenarioStep.When_DataTable_Is_Expected)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_DataTable_Value",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDataTableScenarioStep.When_DataTable_Is_Expected)), featureInstance);\r\n    var step = new Gherkin.Ast.Step(null, \u0022When\u0022, FeatureWithDataTableScenarioStep.Steptext, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) }));\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(FeatureWithDataTableScenarioStep.Steptext, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDocStringScenarioStep.Step_With_DocString_Argument)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_DocString_Value",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDocStringScenarioStep.Step_With_DocString_Argument)), featureInstance);\r\n    var docStringContent = @\u0022some content\n\u002B\u002B\u002B\nwith multi lines\n---\nin it\u0022;\r\n    var step = new Gherkin.Ast.Step(null, \u0022Given\u0022, FeatureWithDocStringScenarioStep.StepWithDocStringText, new Gherkin.Ast.DocString(null, null, docStringContent));\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(FeatureWithDocStringScenarioStep.StepWithDocStringText, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_Multiple_Patterns",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithMultipleStepPatterns();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithMultipleStepPatterns.Step_With_Multiple_Patterns)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.Equal(10, sut.ScenarioStepPatterns.Count);\r\n    AssertPattern(0, PatternKind.Given, \u0022something\u0022);\r\n    AssertPattern(1, PatternKind.Given, \u0022something else\u0022);\r\n    AssertPattern(2, PatternKind.And, \u0022something\u0022);\r\n    AssertPattern(3, PatternKind.And, \u0022something else\u0022);\r\n    AssertPattern(4, PatternKind.When, \u0022something\u0022);\r\n    AssertPattern(5, PatternKind.When, \u0022something else\u0022);\r\n    AssertPattern(6, PatternKind.And, \u0022something\u0022);\r\n    AssertPattern(7, PatternKind.And, \u0022something else\u0022);\r\n    AssertPattern(8, PatternKind.But, \u0022something\u0022);\r\n    AssertPattern(9, PatternKind.But, \u0022something else\u0022);\r\n    void AssertPattern(int index, PatternKind patternKind, string pattern)\r\n    {\r\n        var thePattern = sut.ScenarioStepPatterns[index];\r\n        Assert.NotNull(thePattern);\r\n        Assert.Equal(patternKind, thePattern.Kind);\r\n        Assert.Equal(pattern, thePattern.OriginalPattern);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_DoesNotAllow_AsyncAvoid_Steps",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithAsyncVoidStep();\r\n    var methodInfo = typeof(FeatureWithAsyncVoidStep).GetMethod(nameof(FeatureWithAsyncVoidStep.StepWithAsyncVoid));\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StepMethodInfo.FromMethodInfo(methodInfo, featureInstance));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMethodName_Returns_Wrapped_Method_Name",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMethodName();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForMethodName.Step_Name_Must_Be_This)), featureInstance);\r\n    //act.\r\n    var methodName = sut.GetMethodName();\r\n    //assert.\r\n    Assert.Equal(nameof(FeatureForMethodName.Step_Name_Must_Be_This), methodName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMatchingPattern_Finds_Match_For_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.GetMatchingPattern(new Gherkin.Ast.Step(null, keyword, \u0022this matches\u0022, null));\r\n    //assert.\r\n    Assert.NotNull(match);\r\n    Assert.Equal(PatternKind.When, match.Kind);\r\n    Assert.Equal(\u0022this matches\u0022, match.OriginalPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMatchingPattern_Finds_Nothing_When_No_Match",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.GetMatchingPattern(new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022this does not matches\u0022, null));\r\n    //assert.\r\n    Assert.Null(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Match_IsPositive_For_Corresponding_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.Matches(new Gherkin.Ast.Step(null, keyword, \u0022this matches\u0022, null));\r\n    //assert.\r\n    Assert.True(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Match_IsNegative_For_Different_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.Matches(new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022this does not matches\u0022, null));\r\n    //assert.\r\n    Assert.False(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithMultipleStepPatterns",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Ctor_Initializes_Properties",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.NotNull(sut.ScenarioStepPatterns);\r\n    Assert.Single(sut.ScenarioStepPatterns);\r\n    Assert.Equal(PatternKind.When, sut.ScenarioStepPatterns[0].Kind);\r\n    Assert.Equal(FeatureForCtorTest.WhenStepText, sut.ScenarioStepPatterns[0].OriginalPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Clone_Creates_Similar_Instance",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //act.\r\n    var clone = sut.Clone();\r\n    //assert.\r\n    Assert.NotNull(clone);\r\n    Assert.True(clone.IsSameAs(sut));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsSameAs_Identifies_Similar_Instances",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    var clone = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //act.\r\n    var same = sut.IsSameAs(clone) \u0026\u0026 clone.IsSameAs(sut);\r\n    //assert.\r\n    Assert.True(same);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Expects_Exact_Number_Of_Groups_Not_Less",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForApplyArgumentValues_LessThanNeededGroups();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForApplyArgumentValues_LessThanNeededGroups.Method_With_Arguments)), featureInstance);\r\n    var number = 123;\r\n    var text = \u0022Ana\u0022;\r\n    var date = new DateTime(2018, 5, 23);\r\n    var stepText = FeatureForApplyArgumentValues_LessThanNeededGroups.StepMethodText.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{number}\u0022).Replace(@\u0022(\\w\u002B)\u0022, $\u0022{text}\u0022);\r\n    var step = new Gherkin.Ast.Step(null, \u0022Then\u0022, stepText, null);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.DigestScenarioStepValues(step));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_Primitive_Values",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForApplyArgumentValues();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForApplyArgumentValues.Method_With_Arguments)), featureInstance);\r\n    var number = 123;\r\n    var text = \u0022Ana\u0022;\r\n    var date = new DateTime(2018, 5, 23);\r\n    var stepText = FeatureForApplyArgumentValues.StepMethodText.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{number}\u0022).Replace(@\u0022(\\w\u002B)\u0022, $\u0022{text}\u0022).Replace(@\u0022([\\d/]\u002B)\u0022, $\u0022{date.Month}/{date.Day}/{date.Year}\u0022);\r\n    var step = new Gherkin.Ast.Step(null, keyword, stepText, null);\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(stepText, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Execute_Invokes_StepMethod",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForExecuteTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForExecuteTest.Call_This_Method)), featureInstance);\r\n    //act.\r\n    await sut.ExecuteAsync();\r\n    //assert.\r\n    Assert.True(featureInstance.Called);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetDigestedStepText_Throws_Error_If_Not_Yet_Digested",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new Feature_For_GetDigestedStepTextTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(Feature_For_GetDigestedStepTextTest.When_Something_Method)), featureInstance);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.GetDigestedStepText());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDataTableScenarioStep.When_DataTable_Is_Expected)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_DataTable_Value",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDataTableScenarioStep.When_DataTable_Is_Expected)), featureInstance);\r\n    var step = new Gherkin.Ast.Step(null, \u0022When\u0022, FeatureWithDataTableScenarioStep.Steptext, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) }));\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(FeatureWithDataTableScenarioStep.Steptext, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDocStringScenarioStep.Step_With_DocString_Argument)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_DocString_Value",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDocStringScenarioStep.Step_With_DocString_Argument)), featureInstance);\r\n    var docStringContent = @\u0022some content\n\u002B\u002B\u002B\nwith multi lines\n---\nin it\u0022;\r\n    var step = new Gherkin.Ast.Step(null, \u0022Given\u0022, FeatureWithDocStringScenarioStep.StepWithDocStringText, new Gherkin.Ast.DocString(null, null, docStringContent));\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(FeatureWithDocStringScenarioStep.StepWithDocStringText, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_Multiple_Patterns",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithMultipleStepPatterns();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithMultipleStepPatterns.Step_With_Multiple_Patterns)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.Equal(10, sut.ScenarioStepPatterns.Count);\r\n    AssertPattern(0, PatternKind.Given, \u0022something\u0022);\r\n    AssertPattern(1, PatternKind.Given, \u0022something else\u0022);\r\n    AssertPattern(2, PatternKind.And, \u0022something\u0022);\r\n    AssertPattern(3, PatternKind.And, \u0022something else\u0022);\r\n    AssertPattern(4, PatternKind.When, \u0022something\u0022);\r\n    AssertPattern(5, PatternKind.When, \u0022something else\u0022);\r\n    AssertPattern(6, PatternKind.And, \u0022something\u0022);\r\n    AssertPattern(7, PatternKind.And, \u0022something else\u0022);\r\n    AssertPattern(8, PatternKind.But, \u0022something\u0022);\r\n    AssertPattern(9, PatternKind.But, \u0022something else\u0022);\r\n    void AssertPattern(int index, PatternKind patternKind, string pattern)\r\n    {\r\n        var thePattern = sut.ScenarioStepPatterns[index];\r\n        Assert.NotNull(thePattern);\r\n        Assert.Equal(patternKind, thePattern.Kind);\r\n        Assert.Equal(pattern, thePattern.OriginalPattern);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_DoesNotAllow_AsyncAvoid_Steps",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithAsyncVoidStep();\r\n    var methodInfo = typeof(FeatureWithAsyncVoidStep).GetMethod(nameof(FeatureWithAsyncVoidStep.StepWithAsyncVoid));\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StepMethodInfo.FromMethodInfo(methodInfo, featureInstance));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMethodName_Returns_Wrapped_Method_Name",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMethodName();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForMethodName.Step_Name_Must_Be_This)), featureInstance);\r\n    //act.\r\n    var methodName = sut.GetMethodName();\r\n    //assert.\r\n    Assert.Equal(nameof(FeatureForMethodName.Step_Name_Must_Be_This), methodName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMatchingPattern_Finds_Match_For_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.GetMatchingPattern(new Gherkin.Ast.Step(null, keyword, \u0022this matches\u0022, null));\r\n    //assert.\r\n    Assert.NotNull(match);\r\n    Assert.Equal(PatternKind.When, match.Kind);\r\n    Assert.Equal(\u0022this matches\u0022, match.OriginalPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMatchingPattern_Finds_Nothing_When_No_Match",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.GetMatchingPattern(new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022this does not matches\u0022, null));\r\n    //assert.\r\n    Assert.Null(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Match_IsPositive_For_Corresponding_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.Matches(new Gherkin.Ast.Step(null, keyword, \u0022this matches\u0022, null));\r\n    //assert.\r\n    Assert.True(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Match_IsNegative_For_Different_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.Matches(new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022this does not matches\u0022, null));\r\n    //assert.\r\n    Assert.False(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureWithAsyncVoidStep",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Ctor_Initializes_Properties",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.NotNull(sut.ScenarioStepPatterns);\r\n    Assert.Single(sut.ScenarioStepPatterns);\r\n    Assert.Equal(PatternKind.When, sut.ScenarioStepPatterns[0].Kind);\r\n    Assert.Equal(FeatureForCtorTest.WhenStepText, sut.ScenarioStepPatterns[0].OriginalPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Clone_Creates_Similar_Instance",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //act.\r\n    var clone = sut.Clone();\r\n    //assert.\r\n    Assert.NotNull(clone);\r\n    Assert.True(clone.IsSameAs(sut));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsSameAs_Identifies_Similar_Instances",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    var clone = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //act.\r\n    var same = sut.IsSameAs(clone) \u0026\u0026 clone.IsSameAs(sut);\r\n    //assert.\r\n    Assert.True(same);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Expects_Exact_Number_Of_Groups_Not_Less",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForApplyArgumentValues_LessThanNeededGroups();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForApplyArgumentValues_LessThanNeededGroups.Method_With_Arguments)), featureInstance);\r\n    var number = 123;\r\n    var text = \u0022Ana\u0022;\r\n    var date = new DateTime(2018, 5, 23);\r\n    var stepText = FeatureForApplyArgumentValues_LessThanNeededGroups.StepMethodText.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{number}\u0022).Replace(@\u0022(\\w\u002B)\u0022, $\u0022{text}\u0022);\r\n    var step = new Gherkin.Ast.Step(null, \u0022Then\u0022, stepText, null);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.DigestScenarioStepValues(step));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_Primitive_Values",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForApplyArgumentValues();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForApplyArgumentValues.Method_With_Arguments)), featureInstance);\r\n    var number = 123;\r\n    var text = \u0022Ana\u0022;\r\n    var date = new DateTime(2018, 5, 23);\r\n    var stepText = FeatureForApplyArgumentValues.StepMethodText.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{number}\u0022).Replace(@\u0022(\\w\u002B)\u0022, $\u0022{text}\u0022).Replace(@\u0022([\\d/]\u002B)\u0022, $\u0022{date.Month}/{date.Day}/{date.Year}\u0022);\r\n    var step = new Gherkin.Ast.Step(null, keyword, stepText, null);\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(stepText, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Execute_Invokes_StepMethod",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForExecuteTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForExecuteTest.Call_This_Method)), featureInstance);\r\n    //act.\r\n    await sut.ExecuteAsync();\r\n    //assert.\r\n    Assert.True(featureInstance.Called);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetDigestedStepText_Throws_Error_If_Not_Yet_Digested",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new Feature_For_GetDigestedStepTextTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(Feature_For_GetDigestedStepTextTest.When_Something_Method)), featureInstance);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.GetDigestedStepText());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDataTableScenarioStep.When_DataTable_Is_Expected)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_DataTable_Value",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDataTableScenarioStep.When_DataTable_Is_Expected)), featureInstance);\r\n    var step = new Gherkin.Ast.Step(null, \u0022When\u0022, FeatureWithDataTableScenarioStep.Steptext, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) }));\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(FeatureWithDataTableScenarioStep.Steptext, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDocStringScenarioStep.Step_With_DocString_Argument)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_DocString_Value",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDocStringScenarioStep.Step_With_DocString_Argument)), featureInstance);\r\n    var docStringContent = @\u0022some content\n\u002B\u002B\u002B\nwith multi lines\n---\nin it\u0022;\r\n    var step = new Gherkin.Ast.Step(null, \u0022Given\u0022, FeatureWithDocStringScenarioStep.StepWithDocStringText, new Gherkin.Ast.DocString(null, null, docStringContent));\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(FeatureWithDocStringScenarioStep.StepWithDocStringText, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_Multiple_Patterns",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithMultipleStepPatterns();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithMultipleStepPatterns.Step_With_Multiple_Patterns)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.Equal(10, sut.ScenarioStepPatterns.Count);\r\n    AssertPattern(0, PatternKind.Given, \u0022something\u0022);\r\n    AssertPattern(1, PatternKind.Given, \u0022something else\u0022);\r\n    AssertPattern(2, PatternKind.And, \u0022something\u0022);\r\n    AssertPattern(3, PatternKind.And, \u0022something else\u0022);\r\n    AssertPattern(4, PatternKind.When, \u0022something\u0022);\r\n    AssertPattern(5, PatternKind.When, \u0022something else\u0022);\r\n    AssertPattern(6, PatternKind.And, \u0022something\u0022);\r\n    AssertPattern(7, PatternKind.And, \u0022something else\u0022);\r\n    AssertPattern(8, PatternKind.But, \u0022something\u0022);\r\n    AssertPattern(9, PatternKind.But, \u0022something else\u0022);\r\n    void AssertPattern(int index, PatternKind patternKind, string pattern)\r\n    {\r\n        var thePattern = sut.ScenarioStepPatterns[index];\r\n        Assert.NotNull(thePattern);\r\n        Assert.Equal(patternKind, thePattern.Kind);\r\n        Assert.Equal(pattern, thePattern.OriginalPattern);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_DoesNotAllow_AsyncAvoid_Steps",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithAsyncVoidStep();\r\n    var methodInfo = typeof(FeatureWithAsyncVoidStep).GetMethod(nameof(FeatureWithAsyncVoidStep.StepWithAsyncVoid));\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StepMethodInfo.FromMethodInfo(methodInfo, featureInstance));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMethodName_Returns_Wrapped_Method_Name",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMethodName();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForMethodName.Step_Name_Must_Be_This)), featureInstance);\r\n    //act.\r\n    var methodName = sut.GetMethodName();\r\n    //assert.\r\n    Assert.Equal(nameof(FeatureForMethodName.Step_Name_Must_Be_This), methodName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMatchingPattern_Finds_Match_For_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.GetMatchingPattern(new Gherkin.Ast.Step(null, keyword, \u0022this matches\u0022, null));\r\n    //assert.\r\n    Assert.NotNull(match);\r\n    Assert.Equal(PatternKind.When, match.Kind);\r\n    Assert.Equal(\u0022this matches\u0022, match.OriginalPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMatchingPattern_Finds_Nothing_When_No_Match",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.GetMatchingPattern(new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022this does not matches\u0022, null));\r\n    //assert.\r\n    Assert.Null(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Match_IsPositive_For_Corresponding_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.Matches(new Gherkin.Ast.Step(null, keyword, \u0022this matches\u0022, null));\r\n    //assert.\r\n    Assert.True(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Match_IsNegative_For_Different_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.Matches(new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022this does not matches\u0022, null));\r\n    //assert.\r\n    Assert.False(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureForMethodName",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Ctor_Initializes_Properties",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.NotNull(sut.ScenarioStepPatterns);\r\n    Assert.Single(sut.ScenarioStepPatterns);\r\n    Assert.Equal(PatternKind.When, sut.ScenarioStepPatterns[0].Kind);\r\n    Assert.Equal(FeatureForCtorTest.WhenStepText, sut.ScenarioStepPatterns[0].OriginalPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Clone_Creates_Similar_Instance",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //act.\r\n    var clone = sut.Clone();\r\n    //assert.\r\n    Assert.NotNull(clone);\r\n    Assert.True(clone.IsSameAs(sut));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsSameAs_Identifies_Similar_Instances",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    var clone = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //act.\r\n    var same = sut.IsSameAs(clone) \u0026\u0026 clone.IsSameAs(sut);\r\n    //assert.\r\n    Assert.True(same);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Expects_Exact_Number_Of_Groups_Not_Less",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForApplyArgumentValues_LessThanNeededGroups();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForApplyArgumentValues_LessThanNeededGroups.Method_With_Arguments)), featureInstance);\r\n    var number = 123;\r\n    var text = \u0022Ana\u0022;\r\n    var date = new DateTime(2018, 5, 23);\r\n    var stepText = FeatureForApplyArgumentValues_LessThanNeededGroups.StepMethodText.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{number}\u0022).Replace(@\u0022(\\w\u002B)\u0022, $\u0022{text}\u0022);\r\n    var step = new Gherkin.Ast.Step(null, \u0022Then\u0022, stepText, null);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.DigestScenarioStepValues(step));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_Primitive_Values",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForApplyArgumentValues();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForApplyArgumentValues.Method_With_Arguments)), featureInstance);\r\n    var number = 123;\r\n    var text = \u0022Ana\u0022;\r\n    var date = new DateTime(2018, 5, 23);\r\n    var stepText = FeatureForApplyArgumentValues.StepMethodText.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{number}\u0022).Replace(@\u0022(\\w\u002B)\u0022, $\u0022{text}\u0022).Replace(@\u0022([\\d/]\u002B)\u0022, $\u0022{date.Month}/{date.Day}/{date.Year}\u0022);\r\n    var step = new Gherkin.Ast.Step(null, keyword, stepText, null);\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(stepText, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Execute_Invokes_StepMethod",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForExecuteTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForExecuteTest.Call_This_Method)), featureInstance);\r\n    //act.\r\n    await sut.ExecuteAsync();\r\n    //assert.\r\n    Assert.True(featureInstance.Called);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetDigestedStepText_Throws_Error_If_Not_Yet_Digested",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new Feature_For_GetDigestedStepTextTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(Feature_For_GetDigestedStepTextTest.When_Something_Method)), featureInstance);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.GetDigestedStepText());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDataTableScenarioStep.When_DataTable_Is_Expected)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_DataTable_Value",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDataTableScenarioStep.When_DataTable_Is_Expected)), featureInstance);\r\n    var step = new Gherkin.Ast.Step(null, \u0022When\u0022, FeatureWithDataTableScenarioStep.Steptext, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) }));\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(FeatureWithDataTableScenarioStep.Steptext, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDocStringScenarioStep.Step_With_DocString_Argument)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_DocString_Value",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDocStringScenarioStep.Step_With_DocString_Argument)), featureInstance);\r\n    var docStringContent = @\u0022some content\n\u002B\u002B\u002B\nwith multi lines\n---\nin it\u0022;\r\n    var step = new Gherkin.Ast.Step(null, \u0022Given\u0022, FeatureWithDocStringScenarioStep.StepWithDocStringText, new Gherkin.Ast.DocString(null, null, docStringContent));\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(FeatureWithDocStringScenarioStep.StepWithDocStringText, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_Multiple_Patterns",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithMultipleStepPatterns();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithMultipleStepPatterns.Step_With_Multiple_Patterns)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.Equal(10, sut.ScenarioStepPatterns.Count);\r\n    AssertPattern(0, PatternKind.Given, \u0022something\u0022);\r\n    AssertPattern(1, PatternKind.Given, \u0022something else\u0022);\r\n    AssertPattern(2, PatternKind.And, \u0022something\u0022);\r\n    AssertPattern(3, PatternKind.And, \u0022something else\u0022);\r\n    AssertPattern(4, PatternKind.When, \u0022something\u0022);\r\n    AssertPattern(5, PatternKind.When, \u0022something else\u0022);\r\n    AssertPattern(6, PatternKind.And, \u0022something\u0022);\r\n    AssertPattern(7, PatternKind.And, \u0022something else\u0022);\r\n    AssertPattern(8, PatternKind.But, \u0022something\u0022);\r\n    AssertPattern(9, PatternKind.But, \u0022something else\u0022);\r\n    void AssertPattern(int index, PatternKind patternKind, string pattern)\r\n    {\r\n        var thePattern = sut.ScenarioStepPatterns[index];\r\n        Assert.NotNull(thePattern);\r\n        Assert.Equal(patternKind, thePattern.Kind);\r\n        Assert.Equal(pattern, thePattern.OriginalPattern);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_DoesNotAllow_AsyncAvoid_Steps",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithAsyncVoidStep();\r\n    var methodInfo = typeof(FeatureWithAsyncVoidStep).GetMethod(nameof(FeatureWithAsyncVoidStep.StepWithAsyncVoid));\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StepMethodInfo.FromMethodInfo(methodInfo, featureInstance));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMethodName_Returns_Wrapped_Method_Name",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMethodName();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForMethodName.Step_Name_Must_Be_This)), featureInstance);\r\n    //act.\r\n    var methodName = sut.GetMethodName();\r\n    //assert.\r\n    Assert.Equal(nameof(FeatureForMethodName.Step_Name_Must_Be_This), methodName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMatchingPattern_Finds_Match_For_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.GetMatchingPattern(new Gherkin.Ast.Step(null, keyword, \u0022this matches\u0022, null));\r\n    //assert.\r\n    Assert.NotNull(match);\r\n    Assert.Equal(PatternKind.When, match.Kind);\r\n    Assert.Equal(\u0022this matches\u0022, match.OriginalPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMatchingPattern_Finds_Nothing_When_No_Match",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.GetMatchingPattern(new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022this does not matches\u0022, null));\r\n    //assert.\r\n    Assert.Null(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Match_IsPositive_For_Corresponding_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.Matches(new Gherkin.Ast.Step(null, keyword, \u0022this matches\u0022, null));\r\n    //assert.\r\n    Assert.True(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Match_IsNegative_For_Different_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.Matches(new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022this does not matches\u0022, null));\r\n    //assert.\r\n    Assert.False(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FeatureForMatch",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Ctor_Initializes_Properties",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.NotNull(sut.ScenarioStepPatterns);\r\n    Assert.Single(sut.ScenarioStepPatterns);\r\n    Assert.Equal(PatternKind.When, sut.ScenarioStepPatterns[0].Kind);\r\n    Assert.Equal(FeatureForCtorTest.WhenStepText, sut.ScenarioStepPatterns[0].OriginalPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Clone_Creates_Similar_Instance",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //act.\r\n    var clone = sut.Clone();\r\n    //assert.\r\n    Assert.NotNull(clone);\r\n    Assert.True(clone.IsSameAs(sut));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsSameAs_Identifies_Similar_Instances",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    var clone = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //act.\r\n    var same = sut.IsSameAs(clone) \u0026\u0026 clone.IsSameAs(sut);\r\n    //assert.\r\n    Assert.True(same);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Expects_Exact_Number_Of_Groups_Not_Less",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForApplyArgumentValues_LessThanNeededGroups();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForApplyArgumentValues_LessThanNeededGroups.Method_With_Arguments)), featureInstance);\r\n    var number = 123;\r\n    var text = \u0022Ana\u0022;\r\n    var date = new DateTime(2018, 5, 23);\r\n    var stepText = FeatureForApplyArgumentValues_LessThanNeededGroups.StepMethodText.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{number}\u0022).Replace(@\u0022(\\w\u002B)\u0022, $\u0022{text}\u0022);\r\n    var step = new Gherkin.Ast.Step(null, \u0022Then\u0022, stepText, null);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.DigestScenarioStepValues(step));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_Primitive_Values",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForApplyArgumentValues();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForApplyArgumentValues.Method_With_Arguments)), featureInstance);\r\n    var number = 123;\r\n    var text = \u0022Ana\u0022;\r\n    var date = new DateTime(2018, 5, 23);\r\n    var stepText = FeatureForApplyArgumentValues.StepMethodText.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{number}\u0022).Replace(@\u0022(\\w\u002B)\u0022, $\u0022{text}\u0022).Replace(@\u0022([\\d/]\u002B)\u0022, $\u0022{date.Month}/{date.Day}/{date.Year}\u0022);\r\n    var step = new Gherkin.Ast.Step(null, keyword, stepText, null);\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(stepText, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Execute_Invokes_StepMethod",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForExecuteTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForExecuteTest.Call_This_Method)), featureInstance);\r\n    //act.\r\n    await sut.ExecuteAsync();\r\n    //assert.\r\n    Assert.True(featureInstance.Called);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetDigestedStepText_Throws_Error_If_Not_Yet_Digested",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new Feature_For_GetDigestedStepTextTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(Feature_For_GetDigestedStepTextTest.When_Something_Method)), featureInstance);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.GetDigestedStepText());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDataTableScenarioStep.When_DataTable_Is_Expected)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_DataTable_Value",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDataTableScenarioStep.When_DataTable_Is_Expected)), featureInstance);\r\n    var step = new Gherkin.Ast.Step(null, \u0022When\u0022, FeatureWithDataTableScenarioStep.Steptext, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) }));\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(FeatureWithDataTableScenarioStep.Steptext, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDocStringScenarioStep.Step_With_DocString_Argument)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_DocString_Value",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDocStringScenarioStep.Step_With_DocString_Argument)), featureInstance);\r\n    var docStringContent = @\u0022some content\n\u002B\u002B\u002B\nwith multi lines\n---\nin it\u0022;\r\n    var step = new Gherkin.Ast.Step(null, \u0022Given\u0022, FeatureWithDocStringScenarioStep.StepWithDocStringText, new Gherkin.Ast.DocString(null, null, docStringContent));\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(FeatureWithDocStringScenarioStep.StepWithDocStringText, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_Multiple_Patterns",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithMultipleStepPatterns();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithMultipleStepPatterns.Step_With_Multiple_Patterns)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.Equal(10, sut.ScenarioStepPatterns.Count);\r\n    AssertPattern(0, PatternKind.Given, \u0022something\u0022);\r\n    AssertPattern(1, PatternKind.Given, \u0022something else\u0022);\r\n    AssertPattern(2, PatternKind.And, \u0022something\u0022);\r\n    AssertPattern(3, PatternKind.And, \u0022something else\u0022);\r\n    AssertPattern(4, PatternKind.When, \u0022something\u0022);\r\n    AssertPattern(5, PatternKind.When, \u0022something else\u0022);\r\n    AssertPattern(6, PatternKind.And, \u0022something\u0022);\r\n    AssertPattern(7, PatternKind.And, \u0022something else\u0022);\r\n    AssertPattern(8, PatternKind.But, \u0022something\u0022);\r\n    AssertPattern(9, PatternKind.But, \u0022something else\u0022);\r\n    void AssertPattern(int index, PatternKind patternKind, string pattern)\r\n    {\r\n        var thePattern = sut.ScenarioStepPatterns[index];\r\n        Assert.NotNull(thePattern);\r\n        Assert.Equal(patternKind, thePattern.Kind);\r\n        Assert.Equal(pattern, thePattern.OriginalPattern);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_DoesNotAllow_AsyncAvoid_Steps",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithAsyncVoidStep();\r\n    var methodInfo = typeof(FeatureWithAsyncVoidStep).GetMethod(nameof(FeatureWithAsyncVoidStep.StepWithAsyncVoid));\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StepMethodInfo.FromMethodInfo(methodInfo, featureInstance));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMethodName_Returns_Wrapped_Method_Name",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMethodName();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForMethodName.Step_Name_Must_Be_This)), featureInstance);\r\n    //act.\r\n    var methodName = sut.GetMethodName();\r\n    //assert.\r\n    Assert.Equal(nameof(FeatureForMethodName.Step_Name_Must_Be_This), methodName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMatchingPattern_Finds_Match_For_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.GetMatchingPattern(new Gherkin.Ast.Step(null, keyword, \u0022this matches\u0022, null));\r\n    //assert.\r\n    Assert.NotNull(match);\r\n    Assert.Equal(PatternKind.When, match.Kind);\r\n    Assert.Equal(\u0022this matches\u0022, match.OriginalPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMatchingPattern_Finds_Nothing_When_No_Match",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.GetMatchingPattern(new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022this does not matches\u0022, null));\r\n    //assert.\r\n    Assert.Null(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Match_IsPositive_For_Corresponding_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.Matches(new Gherkin.Ast.Step(null, keyword, \u0022this matches\u0022, null));\r\n    //assert.\r\n    Assert.True(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Match_IsNegative_For_Different_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.Matches(new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022this does not matches\u0022, null));\r\n    //assert.\r\n    Assert.False(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "StepMethodInfoTests",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "Ctor_Initializes_Properties",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.NotNull(sut.ScenarioStepPatterns);\r\n    Assert.Single(sut.ScenarioStepPatterns);\r\n    Assert.Equal(PatternKind.When, sut.ScenarioStepPatterns[0].Kind);\r\n    Assert.Equal(FeatureForCtorTest.WhenStepText, sut.ScenarioStepPatterns[0].OriginalPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Clone_Creates_Similar_Instance",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //act.\r\n    var clone = sut.Clone();\r\n    //assert.\r\n    Assert.NotNull(clone);\r\n    Assert.True(clone.IsSameAs(sut));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsSameAs_Identifies_Similar_Instances",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForCtorTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    var clone = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForCtorTest.When_Something)), featureInstance);\r\n    //act.\r\n    var same = sut.IsSameAs(clone) \u0026\u0026 clone.IsSameAs(sut);\r\n    //assert.\r\n    Assert.True(same);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Expects_Exact_Number_Of_Groups_Not_Less",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForApplyArgumentValues_LessThanNeededGroups();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForApplyArgumentValues_LessThanNeededGroups.Method_With_Arguments)), featureInstance);\r\n    var number = 123;\r\n    var text = \u0022Ana\u0022;\r\n    var date = new DateTime(2018, 5, 23);\r\n    var stepText = FeatureForApplyArgumentValues_LessThanNeededGroups.StepMethodText.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{number}\u0022).Replace(@\u0022(\\w\u002B)\u0022, $\u0022{text}\u0022);\r\n    var step = new Gherkin.Ast.Step(null, \u0022Then\u0022, stepText, null);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.DigestScenarioStepValues(step));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_Primitive_Values",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForApplyArgumentValues();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForApplyArgumentValues.Method_With_Arguments)), featureInstance);\r\n    var number = 123;\r\n    var text = \u0022Ana\u0022;\r\n    var date = new DateTime(2018, 5, 23);\r\n    var stepText = FeatureForApplyArgumentValues.StepMethodText.Replace(@\u0022(\\d\u002B)\u0022, $\u0022{number}\u0022).Replace(@\u0022(\\w\u002B)\u0022, $\u0022{text}\u0022).Replace(@\u0022([\\d/]\u002B)\u0022, $\u0022{date.Month}/{date.Day}/{date.Year}\u0022);\r\n    var step = new Gherkin.Ast.Step(null, keyword, stepText, null);\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(stepText, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Execute_Invokes_StepMethod",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForExecuteTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForExecuteTest.Call_This_Method)), featureInstance);\r\n    //act.\r\n    await sut.ExecuteAsync();\r\n    //assert.\r\n    Assert.True(featureInstance.Called);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetDigestedStepText_Throws_Error_If_Not_Yet_Digested",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new Feature_For_GetDigestedStepTextTest();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(Feature_For_GetDigestedStepTextTest.When_Something_Method)), featureInstance);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E sut.GetDigestedStepText());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_DataTable",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDataTableScenarioStep.When_DataTable_Is_Expected)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_DataTable_Value",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDataTableScenarioStep();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDataTableScenarioStep.When_DataTable_Is_Expected)), featureInstance);\r\n    var step = new Gherkin.Ast.Step(null, \u0022When\u0022, FeatureWithDataTableScenarioStep.Steptext, new Gherkin.Ast.DataTable(new Gherkin.Ast.TableRow[] { new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022First argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Second argument\u0022), new Gherkin.Ast.TableCell(null, \u0022Result\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u00221\u0022), new Gherkin.Ast.TableCell(null, \u00222\u0022), new Gherkin.Ast.TableCell(null, \u00223\u0022), }), new Gherkin.Ast.TableRow(null, new Gherkin.Ast.TableCell[] { new Gherkin.Ast.TableCell(null, \u0022a\u0022), new Gherkin.Ast.TableCell(null, \u0022b\u0022), new Gherkin.Ast.TableCell(null, \u0022c\u0022), }) }));\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(FeatureWithDataTableScenarioStep.Steptext, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_DocString",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDocStringScenarioStep.Step_With_DocString_Argument)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DigestScenarioStepValues_Sets_DocString_Value",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithDocStringScenarioStep();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithDocStringScenarioStep.Step_With_DocString_Argument)), featureInstance);\r\n    var docStringContent = @\u0022some content\n\u002B\u002B\u002B\nwith multi lines\n---\nin it\u0022;\r\n    var step = new Gherkin.Ast.Step(null, \u0022Given\u0022, FeatureWithDocStringScenarioStep.StepWithDocStringText, new Gherkin.Ast.DocString(null, null, docStringContent));\r\n    //act.\r\n    sut.DigestScenarioStepValues(step);\r\n    //assert.\r\n    var digestedText = sut.GetDigestedStepText();\r\n    Assert.Equal(FeatureWithDocStringScenarioStep.StepWithDocStringText, digestedText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_Creates_StepMethodInfo_With_Multiple_Patterns",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithMultipleStepPatterns();\r\n    //act.\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureWithMultipleStepPatterns.Step_With_Multiple_Patterns)), featureInstance);\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.Equal(10, sut.ScenarioStepPatterns.Count);\r\n    AssertPattern(0, PatternKind.Given, \u0022something\u0022);\r\n    AssertPattern(1, PatternKind.Given, \u0022something else\u0022);\r\n    AssertPattern(2, PatternKind.And, \u0022something\u0022);\r\n    AssertPattern(3, PatternKind.And, \u0022something else\u0022);\r\n    AssertPattern(4, PatternKind.When, \u0022something\u0022);\r\n    AssertPattern(5, PatternKind.When, \u0022something else\u0022);\r\n    AssertPattern(6, PatternKind.And, \u0022something\u0022);\r\n    AssertPattern(7, PatternKind.And, \u0022something else\u0022);\r\n    AssertPattern(8, PatternKind.But, \u0022something\u0022);\r\n    AssertPattern(9, PatternKind.But, \u0022something else\u0022);\r\n    void AssertPattern(int index, PatternKind patternKind, string pattern)\r\n    {\r\n        var thePattern = sut.ScenarioStepPatterns[index];\r\n        Assert.NotNull(thePattern);\r\n        Assert.Equal(patternKind, thePattern.Kind);\r\n        Assert.Equal(pattern, thePattern.OriginalPattern);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromMethodInfo_DoesNotAllow_AsyncAvoid_Steps",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureWithAsyncVoidStep();\r\n    var methodInfo = typeof(FeatureWithAsyncVoidStep).GetMethod(nameof(FeatureWithAsyncVoidStep.StepWithAsyncVoid));\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StepMethodInfo.FromMethodInfo(methodInfo, featureInstance));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMethodName_Returns_Wrapped_Method_Name",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMethodName();\r\n    var sut = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(FeatureForMethodName.Step_Name_Must_Be_This)), featureInstance);\r\n    //act.\r\n    var methodName = sut.GetMethodName();\r\n    //assert.\r\n    Assert.Equal(nameof(FeatureForMethodName.Step_Name_Must_Be_This), methodName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMatchingPattern_Finds_Match_For_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.GetMatchingPattern(new Gherkin.Ast.Step(null, keyword, \u0022this matches\u0022, null));\r\n    //assert.\r\n    Assert.NotNull(match);\r\n    Assert.Equal(PatternKind.When, match.Kind);\r\n    Assert.Equal(\u0022this matches\u0022, match.OriginalPattern);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetMatchingPattern_Finds_Nothing_When_No_Match",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.GetMatchingPattern(new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022this does not matches\u0022, null));\r\n    //assert.\r\n    Assert.Null(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Match_IsPositive_For_Corresponding_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.Matches(new Gherkin.Ast.Step(null, keyword, \u0022this matches\u0022, null));\r\n    //assert.\r\n    Assert.True(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Match_IsNegative_For_Different_Step",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new FeatureForMatch();\r\n    var sut = StepMethodInfo.FromMethodInfo(typeof(FeatureForMatch).GetMethod(nameof(FeatureForMatch.Method1)), featureInstance);\r\n    //act.\r\n    var match = sut.Matches(new Gherkin.Ast.Step(null, \u0022When\u0022, \u0022this does not matches\u0022, null));\r\n    //assert.\r\n    Assert.False(match);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "StepMethodKindExtensionsTests",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "ToStepMethodKind_Converts_based_on_Attribute_type",
        "Body": "{\r\n    //act.\r\n    var actualKind = PatternKindExtensions.ToPatternKind(attribute);\r\n    //assert.\r\n    Assert.Equal(kind, actualKind);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Match_Is_Comparing_With_String_Keyword",
        "Body": "{\r\n    //act.\r\n    var actualMatch = patternKind.Matches(keyword);\r\n    //assert.\r\n    Assert.Equal(expectedMatch, actualMatch);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Feature_For_ExecuteAsync_Test",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "ExecuteAsync_Executes_StepMethodInfo",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new Feature_For_ExecuteAsync_Test();\r\n    var stepMethodInfo = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(Feature_For_ExecuteAsync_Test.But_This_Method)), featureInstance);\r\n    var sut = StepMethod.FromStepMethodInfo(stepMethodInfo, new Gherkin.Ast.Step(null, \u0022But\u0022, \u0022what 123 exactly\u0022, null));\r\n    //act.\r\n    await sut.ExecuteAsync();\r\n    //assert.\r\n    Assert.True(featureInstance.Called);\r\n    Assert.Equal(123, featureInstance.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromStepMethodInfo_Creates_Instance_When_Step_Matches",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new Feature_For_FromStepMethodInfo();\r\n    var stepMethodInfo = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(Feature_For_FromStepMethodInfo.Step_With_Multiple_Patterns)), featureInstance);\r\n    //act.\r\n    var sut = StepMethod.FromStepMethodInfo(stepMethodInfo, new Gherkin.Ast.Step(null, keyword, \u0022something 123 else\u0022, null));\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.Equal(stepMethodInfo.ScenarioStepPatterns[1].Kind, sut.Kind);\r\n    Assert.Equal(stepMethodInfo.ScenarioStepPatterns[1].OriginalPattern, sut.Pattern);\r\n    Assert.Equal(\u0022something 123 else\u0022, sut.StepText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromStepMethodInfo_Throws_When_Method_Cannot_Match_Pattern",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new Feature_For_FromStepMethodInfo();\r\n    var stepMethodInfo = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(Feature_For_FromStepMethodInfo.Step_With_Multiple_Patterns)), featureInstance);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StepMethod.FromStepMethodInfo(stepMethodInfo, new Gherkin.Ast.Step(null, \u0022Given\u0022, \u0022something else NOT\u0022, null)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Feature_For_FromStepMethodInfo",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "ExecuteAsync_Executes_StepMethodInfo",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new Feature_For_ExecuteAsync_Test();\r\n    var stepMethodInfo = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(Feature_For_ExecuteAsync_Test.But_This_Method)), featureInstance);\r\n    var sut = StepMethod.FromStepMethodInfo(stepMethodInfo, new Gherkin.Ast.Step(null, \u0022But\u0022, \u0022what 123 exactly\u0022, null));\r\n    //act.\r\n    await sut.ExecuteAsync();\r\n    //assert.\r\n    Assert.True(featureInstance.Called);\r\n    Assert.Equal(123, featureInstance.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromStepMethodInfo_Creates_Instance_When_Step_Matches",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new Feature_For_FromStepMethodInfo();\r\n    var stepMethodInfo = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(Feature_For_FromStepMethodInfo.Step_With_Multiple_Patterns)), featureInstance);\r\n    //act.\r\n    var sut = StepMethod.FromStepMethodInfo(stepMethodInfo, new Gherkin.Ast.Step(null, keyword, \u0022something 123 else\u0022, null));\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.Equal(stepMethodInfo.ScenarioStepPatterns[1].Kind, sut.Kind);\r\n    Assert.Equal(stepMethodInfo.ScenarioStepPatterns[1].OriginalPattern, sut.Pattern);\r\n    Assert.Equal(\u0022something 123 else\u0022, sut.StepText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromStepMethodInfo_Throws_When_Method_Cannot_Match_Pattern",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new Feature_For_FromStepMethodInfo();\r\n    var stepMethodInfo = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(Feature_For_FromStepMethodInfo.Step_With_Multiple_Patterns)), featureInstance);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StepMethod.FromStepMethodInfo(stepMethodInfo, new Gherkin.Ast.Step(null, \u0022Given\u0022, \u0022something else NOT\u0022, null)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "StepMethodTests",
    "Message": null,
    "ProjectName": "Xunit.Gherkin.Quick.UnitTests",
    "Methods": [
      {
        "Name": "ExecuteAsync_Executes_StepMethodInfo",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new Feature_For_ExecuteAsync_Test();\r\n    var stepMethodInfo = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(Feature_For_ExecuteAsync_Test.But_This_Method)), featureInstance);\r\n    var sut = StepMethod.FromStepMethodInfo(stepMethodInfo, new Gherkin.Ast.Step(null, \u0022But\u0022, \u0022what 123 exactly\u0022, null));\r\n    //act.\r\n    await sut.ExecuteAsync();\r\n    //assert.\r\n    Assert.True(featureInstance.Called);\r\n    Assert.Equal(123, featureInstance.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromStepMethodInfo_Creates_Instance_When_Step_Matches",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new Feature_For_FromStepMethodInfo();\r\n    var stepMethodInfo = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(Feature_For_FromStepMethodInfo.Step_With_Multiple_Patterns)), featureInstance);\r\n    //act.\r\n    var sut = StepMethod.FromStepMethodInfo(stepMethodInfo, new Gherkin.Ast.Step(null, keyword, \u0022something 123 else\u0022, null));\r\n    //assert.\r\n    Assert.NotNull(sut);\r\n    Assert.Equal(stepMethodInfo.ScenarioStepPatterns[1].Kind, sut.Kind);\r\n    Assert.Equal(stepMethodInfo.ScenarioStepPatterns[1].OriginalPattern, sut.Pattern);\r\n    Assert.Equal(\u0022something 123 else\u0022, sut.StepText);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FromStepMethodInfo_Throws_When_Method_Cannot_Match_Pattern",
        "Body": "{\r\n    //arrange.\r\n    var featureInstance = new Feature_For_FromStepMethodInfo();\r\n    var stepMethodInfo = StepMethodInfo.FromMethodInfo(featureInstance.GetType().GetMethod(nameof(Feature_For_FromStepMethodInfo.Step_With_Multiple_Patterns)), featureInstance);\r\n    //act / assert.\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StepMethod.FromStepMethodInfo(stepMethodInfo, new Gherkin.Ast.Step(null, \u0022Given\u0022, \u0022something else NOT\u0022, null)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  }
]