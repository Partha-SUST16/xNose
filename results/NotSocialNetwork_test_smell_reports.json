[
  {
    "Name": "GetFavoriteSuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Core.Tests",
    "Methods": [
      {
        "Name": "GetPublicationsWithFavorites_GetPublicationsByAuthorId_Publications",
        "Body": "{\r\n    // Arrange\r\n    _allPublications.AddRange(_publicationsWithAuthor);\r\n    foreach (var publication in _publicationsWithAuthor)\r\n        _author.Favorites.Add(publication);\r\n    var getablePublication = new Mock\u003CIGetablePublication\u003E();\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var getFavorite = new GetFavorite(getablePublication.Object, getableUser.Object);\r\n    getableUser.Setup(u =\u003E u.GetById(_author.Id)).Returns(_author);\r\n    getablePublication.Setup(p =\u003E p.GetAllByAuthorId(_author.Id)).Returns(_publicationsWithAuthor);\r\n    // Act\r\n    var result = getFavorite.GetPublicationsWithFavorites(_author.Id);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.Equal(_publicationsWithAuthor, result);\r\n    Assert.NotEqual(_allPublications, result);\r\n    Assert.NotEqual(4, result.Count());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetAuthorCount_GetAuthorCount_AuthorCount",
        "Body": "{\r\n    // Arrange\r\n    _allPublications.AddRange(_publicationsWithAuthor);\r\n    _publicationsWithAuthor.FirstOrDefault().Favorites = new List\u003CUserEntity\u003E();\r\n    _publicationsWithAuthor.FirstOrDefault().Favorites.Add(_author);\r\n    var validPublicationCount = 1;\r\n    var inValidPublicationCount = 0;\r\n    var getablePublication = new Mock\u003CIGetablePublication\u003E();\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var getFavorite = new GetFavorite(getablePublication.Object, getableUser.Object);\r\n    getablePublication.Setup(p =\u003E p.GetById(_publicationsWithAuthor.FirstOrDefault().Id)).Returns(_publicationsWithAuthor.FirstOrDefault());\r\n    getableUser.Setup(p =\u003E p.GetAll()).Returns(new List\u003CUserEntity\u003E() { _author, new UserEntity() });\r\n    // Act\r\n    var result = getFavorite.GetAuthorCount(_publicationsWithAuthor.FirstOrDefault().Id);\r\n    // Assert\r\n    Assert.NotEqual(inValidPublicationCount, result);\r\n    Assert.Equal(validPublicationCount, result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetAuthors_GetAuthorsByPublicationId_Authors",
        "Body": "{\r\n    // Arrange\r\n    _allPublications.AddRange(_publicationsWithAuthor);\r\n    _publicationsWithAuthor.FirstOrDefault().Favorites.Add(_author);\r\n    var getablePublication = new Mock\u003CIGetablePublication\u003E();\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var getFavorite = new GetFavorite(getablePublication.Object, getableUser.Object);\r\n    getablePublication.Setup(p =\u003E p.GetById(_publicationsWithAuthor.FirstOrDefault().Id)).Returns(_publicationsWithAuthor.FirstOrDefault());\r\n    getableUser.Setup(p =\u003E p.GetAll()).Returns(new List\u003CUserEntity\u003E() { _author, new UserEntity() });\r\n    // Act\r\n    var result = getFavorite.GetAuthors(_publicationsWithAuthor.FirstOrDefault().Id);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.Equal(_author, result.FirstOrDefault());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetIsFavorite_GetIsFavoriteIfPublicationContainFavoriteByAuthorId_True",
        "Body": "{\r\n    // Arrange\r\n    _publicationsWithAuthor.FirstOrDefault().Favorites.Add(_author);\r\n    var getablePublication = new Mock\u003CIGetablePublication\u003E();\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var getFavorite = new GetFavorite(getablePublication.Object, getableUser.Object);\r\n    getablePublication.Setup(gp =\u003E gp.GetById(_publicationsWithAuthor.FirstOrDefault().Id)).Returns(_publicationsWithAuthor.FirstOrDefault());\r\n    var favoriteDTO = new FavoriteDTO()\r\n    {\r\n        PublicationId = _publicationsWithAuthor.FirstOrDefault().Id,\r\n        UserId = _author.Id,\r\n    };\r\n    // Act\r\n    var result = getFavorite.GetIsFavorite(favoriteDTO);\r\n    // Assert\r\n    Assert.True(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetIsFavorite_GetIsFavoriteIfPublicationHaveNotFavoriteByAuthorId_False",
        "Body": "{\r\n    // Arrange\r\n    var getablePublication = new Mock\u003CIGetablePublication\u003E();\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var getFavorite = new GetFavorite(getablePublication.Object, getableUser.Object);\r\n    getablePublication.Setup(gp =\u003E gp.GetById(_publicationsWithAuthor.FirstOrDefault().Id)).Returns(_publicationsWithAuthor.FirstOrDefault());\r\n    var favoriteDTO = new FavoriteDTO()\r\n    {\r\n        PublicationId = _publicationsWithAuthor.FirstOrDefault().Id,\r\n        UserId = Guid.NewGuid(),\r\n    };\r\n    // Act\r\n    var result = getFavorite.GetIsFavorite(favoriteDTO);\r\n    // Assert\r\n    Assert.False(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "LikeFavoriteSuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Core.Tests",
    "Methods": [
      {
        "Name": "LikeOrUnlike_LikeIfNotHaveFavorite_FavoriteEntity",
        "Body": "{\r\n    // Arrange\r\n    var getUser = new Mock\u003CIGetableUser\u003E();\r\n    var getPublication = new Mock\u003CIGetablePublication\u003E();\r\n    var getFavorite = new Mock\u003CIGetableFavorite\u003E();\r\n    var repository = new Mock\u003CIRepositoryAsync\u003CPublicationEntity\u003E\u003E();\r\n    var likeFavorite = new LikeFavorite(getUser.Object, getPublication.Object, getFavorite.Object, repository.Object);\r\n    getUser.Setup(gu =\u003E gu.GetById(_author.Id)).Returns(_author);\r\n    getPublication.Setup(gp =\u003E gp.GetById(_publications.FirstOrDefault().Id)).Returns(_publications.FirstOrDefault());\r\n    getFavorite.Setup(gf =\u003E gf.GetPublicationsWithFavorites(_author.Id)).Throws(new FavoritesNotFoundException(\u0022Favorites not found\u0022));\r\n    getFavorite.Setup(gf =\u003E gf.GetAuthors(_publications.FirstOrDefault().Id)).Throws(new FavoritesNotFoundException(\u0022Favorites not found\u0022));\r\n    // Act\r\n    var result = likeFavorite.LikeOrUnlike(_favorite);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.True(result.IsLike);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LikeOrUnlike_UnlikeIfHaveFavorite_FavoriteEntity",
        "Body": "{\r\n    // Arrange\r\n    var getUser = new Mock\u003CIGetableUser\u003E();\r\n    var getPublication = new Mock\u003CIGetablePublication\u003E();\r\n    var getFavorite = new Mock\u003CIGetableFavorite\u003E();\r\n    var repository = new Mock\u003CIRepositoryAsync\u003CPublicationEntity\u003E\u003E();\r\n    var likeFavorite = new LikeFavorite(getUser.Object, getPublication.Object, getFavorite.Object, repository.Object);\r\n    getUser.Setup(gu =\u003E gu.GetById(_author.Id)).Returns(_author);\r\n    getPublication.Setup(gp =\u003E gp.GetById(_publications.FirstOrDefault().Id)).Returns(_publications.FirstOrDefault());\r\n    getFavorite.Setup(gf =\u003E gf.GetPublicationsWithFavorites(_author.Id)).Returns(_publications);\r\n    // Act\r\n    var result = likeFavorite.LikeOrUnlike(_favorite);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.False(result.IsLike);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "GetFavoriteUnsuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Core.Tests",
    "Methods": [
      {
        "Name": "GetPublicationsWithFavorites_GetPublicationsByAuthorIdIfAuthorDontHaveFavorites_FavoritesNotFoundException",
        "Body": "{\r\n    // Arrange\r\n    var getablePublication = new Mock\u003CIGetablePublication\u003E();\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var getFavorite = new GetFavorite(getablePublication.Object, getableUser.Object);\r\n    getableUser.Setup(u =\u003E u.GetById(_author.Id)).Returns(_author);\r\n    // Act\r\n    Action act = () =\u003E getFavorite.GetPublicationsWithFavorites(_author.Id);\r\n    // Assert\r\n    Assert.Throws\u003CFavoritesNotFoundException\u003E(act);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetAuthorCount_GetPublicationCountIfPublicationDontHaveFavorites_FavoritesNotFoundException",
        "Body": "{\r\n    // Arrange\r\n    var getablePublication = new Mock\u003CIGetablePublication\u003E();\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var getFavorite = new GetFavorite(getablePublication.Object, getableUser.Object);\r\n    getablePublication.Setup(p =\u003E p.GetById(_publications.FirstOrDefault().Id)).Returns(_publications.FirstOrDefault());\r\n    // Act\r\n    Action act = () =\u003E getFavorite.GetAuthorCount(_publications.FirstOrDefault().Id);\r\n    // Assert\r\n    Assert.Throws\u003CFavoritesNotFoundException\u003E(act);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetAuthors_GetAuthorsIfPublicationDontHaveFavorites_FavoritesNotFoundException",
        "Body": "{\r\n    // Arrange\r\n    var getablePublication = new Mock\u003CIGetablePublication\u003E();\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var getFavorite = new GetFavorite(getablePublication.Object, getableUser.Object);\r\n    getablePublication.Setup(p =\u003E p.GetById(_publications.FirstOrDefault().Id)).Returns(_publications.FirstOrDefault());\r\n    // Act\r\n    Action act = () =\u003E getFavorite.GetAuthors(_publications.FirstOrDefault().Id);\r\n    // Assert\r\n    Assert.Throws\u003CFavoritesNotFoundException\u003E(act);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetIsFavorite_GetIsFavoriteIfPublicationNotFound_ObjectNotFoundException",
        "Body": "{\r\n    // Arrange\r\n    var getablePublication = new Mock\u003CIGetablePublication\u003E();\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var getFavorite = new GetFavorite(getablePublication.Object, getableUser.Object);\r\n    getablePublication.Setup(gp =\u003E gp.GetById(_favoriteDTO.PublicationId)).Throws(new ObjectNotFoundException(\u0022Publication not found\u0022));\r\n    //Act\r\n    Action act = () =\u003E getFavorite.GetIsFavorite(_favoriteDTO);\r\n    // Assert\r\n    Assert.Throws\u003CObjectNotFoundException\u003E(act);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AddPublicationSuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Core.Tests",
    "Methods": [
      {
        "Name": "AddAsync_AddPublication_Publication",
        "Body": "{\r\n    // Arrange\r\n    var getablePublication = new Mock\u003CIGetablePublication\u003E();\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var publicationRepository = new Mock\u003CIRepositoryAsync\u003CPublicationEntity\u003E\u003E();\r\n    var imageRepositorySystem = new Mock\u003CIImageRepositorySystemAsync\u003E();\r\n    var addPublication = new AddPublication(getablePublication.Object, getableUser.Object, publicationRepository.Object, imageRepositorySystem.Object);\r\n    // Act\r\n    var result = await addPublication.AddAsync(_publication);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.Equal(_publication, result);\r\n    Assert.Equal(_publication.Id, result.Id);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "EditPublicationSuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Core.Tests",
    "Methods": [
      {
        "Name": "UpdateAsync_UpdatePublication_Publication",
        "Body": "{\r\n    // Arrange\r\n    var getablePublication = new Mock\u003CIGetablePublication\u003E();\r\n    var publicationRepository = new Mock\u003CIRepositoryAsync\u003CPublicationEntity\u003E\u003E();\r\n    var editPublication = new EditPublication(getablePublication.Object, publicationRepository.Object);\r\n    getablePublication.Setup(gp =\u003E gp.GetById(_publication.Id)).Returns(_publication);\r\n    // Act\r\n    var result = await editPublication.UpdateAsync(_publication);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.Equal(_publication, result);\r\n    Assert.Equal(_publication.Id, result.Id);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteAsync_DeletePublication_Publication",
        "Body": "{\r\n    // Arrange\r\n    var getablePublication = new Mock\u003CIGetablePublication\u003E();\r\n    var publicationRepository = new Mock\u003CIRepositoryAsync\u003CPublicationEntity\u003E\u003E();\r\n    var editPublication = new EditPublication(getablePublication.Object, publicationRepository.Object);\r\n    getablePublication.Setup(gp =\u003E gp.GetById(_publication.Id)).Returns(_publication);\r\n    // Act\r\n    var result = await editPublication.DeleteAsync(_publication.Id);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.Equal(_publication, result);\r\n    Assert.Equal(_publication.Id, result.Id);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "GetPublicationSuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Core.Tests",
    "Methods": [
      {
        "Name": "GetAll_GetAllPublications_Publications",
        "Body": "{\r\n    // Arrange\r\n    var publicationRepository = new Mock\u003CIRepositoryAsync\u003CPublicationEntity\u003E\u003E();\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var getPublication = new GetPublication(publicationRepository.Object, getableUser.Object);\r\n    publicationRepository.Setup(r =\u003E r.GetAll()).Returns(_publications.AsQueryable());\r\n    // Act\r\n    var result = getPublication.GetAll();\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.Equal(_publications, result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetById_GetPublication_Publication",
        "Body": "{\r\n    // Arrange\r\n    var publicationRepository = new Mock\u003CIRepositoryAsync\u003CPublicationEntity\u003E\u003E();\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var getPublication = new GetPublication(publicationRepository.Object, getableUser.Object);\r\n    publicationRepository.Setup(r =\u003E r.GetAll()).Returns(_publications.AsQueryable());\r\n    // Act\r\n    var result = getPublication.GetById(_publications.ElementAt(0).Id);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.Equal(_publications.ElementAt(0), result);\r\n    Assert.Equal(_publications.ElementAt(0).Id, result.Id);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetAllByAuthorId_GetPublications_Publications",
        "Body": "{\r\n    // Arrange\r\n    var publicationRepository = new Mock\u003CIRepositoryAsync\u003CPublicationEntity\u003E\u003E();\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var getPublication = new GetPublication(publicationRepository.Object, getableUser.Object);\r\n    publicationRepository.Setup(r =\u003E r.GetAll()).Returns(_publications.AsQueryable());\r\n    // Act\r\n    var result = getPublication.GetAllByAuthorId(_publications.ElementAt(0).Author.Id);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.NotEqual(_publications, result);\r\n    Assert.Equal(_publications.ElementAt(0), result.ElementAt(0));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetByPagination_GetPubilcations_Pubilcations",
        "Body": "{\r\n    // Arrange\r\n    var publicationRepository = new Mock\u003CIRepositoryAsync\u003CPublicationEntity\u003E\u003E();\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var getPublication = new GetPublication(publicationRepository.Object, getableUser.Object);\r\n    publicationRepository.Setup(r =\u003E r.GetAll()).Returns(_publications.AsQueryable());\r\n    // Act\r\n    var result = getPublication.GetByPagination(0);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.Equal(_publications, result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AddPublicationUnsuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Core.Tests",
    "Methods": [
      {
        "Name": "AddAsync_AddInvalidPublication_ObjectAlreadyExistException",
        "Body": "{\r\n    // Arrange\r\n    var getablePublication = new Mock\u003CIGetablePublication\u003E();\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var publicationRepository = new Mock\u003CIRepositoryAsync\u003CPublicationEntity\u003E\u003E();\r\n    var imageRepositorySystem = new Mock\u003CIImageRepositorySystemAsync\u003E();\r\n    getablePublication.Setup(gp =\u003E gp.GetAll()).Returns(_publications);\r\n    var addPublication = new AddPublication(getablePublication.Object, getableUser.Object, publicationRepository.Object, imageRepositorySystem.Object);\r\n    Func\u003CTask\u003E act = async () =\u003E await addPublication.AddAsync(_publications.ElementAt(0));\r\n    // Assert\r\n    await Assert.ThrowsAsync\u003CObjectAlreadyExistException\u003E(act);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "EditPublicationUnsuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Core.Tests",
    "Methods": [
      {
        "Name": "UpdateAsync_UpdateInvalidPublication_ObjectNotFoundException",
        "Body": "{\r\n    // Arrange\r\n    var getablePublication = new Mock\u003CIGetablePublication\u003E();\r\n    var publicationRepository = new Mock\u003CIRepositoryAsync\u003CPublicationEntity\u003E\u003E();\r\n    var editPublication = new EditPublication(getablePublication.Object, publicationRepository.Object);\r\n    getablePublication.Setup(gp =\u003E gp.GetById(_publication.Id)).Throws(new ObjectNotFoundException($\u0022Publication by Id: {_publication.Id} not found.\u0022));\r\n    // Act\r\n    Func\u003CTask\u003E act = async () =\u003E await editPublication.UpdateAsync(_publication);\r\n    // Assert\r\n    await Assert.ThrowsAsync\u003CObjectNotFoundException\u003E(act);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteAsync_DeleteInvalidPublication_ObjectNotFoundException",
        "Body": "{\r\n    // Arrange\r\n    var getablePublication = new Mock\u003CIGetablePublication\u003E();\r\n    var publicationRepository = new Mock\u003CIRepositoryAsync\u003CPublicationEntity\u003E\u003E();\r\n    var editPublication = new EditPublication(getablePublication.Object, publicationRepository.Object);\r\n    getablePublication.Setup(gp =\u003E gp.GetById(_publication.Id)).Throws(new ObjectNotFoundException($\u0022Publication by Id: {_publication.Id} not found.\u0022));\r\n    // Act\r\n    Func\u003CTask\u003E act = async () =\u003E await editPublication.DeleteAsync(_publication.Id);\r\n    // Assert\r\n    await Assert.ThrowsAsync\u003CObjectNotFoundException\u003E(act);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "GetPublicationUnsuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Core.Tests",
    "Methods": [
      {
        "Name": "GetById_GetInvalidPublication_ObjectNotFoundException",
        "Body": "{\r\n    // Arrange\r\n    var publicationRepository = new Mock\u003CIRepositoryAsync\u003CPublicationEntity\u003E\u003E();\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var getPublication = new GetPublication(publicationRepository.Object, getableUser.Object);\r\n    // Act\r\n    Action act = () =\u003E getPublication.GetById(_publications.ElementAt(0).Id);\r\n    // Assert\r\n    Assert.Throws\u003CObjectNotFoundException\u003E(act);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetAllByAuthorId_GetPublicationsByInvalidAuthorId_ObjectNotFoundException",
        "Body": "{\r\n    // Arrange\r\n    var publicationRepository = new Mock\u003CIRepositoryAsync\u003CPublicationEntity\u003E\u003E();\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var getPublication = new GetPublication(publicationRepository.Object, getableUser.Object);\r\n    // Act\r\n    Action act = () =\u003E getPublication.GetAllByAuthorId(_publications.ElementAt(0).Id);\r\n    // Assert\r\n    Assert.Throws\u003CObjectNotFoundException\u003E(act);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetAllByAuthorId_GetPublicationsIfAuthorHaveNotPublications_ObjectNotFoundException",
        "Body": "{\r\n    // Arrange\r\n    var publicationRepository = new Mock\u003CIRepositoryAsync\u003CPublicationEntity\u003E\u003E();\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var getPublication = new GetPublication(publicationRepository.Object, getableUser.Object);\r\n    publicationRepository.Setup(r =\u003E r.GetAll()).Returns(_publications.AsQueryable());\r\n    // Act\r\n    Action act = () =\u003E getPublication.GetAllByAuthorId(_authorWithoutPublications.Id);\r\n    // Assert\r\n    Assert.Throws\u003CObjectNotFoundException\u003E(act);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetByPagination_GetPublicationsIfIndexLessZero_InvalidOperationException",
        "Body": "{\r\n    // Arrange\r\n    var publicationRepository = new Mock\u003CIRepositoryAsync\u003CPublicationEntity\u003E\u003E();\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var getPublication = new GetPublication(publicationRepository.Object, getableUser.Object);\r\n    publicationRepository.Setup(r =\u003E r.GetAll()).Returns(_publications.AsQueryable());\r\n    int invalidIndex = -1;\r\n    // Act\r\n    Action act = () =\u003E getPublication.GetByPagination(invalidIndex);\r\n    // Assert\r\n    Assert.Throws\u003CInvalidOperationException\u003E(act);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetByPagination_GetPublicationsIfPublicationsEnded_ObjectNotFoundException",
        "Body": "{\r\n    // Arrange\r\n    var publicationRepository = new Mock\u003CIRepositoryAsync\u003CPublicationEntity\u003E\u003E();\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var getPublication = new GetPublication(publicationRepository.Object, getableUser.Object);\r\n    publicationRepository.Setup(r =\u003E r.GetAll()).Returns(_publications.AsQueryable());\r\n    int bigIndex = 10;\r\n    // Act\r\n    Action act = () =\u003E getPublication.GetByPagination(bigIndex);\r\n    // Assert\r\n    Assert.Throws\u003CObjectNotFoundException\u003E(act);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AddUserSuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Core.Tests",
    "Methods": [
      {
        "Name": "AddAsync_AddUser_User",
        "Body": "{\r\n    // Arrange\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var userRepository = new Mock\u003CIRepositoryAsync\u003CUserEntity\u003E\u003E();\r\n    var imageRepositorySystem = new Mock\u003CIImageRepositorySystemAsync\u003E();\r\n    var addUser = new AddUser(getableUser.Object, userRepository.Object, imageRepositorySystem.Object);\r\n    // Act\r\n    var result = await addUser.AddAsync(_user);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.Equal(_user, result);\r\n    Assert.Equal(_user.Id, result.Id);\r\n    Assert.Equal(\u0022Name\u0022, result.Name);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "EditUserSuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Core.Tests",
    "Methods": [
      {
        "Name": "UpdateAsync_UpdateUser_User",
        "Body": "{\r\n    // Arrange\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var userRepository = new Mock\u003CIRepositoryAsync\u003CUserEntity\u003E\u003E();\r\n    var editUser = new EditUser(getableUser.Object, userRepository.Object);\r\n    getableUser.Setup(gu =\u003E gu.GetById(_user.Id)).Returns(_user);\r\n    _user.Name = \u0022TestName\u0022;\r\n    // Act\r\n    var result = await editUser.UpdateAsync(_user);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.Equal(_user, result);\r\n    Assert.Equal(_user.Id, result.Id);\r\n    Assert.Equal(_user.Name, result.Name);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteAsync_DeleteUser_User",
        "Body": "{\r\n    // Arrange\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var userRepository = new Mock\u003CIRepositoryAsync\u003CUserEntity\u003E\u003E();\r\n    var userService = new EditUser(getableUser.Object, userRepository.Object);\r\n    getableUser.Setup(gu =\u003E gu.GetById(_user.Id)).Returns(_user);\r\n    // Act\r\n    var result = await userService.DeleteAsync(_user.Id);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.Equal(_user, result);\r\n    Assert.Equal(_user.Id, result.Id);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "GetUserSuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Core.Tests",
    "Methods": [
      {
        "Name": "GetAll_GetAllUsers_Users",
        "Body": "{\r\n    // Arrange\r\n    var userRepository = new Mock\u003CIRepositoryAsync\u003CUserEntity\u003E\u003E();\r\n    var getUser = new GetUser(userRepository.Object);\r\n    userRepository.Setup(r =\u003E r.GetAll()).Returns(_users.AsQueryable());\r\n    // Act\r\n    var result = getUser.GetAll();\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.Equal(_users, result);\r\n    Assert.Equal(\u0022Name1\u0022, result.ElementAt(0).Name);\r\n    Assert.Equal(\u0022Name2\u0022, result.ElementAt(1).Name);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetById_GetUser_User",
        "Body": "{\r\n    // Arrange\r\n    var userRepository = new Mock\u003CIRepositoryAsync\u003CUserEntity\u003E\u003E();\r\n    var getUser = new GetUser(userRepository.Object);\r\n    userRepository.Setup(r =\u003E r.GetAll()).Returns(_users.AsQueryable());\r\n    // Act\r\n    var result = getUser.GetById(_users.ToList().ElementAt(0).Id);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.Equal(_users.ToList().ElementAt(0), result);\r\n    Assert.Equal(_users.ElementAt(0).Id, result.Id);\r\n    Assert.Equal(_users.ElementAt(0).Name, result.Name);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetByEmail_GetUser_User",
        "Body": "{\r\n    // Arrange\r\n    var userRepository = new Mock\u003CIRepositoryAsync\u003CUserEntity\u003E\u003E();\r\n    var getUser = new GetUser(userRepository.Object);\r\n    var usersQueryable = _users.AsQueryable();\r\n    userRepository.Setup(r =\u003E r.GetAll()).Returns(usersQueryable);\r\n    // Act\r\n    var result = getUser.GetByEmail(_users.ElementAt(0).Email);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.Equal(_users.ElementAt(0).Email, result.Email);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetByPagination_GetUsers_Users",
        "Body": "{\r\n    // Arrange\r\n    var userRepository = new Mock\u003CIRepositoryAsync\u003CUserEntity\u003E\u003E();\r\n    var getUser = new GetUser(userRepository.Object);\r\n    userRepository.Setup(r =\u003E r.GetAll()).Returns(_users.AsQueryable());\r\n    // Act\r\n    var result = getUser.GetByPagination(0);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.Equal(_users, result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AddUserUnsuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Core.Tests",
    "Methods": [
      {
        "Name": "AddAsync_AddInvalidUser_ObjectAlreadyExistException",
        "Body": "{\r\n    // Arrange\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var userRepository = new Mock\u003CIRepositoryAsync\u003CUserEntity\u003E\u003E();\r\n    var imageRepositorySystem = new Mock\u003CIImageRepositorySystemAsync\u003E();\r\n    var addUser = new AddUser(getableUser.Object, userRepository.Object, imageRepositorySystem.Object);\r\n    getableUser.Setup(gu =\u003E gu.GetAll()).Returns(_users);\r\n    // Act\r\n    Func\u003CTask\u003E act = async () =\u003E await addUser.AddAsync(_users.ElementAt(0));\r\n    // Assert\r\n    await Assert.ThrowsAsync\u003CObjectAlreadyExistException\u003E(act);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "EditUserUnsuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Core.Tests",
    "Methods": [
      {
        "Name": "DeleteAsync_DeleteInvalidUser_ObjectNotFoundException",
        "Body": "{\r\n    // Arrange\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var userRepository = new Mock\u003CIRepositoryAsync\u003CUserEntity\u003E\u003E();\r\n    var editUser = new EditUser(getableUser.Object, userRepository.Object);\r\n    getableUser.Setup(gu =\u003E gu.GetById(_user.Id)).Throws(new ObjectNotFoundException($\u0022User by Id:{_user.Id} not found.\u0022));\r\n    // Act\r\n    Func\u003CTask\u003E act = async () =\u003E await editUser.DeleteAsync(_user.Id);\r\n    // Assert\r\n    await Assert.ThrowsAsync\u003CObjectNotFoundException\u003E(act);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateAsync_UpdateInvalidUser_ObjectNotFoundException",
        "Body": "{\r\n    // Arrange\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var userRepository = new Mock\u003CIRepositoryAsync\u003CUserEntity\u003E\u003E();\r\n    var editUser = new EditUser(getableUser.Object, userRepository.Object);\r\n    getableUser.Setup(gu =\u003E gu.GetById(_user.Id)).Throws(new ObjectNotFoundException($\u0022User by Id:{_user.Id} not found.\u0022));\r\n    _user.Name = \u0022TestName\u0022;\r\n    // Act\r\n    Func\u003CTask\u003E act = async () =\u003E await editUser.UpdateAsync(_user);\r\n    // Assert\r\n    await Assert.ThrowsAsync\u003CObjectNotFoundException\u003E(act);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "GetUserUnsuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Core.Tests",
    "Methods": [
      {
        "Name": "GetById_GetInvalidUser_ObjectNotFoundException",
        "Body": "{\r\n    // Arrange\r\n    var userRepository = new Mock\u003CIRepositoryAsync\u003CUserEntity\u003E\u003E();\r\n    var getUser = new GetUser(userRepository.Object);\r\n    // Act\r\n    Action act = () =\u003E getUser.GetById(_user.Id);\r\n    // Assert\r\n    Assert.Throws\u003CObjectNotFoundException\u003E(act);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetByEmail_GetInvalidUser_ObjectNotFoundException",
        "Body": "{\r\n    // Arrange\r\n    var userRepository = new Mock\u003CIRepositoryAsync\u003CUserEntity\u003E\u003E();\r\n    var getUser = new GetUser(userRepository.Object);\r\n    // Act\r\n    Action act = () =\u003E getUser.GetByEmail(_user.Email);\r\n    // Assert\r\n    Assert.Throws\u003CObjectNotFoundException\u003E(act);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetByPagination_GetUsersIfIndexLessZero_InvalidOperationException",
        "Body": "{\r\n    // Arrange\r\n    var userRepository = new Mock\u003CIRepositoryAsync\u003CUserEntity\u003E\u003E();\r\n    var getUser = new GetUser(userRepository.Object);\r\n    int invalidIndex = -1;\r\n    // Act\r\n    Action act = () =\u003E getUser.GetByPagination(invalidIndex);\r\n    // Assert\r\n    Assert.Throws\u003CInvalidOperationException\u003E(act);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetByPagination_GetUsersIfUsersEnded_ObjectNotFoundException",
        "Body": "{\r\n    // Arrange\r\n    var userRepository = new Mock\u003CIRepositoryAsync\u003CUserEntity\u003E\u003E();\r\n    var getUser = new GetUser(userRepository.Object);\r\n    int bigIndex = 10;\r\n    userRepository.Setup(r =\u003E r.GetAll()).Returns(_users.AsQueryable());\r\n    // Act\r\n    Action act = () =\u003E getUser.GetByPagination(bigIndex);\r\n    // Assert\r\n    Assert.Throws\u003CObjectNotFoundException\u003E(act);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "EFCoreRepositoryTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Infrastructure.Tests",
    "Methods": [
      {
        "Name": "GetAll_GetAllObjects_Objects",
        "Body": "{\r\n    // Arrange\r\n    var repository = new EFCoreRepository\u003CUserEntity\u003E(_appDbContext);\r\n    // Act\r\n    var result = repository.GetAll();\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.Equal(_users, result);\r\n    Assert.Equal(2, result.Count());\r\n    Assert.Equal(\u0022Name2\u0022, result.ToList().ElementAt(1).Name);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddAsync_AddObject_Object",
        "Body": "{\r\n    // Arrange\r\n    var repository = new EFCoreRepository\u003CUserEntity\u003E(_appDbContext);\r\n    // Act\r\n    var result = await repository.AddAsync(_user);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.Equal(_user, result);\r\n    Assert.Equal(\u0022Name\u0022, result.Name);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteAsync_DeleteObject_Object",
        "Body": "{\r\n    // Arrange\r\n    var repository = new EFCoreRepository\u003CUserEntity\u003E(_appDbContext);\r\n    // Act\r\n    var result = await repository.DeleteAsync(_users.First().Id);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.Equal(_users.First(), result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetAsync_GetObject_Object",
        "Body": "{\r\n    // Arrange\r\n    var repository = new EFCoreRepository\u003CUserEntity\u003E(_appDbContext);\r\n    // Act\r\n    var result = await repository.GetAsync(_users.First().Id);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.Equal(\u0022Name1\u0022, result.Name);\r\n    Assert.Equal(_users.First().Id, result.Id);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateAsync_UpdateObject_Object",
        "Body": "{\r\n    // Arrange\r\n    var repository = new EFCoreRepository\u003CUserEntity\u003E(_appDbContext);\r\n    var user = new UserEntity()\r\n    {\r\n        Id = _users.First().Id,\r\n        Name = \u0022TestName\u0022,\r\n    };\r\n    // Act\r\n    var result = await repository.UpdateAsync(user);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.Equal(\u0022TestName\u0022, result.Name);\r\n    Assert.NotEqual(_users.First(), result);\r\n    Assert.Equal(_users.First().Id, result.Id);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ImageRepositorySystemSuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Infrastructure.Tests",
    "Methods": [
      {
        "Name": "GetAsync_GetImageById_Image",
        "Body": "{\r\n    // Arrange\r\n    var imageRepository = new Mock\u003CIRepositoryAsync\u003CImageEntity\u003E\u003E();\r\n    var imageRepositorySystem = new ImageRepositorySystem(imageRepository.Object);\r\n    imageRepository.Setup(ir =\u003E ir.GetAsync(_image.Id)).ReturnsAsync(_image);\r\n    // Act\r\n    var result = await imageRepositorySystem.GetAsync(_image.Id);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.Equal(_image, result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TrySaveAsync_SaveImage_Image",
        "Body": "{\r\n    // Arrange\r\n    var imageRepository = new Mock\u003CIRepositoryAsync\u003CImageEntity\u003E\u003E();\r\n    var imageRepositorySystem = new ImageRepositorySystem(imageRepository.Object);\r\n    // Act\r\n    var result = await imageRepositorySystem.TrySaveAsync(_image);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.Equal(_image, result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TryUpdateAsync_UpdateImage_NewImage",
        "Body": "{\r\n    // Arrange\r\n    var imageRepository = new Mock\u003CIRepositoryAsync\u003CImageEntity\u003E\u003E();\r\n    var imageRepositorySystem = new ImageRepositorySystem(imageRepository.Object);\r\n    imageRepository.Setup(ir =\u003E ir.DeleteAsync(_updateImage.OldFile.Id)).ReturnsAsync(_image);\r\n    imageRepository.Setup(ir =\u003E ir.AddAsync(_updateImage.NewFile as ImageEntity)).ReturnsAsync(_image);\r\n    // Act\r\n    var result = await imageRepositorySystem.TryUpdateAsync(_updateImage);\r\n    // Assert\r\n    Assert.Equal(_updateImage.NewFile.Id, result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TryDeleteAsync_DeleteImageById_Id",
        "Body": "{\r\n    // Arrange\r\n    var imageRepository = new Mock\u003CIRepositoryAsync\u003CImageEntity\u003E\u003E();\r\n    var imageRepositorySystem = new ImageRepositorySystem(imageRepository.Object);\r\n    // Act\r\n    var result = await imageRepositorySystem.TryDeleteAsync(_image.Id);\r\n    // Assert\r\n    Assert.Equal(_image.Id, result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "JwtSystemTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Infrastructure.Tests",
    "Methods": [
      {
        "Name": "GenerateToken_GenerateTokenIfUserIsValid_Token",
        "Body": "{\r\n    // Arrange.\r\n    var jwtSystem = new JwtSystem();\r\n    // Act.\r\n    var result = jwtSystem.GenerateToken(_user);\r\n    // Assert.\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003Cstring\u003E(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ImageFileSystemUnsuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Infrastructure.Tests",
    "Methods": [
      {
        "Name": "DeleteAsync_DeleteIfFileNotFound_ObjectNotFoundException",
        "Body": "{\r\n    // Arrange\r\n    var imageRepository = new Mock\u003CIRepositoryAsync\u003CImageEntity\u003E\u003E();\r\n    var imageFileSystem = new ImageFileSystem(imageRepository.Object);\r\n    imageRepository.Setup(ir =\u003E ir.GetAsync(_image.Id)).ReturnsAsync(_image);\r\n    // Act\r\n    Func\u003CTask\u003E act = async () =\u003E await imageFileSystem.DeleteAsync(_image.Id, \u0022SomePath\u0022);\r\n    // Assert\r\n    await Assert.ThrowsAsync\u003CObjectNotFoundException\u003E(act);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ImageRepositorySystemUnsuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Infrastructure.Tests",
    "Methods": [
      {
        "Name": "GetAsync_GetImageByIdIfNotFound_ObjectNotFoundException",
        "Body": "{\r\n    // Arrange\r\n    var imageRepository = new Mock\u003CIRepositoryAsync\u003CImageEntity\u003E\u003E();\r\n    var imageRepositorySystem = new ImageRepositorySystem(imageRepository.Object);\r\n    // Act\r\n    Func\u003CTask\u003E act = async () =\u003E await imageRepositorySystem.GetAsync(_image.Id);\r\n    // Assert\r\n    await Assert.ThrowsAsync\u003CObjectNotFoundException\u003E(act);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TrySaveAsync_ReturnDefaultImageIfImageIsNull_DefaultImage",
        "Body": "{\r\n    // Arrange\r\n    var imageRepository = new Mock\u003CIRepositoryAsync\u003CImageEntity\u003E\u003E();\r\n    var imageRepositorySystem = new ImageRepositorySystem(imageRepository.Object);\r\n    imageRepository.Setup(ir =\u003E ir.GetAsync(_defaultImage.Id)).ReturnsAsync(_defaultImage);\r\n    // Act\r\n    var result = await imageRepositorySystem.TrySaveAsync(null);\r\n    // Assert\r\n    Assert.Equal(DefaultImageConfig.DEFAULT_IMAGE_ID, result.Id);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TrySaveAsync_AddImageIfImageAlreadyExist_ObjectAlreadyExistException",
        "Body": "{\r\n    // Arrange\r\n    var imageRepository = new Mock\u003CIRepositoryAsync\u003CImageEntity\u003E\u003E();\r\n    var imageRepositorySystem = new ImageRepositorySystem(imageRepository.Object);\r\n    imageRepository.Setup(ir =\u003E ir.GetAll()).Returns(_images.AsQueryable());\r\n    // Act\r\n    Func\u003CTask\u003E act = async () =\u003E await imageRepositorySystem.TrySaveAsync(_images.ElementAt(0));\r\n    // Assert\r\n    await Assert.ThrowsAsync\u003CObjectAlreadyExistException\u003E(act);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TryUpdateAsync_UpdateIfNewFileIsNull_OldFileId",
        "Body": "{\r\n    // Arrange\r\n    var imageRepository = new Mock\u003CIRepositoryAsync\u003CImageEntity\u003E\u003E();\r\n    var imageRepositorySystem = new ImageRepositorySystem(imageRepository.Object);\r\n    imageRepository.Setup(ir =\u003E ir.DeleteAsync(_updateImage.OldFile.Id)).ReturnsAsync(_image);\r\n    imageRepository.Setup(ir =\u003E ir.AddAsync(_updateImage.NewFile as ImageEntity)).ReturnsAsync(_image);\r\n    // Act\r\n    var result = await imageRepositorySystem.TryUpdateAsync(_updateImage);\r\n    // Assert\r\n    Assert.Equal(_updateImage.OldFile.Id, result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PublicationControllerTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "Get_GetJsonFile_JsonFile",
        "Body": "{\r\n    var response = await _client.GetAsync(url \u002B \u0022/index=0\u0022);\r\n    Assert.Equal(HttpStatusCode.OK, response.StatusCode);\r\n    Assert.Equal(\u0022application/json; charset=utf-8\u0022, response.Content.Headers.ContentType.ToString());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AdminPublicationControllerSuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "Update_UpdatePublication_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var editablePublication = new Mock\u003CIEditablePublicationAsync\u003E();\r\n    var getablePublication = new Mock\u003CIGetablePublication\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    getablePublication.Setup(ep =\u003E ep.GetById(_publicationEntities.ElementAt(0).Id)).Returns(_publicationEntities.ElementAt(0));\r\n    var adminPublicationController = new AdminPublicationController(editablePublication.Object, getablePublication.Object, mapper.Object);\r\n    // Act\r\n    var result = await adminPublicationController.Update(_updatePublicationDTO);\r\n    // Assert\r\n    Assert.NotNull(adminPublicationController);\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003COkObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Delete_DeletePublicationById_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var editablePublication = new Mock\u003CIEditablePublicationAsync\u003E();\r\n    var getablePublication = new Mock\u003CIGetablePublication\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    getablePublication.Setup(ep =\u003E ep.GetById(_publicationEntities.ElementAt(0).Id)).Returns(_publicationEntities.ElementAt(0));\r\n    var adminPublicationController = new AdminPublicationController(editablePublication.Object, getablePublication.Object, mapper.Object);\r\n    // Act\r\n    var result = await adminPublicationController.Delete(_publicationEntities.ElementAt(0).Id);\r\n    // Assert\r\n    Assert.NotNull(adminPublicationController);\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003COkObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AdminPublicationControllerUnsuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "Update_UpdateIfPublicationNotFound_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var editPublication = new Mock\u003CIEditablePublicationAsync\u003E();\r\n    var getPublication = new Mock\u003CIGetablePublication\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var adminPublicationController = new AdminPublicationController(editPublication.Object, getPublication.Object, mapper.Object);\r\n    getPublication.Setup(gp =\u003E gp.GetById(_updatePublicationDTO.Id)).Throws(new ObjectNotFoundException(\u0022Publication not found.\u0022));\r\n    // Act\r\n    var result = await adminPublicationController.Update(_updatePublicationDTO);\r\n    // Assert\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Delete_DeleteIfPublicationNotFound_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var editPublication = new Mock\u003CIEditablePublicationAsync\u003E();\r\n    var getPublication = new Mock\u003CIGetablePublication\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var adminPublicationController = new AdminPublicationController(editPublication.Object, getPublication.Object, mapper.Object);\r\n    editPublication.Setup(ep =\u003E ep.DeleteAsync(_updatePublicationDTO.Id)).Throws(new ObjectNotFoundException(\u0022Publication not found.\u0022));\r\n    // Act\r\n    var result = await adminPublicationController.Delete(_updatePublicationDTO.Id);\r\n    // Assert\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AdminPublicationControllerSuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "Get_GetAllPublications_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var getablePublication = new Mock\u003CIGetablePublication\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    getablePublication.Setup(gp =\u003E gp.GetAll()).Returns(_publicationEntities);\r\n    mapper.Setup(p =\u003E p.Map\u003CIEnumerable\u003CPublicationDTO\u003E\u003E(_publicationEntities)).Returns(_publicationsDTO);\r\n    var adminPublicationController = new AdminPublicationController(getablePublication.Object, mapper.Object);\r\n    // Act\r\n    var results = adminPublicationController.Get();\r\n    // Assert\r\n    Assert.NotNull(adminPublicationController);\r\n    Assert.NotNull(results);\r\n    Assert.IsType\u003COkObjectResult\u003E(results.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_GetPublicationById_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var getablePublication = new Mock\u003CIGetablePublication\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    getablePublication.Setup(gp =\u003E gp.GetById(_publicationEntities.ElementAt(0).Id)).Returns(_publicationEntities.ElementAt(0));\r\n    mapper.Setup(m =\u003E m.Map\u003CPublicationDTO\u003E(_publicationEntities.ElementAt(0))).Returns(_publicationsDTO.ElementAt(0));\r\n    var adminPublicationController = new AdminPublicationController(getablePublication.Object, mapper.Object);\r\n    // Act\r\n    var result = adminPublicationController.Get(_publicationEntities.ElementAt(0).Id);\r\n    // Assert\r\n    Assert.NotNull(adminPublicationController);\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003COkObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetAllByAuthorId_GetAllByAuthorId_Publications_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var getablePublication = new Mock\u003CIGetablePublication\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    getablePublication.Setup(gp =\u003E gp.GetAllByAuthorId(_publicationEntities.ElementAt(0).Author.Id)).Returns(_publicationEntities);\r\n    mapper.Setup(m =\u003E m.Map\u003CPublicationDTO\u003E(_publicationEntities.ElementAt(0))).Returns(_publicationsDTO.ElementAt(0));\r\n    var adminPublicationController = new AdminPublicationController(getablePublication.Object, mapper.Object);\r\n    // Act\r\n    var result = adminPublicationController.GetAllByAuthor(_publicationEntities.ElementAt(0).Author.Id);\r\n    // Assert\r\n    Assert.NotNull(adminPublicationController);\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003COkObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AdminPublicationControllerUnsuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "Get_GetPublicationsIfPublicationsNoMore_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var getPublication = new Mock\u003CIGetablePublication\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var adminPublicationController = new AdminPublicationController(getPublication.Object, mapper.Object);\r\n    var validIndex = 0;\r\n    getPublication.Setup(gp =\u003E gp.GetByPagination(validIndex)).Throws(new ObjectNotFoundException(\u0022No more publications.\u0022));\r\n    // Act\r\n    var result = adminPublicationController.Get(validIndex);\r\n    // Assert\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_GetPublicationsIfIndexInvalid_BadRequest400",
        "Body": "{\r\n    // Arrange\r\n    var getPublication = new Mock\u003CIGetablePublication\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var adminPublicationController = new AdminPublicationController(getPublication.Object, mapper.Object);\r\n    var invalidIndex = -1;\r\n    getPublication.Setup(gp =\u003E gp.GetByPagination(invalidIndex)).Throws(new InvalidOperationException(\u0022Invalid index.\u0022));\r\n    // Act\r\n    var result = adminPublicationController.Get(invalidIndex);\r\n    // Assert\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_GetByIdIfPublicationNotFound_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var getPublication = new Mock\u003CIGetablePublication\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var adminPublicationController = new AdminPublicationController(getPublication.Object, mapper.Object);\r\n    getPublication.Setup(gp =\u003E gp.GetById(_publication.Id)).Throws(new ObjectNotFoundException(\u0022Publication not found.\u0022));\r\n    // Act\r\n    var result = adminPublicationController.Get(_publication.Id);\r\n    // Assert\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_GetByIdIfAuthorDontHavePublications_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var getPublication = new Mock\u003CIGetablePublication\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var adminPublicationController = new AdminPublicationController(getPublication.Object, mapper.Object);\r\n    getPublication.Setup(gp =\u003E gp.GetAllByAuthorId(_publication.Author.Id)).Throws(new ObjectNotFoundException(\u0022Author dont have a publications.\u0022));\r\n    // Act\r\n    var result = adminPublicationController.GetAllByAuthor(_publication.Author.Id);\r\n    // Assert\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AdminUserControllerSuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "Update_UpdateUser_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var editableUser = new Mock\u003CIEditableUserAsync\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    editableUser.Setup(eu =\u003E eu.UpdateAsync(_user).Result).Returns(_user);\r\n    var adminUserController = new AdminUserController(editableUser.Object, mapper.Object);\r\n    // Act\r\n    var result = await adminUserController.Update(_user);\r\n    // Assert\r\n    Assert.NotNull(adminUserController);\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003COkObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Delete_DeleteUserById_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var editableUser = new Mock\u003CIEditableUserAsync\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    editableUser.Setup(eu =\u003E eu.DeleteAsync(_user.Id).Result).Returns(_user);\r\n    var adminUserController = new AdminUserController(editableUser.Object, mapper.Object);\r\n    // Act\r\n    var result = await adminUserController.Delete(_user.Id);\r\n    // Assert\r\n    Assert.NotNull(adminUserController);\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003COkObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AdminUserControllerUnsuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "Update_UpdateUser_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var editUser = new Mock\u003CIEditableUserAsync\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var adminUserController = new AdminUserController(editUser.Object, mapper.Object);\r\n    editUser.Setup(eu =\u003E eu.UpdateAsync(_user)).Throws(new ObjectNotFoundException(\u0022Some message.\u0022));\r\n    // Act\r\n    var result = await adminUserController.Update(_user);\r\n    // Assert\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Delete_DeleteUser_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var editUser = new Mock\u003CIEditableUserAsync\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var adminUserController = new AdminUserController(editUser.Object, mapper.Object);\r\n    editUser.Setup(eu =\u003E eu.DeleteAsync(_user.Id)).Throws(new ObjectNotFoundException(\u0022Some message.\u0022));\r\n    // Act\r\n    var result = await adminUserController.Delete(_user.Id);\r\n    // Assert\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AdminUserControllerSuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "Get_GetAllUsers_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    getableUser.Setup(gu =\u003E gu.GetAll()).Returns(_users);\r\n    var adminUserController = new AdminUserController(getableUser.Object, mapper.Object);\r\n    // Act\r\n    var results = adminUserController.Get();\r\n    // Assert\r\n    Assert.NotNull(adminUserController);\r\n    Assert.NotNull(results);\r\n    Assert.IsType\u003COkObjectResult\u003E(results.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_GetUserById_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    getableUser.Setup(gu =\u003E gu.GetById(_user.Id)).Returns(_user);\r\n    var adminUserController = new AdminUserController(getableUser.Object, mapper.Object);\r\n    // Act\r\n    var result = adminUserController.Get(_user.Id);\r\n    // Assert\r\n    Assert.NotNull(adminUserController);\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003COkObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AdminUserControllerUnsuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "Get_GetUsersIfUsersNoMore_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var getUser = new Mock\u003CIGetableUser\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var adminUserController = new AdminUserController(getUser.Object, mapper.Object);\r\n    var invalidIndex = -1;\r\n    getUser.Setup(gu =\u003E gu.GetByPagination(invalidIndex)).Throws(new ObjectNotFoundException(\u0022Invalid index.\u0022));\r\n    // Act\r\n    var result = adminUserController.Get(invalidIndex);\r\n    // Assert\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_GetUsersIfIndexInvalid_BadRequest400",
        "Body": "{\r\n    // Arrange\r\n    var getUser = new Mock\u003CIGetableUser\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var adminUserController = new AdminUserController(getUser.Object, mapper.Object);\r\n    var validIndex = 0;\r\n    getUser.Setup(gu =\u003E gu.GetByPagination(validIndex)).Throws(new ObjectNotFoundException(\u0022No more users.\u0022));\r\n    // Act\r\n    var result = adminUserController.Get(validIndex);\r\n    // Assert\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_GetUserByIdIfUserNotFound_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var getUser = new Mock\u003CIGetableUser\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var adminUserController = new AdminUserController(getUser.Object, mapper.Object);\r\n    getUser.Setup(gu =\u003E gu.GetById(_user.Id)).Throws(new ObjectNotFoundException(\u0022User not found.\u0022));\r\n    // Act\r\n    var result = adminUserController.Get(_user.Id);\r\n    // Assert\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AuthenticationControllerSuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "Login_LoginIfFound_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var jwtSystem = new Mock\u003CIJwtSystem\u003E();\r\n    var getUser = new Mock\u003CIGetableUser\u003E();\r\n    var authController = new AuthenticationController(jwtSystem.Object, getUser.Object);\r\n    getUser.Setup(gu =\u003E gu.GetByEmail(_loginDTO.Email)).Returns(_user);\r\n    jwtSystem.Setup(js =\u003E js.GenerateToken(_user));\r\n    // Act\r\n    var result = authController.Login(_loginDTO);\r\n    // Assert\r\n    Assert.IsType\u003COkObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AuthenticationControllerUnsuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "Login_LoginIfUserNotFound_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var jwtSystem = new Mock\u003CIJwtSystem\u003E();\r\n    var getUser = new Mock\u003CIGetableUser\u003E();\r\n    var authController = new AuthenticationController(jwtSystem.Object, getUser.Object);\r\n    getUser.Setup(gu =\u003E gu.GetByEmail(_loginDTO.Email)).Throws(new ObjectNotFoundException(\u0022Not found.\u0022));\r\n    jwtSystem.Setup(js =\u003E js.GenerateToken(_user));\r\n    // Act\r\n    var result = authController.Login(_loginDTO);\r\n    // Assert\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FavoriteControllerSuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "Get_GetPublicationsWithFavorites_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var getableFavorite = new Mock\u003CIGetableFavorite\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var favoriteController = new FavoriteController(getableFavorite.Object, mapper.Object);\r\n    // Act\r\n    var result = favoriteController.Get(Guid.NewGuid());\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003COkObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetAuthorCount_GetAuthorCountIfPublicationFound_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var getableFavorite = new Mock\u003CIGetableFavorite\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var favoriteController = new FavoriteController(getableFavorite.Object, mapper.Object);\r\n    // Act\r\n    var result = favoriteController.GetAuthorCount(Guid.NewGuid());\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003COkObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetAuthorCount_GetAuthorCountIfPublicationDontHaveFavorites_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var getableFavorite = new Mock\u003CIGetableFavorite\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var favoriteController = new FavoriteController(getableFavorite.Object, mapper.Object);\r\n    var validPublicationId = Guid.NewGuid();\r\n    getableFavorite.Setup(gf =\u003E gf.GetAuthorCount(validPublicationId)).Throws(new FavoritesNotFoundException(\u0022Favorites not found\u0022));\r\n    // Act\r\n    var result = favoriteController.GetAuthorCount(validPublicationId);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003COkObjectResult\u003E(result.Result);\r\n    Assert.Equal(0, result.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetAuthors_GetAuthorIfPublicationHave_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var getableFavorite = new Mock\u003CIGetableFavorite\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var favoriteController = new FavoriteController(getableFavorite.Object, mapper.Object);\r\n    // Act\r\n    var result = favoriteController.GetAuthors(Guid.NewGuid());\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003COkObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetIsFavorite_GetIsFavoriteIfPublicationContainAuthor_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var getableFavorite = new Mock\u003CIGetableFavorite\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var favoriteController = new FavoriteController(getableFavorite.Object, mapper.Object);\r\n    // Act\r\n    var result = favoriteController.GetIsFavorite(_favoriteDTO);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003COkObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FavoriteControllerUnsuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "Get_GetPublicationsIfAuthorNotFound_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var invalidAuthorId = Guid.NewGuid();\r\n    var getableFavorite = new Mock\u003CIGetableFavorite\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var favoriteController = new FavoriteController(getableFavorite.Object, mapper.Object);\r\n    getableFavorite.Setup(gf =\u003E gf.GetPublicationsWithFavorites(invalidAuthorId)).Throws(new ObjectNotFoundException(\u0022Author not found.\u0022));\r\n    // Act\r\n    var result = favoriteController.Get(invalidAuthorId);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_GetPublicationsWithFavorites_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var invalidAuthorId = Guid.NewGuid();\r\n    var getableFavorite = new Mock\u003CIGetableFavorite\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var favoriteController = new FavoriteController(getableFavorite.Object, mapper.Object);\r\n    getableFavorite.Setup(gf =\u003E gf.GetPublicationsWithFavorites(invalidAuthorId)).Throws(new FavoritesNotFoundException(\u0022Favorites not found.\u0022));\r\n    // Act\r\n    var result = favoriteController.Get(invalidAuthorId);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetAuthorCount_GetAuthorCountIfPublictionNotFound_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var invalidPublicationId = Guid.NewGuid();\r\n    var getableFavorite = new Mock\u003CIGetableFavorite\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var favoriteController = new FavoriteController(getableFavorite.Object, mapper.Object);\r\n    getableFavorite.Setup(gf =\u003E gf.GetAuthorCount(invalidPublicationId)).Throws(new ObjectNotFoundException(\u0022Publication not found.\u0022));\r\n    // Act\r\n    var result = favoriteController.GetAuthorCount(invalidPublicationId);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetAuthors_GetAuthorsIfPublicationsNotFound_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var invalidPublicationId = Guid.NewGuid();\r\n    var getableFavorite = new Mock\u003CIGetableFavorite\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var favoriteController = new FavoriteController(getableFavorite.Object, mapper.Object);\r\n    getableFavorite.Setup(gf =\u003E gf.GetAuthors(invalidPublicationId)).Throws(new ObjectNotFoundException(\u0022Publication not found.\u0022));\r\n    // Act\r\n    var result = favoriteController.GetAuthors(invalidPublicationId);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetAuthors_GetAuthorsIfPublicationsHaveNotFavorites_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var publicationId = Guid.NewGuid();\r\n    var getableFavorite = new Mock\u003CIGetableFavorite\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var favoriteController = new FavoriteController(getableFavorite.Object, mapper.Object);\r\n    getableFavorite.Setup(gf =\u003E gf.GetAuthors(publicationId)).Throws(new FavoritesNotFoundException(\u0022Publication dont have favorites.\u0022));\r\n    // Act\r\n    var result = favoriteController.GetAuthors(publicationId);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetIsFavorite_GetIsFavoriteIfPublicationNotFound_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var getableFavorite = new Mock\u003CIGetableFavorite\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var favoriteController = new FavoriteController(getableFavorite.Object, mapper.Object);\r\n    getableFavorite.Setup(gf =\u003E gf.GetIsFavorite(_favoriteDTO)).Throws(new ObjectNotFoundException(\u0022Publication not found.\u0022));\r\n    // Act\r\n    var result = favoriteController.GetIsFavorite(_favoriteDTO);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FavoriteControllerSuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "LikeOrUnlike_LikeOrUnlikeIfPublicationAndAuthoFound_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var likeableFavorite = new Mock\u003CILikeableFavorite\u003E();\r\n    var favoriteController = new FavoriteController(likeableFavorite.Object);\r\n    // Act\r\n    var result = favoriteController.LikeOrUnlike(_favoriteDTO);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003COkObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FavoriteControllerUnsuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "LikeOrUnlike_LikeOrUnlikeIfFavoriteDTONotFound_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var likeableFavorite = new Mock\u003CILikeableFavorite\u003E();\r\n    var favoriteController = new FavoriteController(likeableFavorite.Object);\r\n    likeableFavorite.Setup(lf =\u003E lf.LikeOrUnlike(_invalidFavoriteDTO)).Throws(new ObjectNotFoundException(\u0022Objects not found\u0022));\r\n    // Act\r\n    var result = favoriteController.LikeOrUnlike(_invalidFavoriteDTO);\r\n    // Assert\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PublicationControllerSuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "Add_AddPublication_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var addablePublication = new Mock\u003CIAddablePublicationAsync\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var publicationController = new PublicationController(addablePublication.Object, mapper.Object);\r\n    // Act\r\n    var result = await publicationController.Add(_addPublicationDTO);\r\n    // Assert\r\n    Assert.NotNull(publicationController);\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003COkObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PublicationControllerUnsuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "Add_AddPublicationIfPublicationAlreadyExist_BadRequest400",
        "Body": "{\r\n    // Arrange\r\n    var addablePublication = new Mock\u003CIAddablePublicationAsync\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var publicationController = new PublicationController(addablePublication.Object, mapper.Object);\r\n    mapper.Setup(m =\u003E m.Map\u003CPublicationEntity\u003E(_addPublicationDTO)).Returns(_publication);\r\n    addablePublication.Setup(ap =\u003E ap.AddAsync(_publication)).Throws(new ObjectAlreadyExistException(\u0022Publication already exist.\u0022));\r\n    // Act\r\n    var result = await publicationController.Add(_addPublicationDTO);\r\n    // Assert\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Add_AddPublicationIfAuthorNotFound_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var addablePublication = new Mock\u003CIAddablePublicationAsync\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var publicationController = new PublicationController(addablePublication.Object, mapper.Object);\r\n    mapper.Setup(m =\u003E m.Map\u003CPublicationEntity\u003E(_addPublicationDTO)).Returns(_publication);\r\n    addablePublication.Setup(ap =\u003E ap.AddAsync(_publication)).Throws(new ObjectNotFoundException(\u0022Author not found.\u0022));\r\n    // Act\r\n    var result = await publicationController.Add(_addPublicationDTO);\r\n    // Assert\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PublicationControllerSuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "Update_UpdatePublication_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var editablePublication = new Mock\u003CIEditablePublicationAsync\u003E();\r\n    var getablePublication = new Mock\u003CIGetablePublication\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    getablePublication.Setup(ep =\u003E ep.GetById(_publicationEntities.ElementAt(0).Id)).Returns(_publicationEntities.ElementAt(0));\r\n    var publicationController = new PublicationController(editablePublication.Object, getablePublication.Object, mapper.Object);\r\n    // Act\r\n    var result = await publicationController.Update(_updatePublicationDTO);\r\n    // Assert\r\n    Assert.NotNull(publicationController);\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003COkObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Delete_DeletePublicationById_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var editablePublication = new Mock\u003CIEditablePublicationAsync\u003E();\r\n    var getablePublication = new Mock\u003CIGetablePublication\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    getablePublication.Setup(ep =\u003E ep.GetById(_publicationEntities.ElementAt(0).Id)).Returns(_publicationEntities.ElementAt(0));\r\n    var publicationController = new PublicationController(editablePublication.Object, getablePublication.Object, mapper.Object);\r\n    // Act\r\n    var result = await publicationController.Delete(_publicationEntities.ElementAt(0).Id);\r\n    // Assert\r\n    Assert.NotNull(publicationController);\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003COkObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PublicationControllerUnsuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "Update_UpdateIfPublicationNotFound_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var editPublication = new Mock\u003CIEditablePublicationAsync\u003E();\r\n    var getPublication = new Mock\u003CIGetablePublication\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var publicationController = new PublicationController(editPublication.Object, getPublication.Object, mapper.Object);\r\n    getPublication.Setup(gp =\u003E gp.GetById(_updatePublicationDTO.Id)).Throws(new ObjectNotFoundException(\u0022Publication not found.\u0022));\r\n    // Act\r\n    var result = await publicationController.Update(_updatePublicationDTO);\r\n    // Assert\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Delete_DeleteIfPublicationNotFound_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var editPublication = new Mock\u003CIEditablePublicationAsync\u003E();\r\n    var getPublication = new Mock\u003CIGetablePublication\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var publicationController = new PublicationController(editPublication.Object, getPublication.Object, mapper.Object);\r\n    editPublication.Setup(ep =\u003E ep.DeleteAsync(_updatePublicationDTO.Id)).Throws(new ObjectNotFoundException(\u0022Publication not found.\u0022));\r\n    // Act\r\n    var result = await publicationController.Delete(_updatePublicationDTO.Id);\r\n    // Assert\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PublicationControllerSuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "Get_GetAllPublications_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var getablePublication = new Mock\u003CIGetablePublication\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    getablePublication.Setup(gp =\u003E gp.GetAll()).Returns(_publicationEntities);\r\n    mapper.Setup(p =\u003E p.Map\u003CIEnumerable\u003CPublicationDTO\u003E\u003E(_publicationEntities)).Returns(_publicationsDTO);\r\n    var publicationController = new PublicationController(getablePublication.Object, mapper.Object);\r\n    // Act\r\n    var results = publicationController.Get();\r\n    // Assert\r\n    Assert.NotNull(publicationController);\r\n    Assert.NotNull(results);\r\n    Assert.IsType\u003COkObjectResult\u003E(results.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_GetPublicationById_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var getablePublication = new Mock\u003CIGetablePublication\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    getablePublication.Setup(gp =\u003E gp.GetById(_publicationEntities.ElementAt(0).Id)).Returns(_publicationEntities.ElementAt(0));\r\n    mapper.Setup(m =\u003E m.Map\u003CPublicationDTO\u003E(_publicationEntities.ElementAt(0))).Returns(_publicationsDTO.ElementAt(0));\r\n    var publicationController = new PublicationController(getablePublication.Object, mapper.Object);\r\n    // Act\r\n    var result = publicationController.Get(_publicationEntities.ElementAt(0).Id);\r\n    // Assert\r\n    Assert.NotNull(publicationController);\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003COkObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetAllByAuthorId_GetAllByAuthorId_Publications_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var getablePublication = new Mock\u003CIGetablePublication\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    getablePublication.Setup(gp =\u003E gp.GetAllByAuthorId(_publicationEntities.ElementAt(0).Author.Id)).Returns(_publicationEntities);\r\n    mapper.Setup(m =\u003E m.Map\u003CPublicationDTO\u003E(_publicationEntities.ElementAt(0))).Returns(_publicationsDTO.ElementAt(0));\r\n    var publicationController = new PublicationController(getablePublication.Object, mapper.Object);\r\n    // Act\r\n    var result = publicationController.GetAllByAuthor(_publicationEntities.ElementAt(0).Author.Id);\r\n    // Assert\r\n    Assert.NotNull(publicationController);\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003COkObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PublicationControllerUnsuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "Get_GetPublicationsIfPublicationsNoMore_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var getPublication = new Mock\u003CIGetablePublication\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var publicationController = new PublicationController(getPublication.Object, mapper.Object);\r\n    var validIndex = 0;\r\n    getPublication.Setup(gp =\u003E gp.GetByPagination(validIndex)).Throws(new ObjectNotFoundException(\u0022No more publications.\u0022));\r\n    // Act\r\n    var result = publicationController.Get(validIndex);\r\n    // Assert\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_GetPublicationsIfIndexInvalid_BadRequest400",
        "Body": "{\r\n    // Arrange\r\n    var getPublication = new Mock\u003CIGetablePublication\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var publicationController = new PublicationController(getPublication.Object, mapper.Object);\r\n    var invalidIndex = -1;\r\n    getPublication.Setup(gp =\u003E gp.GetByPagination(invalidIndex)).Throws(new InvalidOperationException(\u0022Invalid index.\u0022));\r\n    // Act\r\n    var result = publicationController.Get(invalidIndex);\r\n    // Assert\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_GetByIdIfPublicationNotFound_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var getPublication = new Mock\u003CIGetablePublication\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var publicationController = new PublicationController(getPublication.Object, mapper.Object);\r\n    getPublication.Setup(gp =\u003E gp.GetById(_publication.Id)).Throws(new ObjectNotFoundException(\u0022Publication not found.\u0022));\r\n    // Act\r\n    var result = publicationController.Get(_publication.Id);\r\n    // Assert\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_GetByIdIfAuthorDontHavePublications_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var getPublication = new Mock\u003CIGetablePublication\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var publicationController = new PublicationController(getPublication.Object, mapper.Object);\r\n    getPublication.Setup(gp =\u003E gp.GetAllByAuthorId(_publication.Author.Id)).Throws(new ObjectNotFoundException(\u0022Author dont have a publications.\u0022));\r\n    // Act\r\n    var result = publicationController.GetAllByAuthor(_publication.Author.Id);\r\n    // Assert\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UserControllerSuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "Update_UpdateUser_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var editableUser = new Mock\u003CIEditableUserAsync\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    editableUser.Setup(eu =\u003E eu.UpdateAsync(_user).Result).Returns(_user);\r\n    var userController = new UserController(editableUser.Object, mapper.Object);\r\n    // Act\r\n    var result = await userController.Update(_user);\r\n    // Assert\r\n    Assert.NotNull(userController);\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003COkObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Delete_DeleteUserById_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var editableUser = new Mock\u003CIEditableUserAsync\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    editableUser.Setup(eu =\u003E eu.DeleteAsync(_user.Id).Result).Returns(_user);\r\n    var userController = new UserController(editableUser.Object, mapper.Object);\r\n    // Act\r\n    var result = await userController.Delete(_user.Id);\r\n    // Assert\r\n    Assert.NotNull(userController);\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003COkObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UserControllerUnsuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "Update_UpdateUser_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var editUser = new Mock\u003CIEditableUserAsync\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var userController = new UserController(editUser.Object, mapper.Object);\r\n    editUser.Setup(eu =\u003E eu.UpdateAsync(_user)).Throws(new ObjectNotFoundException(\u0022Some message.\u0022));\r\n    // Act\r\n    var result = await userController.Update(_user);\r\n    // Assert\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Delete_DeleteUser_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var editUser = new Mock\u003CIEditableUserAsync\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var userController = new UserController(editUser.Object, mapper.Object);\r\n    editUser.Setup(eu =\u003E eu.DeleteAsync(_user.Id)).Throws(new ObjectNotFoundException(\u0022Some message.\u0022));\r\n    // Act\r\n    var result = await userController.Delete(_user.Id);\r\n    // Assert\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UserControllerSuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "Get_GetAllUsers_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    getableUser.Setup(gu =\u003E gu.GetAll()).Returns(_users);\r\n    var userController = new UserController(getableUser.Object, mapper.Object);\r\n    // Act\r\n    var results = userController.Get();\r\n    // Assert\r\n    Assert.NotNull(userController);\r\n    Assert.NotNull(results);\r\n    Assert.IsType\u003COkObjectResult\u003E(results.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_GetUserById_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var getableUser = new Mock\u003CIGetableUser\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    getableUser.Setup(gu =\u003E gu.GetById(_user.Id)).Returns(_user);\r\n    var userController = new UserController(getableUser.Object, mapper.Object);\r\n    // Act\r\n    var result = userController.Get(_user.Id);\r\n    // Assert\r\n    Assert.NotNull(userController);\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003COkObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UserControllerUnsuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "Get_GetUsersIfUsersNoMore_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var getUser = new Mock\u003CIGetableUser\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var userController = new UserController(getUser.Object, mapper.Object);\r\n    var invalidIndex = -1;\r\n    getUser.Setup(gu =\u003E gu.GetByPagination(invalidIndex)).Throws(new ObjectNotFoundException(\u0022Invalid index.\u0022));\r\n    // Act\r\n    var result = userController.Get(invalidIndex);\r\n    // Assert\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_GetUsersIfIndexInvalid_BadRequest400",
        "Body": "{\r\n    // Arrange\r\n    var getUser = new Mock\u003CIGetableUser\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var userController = new UserController(getUser.Object, mapper.Object);\r\n    var validIndex = 0;\r\n    getUser.Setup(gu =\u003E gu.GetByPagination(validIndex)).Throws(new ObjectNotFoundException(\u0022No more users.\u0022));\r\n    // Act\r\n    var result = userController.Get(validIndex);\r\n    // Assert\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_GetUserByIdIfUserNotFound_NotFound404",
        "Body": "{\r\n    // Arrange\r\n    var getUser = new Mock\u003CIGetableUser\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var userController = new UserController(getUser.Object, mapper.Object);\r\n    getUser.Setup(gu =\u003E gu.GetById(_user.Id)).Throws(new ObjectNotFoundException(\u0022User not found.\u0022));\r\n    // Act\r\n    var result = userController.Get(_user.Id);\r\n    // Assert\r\n    Assert.IsType\u003CNotFoundObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UserControllerSuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "Add_AddUser_OkObjectResult",
        "Body": "{\r\n    // Arrange\r\n    var addableUser = new Mock\u003CIAddableUserAsync\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var imageRepositorySystem = new Mock\u003CIImageRepositorySystemAsync\u003E();\r\n    var jwtSystem = new Mock\u003CIJwtSystem\u003E();\r\n    addableUser.Setup(au =\u003E au.AddAsync(_user).Result).Returns(_user);\r\n    mapper.Setup(m =\u003E m.Map\u003CUserEntity\u003E(_userDTO)).Returns(_user);\r\n    mapper.Setup(m =\u003E m.Map\u003CRegistrationResponseDTO\u003E(_user)).Returns(_registrationResponseDTO);\r\n    var userController = new UserController(addableUser.Object, mapper.Object, jwtSystem.Object);\r\n    // Act\r\n    var result = await userController.Register(_userDTO);\r\n    // Assert\r\n    Assert.NotNull(userController);\r\n    Assert.NotNull(result);\r\n    Assert.IsType\u003COkObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UserControllerUnsuccessTest",
    "Message": null,
    "ProjectName": "NotSocialNetwork.Presentation.Tests",
    "Methods": [
      {
        "Name": "Register_RegisterUserIfImageFormatInvalid_BadRequest400",
        "Body": "{\r\n    // Arrange\r\n    var addUser = new Mock\u003CIAddableUserAsync\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var jwtSystem = new Mock\u003CIJwtSystem\u003E();\r\n    var userController = new UserController(addUser.Object, mapper.Object, jwtSystem.Object);\r\n    addUser.Setup(au =\u003E au.AddAsync(_user).Result).Throws(new InvalidFileFormatException(\u0022Invalid image format.\u0022));\r\n    mapper.Setup(m =\u003E m.Map\u003CUserEntity\u003E(_userDTO)).Returns(_user);\r\n    mapper.Setup(m =\u003E m.Map\u003CRegistrationResponseDTO\u003E(_user)).Returns(_registrationResponseDTO);\r\n    // Act\r\n    var result = await userController.Register(_userDTO);\r\n    // Assert\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Register_RegisterUserIfUserAlreadyExist_BadRequest400",
        "Body": "{\r\n    // Arrange\r\n    var addUser = new Mock\u003CIAddableUserAsync\u003E();\r\n    var mapper = new Mock\u003CIMapper\u003E();\r\n    var jwtSystem = new Mock\u003CIJwtSystem\u003E();\r\n    var userController = new UserController(addUser.Object, mapper.Object, jwtSystem.Object);\r\n    addUser.Setup(au =\u003E au.AddAsync(_user).Result).Throws(new ObjectAlreadyExistException(\u0022User already exist.\u0022));\r\n    mapper.Setup(m =\u003E m.Map\u003CUserEntity\u003E(_userDTO)).Returns(_user);\r\n    mapper.Setup(m =\u003E m.Map\u003CRegistrationResponseDTO\u003E(_user)).Returns(_registrationResponseDTO);\r\n    // Act\r\n    var result = await userController.Register(_userDTO);\r\n    // Assert\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(result.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  }
]