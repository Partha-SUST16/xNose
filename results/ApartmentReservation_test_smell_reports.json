[
  {
    "Name": "AccountController_LoginTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.WebUI.UnitTests",
    "Methods": [
      {
        "Name": "Login_WhenInvoked_CallsAuthService",
        "Body": "{\r\n    var controller = this.GetUnauthenticatedController();\r\n    var user = new LoginUserDto()\r\n    {\r\n        Username = \u0022admin\u0022,\r\n        Password = \u0022admin\u0022\r\n    };\r\n    await controller.Login(user).ConfigureAwait(false);\r\n    this.authServiceMock.Verify(a =\u003E a.LoginAsync(user, controller.HttpContext));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AccountController_LogoutTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.WebUI.UnitTests",
    "Methods": [
      {
        "Name": "Logout_WhenInvoked_CallsAuthService",
        "Body": "{\r\n    var controller = this.GetAuthenticatedController();\r\n    await controller.Logout().ConfigureAwait(false);\r\n    this.authServiceMock.Verify(a =\u003E a.LogoutAsync(controller.HttpContext));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AccountController_RegisterTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.WebUI.UnitTests",
    "Methods": [
      {
        "Name": "Register_CreatesGuestUsingMediatorAndReturnsCreatedGuest",
        "Body": "{\r\n    var expectedGuestDto = new GuestDto()\r\n    {\r\n        Id = 5,\r\n        Username = \u0022guest\u0022,\r\n        Password = \u0022guest\u0022\r\n    };\r\n    this.mediatorMock.Setup(m =\u003E m.Send(It.IsAny\u003CCreateGuestCommand\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(expectedGuestDto);\r\n    var controller = this.GetUnauthenticatedController();\r\n    var command = new CreateGuestCommand()\r\n    {\r\n        Username = \u0022guest\u0022,\r\n        Password = \u0022guest\u0022\r\n    };\r\n    var result = await controller.Register(command).ConfigureAwait(false);\r\n    var okObjectResult = Assert.IsAssignableFrom\u003COkObjectResult\u003E(result);\r\n    var user = Assert.IsAssignableFrom\u003CUserDto\u003E(okObjectResult.Value);\r\n    Assert.Equal(expectedGuestDto.Id, user.Id);\r\n    this.mediatorMock.Verify(m =\u003E m.Send(command, CancellationToken.None), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ApartmentsController_GetAllTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.WebUI.UnitTests",
    "Methods": [
      {
        "Name": "WhenUserIsUnauthenticated_CallsMediatorWithActiveQuery",
        "Body": "{\r\n    var controller = this.CreateController();\r\n    var query = new GetAllApartmentsQuery()\r\n    {\r\n        ActivityState = ActivityStates.Inactive\r\n    };\r\n    var result = await controller.Get(query).ConfigureAwait(false);\r\n    this.mediatorMock.Verify(m =\u003E m.Send(It.Is\u003CGetAllApartmentsQuery\u003E(q =\u003E q.ActivityState == ActivityStates.Active), It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "WhenUserIsGuest_CallsMediatorWithActiveQuery",
        "Body": "{\r\n    var controller = this.CreateController(userId: 1, role: RoleNames.Guest);\r\n    var query = new GetAllApartmentsQuery()\r\n    {\r\n        ActivityState = ActivityStates.Inactive\r\n    };\r\n    var result = await controller.Get(query).ConfigureAwait(false);\r\n    this.mediatorMock.Verify(m =\u003E m.Send(It.Is\u003CGetAllApartmentsQuery\u003E(q =\u003E q.ActivityState == ActivityStates.Active), It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "WhenUserIsAdmin_CallsMediatorWithRequestedQuery",
        "Body": "{\r\n    var controller = this.CreateController(userId: 3, role: RoleNames.Administrator);\r\n    var query = new GetAllApartmentsQuery()\r\n    {\r\n        ActivityState = activityState\r\n    };\r\n    var result = await controller.Get(query).ConfigureAwait(false);\r\n    this.mediatorMock.Verify(m =\u003E m.Send(query, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "WhenUserIsHostAndStranger_CallsMediatorWithHostIdChangedToUserId",
        "Body": "{\r\n    var controller = this.CreateController(userId: 2, role: RoleNames.Host);\r\n    var query = new GetAllApartmentsQuery()\r\n    {\r\n        ActivityState = ActivityStates.Inactive,\r\n        HostId = 3\r\n    };\r\n    var result = await controller.Get(query).ConfigureAwait(false);\r\n    this.mediatorMock.Verify(m =\u003E m.Send(It.Is\u003CGetAllApartmentsQuery\u003E(q =\u003E q.HostId == 2), It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "WhenUserIsNotStranger_CallsMediatorWithRequestedQuery",
        "Body": "{\r\n    var controller = this.CreateController(userId: 3, role: RoleNames.Host);\r\n    var query = new GetAllApartmentsQuery()\r\n    {\r\n        ActivityState = ActivityStates.Inactive,\r\n        HostId = 3\r\n    };\r\n    var result = await controller.Get(query).ConfigureAwait(false);\r\n    this.mediatorMock.Verify(m =\u003E m.Send(query, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "WhenUserIsAdminAndStranger_CallsMediatorWithRequestedQuery",
        "Body": "{\r\n    var controller = this.CreateController(userId: 3, role: RoleNames.Administrator);\r\n    var query = new GetAllApartmentsQuery()\r\n    {\r\n        ActivityState = ActivityStates.Inactive,\r\n        HostId = 5\r\n    };\r\n    var result = await controller.Get(query).ConfigureAwait(false);\r\n    this.mediatorMock.Verify(m =\u003E m.Send(query, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HostsController_GetAllTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.WebUI.UnitTests",
    "Methods": [
      {
        "Name": "GetAll_WhenInvoked_ReturnHostDtosFromMediator",
        "Body": "{\r\n    // Arrange\r\n    var expectedResultValue = new List\u003CHostDto\u003E\r\n    {\r\n        new HostDto()\r\n    };\r\n    this.mediatorMock.Setup(m =\u003E m.Send(It.IsAny\u003CIRequest\u003CIEnumerable\u003CHostDto\u003E\u003E\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(expectedResultValue);\r\n    var controller = this.CreateController(this.userId, RoleNames.Administrator);\r\n    // Act\r\n    var result = await controller.Get();\r\n    // Assert\r\n    var okResult = Assert.IsAssignableFrom\u003COkObjectResult\u003E(result);\r\n    var value = Assert.IsAssignableFrom\u003CIEnumerable\u003CHostDto\u003E\u003E(okResult.Value);\r\n    Assert.Equal(expectedResultValue, value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HostsController_GetTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.WebUI.UnitTests",
    "Methods": [
      {
        "Name": "Get_WhenUserIsAdmin_ReturnHostDtoFromMediator",
        "Body": "{\r\n    // Arrange\r\n    var expectedResultValue = new HostDto\r\n    {\r\n        Id = userId\r\n    };\r\n    this.mediatorMock.Setup(m =\u003E m.Send(It.IsAny\u003CIRequest\u003CHostDto\u003E\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(expectedResultValue);\r\n    var controller = this.CreateController(this.userId, RoleNames.Administrator);\r\n    // Act\r\n    var result = await controller.Get(this.userId);\r\n    // Assert\r\n    var okResult = Assert.IsAssignableFrom\u003COkObjectResult\u003E(result);\r\n    var value = Assert.IsType\u003CHostDto\u003E(okResult.Value);\r\n    Assert.Equal(expectedResultValue, value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_WhenUserIsAskingForItsOwnInformation_ReturnHostDtoFromMediator",
        "Body": "{\r\n    // Arrange\r\n    var expectedResultValue = new HostDto\r\n    {\r\n        Id = userId\r\n    };\r\n    this.mediatorMock.Setup(m =\u003E m.Send(It.IsAny\u003CIRequest\u003CHostDto\u003E\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(expectedResultValue);\r\n    var controller = this.CreateController(this.userId, RoleNames.Host);\r\n    // Act\r\n    var result = await controller.Get(this.userId);\r\n    // Assert\r\n    var okResult = Assert.IsAssignableFrom\u003COkObjectResult\u003E(result);\r\n    var value = Assert.IsType\u003CHostDto\u003E(okResult.Value);\r\n    Assert.Equal(expectedResultValue, value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_WhenUserIsAskingForStrangerInformation_ReturnUnauthorized",
        "Body": "{\r\n    var expectedResultValue = new HostDto\r\n    {\r\n        Id = userId\r\n    };\r\n    this.mediatorMock.Setup(m =\u003E m.Send(It.IsAny\u003CIRequest\u003CHostDto\u003E\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(expectedResultValue);\r\n    var controller = this.CreateController(this.userId \u002B 10, RoleNames.Host);\r\n    // Act\r\n    var result = await controller.Get(this.userId);\r\n    // Assert\r\n    var unauthorizedResult = Assert.IsAssignableFrom\u003CUnauthorizedResult\u003E(result);\r\n    this.mediatorMock.Verify(m =\u003E m.Send(It.IsAny\u003CIRequest\u003CHostDto\u003E\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Never);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HostsController_PostTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.WebUI.UnitTests",
    "Methods": [
      {
        "Name": "Post_WhenInvoked_SendCreateCommandToMediator",
        "Body": "{\r\n    var controller = this.CreateController(this.userId, RoleNames.Administrator);\r\n    var createCommand = new CreateHostCommand()\r\n    {\r\n        Username = \u0022Djura\u0022,\r\n        Password = \u0022123\u0022\r\n    };\r\n    await controller.Post(createCommand);\r\n    this.mediatorMock.Verify(m =\u003E m.Send(It.Is\u003CCreateHostCommand\u003E(c =\u003E c == createCommand), It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UsersController_DeleteTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.WebUI.UnitTests",
    "Methods": [
      {
        "Name": "Delete_WhenUserIsAdmin_SendDeleteCommandToMediator",
        "Body": "{\r\n    var controller = this.CreateController(this.userId, RoleNames.Administrator);\r\n    await controller.Delete(this.userId);\r\n    this.mediatorMock.Verify(m =\u003E m.Send(It.Is\u003CDeleteUserCommand\u003E(c =\u003E c.Id == this.userId), It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Delete_WhenUserIsUpdatingItsOwnInformation_SendDeleteCommandToMediator",
        "Body": "{\r\n    var controller = this.CreateController(this.userId, RoleNames.Host);\r\n    await controller.Delete(this.userId);\r\n    this.mediatorMock.Verify(m =\u003E m.Send(It.Is\u003CDeleteUserCommand\u003E(c =\u003E c.Id == this.userId), It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Delete_WhenUserIsUpdatingStrangersInformation_ReturnUnauthorized",
        "Body": "{\r\n    var controller = this.CreateController(this.userId, RoleNames.Host);\r\n    var result = await controller.Delete(this.StrangerId);\r\n    var unauthorized = Assert.IsAssignableFrom\u003CUnauthorizedResult\u003E(result);\r\n    this.mediatorMock.Verify(m =\u003E m.Send(It.IsAny\u003CDeleteUserCommand\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Never);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UsersController_GetAllTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.WebUI.UnitTests",
    "Methods": [
      {
        "Name": "WhenInvoked_CallsMediator",
        "Body": "{\r\n    var expectedValueResult = new List\u003CUserDto\u003E\r\n    {\r\n        new UserDto()\r\n        {\r\n            Username = \u0022guest\u0022,\r\n            Password = \u0022guest\u0022\r\n        }\r\n    };\r\n    var query = new GetAllUsersQuery()\r\n    {\r\n        Gender = Genders.Male,\r\n        RoleName = RoleNames.Guest\r\n    };\r\n    var controller = new UsersController(this.mediatorMock.Object, this.authServiceMock.Object);\r\n    this.mediatorMock.Setup(m =\u003E m.Send(query, It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(expectedValueResult);\r\n    var result = await controller.Get(query).ConfigureAwait(false);\r\n    var okResult = Assert.IsAssignableFrom\u003COkObjectResult\u003E(result);\r\n    var value = Assert.IsAssignableFrom\u003CIEnumerable\u003CUserDto\u003E\u003E(okResult.Value);\r\n    Assert.Equal(expectedValueResult, value);\r\n    this.mediatorMock.Verify(m =\u003E m.Send(query, It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UsersController_GetTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.WebUI.UnitTests",
    "Methods": [
      {
        "Name": "Get_WhenUserIsAdmin_ReturnUserDtoFromMediator",
        "Body": "{\r\n    // Arrange\r\n    var expectedResultValue = new UserDto\r\n    {\r\n        Id = userId\r\n    };\r\n    this.mediatorMock.Setup(m =\u003E m.Send(It.IsAny\u003CIRequest\u003CUserDto\u003E\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(expectedResultValue);\r\n    var controller = this.CreateController(this.userId, RoleNames.Administrator);\r\n    // Act\r\n    var result = await controller.Get(this.userId);\r\n    // Assert\r\n    var okResult = Assert.IsAssignableFrom\u003COkObjectResult\u003E(result);\r\n    var value = Assert.IsType\u003CUserDto\u003E(okResult.Value);\r\n    Assert.Equal(expectedResultValue, value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_WhenUserIsAskingForItsOwnInformation_ReturnUserDtoFromMediator",
        "Body": "{\r\n    // Arrange\r\n    var expectedResultValue = new UserDto\r\n    {\r\n        Id = userId\r\n    };\r\n    this.mediatorMock.Setup(m =\u003E m.Send(It.IsAny\u003CIRequest\u003CUserDto\u003E\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(expectedResultValue);\r\n    var controller = this.CreateController(this.userId, RoleNames.Host);\r\n    // Act\r\n    var result = await controller.Get(this.userId);\r\n    // Assert\r\n    var okResult = Assert.IsAssignableFrom\u003COkObjectResult\u003E(result);\r\n    var value = Assert.IsType\u003CUserDto\u003E(okResult.Value);\r\n    Assert.Equal(expectedResultValue, value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Get_WhenUserIsAskingForStrangerInformation_ReturnUnauthorized",
        "Body": "{\r\n    // Arrange\r\n    var controller = this.CreateController(this.userId, RoleNames.Host);\r\n    // Act\r\n    var result = await controller.Get(this.StrangerId);\r\n    // Assert\r\n    var unauthorizedResult = Assert.IsAssignableFrom\u003CUnauthorizedResult\u003E(result);\r\n    this.mediatorMock.Verify(m =\u003E m.Send(It.IsAny\u003CIRequest\u003CUserDto\u003E\u003E(), It.IsAny\u003CCancellationToken\u003E()), Times.Never);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UsersController_PutTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.WebUI.UnitTests",
    "Methods": [
      {
        "Name": "Put_WhenUserIsAdmin_SendUpdateCommandToMediator",
        "Body": "{\r\n    var controller = this.CreateController(this.userId, RoleNames.Administrator);\r\n    var updateCommand = new UpdateUserCommand();\r\n    await controller.Put(this.userId \u002B 10, updateCommand);\r\n    this.mediatorMock.Verify(m =\u003E m.Send(It.Is\u003CUpdateUserCommand\u003E(c =\u003E c == updateCommand), It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Put_WhenUserIsUpdatingItsOwnInformation_SendUpdateCommandToMediator",
        "Body": "{\r\n    var controller = this.CreateController(this.userId, RoleNames.Host);\r\n    var updateCommand = new UpdateUserCommand();\r\n    await controller.Put(this.userId, updateCommand);\r\n    this.mediatorMock.Verify(m =\u003E m.Send(It.Is\u003CUpdateUserCommand\u003E(c =\u003E c == updateCommand), It.IsAny\u003CCancellationToken\u003E()), Times.Once);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Put_WhenUserIsUpdatingStrangersInformation_ReturnUnauthorized",
        "Body": "{\r\n    var controller = this.CreateController(this.userId, RoleNames.Host);\r\n    var updateCommand = new UpdateUserCommand();\r\n    var result = await controller.Put(this.StrangerId, updateCommand);\r\n    var unauthorized = Assert.IsAssignableFrom\u003CUnauthorizedResult\u003E(result);\r\n    this.mediatorMock.Verify(m =\u003E m.Send(It.Is\u003CUpdateUserCommand\u003E(c =\u003E c == updateCommand), It.IsAny\u003CCancellationToken\u003E()), Times.Never);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CreateAmenityCommandHandlerTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.Application.IntegrationTests",
    "Methods": [
      {
        "Name": "WhenDoesNotExist_CreateAmenity",
        "Body": "{\r\n    const string AmenityName = \u0022Sofa\u0022;\r\n    await this.sut.Handle(new CreateAmenityCommand() { Name = AmenityName }, CancellationToken.None).ConfigureAwait(false);\r\n    var dbAmenity = await this.Context.Amenities.SingleOrDefaultAsync(a =\u003E a.Name == AmenityName, CancellationToken.None).ConfigureAwait(false);\r\n    Assert.NotNull(dbAmenity);\r\n    Assert.Equal(AmenityName, dbAmenity.Name);\r\n    Assert.False(dbAmenity.IsDeleted);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "WhenIsLogicallyDeleted_UpdateAmenity",
        "Body": "{\r\n    await this.LoadTestDataAsync().ConfigureAwait(false);\r\n    await this.sut.Handle(new CreateAmenityCommand() { Name = this.dbAmenity.Name }, CancellationToken.None).ConfigureAwait(false);\r\n    var amenity = await this.Context.Amenities.SingleOrDefaultAsync(a =\u003E a.Id == this.dbAmenity.Id).ConfigureAwait(false);\r\n    Assert.NotNull(amenity);\r\n    Assert.Equal(this.dbAmenity.Name, amenity.Name);\r\n    Assert.False(amenity.IsDeleted);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DeleteAmenityCommandHandlerTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.Application.IntegrationTests",
    "Methods": [
      {
        "Name": "WhenAmenityExists_DeletesAmenity",
        "Body": "{\r\n    await this.sut.Handle(new DeleteAmenityCommand() { Id = this.dbAmenity.Id }, CancellationToken.None).ConfigureAwait(false);\r\n    var amenity = await this.Context.Amenities.FindAsync(this.dbAmenity.Id).ConfigureAwait(false);\r\n    Assert.True(amenity.IsDeleted);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "WhenAmenityDoesNotExist_ThrowNotFoundException",
        "Body": "{\r\n    await Assert.ThrowsAsync\u003CNotFoundException\u003E(async () =\u003E await this.sut.Handle(new DeleteAmenityCommand() { Id = -1 }, CancellationToken.None).ConfigureAwait(false)).ConfigureAwait(false);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UpdateAmenityCommandHandlerTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.Application.IntegrationTests",
    "Methods": [
      {
        "Name": "WhenAmenityExists_UpdateAmenity",
        "Body": "{\r\n    await this.sut.Handle(new UpdateAmenityCommand() { Id = this.dbAmenity.Id, Name = \u0022Bed\u0022 }, CancellationToken.None).ConfigureAwait(false);\r\n    var amenity = await this.Context.Amenities.FindAsync(this.dbAmenity.Id).ConfigureAwait(false);\r\n    Assert.NotNull(amenity);\r\n    Assert.Equal(\u0022Bed\u0022, amenity.Name);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "WhenAmenityDoesNotExist_ThrowNotFoundException",
        "Body": "{\r\n    await Assert.ThrowsAsync\u003CNotFoundException\u003E(async () =\u003E await this.sut.Handle(new UpdateAmenityCommand() { Id = -1, Name = \u0022Bed\u0022 }, CancellationToken.None).ConfigureAwait(false)).ConfigureAwait(false);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "GetAllAmenitiesQueryHandlerTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.Application.IntegrationTests",
    "Methods": [
      {
        "Name": "NoFilter_ReturnAllAmenities",
        "Body": "{\r\n    var expectedResult = this.dbAmenities.Select(g =\u003E g.Name);\r\n    var result = await this.sut.Handle(new GetAllAmenitiesQuery(), CancellationToken.None).ConfigureAwait(false);\r\n    Assert.IsAssignableFrom\u003CIEnumerable\u003CAmenityDto\u003E\u003E(result);\r\n    Assert.Equal(expectedResult, result.Select(r =\u003E r.Name));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FilterBySearch_ReturnAllAmenitiesThatContainName",
        "Body": "{\r\n    var result = await this.sut.Handle(new GetAllAmenitiesQuery() { Search = \u0022so\u0022 }, CancellationToken.None).ConfigureAwait(false);\r\n    var amenity = Assert.Single\u003CAmenityDto\u003E(result);\r\n    Assert.Equal(\u0022Sofa\u0022, amenity.Name);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "GetAmenityQueryHandlerTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.Application.IntegrationTests",
    "Methods": [
      {
        "Name": "WhenAmenityExists_ReturnsAmenity",
        "Body": "{\r\n    var result = await this.sut.Handle(new GetAmenityQuery() { Id = this.dbAmenity.Id }, CancellationToken.None).ConfigureAwait(false);\r\n    var dtoResult = Assert.IsAssignableFrom\u003CAmenityDto\u003E(result);\r\n    Assert.Equal(this.dbAmenity.Name, dtoResult.Name);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "WhenAmenityDoesNotExist_ThrowNotFoundException",
        "Body": "{\r\n    await Assert.ThrowsAsync\u003CNotFoundException\u003E(async () =\u003E await this.sut.Handle(new GetAmenityQuery() { Id = -1 }, CancellationToken.None).ConfigureAwait(false)).ConfigureAwait(false);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "AddAmenitiesToApartmentCommandHandlerTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.Application.IntegrationTests",
    "Methods": [
      {
        "Name": "AddsAmenitiesToApartment",
        "Body": "{\r\n    var amenities = await this.Context.Amenities.Select(a =\u003E new AmenityDto(a)).ToListAsync();\r\n    var request = new AddAmenitiesToApartmentCommand()\r\n    {\r\n        ApartmentId = this.dbApartment.Id,\r\n        Amenities = amenities\r\n    };\r\n    await this.sut.Handle(request, CancellationToken.None).ConfigureAwait(false);\r\n    this.dbApartment = await this.Context.Apartments.Include(\u0022ApartmentAmenities.Amenity\u0022).SingleOrDefaultAsync(CancellationToken.None).ConfigureAwait(false);\r\n    Assert.Equal(amenities.Select(a =\u003E a.Name), this.dbApartment.Amenities.Select(a =\u003E a.Name));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CreateApartmentCommandHandlerTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.Application.IntegrationTests",
    "Methods": [
      {
        "Name": "CreateApartment",
        "Body": "{\r\n    var request = new CreateApartmentCommand()\r\n    {\r\n        HostId = this.dbHost.UserId,\r\n        PricePerNight = 10,\r\n        ApartmentType = ApartmentTypes.Full,\r\n        Title = \u0022My fabulous apartment\u0022,\r\n        NumberOfRooms = 5\r\n    };\r\n    await this.sut.Handle(request, CancellationToken.None).ConfigureAwait(false);\r\n    var dbApartment = await this.Context.Apartments.FirstOrDefaultAsync();\r\n    Assert.NotNull(dbApartment);\r\n    Assert.False(dbApartment.IsDeleted);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ReturnsIdOfCreatedElement",
        "Body": "{\r\n    var request = new CreateApartmentCommand()\r\n    {\r\n        HostId = this.dbHost.UserId,\r\n        PricePerNight = 10,\r\n        ApartmentType = ApartmentTypes.Full,\r\n        Title = \u0022My fabulous apartment\u0022,\r\n        NumberOfRooms = 5\r\n    };\r\n    var result = await this.sut.Handle(request, CancellationToken.None).ConfigureAwait(false);\r\n    var dbApartment = await this.Context.Apartments.FirstOrDefaultAsync();\r\n    Assert.Equal(dbApartment.Id, result.Id);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreatesApartmentWithLocationAndAddress",
        "Body": "{\r\n    var request = new CreateApartmentCommand()\r\n    {\r\n        HostId = this.dbHost.UserId,\r\n        Longitude = 40.3,\r\n        Latitude = -73.556,\r\n        CityName = \u0022New York\u0022,\r\n        StreetName = \u0022Weird street\u0022\r\n    };\r\n    var result = await this.sut.Handle(request, CancellationToken.None);\r\n    var dbApartment = await this.Context.Apartments.Include(a =\u003E a.Location).ThenInclude(l =\u003E l.Address).FirstOrDefaultAsync();\r\n    Assert.NotNull(dbApartment.Location);\r\n    var location = dbApartment.Location;\r\n    Assert.Equal(location.Longitude, request.Longitude);\r\n    Assert.Equal(location.Latitude, request.Latitude);\r\n    var address = location.Address;\r\n    Assert.Equal(address.CityName, request.CityName);\r\n    Assert.Equal(address.StreetName, request.StreetName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UpdateApartmentAmenitiesCommandHandlerTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.Application.IntegrationTests",
    "Methods": [
      {
        "Name": "UpdatesAmenitiesInApartment",
        "Body": "{\r\n    var reqAmenity = this.Context.Add(new Amenity() { Name = \u0022Microwave\u0022 }).Entity;\r\n    var request = new UpdateApartmentAmenitiesCommand()\r\n    {\r\n        ApartmentId = this.dbApartment.Id,\r\n        Amenities = new List\u003CAmenityDto\u003E()\r\n        {\r\n            new AmenityDto(reqAmenity)\r\n        }\r\n    };\r\n    await this.sut.Handle(request, CancellationToken.None).ConfigureAwait(false);\r\n    this.dbApartment = await this.Context.Apartments.Include(\u0022ApartmentAmenities.Amenity\u0022).SingleOrDefaultAsync(a =\u003E a.Id == this.dbApartment.Id, CancellationToken.None).ConfigureAwait(false);\r\n    var dbAmenities = this.dbApartment.ApartmentAmenities.Where(x =\u003E !x.IsDeleted).Select(x =\u003E x.Amenity).Where(a =\u003E !a.IsDeleted);\r\n    var dbAmenity = Assert.Single(dbAmenities);\r\n    Assert.Equal(reqAmenity.Name, dbAmenity.Name);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UpdateApartmentCommandHandlerTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.Application.IntegrationTests",
    "Methods": [
      {
        "Name": "UpdatesApartment",
        "Body": "{\r\n    var request = new UpdateApartmentCommand()\r\n    {\r\n        Id = this.dbApartment.Id,\r\n        ActivityState = ActivityStates.Inactive,\r\n        ApartmentType = ApartmentTypes.SingleRoom,\r\n        CheckInTime = \u002211:00:00\u0022,\r\n        CheckOutTime = \u002220:15:33\u0022,\r\n        Title = \u0022My new title\u0022,\r\n        Latitude = 33,\r\n        Longitude = 34,\r\n        CityName = \u0022New York\u0022,\r\n        StreetName = \u0022Digit Street\u0022,\r\n        StreetNumber = \u002233\u0022,\r\n        CountryName = \u0022America\u0022\r\n    };\r\n    await this.sut.Handle(request, CancellationToken.None).ConfigureAwait(false);\r\n    this.dbApartment = await this.Context.Apartments.Include(a =\u003E a.Location).ThenInclude(l =\u003E l.Address).SingleOrDefaultAsync(a =\u003E a.Id == request.Id \u0026\u0026 !a.IsDeleted).ConfigureAwait(false);\r\n    Assert.NotNull(this.dbApartment);\r\n    Assert.Equal(this.dbApartment.Title, request.Title);\r\n    Assert.NotNull(this.dbApartment.Location);\r\n    Assert.Equal(this.dbApartment.Location.Latitude, request.Latitude);\r\n    Assert.Equal(this.dbApartment.Location.Longitude, request.Longitude);\r\n    Assert.NotNull(this.dbApartment.Location.Address);\r\n    Assert.Equal(this.dbApartment.Location.Address.CountryName, request.CountryName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UpdateForRentalDatesCommandHandlerTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.Application.IntegrationTests",
    "Methods": [
      {
        "Name": "UpdatesForRentalDates",
        "Body": "{\r\n    var requestedDate = new DateTime(year: 2019, month: 5, day: 17);\r\n    var request = new UpdateForRentalDatesCommand()\r\n    {\r\n        ApartmentId = this.dbApartment.Id,\r\n        ForRentalDates = new[]\r\n        {\r\n            requestedDate\r\n        }\r\n    };\r\n    await this.sut.Handle(request, CancellationToken.None).ConfigureAwait(false);\r\n    var dbRentalDates = await this.Context.ForRentalDates.Where(frd =\u003E frd.ApartmentId == request.ApartmentId \u0026\u0026 !frd.IsDeleted).ToListAsync().ConfigureAwait(false);\r\n    var rentalDate = Assert.Single(dbRentalDates);\r\n    Assert.Equal(requestedDate, rentalDate.Date);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CreateCommentCommandHandlerTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.Application.IntegrationTests",
    "Methods": [
      {
        "Name": "CreatesComment",
        "Body": "{\r\n    var request = new CreateCommentCommand()\r\n    {\r\n        ApartmentId = this.apartment.Id,\r\n        GuestId = this.guest.UserId,\r\n        Rating = 5,\r\n        Text = \u0022Good apartment, i really like it.\u0022\r\n    };\r\n    var response = await this.sut.Handle(request, CancellationToken.None).ConfigureAwait(false);\r\n    var comment = await this.Context.Comments.FindAsync(response.Id).ConfigureAwait(false);\r\n    Assert.NotNull(comment);\r\n    Assert.Equal(request.Rating, comment.Rating);\r\n    Assert.Equal(request.Text, comment.Text);\r\n    Assert.Equal(request.ApartmentId, comment.ApartmentId);\r\n    Assert.Equal(request.GuestId, comment.GuestId);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UpdateCommentCommandHandlerTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.Application.IntegrationTests",
    "Methods": [
      {
        "Name": "UpdatesComment",
        "Body": "{\r\n    var request = new UpdateCommentCommand()\r\n    {\r\n        Id = this.comment.Id,\r\n        Text = \u0022My New Text\u0022,\r\n        Rating = 3,\r\n        Approved = true\r\n    };\r\n    await this.sut.Handle(request, CancellationToken.None).ConfigureAwait(false);\r\n    var dbComment = await this.Context.Comments.FindAsync(this.comment.Id).ConfigureAwait(false);\r\n    Assert.Equal(request.Text, dbComment.Text);\r\n    Assert.Equal(request.Rating, dbComment.Rating);\r\n    Assert.Equal(request.Approved, dbComment.Approved);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CreateGuestCommandHandlerTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.Application.IntegrationTests",
    "Methods": [
      {
        "Name": "UserDoesNotExist_CreatesGuest",
        "Body": "{\r\n    // Arrange\r\n    var request = new CreateGuestCommand()\r\n    {\r\n        Username = \u0022guest\u0022,\r\n        Password = \u0022guest\u0022\r\n    };\r\n    // Act\r\n    await this.sut.Handle(request, CancellationToken.None).ConfigureAwait(false);\r\n    // Assert\r\n    var guest = await this.Context.Guests.Include(g =\u003E g.User).SingleOrDefaultAsync(g =\u003E g.User.Username == request.Username, CancellationToken.None).ConfigureAwait(false);\r\n    Assert.NotNull(guest);\r\n    CustomAssertAreEqual(request, guest);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UserIsLogicallyDeleted_UpdatesHost",
        "Body": "{\r\n    await this.Context.Guests.AddAsync(new Domain.Entities.Guest() { IsDeleted = true, User = new Domain.Entities.User() { IsDeleted = true, Username = \u0022guest\u0022, Password = \u0022steva\u0022 } }).ConfigureAwait(false);\r\n    await this.Context.SaveChangesAsync().ConfigureAwait(false);\r\n    var request = new CreateGuestCommand()\r\n    {\r\n        Username = \u0022guest\u0022,\r\n        Password = \u0022guest\u0022,\r\n        FirstName = \u0022Milos\u0022\r\n    };\r\n    await this.sut.Handle(request, CancellationToken.None).ConfigureAwait(false);\r\n    var guest = await this.Context.Guests.Include(g =\u003E g.User).SingleOrDefaultAsync(g =\u003E g.User.Username == request.Username, CancellationToken.None).ConfigureAwait(false);\r\n    Assert.NotNull(guest);\r\n    CustomAssertAreEqual(request, guest);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CreateHostCommandHandlerTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.Application.IntegrationTests",
    "Methods": [
      {
        "Name": "UserDoesNotExist_CreatesHost",
        "Body": "{\r\n    // Arrange\r\n    var request = new CreateHostCommand()\r\n    {\r\n        Username = \u0022host\u0022,\r\n        Password = \u0022host\u0022,\r\n        RoleName = RoleNames.Host\r\n    };\r\n    // Act\r\n    await this.sut.Handle(request, CancellationToken.None).ConfigureAwait(false);\r\n    // Assert\r\n    var host = await this.Context.Hosts.Include(h =\u003E h.User).SingleOrDefaultAsync(h =\u003E h.User.Username == request.Username, CancellationToken.None).ConfigureAwait(false);\r\n    Assert.NotNull(host);\r\n    CustomAssertAreEqual(request, host);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UserIsLogicallyDeleted_UpdatesHost",
        "Body": "{\r\n    await this.Context.Hosts.AddAsync(new Domain.Entities.Host() { IsDeleted = true, User = new Domain.Entities.User() { IsDeleted = true, Username = \u0022host\u0022, Password = \u0022steva\u0022 } }).ConfigureAwait(false);\r\n    await this.Context.SaveChangesAsync().ConfigureAwait(false);\r\n    var request = new CreateHostCommand()\r\n    {\r\n        Username = \u0022host\u0022,\r\n        Password = \u0022host\u0022,\r\n        FirstName = \u0022Milos\u0022,\r\n        RoleName = RoleNames.Host\r\n    };\r\n    await this.sut.Handle(request, CancellationToken.None).ConfigureAwait(false);\r\n    var host = await this.Context.Hosts.Include(h =\u003E h.User).SingleOrDefaultAsync(h =\u003E h.User.Username == request.Username, CancellationToken.None).ConfigureAwait(false);\r\n    Assert.NotNull(host);\r\n    CustomAssertAreEqual(request, host);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CreateReservationCommandHandlerTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.Application.IntegrationTests",
    "Methods": [
      {
        "Name": "WhenApartmantIsAvailable_CreateReservationWithCreatedState",
        "Body": "{\r\n    this.mediatorMock.Setup(m =\u003E m.Send(It.IsAny\u003CGetAvailableDatesQuery\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(this.forRentalDates.Select(frd =\u003E frd.Date));\r\n    var request = new CreateReservationCommand()\r\n    {\r\n        ApartmentId = this.apartment.Id,\r\n        GuestId = this.guest.UserId,\r\n        StartDate = minDate,\r\n        NumberOfNights = DaysToAdd\r\n    };\r\n    var response = await this.sut.Handle(request, CancellationToken.None).ConfigureAwait(false);\r\n    var reservation = this.Context.Reservations.SingleOrDefault(r =\u003E r.Id == response.Id \u0026\u0026 !r.IsDeleted);\r\n    Assert.NotNull(reservation);\r\n    Assert.Equal(ReservationStates.Created, reservation.ReservationState);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "WhenApartmantIsUnavailable_ThrowApartmentUnavailableException",
        "Body": "{\r\n    this.mediatorMock.Setup(m =\u003E m.Send(It.IsAny\u003CGetAvailableDatesQuery\u003E(), It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(this.forRentalDates.Select(frd =\u003E frd.Date).Skip(2));\r\n    var request = new CreateReservationCommand()\r\n    {\r\n        ApartmentId = this.apartment.Id,\r\n        GuestId = this.guest.UserId,\r\n        StartDate = minDate,\r\n        NumberOfNights = DaysToAdd\r\n    };\r\n    await Assert.ThrowsAsync\u003CApartmentUnavailableException\u003E(async () =\u003E await this.sut.Handle(request, CancellationToken.None).ConfigureAwait(false)).ConfigureAwait(false);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UpdateReservationCommandHandlerTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.Application.IntegrationTests",
    "Methods": [
      {
        "Name": "CanUpdateReturnsTrue_UpdatesReservation",
        "Body": "{\r\n    var request = new UpdateReservationCommand()\r\n    {\r\n        Id = this.reservation.Id,\r\n        ReservationState = ReservationStates.Accepted,\r\n        CanUpdate = (_) =\u003E true\r\n    };\r\n    await this.sut.Handle(request, CancellationToken.None).ConfigureAwait(false);\r\n    var dbReservation = await this.Context.Reservations.FindAsync(request.Id).ConfigureAwait(false);\r\n    Assert.Equal(request.ReservationState, dbReservation.ReservationState);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CanUpdateReturnsFalse_DoesNotUpdateReservation",
        "Body": "{\r\n    string oldState = this.reservation.ReservationState;\r\n    var request = new UpdateReservationCommand()\r\n    {\r\n        Id = this.reservation.Id,\r\n        ReservationState = ReservationStates.Accepted,\r\n        CanUpdate = (_) =\u003E false\r\n    };\r\n    await Assert.ThrowsAsync\u003CCustomInvalidOperationException\u003E(async () =\u003E await this.sut.Handle(request, CancellationToken.None).ConfigureAwait(false)).ConfigureAwait(false);\r\n    var dbReservation = await this.Context.Reservations.FindAsync(request.Id).ConfigureAwait(false);\r\n    Assert.Equal(oldState, dbReservation.ReservationState);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "GetAvailableDatesQueryHandlerTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.Application.IntegrationTests",
    "Methods": [
      {
        "Name": "WhenNoReservations_ReturnForRentalDates",
        "Body": "{\r\n    var availableDates = await this.sut.Handle(new GetAvailableDatesQuery() { ApartmentId = this.data.Apartment.Id }, CancellationToken.None).ConfigureAwait(false);\r\n    Assert.All(availableDates, date =\u003E Assert.Contains(this.data.ForRentalDates, frd =\u003E DateTimeHelpers.AreSameDay(frd.Date, date)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "WhenReserved_ReturnAvailable",
        "Body": "{\r\n    this.data.Context.Add(new Reservation() { ApartmentId = this.data.Apartment.Id, GuestId = this.data.Guest.UserId, ReservationStartDate = this.data.MinDate, NumberOfNightsRented = 1, ReservationState = ReservationStates.Accepted });\r\n    this.data.Context.SaveChanges();\r\n    var availableDates = await this.sut.Handle(new GetAvailableDatesQuery() { ApartmentId = this.data.Apartment.Id }, CancellationToken.None).ConfigureAwait(false);\r\n    Assert.All(availableDates, date =\u003E Assert.Contains(this.data.ForRentalDates.Skip(1), frd =\u003E DateTimeHelpers.AreSameDay(frd.Date, date)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DoesNotReturnDaysBeforeToday",
        "Body": "{\r\n    this.data.Context.Add(new ForRentalDate() { ApartmentId = this.data.Apartment.Id, Date = DateTime.Now.AddDays(-5) });\r\n    var availableDates = await this.sut.Handle(new GetAvailableDatesQuery() { ApartmentId = this.data.Apartment.Id }, CancellationToken.None).ConfigureAwait(false);\r\n    Assert.DoesNotContain(availableDates, DateTimeHelpers.IsBeforeToday);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "GetAvailableDatesQueryDataSetup",
    "Message": null,
    "ProjectName": "ApartmentReservation.Application.IntegrationTests",
    "Methods": [
      {
        "Name": "WhenNoReservations_ReturnForRentalDates",
        "Body": "{\r\n    var availableDates = await this.sut.Handle(new GetAvailableDatesQuery() { ApartmentId = this.data.Apartment.Id }, CancellationToken.None).ConfigureAwait(false);\r\n    Assert.All(availableDates, date =\u003E Assert.Contains(this.data.ForRentalDates, frd =\u003E DateTimeHelpers.AreSameDay(frd.Date, date)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "WhenReserved_ReturnAvailable",
        "Body": "{\r\n    this.data.Context.Add(new Reservation() { ApartmentId = this.data.Apartment.Id, GuestId = this.data.Guest.UserId, ReservationStartDate = this.data.MinDate, NumberOfNightsRented = 1, ReservationState = ReservationStates.Accepted });\r\n    this.data.Context.SaveChanges();\r\n    var availableDates = await this.sut.Handle(new GetAvailableDatesQuery() { ApartmentId = this.data.Apartment.Id }, CancellationToken.None).ConfigureAwait(false);\r\n    Assert.All(availableDates, date =\u003E Assert.Contains(this.data.ForRentalDates.Skip(1), frd =\u003E DateTimeHelpers.AreSameDay(frd.Date, date)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DoesNotReturnDaysBeforeToday",
        "Body": "{\r\n    this.data.Context.Add(new ForRentalDate() { ApartmentId = this.data.Apartment.Id, Date = DateTime.Now.AddDays(-5) });\r\n    var availableDates = await this.sut.Handle(new GetAvailableDatesQuery() { ApartmentId = this.data.Apartment.Id }, CancellationToken.None).ConfigureAwait(false);\r\n    Assert.DoesNotContain(availableDates, DateTimeHelpers.IsBeforeToday);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DeleteUserCommandHandlerTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.Application.IntegrationTests",
    "Methods": [
      {
        "Name": "UserExists_DeletesUserLogically",
        "Body": "{\r\n    await this.sut.Handle(new DeleteUserCommand() { Id = this.dbUser.Id }, CancellationToken.None).ConfigureAwait(false);\r\n    var user = await this.Context.Users.FindAsync(this.dbUser.Id).ConfigureAwait(false);\r\n    Assert.True(user.IsDeleted);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UserDoesNotExist_ThrowsNotFoundException",
        "Body": "{\r\n    await Assert.ThrowsAsync\u003CNotFoundException\u003E(async () =\u003E await this.sut.Handle(new DeleteUserCommand() { Id = -1 }, CancellationToken.None).ConfigureAwait(false)).ConfigureAwait(false);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UpdateUserCommandHandlerTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.Application.IntegrationTests",
    "Methods": [
      {
        "Name": "WhenUserExists_UpdateUser",
        "Body": "{\r\n    var request = new UpdateUserCommand()\r\n    {\r\n        Id = this.dbUser.Id,\r\n        FirstName = \u0022Danilo\u0022,\r\n        LastName = \u0022Novakovic\u0022,\r\n        Gender = \u0022Male\u0022,\r\n        Password = \u0022codex\u0022\r\n    };\r\n    await this.sut.Handle(request, CancellationToken.None).ConfigureAwait(false);\r\n    var host = await this.Context.Users.SingleOrDefaultAsync(u =\u003E u.Id == request.Id).ConfigureAwait(false);\r\n    Assert.NotNull(host);\r\n    CustomAssertAreEqual(request, host);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UserDoesNotExist_ThrowsNotFoundException",
        "Body": "{\r\n    await Assert.ThrowsAsync\u003CNotFoundException\u003E(async () =\u003E await this.sut.Handle(new UpdateUserCommand() { Id = -1, Password = \u0022codex\u0022 }, CancellationToken.None).ConfigureAwait(false)).ConfigureAwait(false);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CostCalculatorTests",
    "Message": null,
    "ProjectName": "ApartmentReservation.Application.IntegrationTests",
    "Methods": [
      {
        "Name": "NoWeekendsOrHoliday_ReturnTotalCost",
        "Body": "{\r\n    holidayServiceMock.Setup(m =\u003E m.GetHolidaysAsync(It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(new List\u003CIHoliday\u003E());\r\n    var monday = DateTimeHelpers.StartOfWeek(DateTime.Now, DayOfWeek.Monday);\r\n    var request = new GetTotalCostArgs()\r\n    {\r\n        ApartmentId = apartment.Id,\r\n        StartDate = monday,\r\n        NumberOfNights = 2\r\n    };\r\n    double expectedCost = apartment.PricePerNight * request.NumberOfNights;\r\n    double totalCost = await sut.CalculateTotalCostAsync(request, CancellationToken.None).ConfigureAwait(false);\r\n    Assert.Equal(expectedCost, totalCost, precision: 2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OnHolidays_IncreaseTotalCostByHolidayRatePerDayOfHoliday",
        "Body": "{\r\n    var tuesday = DateTimeHelpers.StartOfWeek(DateTime.Now, DayOfWeek.Tuesday);\r\n    var wednesday = tuesday.AddDays(1);\r\n    holidayServiceMock.Setup(m =\u003E m.GetHolidaysAsync(It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(new List\u003CIHoliday\u003E() { new Holiday() { Month = tuesday.Month, Day = tuesday.Day }, new Holiday() { Month = wednesday.Month, Day = wednesday.Day } });\r\n    var request = new GetTotalCostArgs()\r\n    {\r\n        ApartmentId = apartment.Id,\r\n        StartDate = tuesday,\r\n        NumberOfNights = 2\r\n    };\r\n    double perNight = apartment.PricePerNight;\r\n    double expectedCost = (perNight \u002B HolidayRate * perNight) * request.NumberOfNights;\r\n    double totalCost = await sut.CalculateTotalCostAsync(request, CancellationToken.None).ConfigureAwait(false);\r\n    Assert.Equal(expectedCost, totalCost, precision: 2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OnWeekends_ReduceTotalCostByWeekendRatePerWeekDay",
        "Body": "{\r\n    holidayServiceMock.Setup(m =\u003E m.GetHolidaysAsync(It.IsAny\u003CCancellationToken\u003E())).ReturnsAsync(new List\u003CIHoliday\u003E());\r\n    var startDate = DateTimeHelpers.StartOfWeek(DateTime.Now, DayOfWeek.Saturday);\r\n    var request = new GetTotalCostArgs()\r\n    {\r\n        ApartmentId = apartment.Id,\r\n        StartDate = startDate,\r\n        NumberOfNights = 2\r\n    };\r\n    double perNight = apartment.PricePerNight;\r\n    double expectedCost = (perNight - WeekendRate * perNight) * request.NumberOfNights;\r\n    double totalCost = await sut.CalculateTotalCostAsync(request, CancellationToken.None).ConfigureAwait(false);\r\n    Assert.Equal(expectedCost, totalCost, precision: 2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  }
]