[
  {
    "Name": "TestAPI",
    "Message": null,
    "ProjectName": "TestingProject",
    "Methods": [
      {
        "Name": "Test_GET_AllReservations",
        "Body": "{\r\n    // Arrange\r\n    var mockRepo = new Mock\u003CIRepository\u003E();\r\n    mockRepo.Setup(repo =\u003E repo.Reservations).Returns(Multiple());\r\n    var controller = new ReservationController(mockRepo.Object);\r\n    // Act\r\n    var result = controller.Get();\r\n    // Assert\r\n    var model = Assert.IsAssignableFrom\u003CIEnumerable\u003CReservation\u003E\u003E(result);\r\n    Assert.Equal(3, model.Count());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Test_GET_AReservations_BadRequest",
        "Body": "{\r\n    // Arrange\r\n    int id = 0;\r\n    var mockRepo = new Mock\u003CIRepository\u003E();\r\n    mockRepo.Setup(repo =\u003E repo[It.IsAny\u003Cint\u003E()]).Returns\u003Cint\u003E((a) =\u003E Single(a));\r\n    var controller = new ReservationController(mockRepo.Object);\r\n    // Act\r\n    var result = controller.Get(id);\r\n    // Assert\r\n    var actionResult = Assert.IsType\u003CActionResult\u003CReservation\u003E\u003E(result);\r\n    Assert.IsType\u003CBadRequestObjectResult\u003E(actionResult.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Test_GET_AReservations_Ok",
        "Body": "{\r\n    // Arrange\r\n    int id = 1;\r\n    var mockRepo = new Mock\u003CIRepository\u003E();\r\n    mockRepo.Setup(repo =\u003E repo[It.IsAny\u003Cint\u003E()]).Returns\u003Cint\u003E((id) =\u003E Single(id));\r\n    var controller = new ReservationController(mockRepo.Object);\r\n    // Act\r\n    var result = controller.Get(id);\r\n    // Assert\r\n    var actionResult = Assert.IsType\u003CActionResult\u003CReservation\u003E\u003E(result);\r\n    var actionValue = Assert.IsType\u003COkObjectResult\u003E(actionResult.Result);\r\n    Assert.Equal(id, ((Reservation)actionValue.Value).Id);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Test_GET_AReservations_NotFound",
        "Body": "{\r\n    // Arrange\r\n    int id = 4;\r\n    var mockRepo = new Mock\u003CIRepository\u003E();\r\n    mockRepo.Setup(repo =\u003E repo[It.IsAny\u003Cint\u003E()]).Returns\u003Cint\u003E((id) =\u003E Single(id));\r\n    var controller = new ReservationController(mockRepo.Object);\r\n    // Act\r\n    var result = controller.Get(id);\r\n    // Assert\r\n    var actionResult = Assert.IsType\u003CActionResult\u003CReservation\u003E\u003E(result);\r\n    Assert.IsType\u003CNotFoundResult\u003E(actionResult.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Test_POST_AddReservation",
        "Body": "{\r\n    // Arrange\r\n    Reservation r = new Reservation()\r\n    {\r\n        Id = 4,\r\n        Name = \u0022Test Four\u0022,\r\n        StartLocation = \u0022SL4\u0022,\r\n        EndLocation = \u0022EL4\u0022\r\n    };\r\n    var mockRepo = new Mock\u003CIRepository\u003E();\r\n    mockRepo.Setup(repo =\u003E repo.AddReservation(It.IsAny\u003CReservation\u003E())).Returns(r);\r\n    var controller = new ReservationController(mockRepo.Object);\r\n    // Act\r\n    var result = controller.Post(r);\r\n    // Assert\r\n    var reservation = Assert.IsType\u003CReservation\u003E(result);\r\n    Assert.Equal(4, reservation.Id);\r\n    Assert.Equal(\u0022Test Four\u0022, reservation.Name);\r\n    Assert.Equal(\u0022SL4\u0022, reservation.StartLocation);\r\n    Assert.Equal(\u0022EL4\u0022, reservation.EndLocation);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Test_PUT_UpdateReservation",
        "Body": "{\r\n    // Arrange\r\n    Reservation r = new Reservation()\r\n    {\r\n        Id = 3,\r\n        Name = \u0022new name\u0022,\r\n        StartLocation = \u0022new start location\u0022,\r\n        EndLocation = \u0022new end location\u0022\r\n    };\r\n    var mockRepo = new Mock\u003CIRepository\u003E();\r\n    mockRepo.Setup(repo =\u003E repo.UpdateReservation(It.IsAny\u003CReservation\u003E())).Returns(r);\r\n    var controller = new ReservationController(mockRepo.Object);\r\n    // Act\r\n    var result = controller.Put(r);\r\n    // Assert\r\n    var reservation = Assert.IsType\u003CReservation\u003E(result);\r\n    Assert.Equal(3, reservation.Id);\r\n    Assert.Equal(\u0022new name\u0022, reservation.Name);\r\n    Assert.Equal(\u0022new start location\u0022, reservation.StartLocation);\r\n    Assert.Equal(\u0022new end location\u0022, reservation.EndLocation);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Test_DELETE_Reservation",
        "Body": "{\r\n    // Arrange\r\n    var mockRepo = new Mock\u003CIRepository\u003E();\r\n    mockRepo.Setup(repo =\u003E repo.DeleteReservation(It.IsAny\u003Cint\u003E())).Verifiable();\r\n    var controller = new ReservationController(mockRepo.Object);\r\n    // Act\r\n    controller.Delete(3);\r\n    // Assert\r\n    mockRepo.Verify();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TestParty",
    "Message": null,
    "ProjectName": "TestingProject",
    "Methods": [
      {
        "Name": "Test_Entry_GET_ReturnsViewResultNullModel",
        "Body": "{\r\n    // Arrange\r\n    var controller = new PartyController();\r\n    // Act\r\n    var result = controller.Entry();\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CViewResult\u003E(result);\r\n    Assert.Null(viewResult.ViewData.Model);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Test_Entry_POST_InvalidModelState",
        "Body": "{\r\n    // Arrange\r\n    var controller = new PartyController();\r\n    // Act\r\n    var result = controller.Entry(null, null);\r\n    // Assert\r\n    var badRequestResult = Assert.IsType\u003CBadRequestObjectResult\u003E(result);\r\n    Assert.IsType\u003CSerializableError\u003E(badRequestResult.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Test_Entry_POST_ValidModelState",
        "Body": "{\r\n    // Arrange\r\n    string name = \u0022Tom Cruise\u0022, membership = \u0022Platinum\u0022;\r\n    var controller = new PartyController();\r\n    // Act\r\n    var result = controller.Entry(name, membership);\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CViewResult\u003E(result);\r\n    var model = Assert.IsAssignableFrom\u003Cstring\u003E(viewResult.ViewData.Model);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TestRegister",
    "Message": null,
    "ProjectName": "TestingProject",
    "Methods": [
      {
        "Name": "Test_Create_GET_ReturnsViewResultNullModel",
        "Body": "{\r\n    // Arrange\r\n    IRegisterRepository context = null;\r\n    var controller = new RegisterController(context);\r\n    // Act\r\n    var result = controller.Create();\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CViewResult\u003E(result);\r\n    Assert.Null(viewResult.ViewData.Model);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Test_Create_POST_InvalidModelState",
        "Body": "{\r\n    // Arrange\r\n    var r = new Register()\r\n    {\r\n        Id = 4,\r\n        Name = \u0022Test Four\u0022,\r\n        Age = 59\r\n    };\r\n    var mockRepo = new Mock\u003CIRegisterRepository\u003E();\r\n    mockRepo.Setup(repo =\u003E repo.CreateAsync(It.IsAny\u003CRegister\u003E()));\r\n    var controller = new RegisterController(mockRepo.Object);\r\n    controller.ModelState.AddModelError(\u0022Name\u0022, \u0022Name is required\u0022);\r\n    // Act\r\n    var result = await controller.Create(r);\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CViewResult\u003E(result);\r\n    Assert.Null(viewResult.ViewData.Model);\r\n    mockRepo.Verify();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Test_Create_POST_ValidModelState",
        "Body": "{\r\n    // Arrange\r\n    var r = new Register()\r\n    {\r\n        Id = 4,\r\n        Name = \u0022Test Four\u0022,\r\n        Age = 59\r\n    };\r\n    var mockRepo = new Mock\u003CIRegisterRepository\u003E();\r\n    mockRepo.Setup(repo =\u003E repo.CreateAsync(It.IsAny\u003CRegister\u003E())).Returns(Task.CompletedTask).Verifiable();\r\n    var controller = new RegisterController(mockRepo.Object);\r\n    // Act\r\n    var result = await controller.Create(r);\r\n    // Assert\r\n    var redirectToActionResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    Assert.Null(redirectToActionResult.ControllerName);\r\n    Assert.Equal(\u0022Read\u0022, redirectToActionResult.ActionName);\r\n    mockRepo.Verify();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Test_Read_GET_ReturnsViewResult_WithAListOfRegistrations",
        "Body": "{\r\n    // Arrange\r\n    var mockRepo = new Mock\u003CIRegisterRepository\u003E();\r\n    mockRepo.Setup(repo =\u003E repo.ListAsync()).ReturnsAsync(GetTestRegistrations());\r\n    var controller = new RegisterController(mockRepo.Object);\r\n    // Act\r\n    var result = await controller.Read();\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CViewResult\u003E(result);\r\n    var model = Assert.IsAssignableFrom\u003CIEnumerable\u003CRegister\u003E\u003E(viewResult.ViewData.Model);\r\n    Assert.Equal(3, model.Count());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Test_Update_GET_ReturnsViewResult_WithSingleRegistration",
        "Body": "{\r\n    // Arrange\r\n    int testId = 2;\r\n    string testName = \u0022test name\u0022;\r\n    int testAge = 60;\r\n    var mockRepo = new Mock\u003CIRegisterRepository\u003E();\r\n    mockRepo.Setup(repo =\u003E repo.GetByIdAsync(testId)).ReturnsAsync(GetTestRegisterRecord());\r\n    var controller = new RegisterController(mockRepo.Object);\r\n    // Act\r\n    var result = await controller.Update(testId);\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CViewResult\u003E(result);\r\n    var model = Assert.IsAssignableFrom\u003CRegister\u003E(viewResult.ViewData.Model);\r\n    Assert.Equal(testId, model.Id);\r\n    Assert.Equal(testName, model.Name);\r\n    Assert.Equal(testAge, model.Age);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Test_Update_POST_ReturnsViewResult_InValidModelState",
        "Body": "{\r\n    // Arrange\r\n    int testId = 2;\r\n    Register r = GetTestRegisterRecord();\r\n    var mockRepo = new Mock\u003CIRegisterRepository\u003E();\r\n    mockRepo.Setup(repo =\u003E repo.GetByIdAsync(testId)).ReturnsAsync(GetTestRegisterRecord());\r\n    var controller = new RegisterController(mockRepo.Object);\r\n    controller.ModelState.AddModelError(\u0022Name\u0022, \u0022Name is required\u0022);\r\n    // Act\r\n    var result = await controller.Update(r);\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CViewResult\u003E(result);\r\n    var model = Assert.IsAssignableFrom\u003CRegister\u003E(viewResult.ViewData.Model);\r\n    Assert.Equal(testId, model.Id);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Test_Update_POST_ReturnsViewResult_ValidModelState",
        "Body": "{\r\n    // Arrange\r\n    int testId = 2;\r\n    var r = new Register()\r\n    {\r\n        Id = 2,\r\n        Name = \u0022Test Two\u0022,\r\n        Age = 55\r\n    };\r\n    var mockRepo = new Mock\u003CIRegisterRepository\u003E();\r\n    mockRepo.Setup(repo =\u003E repo.GetByIdAsync(testId)).ReturnsAsync(GetTestRegisterRecord());\r\n    var controller = new RegisterController(mockRepo.Object);\r\n    mockRepo.Setup(repo =\u003E repo.UpdateAsync(It.IsAny\u003CRegister\u003E())).Returns(Task.CompletedTask).Verifiable();\r\n    // Act\r\n    var result = await controller.Update(r);\r\n    // Assert\r\n    var viewResult = Assert.IsType\u003CViewResult\u003E(result);\r\n    var model = Assert.IsAssignableFrom\u003CRegister\u003E(viewResult.ViewData.Model);\r\n    Assert.Equal(testId, model.Id);\r\n    Assert.Equal(r.Name, model.Name);\r\n    Assert.Equal(r.Age, model.Age);\r\n    mockRepo.Verify();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Test_Delete_POST_ReturnsViewResult_InValidModelState",
        "Body": "{\r\n    // Arrange\r\n    int testId = 2;\r\n    var mockRepo = new Mock\u003CIRegisterRepository\u003E();\r\n    mockRepo.Setup(repo =\u003E repo.DeleteAsync(It.IsAny\u003Cint\u003E())).Returns(Task.CompletedTask).Verifiable();\r\n    var controller = new RegisterController(mockRepo.Object);\r\n    // Act\r\n    var result = await controller.Delete(testId);\r\n    // Assert\r\n    var redirectToActionResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n    Assert.Null(redirectToActionResult.ControllerName);\r\n    Assert.Equal(\u0022Read\u0022, redirectToActionResult.ActionName);\r\n    mockRepo.Verify();\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TestRegistration",
    "Message": null,
    "ProjectName": "TestingProject",
    "Methods": [
      {
        "Name": "Test_Create_GET_ReturnsViewResultNullModel",
        "Body": "{\r\n    using (var context = new AppDbContext(ContextOptions))\r\n    {\r\n        // Arrange\r\n        var controller = new RegistrationController(context);\r\n        // Act\r\n        var result = controller.Create();\r\n        // Assert\r\n        var viewResult = Assert.IsType\u003CViewResult\u003E(result);\r\n        Assert.Null(viewResult.ViewData.Model);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Test_Create_POST_InvalidModelState",
        "Body": "{\r\n    using (var context = new AppDbContext(ContextOptions))\r\n    {\r\n        // Arrange\r\n        var r = new Register()\r\n        {\r\n            Id = 4,\r\n            Name = \u0022Test Four\u0022,\r\n            Age = 59\r\n        };\r\n        var controller = new RegistrationController(context);\r\n        controller.ModelState.AddModelError(\u0022Name\u0022, \u0022Name is required\u0022);\r\n        // Act\r\n        var result = await controller.Create(r);\r\n        // Assert\r\n        var viewResult = Assert.IsType\u003CViewResult\u003E(result);\r\n        Assert.Null(viewResult.ViewData.Model);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Test_Create_POST_ValidModelState",
        "Body": "{\r\n    using (var context = new AppDbContext(ContextOptions))\r\n    {\r\n        // Arrange\r\n        var r = new Register()\r\n        {\r\n            Id = 4,\r\n            Name = \u0022Test Four\u0022,\r\n            Age = 59\r\n        };\r\n        var controller = new RegistrationController(context);\r\n        // Act\r\n        var result = await controller.Create(r);\r\n        // Assert\r\n        var redirectToActionResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n        Assert.Null(redirectToActionResult.ControllerName);\r\n        Assert.Equal(\u0022Read\u0022, redirectToActionResult.ActionName);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Test_Read_GET_ReturnsViewResult_WithAListOfRegistrations",
        "Body": "{\r\n    using (var context = new AppDbContext(ContextOptions))\r\n    {\r\n        // Arrange\r\n        var controller = new RegistrationController(context);\r\n        // Act\r\n        var result = controller.Read();\r\n        // Assert\r\n        var viewResult = Assert.IsType\u003CViewResult\u003E(result);\r\n        var model = Assert.IsAssignableFrom\u003CIEnumerable\u003CRegister\u003E\u003E(viewResult.ViewData.Model);\r\n        Assert.Equal(3, model.Count());\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Test_Update_GET_ReturnsViewResult_WithSingleRegistration",
        "Body": "{\r\n    using (var context = new AppDbContext(ContextOptions))\r\n    {\r\n        // Arrange\r\n        int testId = 2;\r\n        var controller = new RegistrationController(context);\r\n        // Act\r\n        var result = controller.Update(testId);\r\n        // Assert\r\n        var viewResult = Assert.IsType\u003CViewResult\u003E(result);\r\n        var model = Assert.IsAssignableFrom\u003CRegister\u003E(viewResult.ViewData.Model);\r\n        Assert.Equal(testId, model.Id);\r\n        Assert.Equal(\u0022Test Two\u0022, model.Name);\r\n        Assert.Equal(50, model.Age);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Test_Update_POST_ReturnsViewResult_InValidModelState",
        "Body": "{\r\n    using (var context = new AppDbContext(ContextOptions))\r\n    {\r\n        // Arrange\r\n        int testId = 2;\r\n        var r = new Register()\r\n        {\r\n            Id = 2,\r\n            Name = \u0022Test Four\u0022,\r\n            Age = 59\r\n        };\r\n        var controller = new RegistrationController(context);\r\n        controller.ModelState.AddModelError(\u0022Name\u0022, \u0022Name is required\u0022);\r\n        // Act\r\n        var result = await controller.Update(r);\r\n        // Assert\r\n        var viewResult = Assert.IsType\u003CViewResult\u003E(result);\r\n        var model = Assert.IsAssignableFrom\u003CRegister\u003E(viewResult.ViewData.Model);\r\n        Assert.Equal(testId, model.Id);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Test_Update_POST_ReturnsViewResult_ValidModelState",
        "Body": "{\r\n    using (var context = new AppDbContext(ContextOptions))\r\n    {\r\n        // Arrange\r\n        int testId = 2;\r\n        var r = new Register()\r\n        {\r\n            Id = 2,\r\n            Name = \u0022Test Four\u0022,\r\n            Age = 59\r\n        };\r\n        var controller = new RegistrationController(context);\r\n        // Act\r\n        var result = await controller.Update(r);\r\n        // Assert\r\n        var viewResult = Assert.IsType\u003CViewResult\u003E(result);\r\n        var model = Assert.IsAssignableFrom\u003CRegister\u003E(viewResult.ViewData.Model);\r\n        Assert.Equal(testId, model.Id);\r\n        Assert.Equal(r.Name, model.Name);\r\n        Assert.Equal(r.Age, model.Age);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Test_Delete_POST_ReturnsViewResult_InValidModelState",
        "Body": "{\r\n    using (var context = new AppDbContext(ContextOptions))\r\n    {\r\n        // Arrange\r\n        int testId = 2;\r\n        var controller = new RegistrationController(context);\r\n        // Act\r\n        var result = await controller.Delete(testId);\r\n        // Assert\r\n        var redirectToActionResult = Assert.IsType\u003CRedirectToActionResult\u003E(result);\r\n        Assert.Null(redirectToActionResult.ControllerName);\r\n        Assert.Equal(\u0022Read\u0022, redirectToActionResult.ActionName);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TestTeslaStock",
    "Message": null,
    "ProjectName": "TestingProject",
    "Methods": [
      {
        "Name": "Test_Predict",
        "Body": "{\r\n    // Arrange\r\n    TeslaStock TS = new TeslaStock();\r\n    // Act\r\n    int newValue = TS.Predict(800);\r\n    // Assert\r\n    Assert.Equal(1200, newValue);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Test_PredictMultiple",
        "Body": "{\r\n    // Arrange\r\n    TeslaStock TS = new TeslaStock();\r\n    // Act\r\n    int newValue = TS.Predict(currentValue);\r\n    int calculate = Convert.ToInt32(currentValue \u002B (.5 * currentValue));\r\n    // Assert\r\n    Assert.Equal(currentValue \u002B (.5 * currentValue), newValue);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RegisterControllerIntegrationTests",
    "Message": null,
    "ProjectName": "IntegrationTestingProject",
    "Methods": [
      {
        "Name": "Read_GET_Action",
        "Body": "{\r\n    // Act\r\n    var response = await _client.GetAsync(\u0022/Register/Read\u0022);\r\n    // Assert\r\n    response.EnsureSuccessStatusCode();\r\n    var responseString = await response.Content.ReadAsStringAsync();\r\n    Assert.Equal(\u0022text/html; charset=utf-8\u0022, response.Content.Headers.ContentType.ToString());\r\n    Assert.Contains(\u0022\u003Ch1 class=\\\u0022bg-info text-white\\\u0022\u003ERecords\u003C/h1\u003E\u0022, responseString);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Create_GET_Action",
        "Body": "{\r\n    // Act\r\n    var response = await _client.GetAsync(\u0022/Register/Create\u0022);\r\n    // Assert\r\n    response.EnsureSuccessStatusCode();\r\n    var responseString = await response.Content.ReadAsStringAsync();\r\n    Assert.Contains(\u0022Create Record\u0022, responseString);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Create_POST_Action_InvalidModel",
        "Body": "{\r\n    // Arrange\r\n    var initialRes = await _client.GetAsync(\u0022/Register/Create\u0022);\r\n    var antiForgeryVal = await AntiForgeryTokenExtractor.ExtractAntiForgeryValues(initialRes);\r\n    var postRequest = new HttpRequestMessage(HttpMethod.Post, \u0022/Register/Create\u0022);\r\n    postRequest.Headers.Add(\u0022Cookie\u0022, new CookieHeaderValue(AntiForgeryTokenExtractor.Cookie, antiForgeryVal.cookie).ToString());\r\n    var formModel = new Dictionary\u003Cstring, string\u003E\r\n    {\r\n        {\r\n            AntiForgeryTokenExtractor.Field,\r\n            antiForgeryVal.field\r\n        },\r\n        {\r\n            \u0022Name\u0022,\r\n            \u0022New Person\u0022\r\n        },\r\n        {\r\n            \u0022Age\u0022,\r\n            \u002225\u0022\r\n        }\r\n    };\r\n    postRequest.Content = new FormUrlEncodedContent(formModel);\r\n    // Act\r\n    var response = await _client.SendAsync(postRequest);\r\n    // Assert\r\n    response.EnsureSuccessStatusCode();\r\n    var responseString = await response.Content.ReadAsStringAsync();\r\n    Assert.Contains(\u0022The field Age must be between 40 and 60\u0022, responseString);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Create_POST_Action_ValidModel",
        "Body": "{\r\n    // Arrange\r\n    var initialRes = await _client.GetAsync(\u0022/Register/Create\u0022);\r\n    var antiForgeryVal = await AntiForgeryTokenExtractor.ExtractAntiForgeryValues(initialRes);\r\n    var postRequest = new HttpRequestMessage(HttpMethod.Post, \u0022/Register/Create\u0022);\r\n    postRequest.Headers.Add(\u0022Cookie\u0022, new CookieHeaderValue(AntiForgeryTokenExtractor.Cookie, antiForgeryVal.cookie).ToString());\r\n    var formModel = new Dictionary\u003Cstring, string\u003E\r\n    {\r\n        {\r\n            AntiForgeryTokenExtractor.Field,\r\n            antiForgeryVal.field\r\n        },\r\n        {\r\n            \u0022Name\u0022,\r\n            \u0022New Person\u0022\r\n        },\r\n        {\r\n            \u0022Age\u0022,\r\n            \u002245\u0022\r\n        }\r\n    };\r\n    postRequest.Content = new FormUrlEncodedContent(formModel);\r\n    // Act\r\n    var response = await _client.SendAsync(postRequest);\r\n    // Assert\r\n    response.EnsureSuccessStatusCode();\r\n    var responseString = await response.Content.ReadAsStringAsync();\r\n    Assert.Contains(\u0022New Person\u0022, responseString);\r\n    Assert.Contains(\u002245\u0022, responseString);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "UITest",
    "Message": null,
    "ProjectName": "UITestingProject",
    "Methods": [
      {
        "Name": "Create_GET_ReturnsCreateView",
        "Body": "{\r\n    driver.Navigate().GoToUrl(\u0022https://localhost:44386/Register/Create\u0022);\r\n    Assert.Equal(\u0022Create Record - MyAppT\u0022, driver.Title);\r\n    Assert.Contains(\u0022Create Record\u0022, driver.PageSource);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Create_POST_InvalidModel",
        "Body": "{\r\n    driver.Navigate().GoToUrl(\u0022https://localhost:44386/Register/Create\u0022);\r\n    driver.FindElement(By.Id(\u0022Name\u0022)).SendKeys(\u0022Test\u0022);\r\n    driver.FindElement(By.Id(\u0022Age\u0022)).SendKeys(\u002230\u0022);\r\n    driver.FindElement(By.ClassName(\u0022btn-primary\u0022)).Click();\r\n    var errorMessage = driver.FindElement(By.CssSelector(\u0022.validation-summary-errors \u003E ul \u003E li\u0022)).Text;\r\n    Assert.Equal(\u0022The field Age must be between 40 and 60.\u0022, errorMessage);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Create_POST_ValidModel",
        "Body": "{\r\n    driver.Navigate().GoToUrl(\u0022https://localhost:44386/Register/Create\u0022);\r\n    driver.FindElement(By.Id(\u0022Name\u0022)).SendKeys(\u0022Test\u0022);\r\n    driver.FindElement(By.Id(\u0022Age\u0022)).SendKeys(\u002240\u0022);\r\n    driver.FindElement(By.ClassName(\u0022btn-primary\u0022)).Click();\r\n    Assert.Equal(\u0022Records - MyAppT\u0022, driver.Title);\r\n    Assert.Contains(\u0022Test\u0022, driver.PageSource);\r\n    Assert.Contains(\u002240\u0022, driver.PageSource);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  }
]