[
  {
    "Name": "CustomerFacadeTest",
    "Message": null,
    "ProjectName": "CF.Customer.UnitTest",
    "Methods": [
      {
        "Name": "CreateTest",
        "Body": "{\r\n    //Arrange\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Id = 1,\r\n        Password = \u0022P@013333343\u0022,\r\n        Email = \u0022test1@test.com\u0022,\r\n        Surname = \u0022Surname\u0022,\r\n        FirstName = \u0022First Name\u0022\r\n    };\r\n    var customerRequestDto = new CustomerRequestDto\r\n    {\r\n        Email = \u0022test1@test.com\u0022,\r\n        Surname = \u0022Surname\u0022,\r\n        FirstName = \u0022First Name\u0022,\r\n        Password = \u0022P@013333343\u0022,\r\n        ConfirmPassword = \u0022P@013333343\u0022\r\n    };\r\n    const long id = 1;\r\n    var mockService = new Mock\u003CICustomerService\u003E();\r\n    var mockMapper = new Mock\u003CIMapper\u003E();\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    mockMapper.Setup(x =\u003E x.Map\u003CCustomer.Domain.Entities.Customer\u003E(customerRequestDto)).Returns(customer);\r\n    mockService.Setup(x =\u003E x.CreateAsync(customer, cancellationTokenSource.Token)).ReturnsAsync(id);\r\n    //Act\r\n    var mockFacade = new CustomerFacade(mockService.Object, mockMapper.Object);\r\n    var result = await mockFacade.CreateAsync(customerRequestDto, cancellationTokenSource.Token);\r\n    //Assert\r\n    Assert.Equal(id, result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetTest",
        "Body": "{\r\n    //Arrange\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Id = 1,\r\n        Password = \u0022P@013333343\u0022,\r\n        Email = \u0022test1@test.com\u0022,\r\n        Surname = \u0022Surname\u0022,\r\n        FirstName = \u0022First Name\u0022\r\n    };\r\n    var customerResponseDto = new CustomerResponseDto\r\n    {\r\n        Id = 1,\r\n        Email = \u0022test1@test.com\u0022,\r\n        Surname = \u0022Surname\u0022,\r\n        FirstName = \u0022First Name\u0022,\r\n        FullName = \u0022First Name Surname\u0022\r\n    };\r\n    var filterDto = new CustomerFilterDto\r\n    {\r\n        Id = 1\r\n    };\r\n    var filter = new CustomerFilter\r\n    {\r\n        Id = 1\r\n    };\r\n    var mockService = new Mock\u003CICustomerService\u003E();\r\n    var mockMapper = new Mock\u003CIMapper\u003E();\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    mockMapper.Setup(x =\u003E x.Map\u003CCustomerResponseDto\u003E(customer)).Returns(customerResponseDto);\r\n    mockMapper.Setup(x =\u003E x.Map\u003CCustomerFilter\u003E(filterDto)).Returns(filter);\r\n    mockService.Setup(x =\u003E x.GetByFilterAsync(filter, cancellationTokenSource.Token)).ReturnsAsync(customer);\r\n    //act\r\n    var mockFacade = new CustomerFacade(mockService.Object, mockMapper.Object);\r\n    var result = await mockFacade.GetByFilterAsync(filterDto, cancellationTokenSource.Token);\r\n    //assert\r\n    Assert.Equal(customer.Id, result.Id);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetListTest",
        "Body": "{\r\n    //Arrange\r\n    var customerOne = new Customer.Domain.Entities.Customer\r\n    {\r\n        Id = 1,\r\n        Password = \u0022sdfdsfdsfds\u0022,\r\n        Email = \u0022test@test.com\u0022,\r\n        Surname = \u0022Surname\u0022,\r\n        FirstName = \u0022Ronaldo\u0022,\r\n        Updated = DateTime.Now,\r\n        Created = DateTime.Now\r\n    };\r\n    var customerTwo = new Customer.Domain.Entities.Customer\r\n    {\r\n        Id = 2,\r\n        Password = \u0022sdfdsfdsfds\u0022,\r\n        Email = \u0022test@test.com\u0022,\r\n        Surname = \u0022Surname\u0022,\r\n        FirstName = \u0022Ronaldinho\u0022,\r\n        Updated = DateTime.Now,\r\n        Created = DateTime.Now\r\n    };\r\n    var customers = new List\u003CCustomer.Domain.Entities.Customer\u003E\r\n    {\r\n        customerOne,\r\n        customerTwo\r\n    };\r\n    var pagination = new Pagination\u003CCustomer.Domain.Entities.Customer\u003E\r\n    {\r\n        PageSize = 10,\r\n        CurrentPage = 1,\r\n        Count = 2,\r\n        Result = customers\r\n    };\r\n    var customerOneDto = new CustomerResponseDto\r\n    {\r\n        Id = 1,\r\n        Email = \u0022test@test.com\u0022,\r\n        Surname = \u0022Surname\u0022,\r\n        FirstName = \u0022Ronaldo\u0022\r\n    };\r\n    var customerTwoDto = new CustomerResponseDto\r\n    {\r\n        Id = 2,\r\n        Email = \u0022test@test.com\u0022,\r\n        Surname = \u0022Surname\u0022,\r\n        FirstName = \u0022Ronaldinho\u0022\r\n    };\r\n    var customersDto = new List\u003CCustomerResponseDto\u003E\r\n    {\r\n        customerOneDto,\r\n        customerTwoDto\r\n    };\r\n    var paginationDto = new PaginationDto\u003CCustomerResponseDto\u003E\r\n    {\r\n        PageSize = 10,\r\n        CurrentPage = 1,\r\n        Count = 2,\r\n        TotalPages = 1,\r\n        Result = customersDto\r\n    };\r\n    var filterDto = new CustomerFilterDto\r\n    {\r\n        Id = 1\r\n    };\r\n    var filter = new CustomerFilter\r\n    {\r\n        Id = 1\r\n    };\r\n    var mockService = new Mock\u003CICustomerService\u003E();\r\n    var mockMapper = new Mock\u003CIMapper\u003E();\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    mockMapper.Setup(x =\u003E x.Map\u003CCustomerFilter\u003E(filterDto)).Returns(filter);\r\n    mockMapper.Setup(x =\u003E x.Map\u003CPaginationDto\u003CCustomerResponseDto\u003E\u003E(pagination)).Returns(paginationDto);\r\n    mockService.Setup(x =\u003E x.GetListByFilterAsync(filter, cancellationTokenSource.Token)).ReturnsAsync(pagination);\r\n    //Act\r\n    var mockFacade = new CustomerFacade(mockService.Object, mockMapper.Object);\r\n    var result = await mockFacade.GetListByFilterAsync(filterDto, cancellationTokenSource.Token);\r\n    //Assert\r\n    Assert.Equal(paginationDto.Count, result.Count);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "UpdateTest",
        "Body": "{\r\n    //Arrange\r\n    var customerRequestDto = new CustomerRequestDto\r\n    {\r\n        Password = \u0022Passrrr@1\u0022,\r\n        ConfirmPassword = \u0022Passrrr@1\u0022,\r\n        Email = \u0022test@test.com\u0022,\r\n        Surname = \u0022Surname\u0022,\r\n        FirstName = \u0022First Name\u0022\r\n    };\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Password = \u0022Passrrr@1\u0022,\r\n        Email = \u0022test@test.com\u0022,\r\n        Surname = \u0022Surname\u0022,\r\n        FirstName = \u0022First Name\u0022\r\n    };\r\n    const long id = 1;\r\n    var mockService = new Mock\u003CICustomerService\u003E();\r\n    var mockMapper = new Mock\u003CIMapper\u003E();\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    //Act\r\n    mockMapper.Setup(x =\u003E x.Map\u003CCustomer.Domain.Entities.Customer\u003E(customerRequestDto)).Returns(customer);\r\n    var mockFacade = new CustomerFacade(mockService.Object, mockMapper.Object);\r\n    //Assert\r\n    try\r\n    {\r\n        await Assert.ThrowsAsync\u003CException\u003E(() =\u003E mockFacade.UpdateAsync(id, customerRequestDto, cancellationTokenSource.Token));\r\n    }\r\n    catch (AssertActualExpectedException exception)\r\n    {\r\n        Assert.Equal(\u0022(No exception was thrown)\u0022, exception.Actual);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteTest",
        "Body": "{\r\n    //Arrange\r\n    const long id = 1;\r\n    var mockService = new Mock\u003CICustomerService\u003E();\r\n    var mockMapper = new Mock\u003CIMapper\u003E();\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    //Act\r\n    var mockFacade = new CustomerFacade(mockService.Object, mockMapper.Object);\r\n    //Assert\r\n    try\r\n    {\r\n        await Assert.ThrowsAsync\u003CException\u003E(() =\u003E mockFacade.DeleteAsync(id, cancellationTokenSource.Token));\r\n    }\r\n    catch (AssertActualExpectedException exception)\r\n    {\r\n        Assert.Equal(\u0022(No exception was thrown)\u0022, exception.Actual);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CustomerTest",
    "Message": null,
    "ProjectName": "CF.Customer.UnitTest",
    "Methods": [
      {
        "Name": "InvalidPasswordRequirementsTest",
        "Body": "{\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Password = password\r\n    };\r\n    const string invalidPasswordErrorMessage = \u0022Password must be at least 8 characters and contain at 3 of the following: upper case (A-Z), lower case (a-z), number (0-9) and special character (e.g. !@#$%^\u0026*).\u0022;\r\n    var exception = Assert.Throws\u003CValidationException\u003E(() =\u003E customer.ValidatePassword());\r\n    Assert.Equal(invalidPasswordErrorMessage, exception.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ValidPasswordRequirementsTest",
        "Body": "{\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Password = \u0022P@ssWord1\u0022\r\n    };\r\n    try\r\n    {\r\n        Assert.Throws\u003CException\u003E(() =\u003E customer.ValidatePassword());\r\n    }\r\n    catch (AssertActualExpectedException exception)\r\n    {\r\n        Assert.Equal(\u0022(No exception was thrown)\u0022, exception.Actual);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InvalidEmailFormatTest",
        "Body": "{\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Email = email\r\n    };\r\n    const string invalidEmailFormatErrorMessage = \u0022The Email is not a valid e-mail address.\u0022;\r\n    var exception = Assert.Throws\u003CValidationException\u003E(() =\u003E customer.ValidateEmail());\r\n    Assert.Equal(invalidEmailFormatErrorMessage, exception.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InvalidEmailRequiredTest",
        "Body": "{\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Email = string.Empty\r\n    };\r\n    const string invalidEmailFormatErrorMessage = \u0022The Email is required.\u0022;\r\n    var exception = Assert.Throws\u003CValidationException\u003E(() =\u003E customer.ValidateEmail());\r\n    Assert.Equal(invalidEmailFormatErrorMessage, exception.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ValidEmailTest",
        "Body": "{\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Email = \u0022valdivia@gmail.com\u0022\r\n    };\r\n    try\r\n    {\r\n        Assert.Throws\u003CException\u003E(() =\u003E customer.ValidateEmail());\r\n    }\r\n    catch (AssertActualExpectedException exception)\r\n    {\r\n        Assert.Equal(\u0022(No exception was thrown)\u0022, exception.Actual);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InvalidFirstNameTest",
        "Body": "{\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        FirstName = firstName\r\n    };\r\n    const string invalidFirstName = \u0022The First Name must be a string with a minimum length of 2 and a maximum length of 100.\u0022;\r\n    var exception = Assert.Throws\u003CValidationException\u003E(() =\u003E customer.ValidateFirstName());\r\n    Assert.Equal(invalidFirstName, exception.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ValidFirstNameTest",
        "Body": "{\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        FirstName = \u0022Valdivia\u0022\r\n    };\r\n    try\r\n    {\r\n        Assert.Throws\u003CException\u003E(() =\u003E customer.ValidateFirstName());\r\n    }\r\n    catch (AssertActualExpectedException exception)\r\n    {\r\n        Assert.Equal(\u0022(No exception was thrown)\u0022, exception.Actual);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InvalidFirstNameRequiredTest",
        "Body": "{\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        FirstName = string.Empty\r\n    };\r\n    const string invalidEmailFormatErrorMessage = \u0022The First Name is required.\u0022;\r\n    var exception = Assert.Throws\u003CValidationException\u003E(() =\u003E customer.ValidateFirstName());\r\n    Assert.Equal(invalidEmailFormatErrorMessage, exception.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InvalidSurnameTest",
        "Body": "{\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Surname = surname\r\n    };\r\n    const string invalidSurname = \u0022The Surname must be a string with a minimum length of 2 and a maximum length of 100.\u0022;\r\n    var exception = Assert.Throws\u003CValidationException\u003E(() =\u003E customer.ValidateSurname());\r\n    Assert.Equal(invalidSurname, exception.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ValidSurnameTest",
        "Body": "{\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Surname = \u0022Valdivia\u0022\r\n    };\r\n    try\r\n    {\r\n        Assert.Throws\u003CException\u003E(() =\u003E customer.ValidateSurname());\r\n    }\r\n    catch (AssertActualExpectedException exception)\r\n    {\r\n        Assert.Equal(\u0022(No exception was thrown)\u0022, exception.Actual);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InvalidSurnameRequiredTest",
        "Body": "{\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Surname = string.Empty\r\n    };\r\n    const string invalidEmailFormatErrorMessage = \u0022The Surname is required.\u0022;\r\n    var exception = Assert.Throws\u003CValidationException\u003E(() =\u003E customer.ValidateSurname());\r\n    Assert.Equal(invalidEmailFormatErrorMessage, exception.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetFullName",
        "Body": "{\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        FirstName = \u0022Valdivia\u0022,\r\n        Surname = \u0022El Mago\u0022\r\n    };\r\n    Assert.Equal(\u0022Valdivia El Mago\u0022, customer.GetFullName());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SetCreatedDate",
        "Body": "{\r\n    var customer = new Customer.Domain.Entities.Customer();\r\n    var actualDate = DateTime.Now;\r\n    customer.SetCreatedDate();\r\n    Assert.True(customer.Created \u003E= actualDate);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SetUpdatedDate",
        "Body": "{\r\n    var customer = new Customer.Domain.Entities.Customer();\r\n    customer.SetUpdatedDate();\r\n    Assert.NotNull(customer.Updated);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CustomerServiceTest",
    "Message": null,
    "ProjectName": "CF.Customer.UnitTest",
    "Methods": [
      {
        "Name": "GetTest",
        "Body": "{\r\n    //Arrange\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Id = 1,\r\n        Password = \u0022Password@01\u0022,\r\n        Email = \u0022test@test.com\u0022,\r\n        Surname = \u0022Surname\u0022,\r\n        FirstName = \u0022FirstName\u0022,\r\n        Updated = DateTime.Now,\r\n        Created = DateTime.Now\r\n    };\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    //Act\r\n    var mockRepository = new Mock\u003CICustomerRepository\u003E();\r\n    var mockPassword = new Mock\u003CIPasswordHasherService\u003E();\r\n    var filter = new CustomerFilter\r\n    {\r\n        Id = 1\r\n    };\r\n    mockRepository.Setup(x =\u003E x.GetByFilterAsync(filter, cancellationTokenSource.Token)).ReturnsAsync(customer);\r\n    var mockService = new CustomerService(mockRepository.Object, mockPassword.Object);\r\n    var result = await mockService.GetByFilterAsync(filter, cancellationTokenSource.Token);\r\n    //Assert\r\n    Assert.Equal(customer.Id, result.Id);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetListTest",
        "Body": "{\r\n    //Arrange\r\n    var customerOne = new Customer.Domain.Entities.Customer\r\n    {\r\n        Id = 1,\r\n        Password = \u0022Password@01\u0022,\r\n        Email = \u0022test1@test.com\u0022,\r\n        Surname = \u0022Surname\u0022,\r\n        FirstName = \u0022FirstName\u0022,\r\n        Updated = DateTime.Now,\r\n        Created = DateTime.Now\r\n    };\r\n    var customerTwo = new Customer.Domain.Entities.Customer\r\n    {\r\n        Id = 2,\r\n        Password = \u0022Password@01\u0022,\r\n        Email = \u0022test2@test.com\u0022,\r\n        Surname = \u0022Surname\u0022,\r\n        FirstName = \u0022FirstName\u0022,\r\n        Updated = DateTime.Now,\r\n        Created = DateTime.Now\r\n    };\r\n    var customers = new List\u003CCustomer.Domain.Entities.Customer\u003E\r\n    {\r\n        customerOne,\r\n        customerTwo\r\n    };\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    //Act\r\n    var mockRepository = new Mock\u003CICustomerRepository\u003E();\r\n    var mockPassword = new Mock\u003CIPasswordHasherService\u003E();\r\n    var filter = new CustomerFilter\r\n    {\r\n        PageSize = 10,\r\n        CurrentPage = 1\r\n    };\r\n    mockRepository.Setup(x =\u003E x.CountByFilterAsync(filter, cancellationTokenSource.Token)).ReturnsAsync(customers.Count);\r\n    mockRepository.Setup(x =\u003E x.GetListByFilterAsync(filter, cancellationTokenSource.Token)).ReturnsAsync(customers);\r\n    var mockService = new CustomerService(mockRepository.Object, mockPassword.Object);\r\n    var result = await mockService.GetListByFilterAsync(filter, cancellationTokenSource.Token);\r\n    //Assert\r\n    Assert.Equal(2, result.Count);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateInvalidFirstNameMinLengthTest",
        "Body": "{\r\n    //Arrange\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Password = \u0022Password@01\u0022,\r\n        Email = \u0022test1@test.com\u0022,\r\n        Surname = \u0022Surname\u0022,\r\n        FirstName = \u0022F\u0022\r\n    };\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    //Act\r\n    var mockRepository = new Mock\u003CICustomerRepository\u003E();\r\n    var mockPassword = new Mock\u003CIPasswordHasherService\u003E();\r\n    var mockService = new CustomerService(mockRepository.Object, mockPassword.Object);\r\n    var exception = await Assert.ThrowsAsync\u003CValidationException\u003E(() =\u003E mockService.CreateAsync(customer, cancellationTokenSource.Token));\r\n    //Assert\r\n    Assert.NotNull(exception);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateInvalidFirstNameEmptyTest",
        "Body": "{\r\n    //Arrange\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Password = \u0022Password@01\u0022,\r\n        Email = \u0022test1@test.com\u0022,\r\n        Surname = \u0022Surname\u0022,\r\n        FirstName = \u0022\u0022\r\n    };\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    //Act\r\n    var mockRepository = new Mock\u003CICustomerRepository\u003E();\r\n    var mockPassword = new Mock\u003CIPasswordHasherService\u003E();\r\n    var mockService = new CustomerService(mockRepository.Object, mockPassword.Object);\r\n    var exception = await Assert.ThrowsAsync\u003CValidationException\u003E(() =\u003E mockService.CreateAsync(customer, cancellationTokenSource.Token));\r\n    //Assert\r\n    Assert.NotNull(exception);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateInvalidFirstNameMaxLengthTest",
        "Body": "{\r\n    //Arrange\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Password = \u0022Password@01\u0022,\r\n        Email = \u0022test1@test.com\u0022,\r\n        Surname = \u0022Surname\u0022,\r\n        FirstName = \u0022First Name First Name First Name First Name First Name First Name First Name First Name First Name First Name First Name.\u0022\r\n    };\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    //Act\r\n    var mockRepository = new Mock\u003CICustomerRepository\u003E();\r\n    var mockPassword = new Mock\u003CIPasswordHasherService\u003E();\r\n    var mockService = new CustomerService(mockRepository.Object, mockPassword.Object);\r\n    var exception = await Assert.ThrowsAsync\u003CValidationException\u003E(() =\u003E mockService.CreateAsync(customer, cancellationTokenSource.Token));\r\n    //Assert\r\n    Assert.NotNull(exception);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateInvalidSurnameEmptyTest",
        "Body": "{\r\n    //Arrange\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Password = \u0022Password@01\u0022,\r\n        Email = \u0022test1@test.com\u0022,\r\n        Surname = \u0022Surname Surname Surname Surname Surname Surname Surname Surname Surname Surname Surname Surname Surname Surname Surname Surname\u0022,\r\n        FirstName = \u0022First Name\u0022\r\n    };\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    //Act\r\n    var mockRepository = new Mock\u003CICustomerRepository\u003E();\r\n    var mockPassword = new Mock\u003CIPasswordHasherService\u003E();\r\n    var mockService = new CustomerService(mockRepository.Object, mockPassword.Object);\r\n    var exception = await Assert.ThrowsAsync\u003CValidationException\u003E(() =\u003E mockService.CreateAsync(customer, cancellationTokenSource.Token));\r\n    //Assert\r\n    Assert.NotNull(exception);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateInvalidSurnameMaxLengthTest",
        "Body": "{\r\n    //Arrange\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Password = \u0022Password@01\u0022,\r\n        Email = \u0022test1@test.com\u0022,\r\n        Surname = \u0022Surname Surname Surname Surname Surname Surname Surname Surname Surname Surname Surname Surname Surname Surname Surname Surname\u0022,\r\n        FirstName = \u0022First Name\u0022\r\n    };\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    //Act\r\n    var mockRepository = new Mock\u003CICustomerRepository\u003E();\r\n    var mockPassword = new Mock\u003CIPasswordHasherService\u003E();\r\n    var mockService = new CustomerService(mockRepository.Object, mockPassword.Object);\r\n    var exception = await Assert.ThrowsAsync\u003CValidationException\u003E(() =\u003E mockService.CreateAsync(customer, cancellationTokenSource.Token));\r\n    //Assert\r\n    Assert.NotNull(exception);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateInvalidSurnameMinLengthTest",
        "Body": "{\r\n    //Arrange\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Password = \u0022Password@01\u0022,\r\n        Email = \u0022test1@test.com\u0022,\r\n        Surname = \u0022S\u0022,\r\n        FirstName = \u0022First Name\u0022\r\n    };\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    //Act\r\n    var mockRepository = new Mock\u003CICustomerRepository\u003E();\r\n    var mockPassword = new Mock\u003CIPasswordHasherService\u003E();\r\n    var mockService = new CustomerService(mockRepository.Object, mockPassword.Object);\r\n    var exception = await Assert.ThrowsAsync\u003CValidationException\u003E(() =\u003E mockService.CreateAsync(customer, cancellationTokenSource.Token));\r\n    //Assert\r\n    Assert.NotNull(exception);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateInvalidEmailTest",
        "Body": "{\r\n    //Arrange\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Password = \u0022Password@01\u0022,\r\n        Email = \u0022test1\u0022,\r\n        Surname = \u0022Surname\u0022,\r\n        FirstName = \u0022First Name\u0022\r\n    };\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    //Act\r\n    var mockRepository = new Mock\u003CICustomerRepository\u003E();\r\n    var mockPassword = new Mock\u003CIPasswordHasherService\u003E();\r\n    var mockService = new CustomerService(mockRepository.Object, mockPassword.Object);\r\n    var exception = await Assert.ThrowsAsync\u003CValidationException\u003E(() =\u003E mockService.CreateAsync(customer, cancellationTokenSource.Token));\r\n    //Assert\r\n    Assert.NotNull(exception);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateInvalidEmailEmptyTest",
        "Body": "{\r\n    //Arrange\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Password = \u0022Password@01\u0022,\r\n        Email = \u0022\u0022,\r\n        Surname = \u0022Surname\u0022,\r\n        FirstName = \u0022First Name\u0022\r\n    };\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    //Act\r\n    var mockRepository = new Mock\u003CICustomerRepository\u003E();\r\n    var mockPassword = new Mock\u003CIPasswordHasherService\u003E();\r\n    var mockService = new CustomerService(mockRepository.Object, mockPassword.Object);\r\n    var exception = await Assert.ThrowsAsync\u003CValidationException\u003E(() =\u003E mockService.CreateAsync(customer, cancellationTokenSource.Token));\r\n    //Assert\r\n    Assert.NotNull(exception);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateInvalidPasswordEmptyTest",
        "Body": "{\r\n    //Arrange\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Password = \u0022\u0022,\r\n        Email = \u0022test1@test.com\u0022,\r\n        Surname = \u0022Surname Surname Surname Surname Surname Surname Surname Surname Surname Surname Surname Surname Surname Surname Surname Surname\u0022,\r\n        FirstName = \u0022First Name\u0022\r\n    };\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    //Act\r\n    var mockRepository = new Mock\u003CICustomerRepository\u003E();\r\n    var mockPassword = new Mock\u003CIPasswordHasherService\u003E();\r\n    var mockService = new CustomerService(mockRepository.Object, mockPassword.Object);\r\n    var exception = await Assert.ThrowsAsync\u003CValidationException\u003E(() =\u003E mockService.CreateAsync(customer, cancellationTokenSource.Token));\r\n    //Assert\r\n    Assert.NotNull(exception);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateInvalidPasswordMinLengthTest",
        "Body": "{\r\n    //Arrange\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Password = \u0022P@01\u0022,\r\n        Email = \u0022test1@test.com\u0022,\r\n        Surname = \u0022Surname\u0022,\r\n        FirstName = \u0022First Name\u0022\r\n    };\r\n    //Act\r\n    var mockRepository = new Mock\u003CICustomerRepository\u003E();\r\n    var mockPassword = new Mock\u003CIPasswordHasherService\u003E();\r\n    var mockService = new CustomerService(mockRepository.Object, mockPassword.Object);\r\n    var exception = await Assert.ThrowsAsync\u003CValidationException\u003E(() =\u003E mockService.CreateAsync(customer, cancellationTokenSource.Token));\r\n    //Assert\r\n    Assert.NotNull(exception);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateInvalidIdTest",
        "Body": "{\r\n    //Arrange\r\n    const long id = 0;\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Password = \u0022P@01\u0022,\r\n        Email = \u0022test1@test.com\u0022,\r\n        Surname = \u0022Surname\u0022,\r\n        FirstName = \u0022First Name\u0022\r\n    };\r\n    //Act\r\n    var mockRepository = new Mock\u003CICustomerRepository\u003E();\r\n    var mockPassword = new Mock\u003CIPasswordHasherService\u003E();\r\n    var mockService = new CustomerService(mockRepository.Object, mockPassword.Object);\r\n    var exception = await Assert.ThrowsAsync\u003CValidationException\u003E(() =\u003E mockService.UpdateAsync(id, customer, cancellationTokenSource.Token));\r\n    //Assert\r\n    Assert.NotNull(exception);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateInvalidCustomerTest",
        "Body": "{\r\n    //Arrange\r\n    const long id = 1;\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    //Act\r\n    var mockRepository = new Mock\u003CICustomerRepository\u003E();\r\n    var mockPassword = new Mock\u003CIPasswordHasherService\u003E();\r\n    var mockService = new CustomerService(mockRepository.Object, mockPassword.Object);\r\n    var exception = await Assert.ThrowsAsync\u003CValidationException\u003E(() =\u003E mockService.UpdateAsync(id, null, cancellationTokenSource.Token));\r\n    //Assert\r\n    Assert.NotNull(exception);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateInvalidCustomerNotFoundTest",
        "Body": "{\r\n    //Arrange\r\n    const long id = 1;\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Id = 1,\r\n        Password = \u0022P@013333343\u0022,\r\n        Email = \u0022test1@test.com\u0022,\r\n        Surname = \u0022Surname\u0022,\r\n        FirstName = \u0022First Name\u0022\r\n    };\r\n    //Act\r\n    var mockRepository = new Mock\u003CICustomerRepository\u003E();\r\n    var mockPassword = new Mock\u003CIPasswordHasherService\u003E();\r\n    var mockService = new CustomerService(mockRepository.Object, mockPassword.Object);\r\n    var exception = await Assert.ThrowsAsync\u003CEntityNotFoundException\u003E(() =\u003E mockService.UpdateAsync(id, customer, cancellationTokenSource.Token));\r\n    //Assert\r\n    Assert.NotNull(exception);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteInvalidIdTest",
        "Body": "{\r\n    //Arrange\r\n    const long id = 0;\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    //Act\r\n    var mockRepository = new Mock\u003CICustomerRepository\u003E();\r\n    var mockPassword = new Mock\u003CIPasswordHasherService\u003E();\r\n    var mockService = new CustomerService(mockRepository.Object, mockPassword.Object);\r\n    var exception = await Assert.ThrowsAsync\u003CValidationException\u003E(() =\u003E mockService.DeleteAsync(id, cancellationTokenSource.Token));\r\n    //Assert\r\n    Assert.NotNull(exception);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteInvalidNotFoundTest",
        "Body": "{\r\n    //Arrange\r\n    const long id = 1;\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    //Act\r\n    var mockRepository = new Mock\u003CICustomerRepository\u003E();\r\n    var mockPassword = new Mock\u003CIPasswordHasherService\u003E();\r\n    var mockService = new CustomerService(mockRepository.Object, mockPassword.Object);\r\n    var exception = await Assert.ThrowsAsync\u003CEntityNotFoundException\u003E(() =\u003E mockService.DeleteAsync(id, cancellationTokenSource.Token));\r\n    //Assert\r\n    Assert.NotNull(exception);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IsAvailableEmailTest",
        "Body": "{\r\n    //Arrange\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Id = 1,\r\n        Password = \u0022P@013333343\u0022,\r\n        Email = \u0022test1@test.com\u0022,\r\n        Surname = \u0022Surname\u0022,\r\n        FirstName = \u0022First Name\u0022\r\n    };\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    //Act\r\n    var mockRepository = new Mock\u003CICustomerRepository\u003E();\r\n    var mockPassword = new Mock\u003CIPasswordHasherService\u003E();\r\n    var filter = new CustomerFilter\r\n    {\r\n        Email = customer.Email\r\n    };\r\n    mockRepository.Setup(x =\u003E x.GetByFilterAsync(filter, cancellationTokenSource.Token)).ReturnsAsync(customer);\r\n    //Assert\r\n    var mockService = new CustomerService(mockRepository.Object, mockPassword.Object);\r\n    var existingEmail = await mockService.IsAvailableEmailAsync(customer.Email, cancellationTokenSource.Token);\r\n    Assert.True(existingEmail);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "PasswordHasherTest",
    "Message": null,
    "ProjectName": "CF.Customer.UnitTest",
    "Methods": [
      {
        "Name": "HashOkTest",
        "Body": "{\r\n    //Arrange\r\n    const string password = \u0022Blah@!1894\u0022;\r\n    var service = new PasswordHasherService();\r\n    //Act\r\n    var result = service.Hash(password);\r\n    var hashSplit = result.Split(\u0022.\u0022);\r\n    var saltBytes = new Span\u003Cbyte\u003E(new byte[128]);\r\n    var keyBytes = new Span\u003Cbyte\u003E(new byte[256]);\r\n    //Assert\r\n    Assert.Equal(\u00221000\u0022, hashSplit[0]);\r\n    Assert.True(Convert.TryFromBase64String(hashSplit[1], saltBytes, out _));\r\n    Assert.True(Convert.TryFromBase64String(hashSplit[2], keyBytes, out _));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CheckOkTest",
        "Body": "{\r\n    const string password = \u0022Blah@!1894\u0022;\r\n    var service = new PasswordHasherService();\r\n    var hash = service.Hash(password);\r\n    var(verified, needsUpgrade) = service.Check(hash, password);\r\n    Assert.True(verified);\r\n    Assert.False(needsUpgrade);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CheckNotVerifiedTest",
        "Body": "{\r\n    const string password = \u0022Blah@!1894\u0022;\r\n    const string fakePassword = \u0022Blah@!4981\u0022;\r\n    var service = new PasswordHasherService();\r\n    var hash = service.Hash(password);\r\n    var(verified, _) = service.Check(hash, fakePassword);\r\n    Assert.False(verified);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CheckNeedsUpgradeTest",
        "Body": "{\r\n    const string password = \u0022Blah@!1894\u0022;\r\n    var service = new PasswordHasherService();\r\n    var hash = service.Hash(password).Replace(\u00221000\u0022, \u0022900\u0022);\r\n    var(_, needsUpgrade) = service.Check(hash, password);\r\n    Assert.True(needsUpgrade);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CheckUnexpectedHashFormatTest",
        "Body": "{\r\n    const string password = \u0022Blah@!1894\u0022;\r\n    var service = new PasswordHasherService();\r\n    var hash = service.Hash(password);\r\n    var hashSplit = hash.Split(\u0022.\u0022);\r\n    const string invalidUnexpectedHashFormatErrorMessage = \u0022Unexpected hash format. Should be formatted as \u0027{iterations}.{salt}.{hash}\u0027\u0022;\r\n    var invalidHash = $\u0022{hashSplit[0]}.{hashSplit[1]}\u0022;\r\n    var exception = Assert.Throws\u003CFormatException\u003E(() =\u003E service.Check(invalidHash, password));\r\n    Assert.Equal(invalidUnexpectedHashFormatErrorMessage, exception.Message);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CustomerProfileTest",
    "Message": null,
    "ProjectName": "CF.Customer.UnitTest",
    "Methods": [
      {
        "Name": "CustomerRequestDtoToCustomer",
        "Body": "{\r\n    var customerRequestDto = new CustomerRequestDto\r\n    {\r\n        Surname = \u0022Dickinson\u0022,\r\n        FirstName = \u0022Bruce\u0022,\r\n        Password = \u0022Blah@1234!\u0022,\r\n        Email = \u0022maiden@metal.com\u0022\r\n    };\r\n    var mapper = MapperConfiguration.CreateMapper();\r\n    var customer = mapper.Map\u003CCustomer.Domain.Entities.Customer\u003E(customerRequestDto);\r\n    Assert.Equal(customerRequestDto.FirstName, customer.FirstName);\r\n    Assert.Equal(customerRequestDto.Surname, customer.Surname);\r\n    Assert.Equal(customerRequestDto.Password, customer.Password);\r\n    Assert.Equal(customerRequestDto.Email, customer.Email);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CustomerToCustomerResponseDto",
        "Body": "{\r\n    var customer = new Customer.Domain.Entities.Customer\r\n    {\r\n        Surname = \u0022Dickinson\u0022,\r\n        FirstName = \u0022Bruce\u0022,\r\n        Email = \u0022maiden@metal.com\u0022,\r\n        Created = DateTime.Now,\r\n        Updated = DateTime.Now,\r\n        Id = 1\r\n    };\r\n    var mapper = MapperConfiguration.CreateMapper();\r\n    var customerResponseDto = mapper.Map\u003CCustomerResponseDto\u003E(customer);\r\n    Assert.Equal(customer.FirstName, customerResponseDto.FirstName);\r\n    Assert.Equal(customer.Surname, customerResponseDto.Surname);\r\n    Assert.Equal(customer.Email, customerResponseDto.Email);\r\n    Assert.Equal(customer.Id, customerResponseDto.Id);\r\n    Assert.Equal(customer.GetFullName(), customerResponseDto.FullName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CustomerPaginationToCustomerResponseDtoPagination",
        "Body": "{\r\n    var customerList = new List\u003CCustomer.Domain.Entities.Customer\u003E\r\n    {\r\n        new()\r\n        {\r\n            Surname = \u0022Dickinson\u0022,\r\n            FirstName = \u0022Bruce\u0022,\r\n            Email = \u0022maiden@metal.com\u0022,\r\n            Created = DateTime.Now,\r\n            Updated = DateTime.Now,\r\n            Id = 1\r\n        }\r\n    };\r\n    var customerPagination = new Pagination\u003CCustomer.Domain.Entities.Customer\u003E\r\n    {\r\n        Count = 1,\r\n        CurrentPage = 1,\r\n        PageSize = 1,\r\n        Result = customerList\r\n    };\r\n    var mapper = MapperConfiguration.CreateMapper();\r\n    var customerResponseDtoPagination = mapper.Map\u003CPaginationDto\u003CCustomerResponseDto\u003E\u003E(customerPagination);\r\n    var customerResponseDtoList = mapper.Map\u003CList\u003CCustomerResponseDto\u003E\u003E(customerResponseDtoPagination.Result);\r\n    Assert.Equal(customerList.First().FirstName, customerResponseDtoList.First().FirstName);\r\n    Assert.Equal(customerList.First().Surname, customerResponseDtoList.First().Surname);\r\n    Assert.Equal(customerList.First().Email, customerResponseDtoList.First().Email);\r\n    Assert.Equal(customerList.First().Id, customerResponseDtoList.First().Id);\r\n    Assert.Equal(customerList.First().GetFullName(), customerResponseDtoList.First().FullName);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CustomerFilterToCustomerFilterDto",
        "Body": "{\r\n    var customerFilterDto = new CustomerFilterDto\r\n    {\r\n        Surname = \u0022Dickinson\u0022,\r\n        FirstName = \u0022Bruce\u0022,\r\n        Email = \u0022maiden@metal.com\u0022,\r\n        Id = 1,\r\n        CurrentPage = 1,\r\n        PageSize = 1,\r\n        OrderBy = \u0022desc\u0022,\r\n        SortBy = \u0022firstName\u0022\r\n    };\r\n    var mapper = MapperConfiguration.CreateMapper();\r\n    var customerFilter = mapper.Map\u003CCustomerFilter\u003E(customerFilterDto);\r\n    Assert.Equal(customerFilterDto.FirstName, customerFilter.FirstName);\r\n    Assert.Equal(customerFilterDto.Surname, customerFilter.Surname);\r\n    Assert.Equal(customerFilterDto.Id, customerFilter.Id);\r\n    Assert.Equal(customerFilterDto.Email, customerFilter.Email);\r\n    Assert.Equal(customerFilterDto.CurrentPage, customerFilter.CurrentPage);\r\n    Assert.Equal(customerFilterDto.OrderBy, customerFilter.OrderBy);\r\n    Assert.Equal(customerFilterDto.PageSize, customerFilter.PageSize);\r\n    Assert.Equal(customerFilterDto.SortBy, customerFilter.SortBy);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CustomerRepositoryTest",
    "Message": null,
    "ProjectName": "CF.Customer.UnitTest",
    "Methods": [
      {
        "Name": "GetListTest",
        "Body": "{\r\n    var connection = CreateSqLiteConnection();\r\n    connection.Open();\r\n    try\r\n    {\r\n        var options = SetDbContextOptionsBuilder(connection);\r\n        await using var context = new CustomerContext(options);\r\n        Assert.True(await context.Database.EnsureCreatedAsync());\r\n        //Arrange\r\n        var cancellationTokenSource = new CancellationTokenSource();\r\n        var customerOne = new Customer.Domain.Entities.Customer\r\n        {\r\n            Password = \u0022Password01@\u0022,\r\n            Email = \u0022test1@test.com\u0022,\r\n            Surname = \u0022Surname1\u0022,\r\n            FirstName = \u0022FirstName1\u0022,\r\n            Updated = DateTime.Now,\r\n            Created = DateTime.Now\r\n        };\r\n        var customerTwo = new Customer.Domain.Entities.Customer\r\n        {\r\n            Password = \u0022Password01@\u0022,\r\n            Email = \u0022test2@test.com\u0022,\r\n            Surname = \u0022Surname2\u0022,\r\n            FirstName = \u0022FirstName2\u0022,\r\n            Updated = DateTime.Now,\r\n            Created = DateTime.Now\r\n        };\r\n        //Act\r\n        var repository = new CustomerRepository(context);\r\n        repository.Add(customerOne);\r\n        repository.Add(customerTwo);\r\n        await repository.SaveChangesAsync(cancellationTokenSource.Token);\r\n        //Assert\r\n        var filter = new CustomerFilter\r\n        {\r\n            FirstName = \u0022FirstName\u0022\r\n        };\r\n        var result = await repository.GetListByFilterAsync(filter, cancellationTokenSource.Token);\r\n        Assert.Equal(2, result.Count);\r\n    }\r\n    finally\r\n    {\r\n        connection.Close();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetTest",
        "Body": "{\r\n    var connection = CreateSqLiteConnection();\r\n    connection.Open();\r\n    try\r\n    {\r\n        var options = SetDbContextOptionsBuilder(connection);\r\n        await using var context = new CustomerContext(options);\r\n        Assert.True(await context.Database.EnsureCreatedAsync());\r\n        //Arrange\r\n        var cancellationTokenSource = new CancellationTokenSource();\r\n        var customerOne = new Customer.Domain.Entities.Customer\r\n        {\r\n            Password = \u0022Password01@\u0022,\r\n            Email = \u0022test1@test.com\u0022,\r\n            Surname = \u0022Surname1\u0022,\r\n            FirstName = \u0022FirstName1\u0022,\r\n            Updated = DateTime.Now,\r\n            Created = DateTime.Now\r\n        };\r\n        //Act\r\n        var repository = new CustomerRepository(context);\r\n        repository.Add(customerOne);\r\n        await repository.SaveChangesAsync(cancellationTokenSource.Token);\r\n        //Assert\r\n        var filter = new CustomerFilter\r\n        {\r\n            Email = \u0022test1@test.com\u0022\r\n        };\r\n        var result = await repository.GetByFilterAsync(filter, cancellationTokenSource.Token);\r\n        Assert.Equal(\u0022test1@test.com\u0022, result.Email);\r\n    }\r\n    finally\r\n    {\r\n        connection.Close();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateOkTest",
        "Body": "{\r\n    var connection = CreateSqLiteConnection();\r\n    connection.Open();\r\n    try\r\n    {\r\n        var options = SetDbContextOptionsBuilder(connection);\r\n        await using var context = new CustomerContext(options);\r\n        Assert.True(await context.Database.EnsureCreatedAsync());\r\n        //Arrange\r\n        var cancellationTokenSource = new CancellationTokenSource();\r\n        var customer = new Customer.Domain.Entities.Customer\r\n        {\r\n            Password = \u0022Password01@\u0022,\r\n            Email = \u0022test1@test.com\u0022,\r\n            Surname = \u0022Surname1\u0022,\r\n            FirstName = \u0022FirstName1\u0022,\r\n            Updated = DateTime.Now,\r\n            Created = DateTime.Now\r\n        };\r\n        //Act\r\n        var repository = new CustomerRepository(context);\r\n        repository.Add(customer);\r\n        var result = await repository.SaveChangesAsync(cancellationTokenSource.Token);\r\n        //Assert\r\n        Assert.Equal(1, result);\r\n    }\r\n    finally\r\n    {\r\n        connection.Close();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteTest",
        "Body": "{\r\n    var connection = CreateSqLiteConnection();\r\n    connection.Open();\r\n    try\r\n    {\r\n        var options = SetDbContextOptionsBuilder(connection);\r\n        await using var context = new CustomerContext(options);\r\n        Assert.True(await context.Database.EnsureCreatedAsync());\r\n        //Arrange\r\n        var cancellationTokenSource = new CancellationTokenSource();\r\n        var newCustomer = new Customer.Domain.Entities.Customer\r\n        {\r\n            Password = \u0022Password01@\u0022,\r\n            Email = \u0022test1@test.com\u0022,\r\n            Surname = \u0022Surname1\u0022,\r\n            FirstName = \u0022FirstName1\u0022,\r\n            Updated = DateTime.Now,\r\n            Created = DateTime.Now\r\n        };\r\n        //Act\r\n        var repository = new CustomerRepository(context);\r\n        repository.Add(newCustomer);\r\n        await repository.SaveChangesAsync(cancellationTokenSource.Token);\r\n        var filterStored = new CustomerFilter\r\n        {\r\n            Id = newCustomer.Id\r\n        };\r\n        var storedCustomer = await repository.GetByFilterAsync(filterStored, cancellationTokenSource.Token);\r\n        repository.Remove(storedCustomer);\r\n        await repository.SaveChangesAsync(cancellationTokenSource.Token);\r\n        //Assert\r\n        var filterNonExistentUser = new CustomerFilter\r\n        {\r\n            Id = newCustomer.Id\r\n        };\r\n        var nonExistentUser = await repository.GetByFilterAsync(filterNonExistentUser, cancellationTokenSource.Token);\r\n        Assert.Null(nonExistentUser);\r\n    }\r\n    finally\r\n    {\r\n        connection.Close();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DuplicatedEmailTest",
        "Body": "{\r\n    var connection = CreateSqLiteConnection();\r\n    connection.Open();\r\n    try\r\n    {\r\n        var options = SetDbContextOptionsBuilder(connection);\r\n        await using var context = new CustomerContext(options);\r\n        Assert.True(await context.Database.EnsureCreatedAsync());\r\n        //Arrange\r\n        var cancellationTokenSource = new CancellationTokenSource();\r\n        var customerOne = new Customer.Domain.Entities.Customer\r\n        {\r\n            Password = \u0022Password01@\u0022,\r\n            Email = \u0022test1@test.com\u0022,\r\n            Surname = \u0022Surname1\u0022,\r\n            FirstName = \u0022FirstName1\u0022,\r\n            Created = DateTime.Now\r\n        };\r\n        var customerTwo = new Customer.Domain.Entities.Customer\r\n        {\r\n            Password = \u0022Password01@\u0022,\r\n            Email = \u0022test1@test.com\u0022,\r\n            Surname = \u0022Surname2\u0022,\r\n            FirstName = \u0022FirstName2\u0022,\r\n            Created = DateTime.Now\r\n        };\r\n        //Act\r\n        var repository = new CustomerRepository(context);\r\n        repository.Add(customerOne);\r\n        await repository.SaveChangesAsync(cancellationTokenSource.Token);\r\n        //Assert\r\n        repository.Add(customerTwo);\r\n        var exception = await Assert.ThrowsAsync\u003CDbUpdateException\u003E(() =\u003E repository.SaveChangesAsync(cancellationTokenSource.Token));\r\n        Assert.NotNull(exception);\r\n    }\r\n    finally\r\n    {\r\n        connection.Close();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateInvalidEmailTest",
        "Body": "{\r\n    var connection = CreateSqLiteConnection();\r\n    connection.Open();\r\n    try\r\n    {\r\n        var options = SetDbContextOptionsBuilder(connection);\r\n        await using var context = new CustomerContext(options);\r\n        Assert.True(await context.Database.EnsureCreatedAsync());\r\n        var cancellationTokenSource = new CancellationTokenSource();\r\n        //Arrange\r\n        var customer = new Customer.Domain.Entities.Customer\r\n        {\r\n            Password = \u0022Password01@\u0022,\r\n            Email = null,\r\n            Surname = \u0022Surname1\u0022,\r\n            FirstName = \u0022FirstName1\u0022,\r\n            Created = DateTime.Now\r\n        };\r\n        //Act\r\n        var repository = new CustomerRepository(context);\r\n        repository.Add(customer);\r\n        //Assert\r\n        var exception = await Assert.ThrowsAsync\u003CDbUpdateException\u003E(() =\u003E repository.SaveChangesAsync(cancellationTokenSource.Token));\r\n        Assert.NotNull(exception);\r\n    }\r\n    finally\r\n    {\r\n        connection.Close();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateInvalidPasswordTest",
        "Body": "{\r\n    var connection = CreateSqLiteConnection();\r\n    connection.Open();\r\n    try\r\n    {\r\n        var options = SetDbContextOptionsBuilder(connection);\r\n        await using var context = new CustomerContext(options);\r\n        Assert.True(await context.Database.EnsureCreatedAsync());\r\n        //Arrange\r\n        var cancellationTokenSource = new CancellationTokenSource();\r\n        var customer = new Customer.Domain.Entities.Customer\r\n        {\r\n            Password = null,\r\n            Email = \u0022test@test.com\u0022,\r\n            Surname = \u0022Surname1\u0022,\r\n            FirstName = \u0022FirstName1\u0022,\r\n            Created = DateTime.Now\r\n        };\r\n        //Act\r\n        var repository = new CustomerRepository(context);\r\n        repository.Add(customer);\r\n        //Assert\r\n        var exception = await Assert.ThrowsAsync\u003CDbUpdateException\u003E(() =\u003E repository.SaveChangesAsync(cancellationTokenSource.Token));\r\n        Assert.NotNull(exception);\r\n    }\r\n    finally\r\n    {\r\n        connection.Close();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateInvalidFirstNameTest",
        "Body": "{\r\n    var connection = CreateSqLiteConnection();\r\n    connection.Open();\r\n    try\r\n    {\r\n        var options = SetDbContextOptionsBuilder(connection);\r\n        await using var context = new CustomerContext(options);\r\n        Assert.True(await context.Database.EnsureCreatedAsync());\r\n        //Arrange\r\n        var cancellationTokenSource = new CancellationTokenSource();\r\n        var customer = new Customer.Domain.Entities.Customer\r\n        {\r\n            Password = \u0022Passw0rd1\u0022,\r\n            Email = \u0022test@test.com\u0022,\r\n            Surname = \u0022Surname1\u0022,\r\n            FirstName = null,\r\n            Created = DateTime.Now\r\n        };\r\n        //Act\r\n        var repository = new CustomerRepository(context);\r\n        repository.Add(customer);\r\n        //Assert\r\n        var exception = await Assert.ThrowsAsync\u003CDbUpdateException\u003E(() =\u003E repository.SaveChangesAsync(cancellationTokenSource.Token));\r\n        Assert.NotNull(exception);\r\n    }\r\n    finally\r\n    {\r\n        connection.Close();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateInvalidSurnameTest",
        "Body": "{\r\n    var connection = CreateSqLiteConnection();\r\n    connection.Open();\r\n    try\r\n    {\r\n        var options = SetDbContextOptionsBuilder(connection);\r\n        await using var context = new CustomerContext(options);\r\n        Assert.True(await context.Database.EnsureCreatedAsync());\r\n        //Arrange\r\n        var customer = new Customer.Domain.Entities.Customer\r\n        {\r\n            Password = \u0022Passw0rd1\u0022,\r\n            Email = \u0022test@test.com\u0022,\r\n            Surname = null,\r\n            FirstName = \u0022FirstName\u0022,\r\n            Created = DateTime.Now\r\n        };\r\n        var cancellationTokenSource = new CancellationTokenSource();\r\n        //Act\r\n        var repository = new CustomerRepository(context);\r\n        repository.Add(customer);\r\n        //Assert\r\n        var exception = await Assert.ThrowsAsync\u003CDbUpdateException\u003E(() =\u003E repository.SaveChangesAsync(cancellationTokenSource.Token));\r\n        Assert.NotNull(exception);\r\n    }\r\n    finally\r\n    {\r\n        connection.Close();\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CustomerIntegrationTest",
    "Message": null,
    "ProjectName": "CF.IntegrationTest",
    "Methods": [
      {
        "Name": "CreateCustomerOkTest",
        "Body": "{\r\n    var dto = new CustomerRequestDto\r\n    {\r\n        FirstName = \u0022Test Name\u0022,\r\n        Surname = \u0022Test Surname\u0022,\r\n        Email = CreateValidEmail(),\r\n        Password = \u0022Password1@\u0022,\r\n        ConfirmPassword = \u0022Password1@\u0022\r\n    };\r\n    var content = await CreateStringContent(dto);\r\n    var client = _factory.CreateClient();\r\n    var response = await client.PostAsync(CustomerUrl, content);\r\n    response.EnsureSuccessStatusCode();\r\n    Assert.Equal(HttpStatusCode.Created, response.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateCustomerInvalidEmailTest",
        "Body": "{\r\n    var dto = new CustomerRequestDto\r\n    {\r\n        FirstName = \u0022Test Name\u0022,\r\n        Surname = \u0022Test Surname\u0022,\r\n        Email = CreateInvalidEmail(),\r\n        Password = \u0022Password1@\u0022,\r\n        ConfirmPassword = \u0022Password1@\u0022\r\n    };\r\n    var content = await CreateStringContent(dto);\r\n    var client = _factory.CreateClient();\r\n    var response = await client.PostAsync(CustomerUrl, content);\r\n    var errors = await ExtractErrorsFromResponse(response);\r\n    Assert.NotNull(errors);\r\n    Assert.Contains(\u0022Email\u0022, errors);\r\n    Assert.Single(errors[\u0022Email\u0022]);\r\n    Assert.Equal(\u0022The Email field is not a valid e-mail address.\u0022, errors[\u0022Email\u0022][0]);\r\n    Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateCustomerExistingEmailTest",
        "Body": "{\r\n    var email = CreateValidEmail();\r\n    var dto = new CustomerRequestDto\r\n    {\r\n        FirstName = \u0022Test Name\u0022,\r\n        Surname = \u0022Test Surname\u0022,\r\n        Email = email,\r\n        Password = \u0022Password1@\u0022,\r\n        ConfirmPassword = \u0022Password1@\u0022\r\n    };\r\n    var content = await CreateStringContent(dto);\r\n    var client = _factory.CreateClient();\r\n    var response = await client.PostAsync(CustomerUrl, content);\r\n    Assert.Equal(HttpStatusCode.Created, response.StatusCode);\r\n    var clientNotOk = _factory.CreateClient();\r\n    var responseNotOk = await clientNotOk.PostAsync(CustomerUrl, content);\r\n    var errors = await ExtractErrorsFromResponse(responseNotOk);\r\n    Assert.NotNull(errors);\r\n    Assert.Contains(\u0022Validation\u0022, errors);\r\n    Assert.Single(errors[\u0022Validation\u0022]);\r\n    Assert.Equal(\u0022Email is not available.\u0022, errors[\u0022Validation\u0022][0]);\r\n    Assert.Equal(HttpStatusCode.BadRequest, responseNotOk.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateCustomerRequiredEmailTest",
        "Body": "{\r\n    var dto = new CustomerRequestDto\r\n    {\r\n        FirstName = \u0022Test Name\u0022,\r\n        Surname = \u0022Test Surname\u0022,\r\n        Email = \u0022\u0022,\r\n        Password = \u0022Password1@\u0022,\r\n        ConfirmPassword = \u0022Password1@\u0022\r\n    };\r\n    var content = await CreateStringContent(dto);\r\n    var client = _factory.CreateClient();\r\n    var response = await client.PostAsync(CustomerUrl, content);\r\n    var errors = await ExtractErrorsFromResponse(response);\r\n    Assert.NotNull(errors);\r\n    Assert.Contains(\u0022Email\u0022, errors);\r\n    Assert.NotEmpty(errors[\u0022Email\u0022]);\r\n    Assert.Equal(\u0022The Email field is required.\u0022, errors[\u0022Email\u0022][0]);\r\n    Assert.Equal(\u0022The Email field is not a valid e-mail address.\u0022, errors[\u0022Email\u0022][1]);\r\n    Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateCustomerRequiredFirstNameTest",
        "Body": "{\r\n    var dto = new CustomerRequestDto\r\n    {\r\n        FirstName = \u0022\u0022,\r\n        Surname = \u0022Test Surname\u0022,\r\n        Email = CreateValidEmail(),\r\n        Password = \u0022Password1@\u0022,\r\n        ConfirmPassword = \u0022Password1@\u0022\r\n    };\r\n    var content = await CreateStringContent(dto);\r\n    var client = _factory.CreateClient();\r\n    var response = await client.PostAsync(CustomerUrl, content);\r\n    var errors = await ExtractErrorsFromResponse(response);\r\n    Assert.NotNull(errors);\r\n    Assert.Contains(\u0022FirstName\u0022, errors);\r\n    Assert.NotEmpty(errors[\u0022FirstName\u0022]);\r\n    Assert.Equal(\u0022The First Name field is required.\u0022, errors[\u0022FirstName\u0022][0]);\r\n    Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateCustomerRequiredSurnameTest",
        "Body": "{\r\n    var dto = new CustomerRequestDto\r\n    {\r\n        FirstName = \u0022Test First Name\u0022,\r\n        Surname = \u0022\u0022,\r\n        Email = CreateValidEmail(),\r\n        Password = \u0022Password1@\u0022,\r\n        ConfirmPassword = \u0022Password1@\u0022\r\n    };\r\n    var content = await CreateStringContent(dto);\r\n    var client = _factory.CreateClient();\r\n    var response = await client.PostAsync(CustomerUrl, content);\r\n    var errors = await ExtractErrorsFromResponse(response);\r\n    Assert.NotNull(errors);\r\n    Assert.Contains(\u0022Surname\u0022, errors);\r\n    Assert.NotEmpty(errors[\u0022Surname\u0022]);\r\n    Assert.Equal(\u0022The Surname field is required.\u0022, errors[\u0022Surname\u0022][0]);\r\n    Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateCustomerMaxLengthFirstNameTest",
        "Body": "{\r\n    var dto = new CustomerRequestDto\r\n    {\r\n        FirstName = \u0022Test First Name Test First Name Test First Name Test First Name Test First Name Test First Name Test First Name\u0022,\r\n        Surname = \u0022Test Surname\u0022,\r\n        Email = CreateValidEmail(),\r\n        Password = \u0022Password1@\u0022,\r\n        ConfirmPassword = \u0022Password1@\u0022\r\n    };\r\n    var content = await CreateStringContent(dto);\r\n    var client = _factory.CreateClient();\r\n    var response = await client.PostAsync(CustomerUrl, content);\r\n    var errors = await ExtractErrorsFromResponse(response);\r\n    Assert.NotNull(errors);\r\n    Assert.Contains(\u0022FirstName\u0022, errors);\r\n    Assert.NotEmpty(errors[\u0022FirstName\u0022]);\r\n    Assert.Equal(\u0022The field First Name must be a string with a minimum length of 2 and a maximum length of 100.\u0022, errors[\u0022FirstName\u0022][0]);\r\n    Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateCustomerMinLengthFirstNameTest",
        "Body": "{\r\n    var dto = new CustomerRequestDto\r\n    {\r\n        FirstName = \u0022T\u0022,\r\n        Surname = \u0022Test Surname\u0022,\r\n        Email = CreateValidEmail(),\r\n        Password = \u0022Password1@\u0022,\r\n        ConfirmPassword = \u0022Password1@\u0022\r\n    };\r\n    var content = await CreateStringContent(dto);\r\n    var client = _factory.CreateClient();\r\n    var response = await client.PostAsync(CustomerUrl, content);\r\n    var errors = await ExtractErrorsFromResponse(response);\r\n    Assert.NotNull(errors);\r\n    Assert.Contains(\u0022FirstName\u0022, errors);\r\n    Assert.NotEmpty(errors[\u0022FirstName\u0022]);\r\n    Assert.Equal(\u0022The field First Name must be a string with a minimum length of 2 and a maximum length of 100.\u0022, errors[\u0022FirstName\u0022][0]);\r\n    Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateCustomerMaxLengthSurnameTest",
        "Body": "{\r\n    var dto = new CustomerRequestDto\r\n    {\r\n        FirstName = \u0022Test First\u0022,\r\n        Surname = \u0022Test Surname Test Surname Test Surname Test Surname Test Surname Test Surname Test Surname Test Surname Test Surname\u0022,\r\n        Email = CreateValidEmail(),\r\n        Password = \u0022Password1@\u0022,\r\n        ConfirmPassword = \u0022Password1@\u0022\r\n    };\r\n    var content = await CreateStringContent(dto);\r\n    var client = _factory.CreateClient();\r\n    var response = await client.PostAsync(CustomerUrl, content);\r\n    var errors = await ExtractErrorsFromResponse(response);\r\n    Assert.NotNull(errors);\r\n    Assert.Contains(\u0022Surname\u0022, errors);\r\n    Assert.NotEmpty(errors[\u0022Surname\u0022]);\r\n    Assert.Equal(\u0022The field Surname must be a string with a minimum length of 2 and a maximum length of 100.\u0022, errors[\u0022Surname\u0022][0]);\r\n    Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateCustomerMinLengthSurnameTest",
        "Body": "{\r\n    var dto = new CustomerRequestDto\r\n    {\r\n        FirstName = \u0022Test First\u0022,\r\n        Surname = \u0022T\u0022,\r\n        Email = CreateValidEmail(),\r\n        Password = \u0022Password1@\u0022,\r\n        ConfirmPassword = \u0022Password1@\u0022\r\n    };\r\n    var content = await CreateStringContent(dto);\r\n    var client = _factory.CreateClient();\r\n    var response = await client.PostAsync(CustomerUrl, content);\r\n    var errors = await ExtractErrorsFromResponse(response);\r\n    Assert.NotNull(errors);\r\n    Assert.Contains(\u0022Surname\u0022, errors);\r\n    Assert.NotEmpty(errors[\u0022Surname\u0022]);\r\n    Assert.Equal(\u0022The field Surname must be a string with a minimum length of 2 and a maximum length of 100.\u0022, errors[\u0022Surname\u0022][0]);\r\n    Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateRequiredPasswordTest",
        "Body": "{\r\n    var dto = new CustomerRequestDto\r\n    {\r\n        FirstName = \u0022Test First\u0022,\r\n        Surname = \u0022Test Surname\u0022,\r\n        Email = CreateValidEmail(),\r\n        Password = \u0022\u0022\r\n    };\r\n    var content = await CreateStringContent(dto);\r\n    var client = _factory.CreateClient();\r\n    var response = await client.PostAsync(CustomerUrl, content);\r\n    var errors = await ExtractErrorsFromResponse(response);\r\n    Assert.NotNull(errors);\r\n    Assert.Contains(\u0022Password\u0022, errors);\r\n    Assert.NotEmpty(errors[\u0022Password\u0022]);\r\n    Assert.Equal(\u0022The Password field is required.\u0022, errors[\u0022Password\u0022][0]);\r\n    Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreatePasswordsDoesNotMatchTest",
        "Body": "{\r\n    var dto = new CustomerRequestDto\r\n    {\r\n        FirstName = \u0022Test First\u0022,\r\n        Surname = \u0022Test Surname\u0022,\r\n        Email = CreateValidEmail(),\r\n        Password = \u0022Password1@\u0022,\r\n        ConfirmPassword = \u0022Password3!\u0022\r\n    };\r\n    var content = await CreateStringContent(dto);\r\n    var client = _factory.CreateClient();\r\n    var response = await client.PostAsync(CustomerUrl, content);\r\n    var errors = await ExtractErrorsFromResponse(response);\r\n    Assert.NotNull(errors);\r\n    Assert.Contains(\u0022ConfirmPassword\u0022, errors);\r\n    Assert.NotEmpty(errors[\u0022ConfirmPassword\u0022]);\r\n    Assert.Equal(\u0022The passwords do not match.\u0022, errors[\u0022ConfirmPassword\u0022][0]);\r\n    Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateMinLengthPasswordTest",
        "Body": "{\r\n    var dto = new CustomerRequestDto\r\n    {\r\n        FirstName = \u0022Test First\u0022,\r\n        Surname = \u0022Test Surname\u0022,\r\n        Email = CreateValidEmail(),\r\n        Password = \u0022@123RF\u0022,\r\n        ConfirmPassword = \u0022@123RF\u0022\r\n    };\r\n    var content = await CreateStringContent(dto);\r\n    var client = _factory.CreateClient();\r\n    var response = await client.PostAsync(CustomerUrl, content);\r\n    var errors = await ExtractErrorsFromResponse(response);\r\n    Assert.NotNull(errors);\r\n    Assert.Contains(\u0022Password\u0022, errors);\r\n    Assert.NotEmpty(errors[\u0022Password\u0022]);\r\n    Assert.Equal(\u0022Passwords must be at least 8 characters and contain at 3 of the following: upper case (A-Z), lower case (a-z), number (0-9) and special character (e.g. !@#$%^\u0026*).\u0022, errors[\u0022Password\u0022][0]);\r\n    Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateInvalidPasswordTest",
        "Body": "{\r\n    var dto = new CustomerRequestDto\r\n    {\r\n        FirstName = \u0022Test First\u0022,\r\n        Surname = \u0022Test Surname\u0022,\r\n        Email = CreateValidEmail(),\r\n        Password = \u002201234567901234\u0022,\r\n        ConfirmPassword = \u002201234567901234\u0022\r\n    };\r\n    var content = await CreateStringContent(dto);\r\n    var client = _factory.CreateClient();\r\n    var response = await client.PostAsync(CustomerUrl, content);\r\n    var errors = await ExtractErrorsFromResponse(response);\r\n    Assert.NotNull(errors);\r\n    Assert.Contains(\u0022Password\u0022, errors);\r\n    Assert.NotEmpty(errors[\u0022Password\u0022]);\r\n    Assert.Equal(\u0022Passwords must be at least 8 characters and contain at 3 of the following: upper case (A-Z), lower case (a-z), number (0-9) and special character (e.g. !@#$%^\u0026*).\u0022, errors[\u0022Password\u0022][0]);\r\n    Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateCustomerOkTest",
        "Body": "{\r\n    var email = CreateValidEmail();\r\n    var dto = new CustomerRequestDto\r\n    {\r\n        FirstName = \u0022Test Name\u0022,\r\n        Surname = \u0022Test Surname\u0022,\r\n        Email = email,\r\n        Password = \u0022Password1@\u0022,\r\n        ConfirmPassword = \u0022Password1@\u0022\r\n    };\r\n    var content = await CreateStringContent(dto);\r\n    var client = _factory.CreateClient();\r\n    var createResponse = await client.PostAsync(CustomerUrl, content);\r\n    Assert.Equal(HttpStatusCode.Created, createResponse.StatusCode);\r\n    client = _factory.CreateClient();\r\n    var getResponse = await client.GetAsync(createResponse.Headers.Location?.ToString());\r\n    Assert.Equal(HttpStatusCode.OK, getResponse.StatusCode);\r\n    var customer = JsonConvert.DeserializeObject\u003CCustomerResponseDto\u003E(await getResponse.Content.ReadAsStringAsync());\r\n    dto.FirstName = \u0022New Name\u0022;\r\n    var contentUpdate = await CreateStringContent(dto);\r\n    var putResponse = await client.PutAsync($\u0022{CustomerUrl}/{customer.Id}\u0022, contentUpdate);\r\n    Assert.True(putResponse.IsSuccessStatusCode);\r\n    Assert.Equal(HttpStatusCode.NoContent, putResponse.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateCustomerExistingEmailTest",
        "Body": "{\r\n    var customerOneEmail = CreateValidEmail();\r\n    var dto = new CustomerRequestDto\r\n    {\r\n        FirstName = \u0022Test Name\u0022,\r\n        Surname = \u0022Test Surname\u0022,\r\n        Email = customerOneEmail,\r\n        Password = \u0022Password1@\u0022,\r\n        ConfirmPassword = \u0022Password1@\u0022\r\n    };\r\n    var contentCustomerOne = await CreateStringContent(dto);\r\n    var client = _factory.CreateClient();\r\n    var createCustomerOneResponse = await client.PostAsync(CustomerUrl, contentCustomerOne);\r\n    Assert.Equal(HttpStatusCode.Created, createCustomerOneResponse.StatusCode);\r\n    dto.Email = CreateValidEmail();\r\n    var contentCustomerTwo = await CreateStringContent(dto);\r\n    client = _factory.CreateClient();\r\n    var createCustomerTwoResponse = await client.PostAsync(CustomerUrl, contentCustomerTwo);\r\n    Assert.Equal(HttpStatusCode.Created, createCustomerTwoResponse.StatusCode);\r\n    var parameters = new Dictionary\u003Cstring, string\u003E\r\n    {\r\n        {\r\n            \u0022email\u0022,\r\n            dto.Email\r\n        }\r\n    };\r\n    var requestUri = QueryHelpers.AddQueryString(CustomerUrl, parameters);\r\n    client = _factory.CreateClient();\r\n    var getResponse = await client.GetAsync(requestUri);\r\n    Assert.Equal(HttpStatusCode.OK, getResponse.StatusCode);\r\n    var customer = JsonConvert.DeserializeObject\u003CCustomerResponseDto\u003E(await getResponse.Content.ReadAsStringAsync());\r\n    dto.Email = customerOneEmail;\r\n    var content = await CreateStringContent(dto);\r\n    client = _factory.CreateClient();\r\n    var response = await client.PutAsync($\u0022{CustomerUrl}/{customer.Id}\u0022, content);\r\n    var errors = await ExtractErrorsFromResponse(response);\r\n    Assert.NotNull(errors);\r\n    Assert.Contains(\u0022Id\u0022, errors);\r\n    Assert.NotEmpty(errors[\u0022Id\u0022]);\r\n    Assert.Equal(\u0022Invalid Id.\u0022, errors[\u0022Id\u0022][0]);\r\n    Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Found"
          }
        ]
      },
      {
        "Name": "GetCustomerTest",
        "Body": "{\r\n    var customerOneEmail = CreateValidEmail();\r\n    var dto = new CustomerRequestDto\r\n    {\r\n        FirstName = \u0022Test Name\u0022,\r\n        Surname = \u0022Test Surname\u0022,\r\n        Email = customerOneEmail,\r\n        Password = \u0022Password1@\u0022,\r\n        ConfirmPassword = \u0022Password1@\u0022\r\n    };\r\n    var content = await CreateStringContent(dto);\r\n    var client = _factory.CreateClient();\r\n    var response = await client.PostAsync(CustomerUrl, content);\r\n    Assert.Equal(HttpStatusCode.Created, response.StatusCode);\r\n    client = _factory.CreateClient();\r\n    var getResponse = await client.GetAsync(response.Headers.Location?.ToString());\r\n    Assert.Equal(HttpStatusCode.OK, getResponse.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetCustomerInvalidIdValueTest",
        "Body": "{\r\n    var client = _factory.CreateClient();\r\n    var response = await client.GetAsync($\u0022{CustomerUrl}/l\u0022);\r\n    var errors = await ExtractErrorsFromResponse(response);\r\n    Assert.NotNull(errors);\r\n    Assert.Contains(\u0022id\u0022, errors);\r\n    Assert.NotEmpty(errors[\u0022id\u0022]);\r\n    Assert.Equal(\u0022The value \u0027l\u0027 is not valid.\u0022, errors[\u0022id\u0022][0]);\r\n    Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetCustomerInvalidIdNegativeTest",
        "Body": "{\r\n    var client = _factory.CreateClient();\r\n    var response = await client.GetAsync($\u0022{CustomerUrl}/-1\u0022);\r\n    var errors = await ExtractErrorsFromResponse(response);\r\n    Assert.NotNull(errors);\r\n    Assert.Contains(\u0022Id\u0022, errors);\r\n    Assert.NotEmpty(errors[\u0022Id\u0022]);\r\n    Assert.Equal(\u0022Invalid Id.\u0022, errors[\u0022Id\u0022][0]);\r\n    Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetCustomerListTest",
        "Body": "{\r\n    var dto = new CustomerRequestDto\r\n    {\r\n        FirstName = \u0022Test Name Get\u0022,\r\n        Surname = \u0022Test Surname\u0022,\r\n        Email = CreateValidEmail(),\r\n        Password = \u0022Password1@\u0022,\r\n        ConfirmPassword = \u0022Password1@\u0022\r\n    };\r\n    var content = await CreateStringContent(dto);\r\n    var client = _factory.CreateClient();\r\n    var response = await client.PostAsync(CustomerUrl, content);\r\n    Assert.Equal(HttpStatusCode.Created, response.StatusCode);\r\n    dto.Email = CreateValidEmail();\r\n    var contentTwo = await CreateStringContent(dto);\r\n    client = _factory.CreateClient();\r\n    var responseTwo = await client.PostAsync(CustomerUrl, contentTwo);\r\n    Assert.Equal(HttpStatusCode.Created, responseTwo.StatusCode);\r\n    var parameters = new Dictionary\u003Cstring, string\u003E\r\n    {\r\n        {\r\n            \u0022currentPage\u0022,\r\n            \u00221\u0022\r\n        },\r\n        {\r\n            \u0022pageSize\u0022,\r\n            \u00221\u0022\r\n        },\r\n        {\r\n            \u0022orderBy\u0022,\r\n            dto.FirstName\r\n        },\r\n        {\r\n            \u0022sortBy\u0022,\r\n            \u0022asc\u0022\r\n        }\r\n    };\r\n    var requestUri = QueryHelpers.AddQueryString(CustomerUrl, parameters);\r\n    client = _factory.CreateClient();\r\n    var getResponse = await client.GetAsync(requestUri);\r\n    Assert.Equal(HttpStatusCode.OK, getResponse.StatusCode);\r\n    var customers = JsonConvert.DeserializeObject\u003CPaginationDto\u003CCustomerResponseDto\u003E\u003E(await getResponse.Content.ReadAsStringAsync());\r\n    Assert.True(customers.Count \u003E 1);\r\n    Assert.NotEmpty(customers.Result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteCustomerOkTest",
        "Body": "{\r\n    var email = CreateValidEmail();\r\n    var dto = new CustomerRequestDto\r\n    {\r\n        FirstName = \u0022Test Name\u0022,\r\n        Surname = \u0022Test Surname\u0022,\r\n        Email = email,\r\n        Password = \u0022Password1@\u0022,\r\n        ConfirmPassword = \u0022Password1@\u0022\r\n    };\r\n    var content = await CreateStringContent(dto);\r\n    var client = _factory.CreateClient();\r\n    var response = await client.PostAsync(CustomerUrl, content);\r\n    Assert.Equal(HttpStatusCode.Created, response.StatusCode);\r\n    client = _factory.CreateClient();\r\n    var getResponse = await client.GetAsync(response.Headers.Location?.ToString());\r\n    Assert.Equal(HttpStatusCode.OK, getResponse.StatusCode);\r\n    var customer = JsonConvert.DeserializeObject\u003CCustomerResponseDto\u003E(await getResponse.Content.ReadAsStringAsync());\r\n    client = _factory.CreateClient();\r\n    var deleteResponse = await client.DeleteAsync($\u0022{CustomerUrl}/{customer.Id}\u0022);\r\n    Assert.Equal(HttpStatusCode.NoContent, deleteResponse.StatusCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CustomerControllerTest",
    "Message": null,
    "ProjectName": "CF.Api.UnitTest",
    "Methods": [
      {
        "Name": "GetListTest",
        "Body": "{\r\n    var facadeResult = new PaginationDto\u003CCustomerResponseDto\u003E\r\n    {\r\n        Count = 2,\r\n        Result = new List\u003CCustomerResponseDto\u003E\r\n        {\r\n            new()\r\n            {\r\n                Email = \u0022tarnished@test.com\u0022,\r\n                FirstName = \u0022Elden\u0022,\r\n                Surname = \u0022Ring\u0022,\r\n                FullName = \u0022Elden Ring\u0022,\r\n                Id = 1\r\n            },\r\n            new()\r\n            {\r\n                Email = \u0022nameless_king@test.com\u0022,\r\n                FirstName = \u0022Elden\u0022,\r\n                Surname = \u0022King\u0022,\r\n                FullName = \u0022Elden King\u0022,\r\n                Id = 2\r\n            }\r\n        }\r\n    };\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    _customerFacade.Setup(x =\u003E x.GetListByFilterAsync(It.IsAny\u003CCustomerFilterDto\u003E(), cancellationTokenSource.Token)).ReturnsAsync(facadeResult);\r\n    var controller = new CustomerController(_correlationContext.Object, _logger.Object, _customerFacade.Object);\r\n    var requestDto = new CustomerFilterDto\r\n    {\r\n        FirstName = \u0022Elden\u0022\r\n    };\r\n    var actionResult = await controller.Get(requestDto, cancellationTokenSource.Token);\r\n    Assert.NotNull(actionResult);\r\n    Assert.Equal(2, actionResult?.Value?.Count);\r\n    Assert.Equal(2, actionResult?.Value?.Result.Count(x =\u003E x.FirstName == \u0022Elden\u0022));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "GetByIdTest",
        "Body": "{\r\n    var facadeResult = new CustomerResponseDto\r\n    {\r\n        Email = \u0022tarnished@test.com\u0022,\r\n        FirstName = \u0022Elden\u0022,\r\n        Surname = \u0022Ring\u0022,\r\n        FullName = \u0022Elden Ring\u0022,\r\n        Id = 1\r\n    };\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    _customerFacade.Setup(x =\u003E x.GetByFilterAsync(It.IsAny\u003CCustomerFilterDto\u003E(), cancellationTokenSource.Token)).ReturnsAsync(facadeResult);\r\n    var controller = new CustomerController(_correlationContext.Object, _logger.Object, _customerFacade.Object);\r\n    var actionResult = await controller.Get(1, cancellationTokenSource.Token);\r\n    Assert.NotNull(actionResult);\r\n    Assert.Equal(1, actionResult?.Value?.Id);\r\n    Assert.Equal(\u0022tarnished@test.com\u0022, actionResult?.Value?.Email);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PostTest",
        "Body": "{\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    _customerFacade.Setup(x =\u003E x.CreateAsync(It.IsAny\u003CCustomerRequestDto\u003E(), cancellationTokenSource.Token)).ReturnsAsync(1);\r\n    var controller = new CustomerController(_correlationContext.Object, _logger.Object, _customerFacade.Object);\r\n    var requestDto = new CustomerRequestDto\r\n    {\r\n        ConfirmPassword = \u0022123DarkSouls!\u0022,\r\n        Password = \u0022123DarkSouls!\u0022,\r\n        Email = \u0022chosen_one@test.com\u0022,\r\n        FirstName = \u0022Dark\u0022,\r\n        Surname = \u0022Souls\u0022\r\n    };\r\n    var actionResult = await controller.Post(requestDto, cancellationTokenSource.Token);\r\n    Assert.NotNull(actionResult);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PutTest",
        "Body": "{\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    _customerFacade.Setup(x =\u003E x.UpdateAsync(It.IsAny\u003Clong\u003E(), It.IsAny\u003CCustomerRequestDto\u003E(), cancellationTokenSource.Token));\r\n    var controller = new CustomerController(_correlationContext.Object, _logger.Object, _customerFacade.Object);\r\n    var requestDto = new CustomerRequestDto\r\n    {\r\n        ConfirmPassword = \u0022123DarkSouls!\u0022,\r\n        Password = \u0022123DarkSouls!\u0022,\r\n        Email = \u0022chosen_one@test.com\u0022,\r\n        FirstName = \u0022Dark\u0022,\r\n        Surname = \u0022Souls\u0022\r\n    };\r\n    var actionResult = await controller.Put(1, requestDto, cancellationTokenSource.Token);\r\n    Assert.NotNull(actionResult);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DeleteTest",
        "Body": "{\r\n    var cancellationTokenSource = new CancellationTokenSource();\r\n    _customerFacade.Setup(x =\u003E x.DeleteAsync(It.IsAny\u003Clong\u003E(), cancellationTokenSource.Token));\r\n    var controller = new CustomerController(_correlationContext.Object, _logger.Object, _customerFacade.Object);\r\n    var actionResult = await controller.Delete(1, cancellationTokenSource.Token);\r\n    Assert.NotNull(actionResult);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  }
]