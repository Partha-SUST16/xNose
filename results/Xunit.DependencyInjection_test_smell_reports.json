[
  {
    "Name": "ClassFixtureAndTestClassDependencyTests",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "FixtureWithDependencyIsInjected",
        "Body": "{\r\n    Assert.NotNull(_fixture);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ClassFixtureContainsInjectedDependency",
        "Body": "{\r\n    Assert.IsType\u003CDependencyClass\u003E(_fixture.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestCaseDependencyIsInjected",
        "Body": "{\r\n    Assert.NotNull(_dependency);\r\n    Assert.Equal(0, _dependency.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestCaseDependencyInstanceIsDifferentToFixtureDependencyInstance",
        "Body": "{\r\n    Assert.NotSame(_dependency, _fixture.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureIsSharedClassDependencyIsNot_1",
        "Body": "{\r\n    Assert.Equal(0, _dependency.Value);\r\n    Assert.Equal(0, _fixture.Dependency.Value);\r\n    _dependency.Value\u002B\u002B;\r\n    _fixture.Dependency.Value\u002B\u002B;\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureIsSharedClassDependencyIsNot_2",
        "Body": "{\r\n    Assert.Equal(0, _dependency.Value);\r\n    Assert.Equal(1, _fixture.Dependency.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ClassFixtureAsyncLifetimeTestsUnderTestCollection",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "FixtureWithDependencyIsInjected",
        "Body": "{\r\n    Assert.NotNull(_fixture);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureIsAsyncInitialised",
        "Body": "{\r\n    Assert.Single(_fixture.Journal, j =\u003E j == nameof(IAsyncLifetime.InitializeAsync));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureWasInitialisedAndDisposedInOrder",
        "Body": "{\r\n    Assert.Equal(nameof(IAsyncLifetime.InitializeAsync), ClassFixtureAsyncLifetimeTestsUnderTest.s_fixture?.Journal[0]);\r\n    Assert.Equal(nameof(IAsyncLifetime.DisposeAsync), ClassFixtureAsyncLifetimeTestsUnderTest.s_fixture?.Journal[1]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureDependencyIsDisposed",
        "Body": "{\r\n    Assert.True(ClassFixtureAsyncLifetimeTestsUnderTest.s_fixture?.Dependency.IsDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MonitorlassFixtureAsyncLifetimeCollection",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "FixtureWithDependencyIsInjected",
        "Body": "{\r\n    Assert.NotNull(_fixture);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureIsAsyncInitialised",
        "Body": "{\r\n    Assert.Single(_fixture.Journal, j =\u003E j == nameof(IAsyncLifetime.InitializeAsync));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureWasInitialisedAndDisposedInOrder",
        "Body": "{\r\n    Assert.Equal(nameof(IAsyncLifetime.InitializeAsync), ClassFixtureAsyncLifetimeTestsUnderTest.s_fixture?.Journal[0]);\r\n    Assert.Equal(nameof(IAsyncLifetime.DisposeAsync), ClassFixtureAsyncLifetimeTestsUnderTest.s_fixture?.Journal[1]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureDependencyIsDisposed",
        "Body": "{\r\n    Assert.True(ClassFixtureAsyncLifetimeTestsUnderTest.s_fixture?.Dependency.IsDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ClassFixtureAsyncLifetimeTestsUnderTest",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "FixtureWithDependencyIsInjected",
        "Body": "{\r\n    Assert.NotNull(_fixture);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureIsAsyncInitialised",
        "Body": "{\r\n    Assert.Single(_fixture.Journal, j =\u003E j == nameof(IAsyncLifetime.InitializeAsync));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureWasInitialisedAndDisposedInOrder",
        "Body": "{\r\n    Assert.Equal(nameof(IAsyncLifetime.InitializeAsync), ClassFixtureAsyncLifetimeTestsUnderTest.s_fixture?.Journal[0]);\r\n    Assert.Equal(nameof(IAsyncLifetime.DisposeAsync), ClassFixtureAsyncLifetimeTestsUnderTest.s_fixture?.Journal[1]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureDependencyIsDisposed",
        "Body": "{\r\n    Assert.True(ClassFixtureAsyncLifetimeTestsUnderTest.s_fixture?.Dependency.IsDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ClassFixtureAsyncLifeTimeTests",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "FixtureWithDependencyIsInjected",
        "Body": "{\r\n    Assert.NotNull(_fixture);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureIsAsyncInitialised",
        "Body": "{\r\n    Assert.Single(_fixture.Journal, j =\u003E j == nameof(IAsyncLifetime.InitializeAsync));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureWasInitialisedAndDisposedInOrder",
        "Body": "{\r\n    Assert.Equal(nameof(IAsyncLifetime.InitializeAsync), ClassFixtureAsyncLifetimeTestsUnderTest.s_fixture?.Journal[0]);\r\n    Assert.Equal(nameof(IAsyncLifetime.DisposeAsync), ClassFixtureAsyncLifetimeTestsUnderTest.s_fixture?.Journal[1]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureDependencyIsDisposed",
        "Body": "{\r\n    Assert.True(ClassFixtureAsyncLifetimeTestsUnderTest.s_fixture?.Dependency.IsDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ClassFixtureTest",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "FixtureWithDependencyIsInjected",
        "Body": "{\r\n    Assert.NotNull(_fixture);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ClassFixtureContainsInjectedDependency",
        "Body": "{\r\n    Assert.IsType\u003CDependencyClass\u003E(_fixture.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SameClassFixtureDependencyInstance_1",
        "Body": "{\r\n    Assert.Equal(0, _fixture.Dependency.Value);\r\n    _fixture.Dependency.Value = 5555;\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SameClassFixtureDependencyInstance_2",
        "Body": "{\r\n    Assert.Equal(5555, _fixture.Dependency.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DisposableFixturesUnderTestCollection",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "DependenciesAreInjected",
        "Body": "{\r\n    Assert.NotNull(_fixture);\r\n    Assert.NotNull(_dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureIsDisposed",
        "Body": "{\r\n    Assert.True(DisposableFixtureUnderTest.s_fixture?.IsDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureDependencyIsDisposed",
        "Body": "{\r\n    Assert.True(DisposableFixtureUnderTest.s_fixture?.Dependency?.IsDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ClassDependencyIsDisposed",
        "Body": "{\r\n    Assert.True(DisposableFixtureUnderTest.s_dependency?.IsDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MonitorDisposableFixturesCollection",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "DependenciesAreInjected",
        "Body": "{\r\n    Assert.NotNull(_fixture);\r\n    Assert.NotNull(_dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureIsDisposed",
        "Body": "{\r\n    Assert.True(DisposableFixtureUnderTest.s_fixture?.IsDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureDependencyIsDisposed",
        "Body": "{\r\n    Assert.True(DisposableFixtureUnderTest.s_fixture?.Dependency?.IsDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ClassDependencyIsDisposed",
        "Body": "{\r\n    Assert.True(DisposableFixtureUnderTest.s_dependency?.IsDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DisposableFixtureUnderTest",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "DependenciesAreInjected",
        "Body": "{\r\n    Assert.NotNull(_fixture);\r\n    Assert.NotNull(_dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureIsDisposed",
        "Body": "{\r\n    Assert.True(DisposableFixtureUnderTest.s_fixture?.IsDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureDependencyIsDisposed",
        "Body": "{\r\n    Assert.True(DisposableFixtureUnderTest.s_fixture?.Dependency?.IsDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ClassDependencyIsDisposed",
        "Body": "{\r\n    Assert.True(DisposableFixtureUnderTest.s_dependency?.IsDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DisposableFixtureTests",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "DependenciesAreInjected",
        "Body": "{\r\n    Assert.NotNull(_fixture);\r\n    Assert.NotNull(_dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureIsDisposed",
        "Body": "{\r\n    Assert.True(DisposableFixtureUnderTest.s_fixture?.IsDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureDependencyIsDisposed",
        "Body": "{\r\n    Assert.True(DisposableFixtureUnderTest.s_fixture?.Dependency?.IsDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ClassDependencyIsDisposed",
        "Body": "{\r\n    Assert.True(DisposableFixtureUnderTest.s_dependency?.IsDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CollectionFixtureWithDependencyTestsCollection",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "FixtureWithDependencyIsInjected",
        "Body": "{\r\n    Assert.NotNull(_fixture);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureContainsInjectedDependency",
        "Body": "{\r\n    Assert.IsType\u003CDependencyClass\u003E(_fixture.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestsInCollectionShareCollectionFixture",
        "Body": "{\r\n    if (CollectionFixtureWithDependencyTests_B.s_fixture != null)\r\n    {\r\n        Assert.Same(CollectionFixtureWithDependencyTests_B.s_fixture, _fixture);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureWithDependencyIsInjected",
        "Body": "{\r\n    Assert.NotNull(_fixture);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestClassesInTheSameCollectionReceiveTheSameFixture",
        "Body": "{\r\n    Assert.NotNull(CollectionFixtureWithDependencyTests_A.s_fixture);\r\n    Assert.Same(CollectionFixtureWithDependencyTests_A.s_fixture, CollectionFixtureWithDependencyTests_B.s_fixture);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureIsDisposed",
        "Body": "{\r\n    Assert.True(CollectionFixtureWithDependencyTests_A.s_fixture?.IsDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MonitorCollectionFixtureCollection",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "FixtureWithDependencyIsInjected",
        "Body": "{\r\n    Assert.NotNull(_fixture);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureContainsInjectedDependency",
        "Body": "{\r\n    Assert.IsType\u003CDependencyClass\u003E(_fixture.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestsInCollectionShareCollectionFixture",
        "Body": "{\r\n    if (CollectionFixtureWithDependencyTests_B.s_fixture != null)\r\n    {\r\n        Assert.Same(CollectionFixtureWithDependencyTests_B.s_fixture, _fixture);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureWithDependencyIsInjected",
        "Body": "{\r\n    Assert.NotNull(_fixture);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestClassesInTheSameCollectionReceiveTheSameFixture",
        "Body": "{\r\n    Assert.NotNull(CollectionFixtureWithDependencyTests_A.s_fixture);\r\n    Assert.Same(CollectionFixtureWithDependencyTests_A.s_fixture, CollectionFixtureWithDependencyTests_B.s_fixture);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureIsDisposed",
        "Body": "{\r\n    Assert.True(CollectionFixtureWithDependencyTests_A.s_fixture?.IsDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CollectionFixtureWithDependencyTests_A",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "FixtureWithDependencyIsInjected",
        "Body": "{\r\n    Assert.NotNull(_fixture);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureContainsInjectedDependency",
        "Body": "{\r\n    Assert.IsType\u003CDependencyClass\u003E(_fixture.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestsInCollectionShareCollectionFixture",
        "Body": "{\r\n    if (CollectionFixtureWithDependencyTests_B.s_fixture != null)\r\n    {\r\n        Assert.Same(CollectionFixtureWithDependencyTests_B.s_fixture, _fixture);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureWithDependencyIsInjected",
        "Body": "{\r\n    Assert.NotNull(_fixture);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestClassesInTheSameCollectionReceiveTheSameFixture",
        "Body": "{\r\n    Assert.NotNull(CollectionFixtureWithDependencyTests_A.s_fixture);\r\n    Assert.Same(CollectionFixtureWithDependencyTests_A.s_fixture, CollectionFixtureWithDependencyTests_B.s_fixture);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureIsDisposed",
        "Body": "{\r\n    Assert.True(CollectionFixtureWithDependencyTests_A.s_fixture?.IsDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CollectionFixtureWithDependencyTests_B",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "FixtureWithDependencyIsInjected",
        "Body": "{\r\n    Assert.NotNull(_fixture);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureContainsInjectedDependency",
        "Body": "{\r\n    Assert.IsType\u003CDependencyClass\u003E(_fixture.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestsInCollectionShareCollectionFixture",
        "Body": "{\r\n    if (CollectionFixtureWithDependencyTests_B.s_fixture != null)\r\n    {\r\n        Assert.Same(CollectionFixtureWithDependencyTests_B.s_fixture, _fixture);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureWithDependencyIsInjected",
        "Body": "{\r\n    Assert.NotNull(_fixture);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestClassesInTheSameCollectionReceiveTheSameFixture",
        "Body": "{\r\n    Assert.NotNull(CollectionFixtureWithDependencyTests_A.s_fixture);\r\n    Assert.Same(CollectionFixtureWithDependencyTests_A.s_fixture, CollectionFixtureWithDependencyTests_B.s_fixture);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureIsDisposed",
        "Body": "{\r\n    Assert.True(CollectionFixtureWithDependencyTests_A.s_fixture?.IsDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CollectionFixtureTestMonitor",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "FixtureWithDependencyIsInjected",
        "Body": "{\r\n    Assert.NotNull(_fixture);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureContainsInjectedDependency",
        "Body": "{\r\n    Assert.IsType\u003CDependencyClass\u003E(_fixture.Dependency);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestsInCollectionShareCollectionFixture",
        "Body": "{\r\n    if (CollectionFixtureWithDependencyTests_B.s_fixture != null)\r\n    {\r\n        Assert.Same(CollectionFixtureWithDependencyTests_B.s_fixture, _fixture);\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureWithDependencyIsInjected",
        "Body": "{\r\n    Assert.NotNull(_fixture);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TestClassesInTheSameCollectionReceiveTheSameFixture",
        "Body": "{\r\n    Assert.NotNull(CollectionFixtureWithDependencyTests_A.s_fixture);\r\n    Assert.Same(CollectionFixtureWithDependencyTests_A.s_fixture, CollectionFixtureWithDependencyTests_B.s_fixture);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FixtureIsDisposed",
        "Body": "{\r\n    Assert.True(CollectionFixtureWithDependencyTests_A.s_fixture?.IsDisposed);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ContentRootTest",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "CanReadAppSettings",
        "Body": "{\r\n    Assert.Equal(\u0022testValue\u0022, _configuration[\u0022testKey\u0022]);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FromServicesTest",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "FactTest",
        "Body": "{\r\n    Assert.Equal(\u0022Test\u0022, arg1);\r\n    Assert.Equal(3, invalid);\r\n    Assert.Equal(_dependency, dependency);\r\n    Assert.Equal(_output, output);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "TheoryTest",
        "Body": "{\r\n    Assert.Equal(\u0022Test\u0022, arg1);\r\n    Assert.Equal(3, invalid);\r\n    Assert.Equal(_dependency, dependency);\r\n    Assert.Equal(_output, output);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HostServiceTest",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "Test",
        "Body": "Could not load the body for function: Test in class: HostServiceTest",
        "Smells": []
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HostTest",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "ApplicationNameTest",
        "Body": "Could not load the body for function: ApplicationNameTest in class: HostTest",
        "Smells": []
      },
      {
        "Name": "IsAutofac",
        "Body": "Could not load the body for function: IsAutofac in class: HostTest",
        "Smells": []
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "InstancePerTest",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "Test1",
        "Body": "{\r\n    _d.Value\u002B\u002B;\r\n    Assert.Equal(1, _d.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Test2",
        "Body": "{\r\n    _d.Value\u002B\u002B;\r\n    Assert.Equal(1, _d.Value);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "Test3",
        "Body": "{\r\n    _d.TestWriteLine(100);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TestClassA",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "InstanceMethodTest",
        "Body": "Could not load the body for function: InstanceMethodTest in class: TestClassA",
        "Smells": []
      },
      {
        "Name": "StaticMethodTest",
        "Body": "Could not load the body for function: StaticMethodTest in class: TestClassA",
        "Smells": []
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "MethodDataAttributeTest",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "InstanceMethodTest",
        "Body": "Could not load the body for function: InstanceMethodTest in class: MethodDataAttributeTest",
        "Smells": []
      },
      {
        "Name": "StaticMethodTest",
        "Body": "Could not load the body for function: StaticMethodTest in class: MethodDataAttributeTest",
        "Smells": []
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Dependency",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "ProperStartupWasUsed",
        "Body": "Could not load the body for function: ProperStartupWasUsed in class: Dependency",
        "Smells": []
      },
      {
        "Name": "DependencyIsInjectedInInnerScope",
        "Body": "Could not load the body for function: DependencyIsInjectedInInnerScope in class: Dependency",
        "Smells": []
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Startup",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "ProperStartupWasUsed",
        "Body": "Could not load the body for function: ProperStartupWasUsed in class: Startup",
        "Smells": []
      },
      {
        "Name": "DependencyIsInjectedInInnerScope",
        "Body": "Could not load the body for function: DependencyIsInjectedInInnerScope in class: Startup",
        "Smells": []
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "StartupTest",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "ProperStartupWasUsed",
        "Body": "Could not load the body for function: ProperStartupWasUsed in class: StartupTest",
        "Smells": []
      },
      {
        "Name": "DependencyIsInjectedInInnerScope",
        "Body": "Could not load the body for function: DependencyIsInjectedInInnerScope in class: StartupTest",
        "Smells": []
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ModuleStartupTest",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "ProperStartupWasUsed",
        "Body": "Could not load the body for function: ProperStartupWasUsed in class: ModuleStartupTest",
        "Smells": []
      },
      {
        "Name": "DependencyIsInjectedInInnerScope",
        "Body": "Could not load the body for function: DependencyIsInjectedInInnerScope in class: ModuleStartupTest",
        "Smells": []
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Dependency",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "ProperStartupWasUsed",
        "Body": "Could not load the body for function: ProperStartupWasUsed in class: Dependency",
        "Smells": []
      },
      {
        "Name": "DependencyIsInjectedInInnerScope",
        "Body": "Could not load the body for function: DependencyIsInjectedInInnerScope in class: Dependency",
        "Smells": []
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Startup",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "ProperStartupWasUsed",
        "Body": "Could not load the body for function: ProperStartupWasUsed in class: Startup",
        "Smells": []
      },
      {
        "Name": "DependencyIsInjectedInInnerScope",
        "Body": "Could not load the body for function: DependencyIsInjectedInInnerScope in class: Startup",
        "Smells": []
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "NamespaceLevelStartupTest",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "ProperStartupWasUsed",
        "Body": "Could not load the body for function: ProperStartupWasUsed in class: NamespaceLevelStartupTest",
        "Smells": []
      },
      {
        "Name": "DependencyIsInjectedInInnerScope",
        "Body": "Could not load the body for function: DependencyIsInjectedInInnerScope in class: NamespaceLevelStartupTest",
        "Smells": []
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Dependency2",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "ProperStartupWasUsed",
        "Body": "Could not load the body for function: ProperStartupWasUsed in class: Dependency2",
        "Smells": []
      },
      {
        "Name": "DependencyIsInjectedInInnerScope",
        "Body": "Could not load the body for function: DependencyIsInjectedInInnerScope in class: Dependency2",
        "Smells": []
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Startup",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "ProperStartupWasUsed",
        "Body": "Could not load the body for function: ProperStartupWasUsed in class: Startup",
        "Smells": []
      },
      {
        "Name": "DependencyIsInjectedInInnerScope",
        "Body": "Could not load the body for function: DependencyIsInjectedInInnerScope in class: Startup",
        "Smells": []
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "NestStartupTest",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "ProperStartupWasUsed",
        "Body": "Could not load the body for function: ProperStartupWasUsed in class: NestStartupTest",
        "Smells": []
      },
      {
        "Name": "DependencyIsInjectedInInnerScope",
        "Body": "Could not load the body for function: DependencyIsInjectedInInnerScope in class: NestStartupTest",
        "Smells": []
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ParameterlessConstructorTest",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "ITestOutputHelperAccessor_Output_Should_Not_Null",
        "Body": "{\r\n    Assert.NotNull(accessor.Output);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ScopePerTestRunnerTest",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "Test1",
        "Body": "Could not load the body for function: Test1 in class: ScopePerTestRunnerTest",
        "Smells": []
      },
      {
        "Name": "Test2",
        "Body": "Could not load the body for function: Test2 in class: ScopePerTestRunnerTest",
        "Smells": []
      },
      {
        "Name": "Test3",
        "Body": "Could not load the body for function: Test3 in class: ScopePerTestRunnerTest",
        "Smells": []
      },
      {
        "Name": "Test4",
        "Body": "Could not load the body for function: Test4 in class: ScopePerTestRunnerTest",
        "Smells": []
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Dependency2",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "ProperStartupWasUsed",
        "Body": "Could not load the body for function: ProperStartupWasUsed in class: Dependency2",
        "Smells": []
      },
      {
        "Name": "DependencyIsInjectedInInnerScope",
        "Body": "Could not load the body for function: DependencyIsInjectedInInnerScope in class: Dependency2",
        "Smells": []
      },
      {
        "Name": "SharedTest",
        "Body": "Could not load the body for function: SharedTest in class: Dependency2",
        "Smells": []
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Startup2",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "ProperStartupWasUsed",
        "Body": "Could not load the body for function: ProperStartupWasUsed in class: Startup2",
        "Smells": []
      },
      {
        "Name": "DependencyIsInjectedInInnerScope",
        "Body": "Could not load the body for function: DependencyIsInjectedInInnerScope in class: Startup2",
        "Smells": []
      },
      {
        "Name": "SharedTest",
        "Body": "Could not load the body for function: SharedTest in class: Startup2",
        "Smells": []
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "StartupAttributeTest",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "ProperStartupWasUsed",
        "Body": "Could not load the body for function: ProperStartupWasUsed in class: StartupAttributeTest",
        "Smells": []
      },
      {
        "Name": "DependencyIsInjectedInInnerScope",
        "Body": "Could not load the body for function: DependencyIsInjectedInInnerScope in class: StartupAttributeTest",
        "Smells": []
      },
      {
        "Name": "SharedTest",
        "Body": "Could not load the body for function: SharedTest in class: StartupAttributeTest",
        "Smells": []
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "StartupAttributeSharedTest",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "ProperStartupWasUsed",
        "Body": "Could not load the body for function: ProperStartupWasUsed in class: StartupAttributeSharedTest",
        "Smells": []
      },
      {
        "Name": "DependencyIsInjectedInInnerScope",
        "Body": "Could not load the body for function: DependencyIsInjectedInInnerScope in class: StartupAttributeSharedTest",
        "Smells": []
      },
      {
        "Name": "SharedTest",
        "Body": "Could not load the body for function: SharedTest in class: StartupAttributeSharedTest",
        "Smells": []
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "EmptyStartup",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: EmptyStartup",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CreateStartupTestStartup1",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: CreateStartupTestStartup1",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CreateStartupTestStartup2",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: CreateStartupTestStartup2",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CreateStartupTestStartup3",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: CreateStartupTestStartup3",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CreateStartupTestStartup4",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: CreateStartupTestStartup4",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CreateHostBuilderTestStartup0",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: CreateHostBuilderTestStartup0",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CreateHostBuilderTestStartup1",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: CreateHostBuilderTestStartup1",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CreateHostBuilderTestStartup2",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: CreateHostBuilderTestStartup2",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CreateHostBuilderTestStartup3",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: CreateHostBuilderTestStartup3",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CreateHostBuilderTestStartup4",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: CreateHostBuilderTestStartup4",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CreateHostBuilderTestStartup5",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: CreateHostBuilderTestStartup5",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigureHostTestStartup0",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: ConfigureHostTestStartup0",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigureHostTestStartup1",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: ConfigureHostTestStartup1",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigureHostTestStartup2",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: ConfigureHostTestStartup2",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigureHostTestStartup3",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: ConfigureHostTestStartup3",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigureHostTestStartup4",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: ConfigureHostTestStartup4",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigureHostTestStartup7",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: ConfigureHostTestStartup7",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigureHostTestStartup8",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: ConfigureHostTestStartup8",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigureServicesTestStartup0",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: ConfigureServicesTestStartup0",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigureServicesTestStartup1",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: ConfigureServicesTestStartup1",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigureServicesTestStartup2",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: ConfigureServicesTestStartup2",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigureServicesTestStartup3",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: ConfigureServicesTestStartup3",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigureServicesTestStartup4",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: ConfigureServicesTestStartup4",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigureServicesTestStartup5",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: ConfigureServicesTestStartup5",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigureServicesTestStartup6",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: ConfigureServicesTestStartup6",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigureServicesTestStartup7",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: ConfigureServicesTestStartup7",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigureServicesTestStartup8",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: ConfigureServicesTestStartup8",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigureTestStartup0",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: ConfigureTestStartup0",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigureTestStartup1",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: ConfigureTestStartup1",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ConfigureTestStartup2",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: ConfigureTestStartup2",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "StaticStartup",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: StaticStartup",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "StartupWithStaticMethod",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: StartupWithStaticMethod",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "StartupTest",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "StartupSharedTest",
        "Body": "Could not load the body for function: StartupSharedTest in class: StartupTest",
        "Smells": []
      },
      {
        "Name": "GetStartupTypeTest",
        "Body": "{\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(Name));\r\n    Assert.Equal(typeof(Startup), StartupLoader.GetStartupType(new(\u0022Xunit.DependencyInjection.FakeTest\u0022)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateStartupTest",
        "Body": "{\r\n    Assert.Throws\u003CArgumentNullException\u003E(() =\u003E StartupLoader.CreateStartup(null !));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(EmptyStartup)));\r\n    Assert.NotNull(StartupLoader.CreateStartup(typeof(CreateStartupTestStartup1)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup2)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup3)));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E StartupLoader.CreateStartup(typeof(CreateStartupTestStartup4)));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CreateHostBuilderTest",
        "Body": "{\r\n    static IHostBuilder? CreateHostBuilder(AssemblyName name, object startup) =\u003E StartupLoader.CreateHostBuilder(name, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(CreateHostBuilder), typeof(IHostBuilder)));\r\n    Assert.Null(CreateHostBuilder(Name, new EmptyStartup()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(new(), new CreateHostBuilderTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup0()));\r\n    object startup = new CreateHostBuilderTestStartup1();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup1\u003E());\r\n    startup = new CreateHostBuilderTestStartup2();\r\n    Assert.Equal(startup, CreateHostBuilder(Name, startup)?.Build().Services.GetService\u003CCreateHostBuilderTestStartup2\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup3()));\r\n    Assert.Equal(Name, CreateHostBuilder(Name, new CreateHostBuilderTestStartup4())?.Build().Services.GetService\u003CAssemblyName\u003E());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E CreateHostBuilder(Name, new CreateHostBuilderTestStartup5()));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureHostTest",
        "Body": "{\r\n    static void ConfigureHost(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureHost(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureHost)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureHost(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup0()));\r\n    ConfigureHost(hostBuilder, new ConfigureHostTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup2()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup3()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup4()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureHost(hostBuilder, new ConfigureHostTestStartup7()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureHostTestStartup1\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureServicesTest",
        "Body": "{\r\n    static void ConfigureServices(IHostBuilder hostBuilder, object startup) =\u003E StartupLoader.ConfigureServices(hostBuilder, startup, startup.GetType(), StartupLoader.FindMethod(startup.GetType(), nameof(ConfigureServices)));\r\n    var hostBuilder = new HostBuilder();\r\n    ConfigureServices(hostBuilder, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup0()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup1());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup2()));\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup3());\r\n    ConfigureServices(hostBuilder, new ConfigureServicesTestStartup4());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup5()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup6()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup7()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E ConfigureServices(hostBuilder, new ConfigureServicesTestStartup8()));\r\n    var services = hostBuilder.Build().Services;\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup1\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup3\u003E());\r\n    Assert.NotNull(services.GetService\u003CConfigureServicesTestStartup4\u003E());\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ConfigureTest",
        "Body": "{\r\n    static void Configure(IServiceProvider services, object startup) =\u003E StartupLoader.Configure(services, startup, StartupLoader.FindMethod(startup.GetType(), nameof(Configure)));\r\n    var startup = new ConfigureTestStartup2();\r\n    var hostBuilder = new HostBuilder().ConfigureServices(s =\u003E s.AddSingleton(startup));\r\n    var services = hostBuilder.Build().Services;\r\n    Configure(services, new EmptyStartup());\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup0()));\r\n    Assert.Throws\u003CInvalidOperationException\u003E(() =\u003E Configure(services, new ConfigureTestStartup1()));\r\n    Configure(services, startup);\r\n    Assert.True(startup.Invoked);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "StaticMethodTest",
        "Body": "{\r\n    StartupLoader.CreateHost(typeof(StaticStartup), Name, _diagnosticMessageSink);\r\n    Assert.Equal(0, StaticStartup.Created);\r\n    StartupLoader.CreateHost(typeof(StartupWithStaticMethod), Name, _diagnosticMessageSink);\r\n    Assert.Equal(1, StartupWithStaticMethod.Created);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TheoryTest",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "ComplexParameterizedTest",
        "Body": "{\r\n    Assert.Equal(\u0022Test\u0022, arg1);\r\n    Assert.Equal(\u0022Value\u0022, arg2[\u0022Key\u0022]);\r\n    Assert.Equal(\u0022Value\u0022, arg3[\u0022Key\u0022]);\r\n    Assert.True(delay \u003E= 0);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ComplexParameterizedTestAsync",
        "Body": "{\r\n    Assert.Equal(\u0022Test\u0022, arg1);\r\n    Assert.Equal(\u0022Value\u0022, arg2[\u0022Key\u0022]);\r\n    Assert.Equal(\u0022Value\u0022, arg3[\u0022Key\u0022]);\r\n    Assert.True(delay \u003E= 0);\r\n    await Task.Delay(delay).ConfigureAwait(false);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SimpleParameterizedTest",
        "Body": "{\r\n    Assert.Equal(\u0022Test\u0022, arg1);\r\n    Assert.Equal(1, arg2);\r\n    Assert.True(delay \u003E= 0);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SimpleParameterizedTestAsync",
        "Body": "{\r\n    Assert.Equal(\u0022Test\u0022, arg1);\r\n    Assert.Equal(1, arg2);\r\n    Assert.True(delay \u003E= 0);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "InlineDataTest",
        "Body": "{\r\n    Assert.Equal(\u0022Test\u0022, arg1);\r\n    Assert.Equal(1, arg2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "XunitTestOutputLoggerTest",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test(net472)",
    "Methods": [
      {
        "Name": "Test",
        "Body": "{\r\n    _logger.LogDebug(\u0022LogDebug\u0022);\r\n    _logger.LogInformation(\u0022LogInformation\u0022);\r\n    _logger.LogError(\u0022LogError\u0022);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "TestServerTest",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Test.AspNetCore",
    "Methods": [
      {
        "Name": "HttpTest",
        "Body": "{\r\n    using var response = await _httpClient.GetAsync(\u0022/\u0022).ConfigureAwait(false);\r\n    response.EnsureSuccessStatusCode();\r\n    Assert.Equal(Key, await response.Content.ReadAsStringAsync().ConfigureAwait(false));\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DependencyInjectionTest",
    "Message": null,
    "ProjectName": "Xunit.DependencyInjection.Analyzer.Test(net48)",
    "Methods": [
      {
        "Name": "VerifyAsync",
        "Body": "{\r\n    var task = fixedSource == null ? CSharpAnalyzerVerifier.VerifyAnalyzerAsync(\r\n#if NETFRAMEWORK\r\n    File.ReadAllText(Path.Combine(\u0022Startup\u0022, source)), \r\n#else\r\n                await File.ReadAllTextAsync(Path.Combine(\u0022Startup\u0022, source), _cancellationToken).ConfigureAwait(false),\n#endif\r\n    _cancellationToken, expected) : CSharpCodeFixVerifier.VerifyCodeFixAsync(\r\n#if NETFRAMEWORK\r\n    File.ReadAllText(Path.Combine(\u0022Startup\u0022, source)), File.ReadAllText(Path.Combine(\u0022Startup\u0022, fixedSource)), \r\n#else\r\n                await File.ReadAllTextAsync(Path.Combine(\u0022Startup\u0022, source), _cancellationToken).ConfigureAwait(false),\n                await File.ReadAllTextAsync(Path.Combine(\u0022Startup\u0022, fixedSource), _cancellationToken).ConfigureAwait(false),\n#endif\r\n    _cancellationToken, expected);\r\n    await task.ConfigureAwait(false);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  }
]