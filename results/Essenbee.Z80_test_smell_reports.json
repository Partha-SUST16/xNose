[
  {
    "Name": "BinaryCodedDecimalArithmeticTests",
    "Message": null,
    "ProjectName": "Essenbee.Z80.Tests",
    "Methods": [
      {
        "Name": "EightBitBCDAddition",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x3E\r\n        }, // LD A,15h    0001 0101\r\n        {\r\n            0x0081,\r\n            0x15\r\n        },\r\n        {\r\n            0x0082,\r\n            0x06\r\n        }, // LD B,27h    0010 0111\r\n        {\r\n            0x0083,\r\n            0x27\r\n        },\r\n        {\r\n            0x0084,\r\n            0x80\r\n        }, // ADD A,B\r\n        {\r\n            0x0085,\r\n            0x27\r\n        }, // DAA\r\n        {\r\n            0x0086,\r\n            0x00\r\n        },\r\n        {\r\n            0x0087,\r\n            0x00\r\n        },\r\n        {\r\n            0x0088,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    for (int i = 0; i \u003C 5; i\u002B\u002B)\r\n    {\r\n        cpu.Step();\r\n    }\r\n\r\n    // BCD 42 is the answer... 0100 0010\r\n    Assert.Equal(0x04, cpu.A \u003E\u003E 4); // Tens digit is 4\r\n    Assert.Equal(0x02, cpu.A \u0026 0x0F); // Ones digit is 2\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P); // Even parity\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "EightBitBCDSubtractionNegativeResult",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x3E\r\n        }, // LD A,15h    0001 0101\r\n        {\r\n            0x0081,\r\n            0x15\r\n        },\r\n        {\r\n            0x0082,\r\n            0x06\r\n        }, // LD B,27h    0010 0111\r\n        {\r\n            0x0083,\r\n            0x27\r\n        },\r\n        {\r\n            0x0084,\r\n            0x90\r\n        }, // SUB A,B\r\n        {\r\n            0x0085,\r\n            0x27\r\n        }, // DAA\r\n        {\r\n            0x0086,\r\n            0x00\r\n        },\r\n        {\r\n            0x0087,\r\n            0x00\r\n        },\r\n        {\r\n            0x0088,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    for (int i = 0; i \u003C 5; i\u002B\u002B)\r\n    {\r\n        cpu.Step();\r\n    }\r\n\r\n    // BCD -12 is the answer (represented as the 10s complement form, 88) with sign bit set\r\n    Assert.Equal(0x08, cpu.A \u003E\u003E 4);\r\n    Assert.Equal(0x08, cpu.A \u0026 0x0F);\r\n    // Reverse the tens complement form...\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S); // Sign is -\r\n    Assert.Equal(0x01, 9 - (cpu.A \u003E\u003E 4)); // Tens digit is 1\r\n    Assert.Equal(0x02, 9 - (cpu.A \u0026 0x0F) \u002B 1); // Ones digit is 2\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N); // Subtraction\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P); // Even parity\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "EightBitBCDSubtraction",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x3E\r\n        }, // LD A,27h    0010 0111\r\n        {\r\n            0x0081,\r\n            0x27\r\n        },\r\n        {\r\n            0x0082,\r\n            0x06\r\n        }, // LD B,15h    0001 0101\r\n        {\r\n            0x0083,\r\n            0x15\r\n        },\r\n        {\r\n            0x0084,\r\n            0x90\r\n        }, // SUB A,B\r\n        {\r\n            0x0085,\r\n            0x27\r\n        }, // DAA\r\n        {\r\n            0x0086,\r\n            0x00\r\n        },\r\n        {\r\n            0x0087,\r\n            0x00\r\n        },\r\n        {\r\n            0x0088,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    for (int i = 0; i \u003C 5; i\u002B\u002B)\r\n    {\r\n        cpu.Step();\r\n    }\r\n\r\n    // BCD 12 is the answer... 00001 0010\r\n    Assert.Equal(0x01, cpu.A \u003E\u003E 4); // Tens digit is 1\r\n    Assert.Equal(0x02, cpu.A \u0026 0x0F); // Ones digit is 2\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N); // Subtraction\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P); // Even parity\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "CallAndReturnGroupShould",
    "Message": null,
    "ProjectName": "Essenbee.Z80.Tests",
    "Methods": [
      {
        "Name": "PushAndSetProgramCounterForCALL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xCD\r\n        }, // CALL \u00260190\r\n        {\r\n            0x0081,\r\n            0x90\r\n        },\r\n        {\r\n            0x0082,\r\n            0x01\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        }, // \u003C- Subroutine\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFB,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFC,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFD,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFE,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFF,\r\n            0x00\r\n        },\r\n        {\r\n            0x2000,\r\n            0x00\r\n        }, // \u003C- SP\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080,\r\n        SP = 0x2000\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0190, cpu.PC);\r\n    Assert.Equal(0x1FFE, cpu.SP);\r\n    Assert.Equal(0x00, program[0x1FFF]);\r\n    Assert.Equal(0x83, program[0x1FFE]);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PushAndSetProgramCounterForCALLCC_GivenZero",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xCD\r\n        }, // CALL \u00260190\r\n        {\r\n            0x0081,\r\n            0x90\r\n        },\r\n        {\r\n            0x0082,\r\n            0x01\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        }, // \u003C- Subroutine\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFB,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFC,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFD,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFE,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFF,\r\n            0x00\r\n        },\r\n        {\r\n            0x2000,\r\n            0x00\r\n        }, // \u003C- SP\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080,\r\n        SP = 0x2000\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.F = (Flags)0b01000000; // Set Z flag\r\n    cpu.Step();\r\n    Assert.Equal(0x0190, cpu.PC);\r\n    Assert.Equal(0x1FFE, cpu.SP);\r\n    Assert.Equal(0x00, program[0x1FFF]);\r\n    Assert.Equal(0x83, program[0x1FFE]);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DoNothingForCALLCC_GivenNotZero",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xCC\r\n        }, // CALL Z, \u00260190\r\n        {\r\n            0x0081,\r\n            0x90\r\n        },\r\n        {\r\n            0x0082,\r\n            0x01\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        }, // \u003C- Subroutine\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFB,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFC,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFD,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFE,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFF,\r\n            0x00\r\n        },\r\n        {\r\n            0x2000,\r\n            0x00\r\n        }, // \u003C- SP\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080,\r\n        SP = 0x2000\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.F = (Flags)0b00000000; // Reset Z flag\r\n    cpu.Step();\r\n    Assert.Equal(0x0083, cpu.PC);\r\n    Assert.Equal(0x2000, cpu.SP);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PopProgramCounterForRET",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xC9\r\n        }, // RET\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        }, // \u003C- Continue from here\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFB,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFC,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFD,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFE,\r\n            0x90\r\n        }, // \u003C- SP\r\n        {\r\n            0x1FFF,\r\n            0x01\r\n        },\r\n        {\r\n            0x2000,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080,\r\n        SP = 0x1FFE\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0190, cpu.PC);\r\n    Assert.Equal(0x2000, cpu.SP);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PopProgramCounterForRETCC_GivenCarryFlagSet",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x37\r\n        }, // SCF\r\n        {\r\n            0x0081,\r\n            0xD8\r\n        }, // RET C\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        }, // \u003C- Continue from here\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFB,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFC,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFD,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFE,\r\n            0x90\r\n        }, // \u003C- SP\r\n        {\r\n            0x1FFF,\r\n            0x01\r\n        },\r\n        {\r\n            0x2000,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080,\r\n        SP = 0x1FFE\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    cpu.Step();\r\n    Assert.Equal(0x0190, cpu.PC);\r\n    Assert.Equal(0x2000, cpu.SP);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DoNothingForRETCC_GivenCarryFlagNotSet",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xD8\r\n        }, // RET C\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        }, // \u003C- Continue from here\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFB,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFC,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFD,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFE,\r\n            0x90\r\n        }, // \u003C- SP\r\n        {\r\n            0x1FFF,\r\n            0x01\r\n        },\r\n        {\r\n            0x2000,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080,\r\n        SP = 0x1FFE\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0081, cpu.PC);\r\n    Assert.Equal(0x1FFE, cpu.SP);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PushAndSetProgramCounterForRST",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFF\r\n        }, // RST \u002638\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFB,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFC,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFD,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFE,\r\n            0x00\r\n        },\r\n        {\r\n            0x1FFF,\r\n            0x00\r\n        },\r\n        {\r\n            0x2000,\r\n            0x00\r\n        }, // \u003C- SP\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080,\r\n        SP = 0x2000\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0038, cpu.PC);\r\n    Assert.Equal(0x1FFE, cpu.SP);\r\n    Assert.Equal(0x00, program[0x1FFF]);\r\n    Assert.Equal(0x81, program[0x1FFE]);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ComparisonsShould",
    "Message": null,
    "ProjectName": "Essenbee.Z80.Tests",
    "Methods": [
      {
        "Name": "CompareAccumulatorWithBWithCPR",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xB8\r\n        }, // CP B\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0xF5,\r\n        B = 0x0F,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xF5, cpu.A);\r\n    Assert.Equal(0x0F, cpu.B);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "CompareAccumulatorWithItselfWithCPR",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xBF\r\n        }, // CP A\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0xF5,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xF5, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SetZeroFlagWhenTrueForCPR",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xB8\r\n        }, // CP B\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x01,\r\n        B = 0x01,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x01, cpu.A);\r\n    Assert.Equal(0x01, cpu.B);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UnsetZeroFlagWhenFalseForCPR1",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xB8\r\n        }, // CP B\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x02,\r\n        B = 0x01,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x02, cpu.A);\r\n    Assert.Equal(0x01, cpu.B);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UnsetZeroFlagWhenFalseForCPR2",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xB8\r\n        }, // CP B\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x01,\r\n        B = 0x02,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x01, cpu.A);\r\n    Assert.Equal(0x02, cpu.B);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S); // Negative comparison\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H); // Borrow from bit 4\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Borrow from \u0022bit 8\u0022\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SetZeroFlagWhenTrueForCPN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFE\r\n        }, // CP \u002601\r\n        {\r\n            0x0081,\r\n            0x01\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x01,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x01, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UnsetZeroFlagWhenFalseForCPN1",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFE\r\n        }, // CP \u002601\r\n        {\r\n            0x0081,\r\n            0x01\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x02,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x02, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UnsetZeroFlagWhenFalseForCPN2",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFE\r\n        }, // CP \u002602\r\n        {\r\n            0x0081,\r\n            0x02\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x01,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x01, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S); // Negative comparison\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H); // Borrow from bit 4\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Borrow from \u0022bit 8\u0022\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SetZeroFlagWhenTrueForCPHL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xBE\r\n        }, // CP (HL)\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x01\r\n        }, // \u003C- (HL)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x01,\r\n        H = 0x08,\r\n        L = 0xFF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x01, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UnsetZeroFlagWhenFalseForCPHL1",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xBE\r\n        }, // CP (HL)\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x01\r\n        }, // \u003C- (HL)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x02,\r\n        H = 0x08,\r\n        L = 0xFF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x02, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UnsetZeroFlagWhenFalseForCPNL2",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xBE\r\n        }, // CP (HL)\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x02\r\n        }, // \u003C- (HL)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x01,\r\n        H = 0x08,\r\n        L = 0xFF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x01, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S); // Negative comparison\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H); // Borrow from bit 4\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Borrow from \u0022bit 8\u0022\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SetZeroFlagWhenTrueForCPIXD",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        }, // CP (IX\u002B3)\r\n        {\r\n            0x0081,\r\n            0xBE\r\n        },\r\n        {\r\n            0x0082,\r\n            0x03\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // \u003C- (IX)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x01\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x01,\r\n        IX = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x01, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UnsetZeroFlagWhenFalseForCPIXD1",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        }, // CP (IX\u002B3)\r\n        {\r\n            0x0081,\r\n            0xBE\r\n        },\r\n        {\r\n            0x0082,\r\n            0x03\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // \u003C- (IX)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x01\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x02,\r\n        IX = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x02, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UnsetZeroFlagWhenFalseForCPIXD2",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        }, // CP (IX\u002B3)\r\n        {\r\n            0x0081,\r\n            0xBE\r\n        },\r\n        {\r\n            0x0082,\r\n            0x03\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // \u003C- (IX)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x02\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x01,\r\n        IX = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x01, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S); // Negative comparison\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H); // Borrow from bit 4\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Borrow from \u0022bit 8\u0022\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SetZeroFlagWhenTrueForCPIYD",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        }, // CP (IY\u002B3)\r\n        {\r\n            0x0081,\r\n            0xBE\r\n        },\r\n        {\r\n            0x0082,\r\n            0x03\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // \u003C- (IY)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x01\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x01,\r\n        IY = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x01, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UnsetZeroFlagWhenFalseForCPIYD1",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        }, // CP (IY\u002B3)\r\n        {\r\n            0x0081,\r\n            0xBE\r\n        },\r\n        {\r\n            0x0082,\r\n            0x03\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // \u003C- (IY)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x01\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x02,\r\n        IY = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x02, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UnsetZeroFlagWhenFalseForCPIYD2",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        }, // CP (IY\u002B3)\r\n        {\r\n            0x0081,\r\n            0xBE\r\n        },\r\n        {\r\n            0x0082,\r\n            0x03\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // \u003C- (IY)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x02\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x01,\r\n        IY = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x01, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S); // Negative comparison\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H); // Borrow from bit 4\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Borrow from \u0022bit 8\u0022\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "DisassemblerShould",
    "Message": null,
    "ProjectName": "Essenbee.Z80.Tests",
    "Methods": [
      {
        "Name": "DisassembleArithmetic1HexFileCorrectly",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var expectedDisassembly = new Dictionary\u003Cushort, string\u003E\r\n    {\r\n        {\r\n            0x0080,\r\n            \u0022LD A,\u002605\u0022\r\n        },\r\n        {\r\n            0x0082,\r\n            \u0022LD B,\u00260A\u0022\r\n        },\r\n        {\r\n            0x0084,\r\n            \u0022ADD A,B\u0022\r\n        },\r\n        {\r\n            0x0085,\r\n            \u0022ADD A,A\u0022\r\n        },\r\n        {\r\n            0x0086,\r\n            \u0022LD C,\u00260F\u0022\r\n        },\r\n        {\r\n            0x0088,\r\n            \u0022SUB A,C\u0022\r\n        },\r\n        {\r\n            0x0089,\r\n            \u0022LD H,\u002608\u0022\r\n        },\r\n        {\r\n            0x008B,\r\n            \u0022LD L,\u0026FF\u0022\r\n        },\r\n        {\r\n            0x008D,\r\n            \u0022LD (HL),A\u0022\r\n        },\r\n        {\r\n            0x008E,\r\n            \u0022NOP\u0022\r\n        },\r\n    };\r\n    var ram = HexFileReader.Read(\u0022../../../HexFiles/Arithmetic1.hex\u0022);\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E ram[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    var disassembledCode = cpu.Disassemble(0x0080, 0x008E);\r\n    Assert.Equal(expectedDisassembly, disassembledCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DisassembleMultiplicationHexFileCorrectly",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var ram = HexFileReader.Read(\u0022../../../HexFiles/Multiplication.hex\u0022);\r\n    var expectedDisassembly = new Dictionary\u003Cushort, string\u003E\r\n    {\r\n        {\r\n            0x8000,\r\n            \u0022LD BC,\u00260015\u0022\r\n        },\r\n        {\r\n            0x8003,\r\n            \u0022LD B,\u002608\u0022\r\n        },\r\n        {\r\n            0x8005,\r\n            \u0022LD DE,\u0026002A\u0022\r\n        },\r\n        {\r\n            0x8008,\r\n            \u0022LD D,\u002600\u0022\r\n        },\r\n        {\r\n            0x800A,\r\n            \u0022LD HL,\u00260000\u0022\r\n        },\r\n        {\r\n            0x800D,\r\n            \u0022SRL C\u0022\r\n        },\r\n        {\r\n            0x800F,\r\n            \u0022JR NC,$\u002B3\u0022\r\n        },\r\n        {\r\n            0x8011,\r\n            \u0022ADD HL,DE\u0022\r\n        },\r\n        {\r\n            0x8012,\r\n            \u0022SLA E\u0022\r\n        },\r\n        {\r\n            0x8014,\r\n            \u0022RL D\u0022\r\n        },\r\n        {\r\n            0x8016,\r\n            \u0022DEC B\u0022\r\n        },\r\n        {\r\n            0x8017,\r\n            \u0022JP NZ,\u0026800D\u0022\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E ram[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x8000\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    var disassembledCode = cpu.Disassemble(0x8000, 0x8017);\r\n    Assert.Equal(expectedDisassembly, disassembledCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DisassembleDDCBandFDCBOpcodesCorrectly",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var ram = HexFileReader.Read(\u0022../../../HexFiles/TestDDCBandFDCB.hex\u0022);\r\n    var expectedDisassembly = new Dictionary\u003Cushort, string\u003E\r\n    {\r\n        {\r\n            0x8000,\r\n            \u0022RL (IX\u002B2)\u0022\r\n        },\r\n        {\r\n            0x8004,\r\n            \u0022RL (IY-3)\u0022\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E ram[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x8000\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    var disassembledCode = cpu.Disassemble(0x8000, 0x8007);\r\n    Assert.Equal(expectedDisassembly, disassembledCode);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "EightBitArithmeticLogicADDGroupShould",
    "Message": null,
    "ProjectName": "Essenbee.Z80.Tests",
    "Methods": [
      {
        "Name": "FlagTestOnAddition1",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x3E\r\n        }, // LD A, 0x7F\r\n        {\r\n            0x0081,\r\n            0x7F\r\n        }, // ADD 0x02\r\n        {\r\n            0x0082,\r\n            0xC6\r\n        },\r\n        {\r\n            0x0083,\r\n            0x02\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    cpu.Step();\r\n    Assert.Equal(0x81, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P); // Overflow flag set\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FlagTestOnAddition2",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x3E\r\n        }, // LD A, -127\r\n        {\r\n            0x0081,\r\n            0b10000001\r\n        }, // ADD -62\r\n        {\r\n            0x0082,\r\n            0xC6\r\n        },\r\n        {\r\n            0x0083,\r\n            0b11000010\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    cpu.Step();\r\n    // We expect \u0022underflow\u0022, since actual result (-189) \r\n    // is too large to reside in 8 bits (signed)\r\n    Assert.Equal(0x43, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P); // Overflow set\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry set\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FlagTestOnAddition3",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x3E\r\n        }, // LD A, 1\r\n        {\r\n            0x0081,\r\n            0x01\r\n        }, // ADD -1\r\n        {\r\n            0x0082,\r\n            0xC6\r\n        },\r\n        {\r\n            0x0083,\r\n            0xFF\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    cpu.Step();\r\n    // We expect \u0022underflow\u0022, since actual result (-189) \r\n    // is too large to reside in 8 bits (signed)\r\n    Assert.Equal(0x00, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry set\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWithThreeWhenAddingOneAndTwoForOpcodeADDAN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xC6\r\n        }, //ADD A, n\r\n        {\r\n            0x0081,\r\n            0x02\r\n        }, // n = 2\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x01,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x03, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWithZeroWhenAddingZeroAndZeroForOpcodeADDAN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xC6\r\n        }, //ADD A, n\r\n        {\r\n            0x0081,\r\n            0x00\r\n        }, // n = 0\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x00, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z); // Zero flag should be set\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith129WhenAdding127And2ForOpcodeADDAN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xC6\r\n        }, //ADD A, n\r\n        {\r\n            0x0081,\r\n            0x02\r\n        }, // n = 2\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x7F,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x81, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith2AndOverfowWhenAdding129And129ForOpcodeADDAN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xC6\r\n        }, //ADD A, n\r\n        {\r\n            0x0081,\r\n            0x81\r\n        }, // n = 129\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x81,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x02, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith32WhenAdding2And30ForOpcodeADDAN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xC6\r\n        }, //ADD A, n\r\n        {\r\n            0x0081,\r\n            0x02\r\n        }, // n = 2\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x1E,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x20, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith8WhenAdding4And4ForOpcodeADDAN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xC6\r\n        }, //ADD A, n\r\n        {\r\n            0x0081,\r\n            0x04\r\n        }, // n = 4\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x04,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x08, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWithThreeWhenAddingOneAndTwoForOpcodeADCAN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xCE\r\n        }, //ADC A, n\r\n        {\r\n            0x0081,\r\n            0x02\r\n        }, // n = 2\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x01,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x03, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWithZeroWhenAddingZeroAndZeroForOpcodeADCAN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xCE\r\n        }, //ADC A, n\r\n        {\r\n            0x0081,\r\n            0x00\r\n        }, // n = 0\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x00, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z); // Zero flag should be set\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith129WhenAdding127And2ForOpcodeADCAN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xCE\r\n        }, //ADC A, n\r\n        {\r\n            0x0081,\r\n            0x02\r\n        }, // n = 2\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x7F,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x81, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith2AndOverfowWhenAdding129And129ForOpcodeADCAN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xCE\r\n        }, //ADC A, n\r\n        {\r\n            0x0081,\r\n            0x81\r\n        }, // n = 129\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x81,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x02, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith32WhenAdding2And30ForOpcodeADCAN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xCE\r\n        }, //ADC A, n\r\n        {\r\n            0x0081,\r\n            0x02\r\n        }, // n = 2\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x1E,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x20, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith8WhenAdding4And4ForOpcodeADCAN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xCE\r\n        }, //ADC A, n\r\n        {\r\n            0x0081,\r\n            0x04\r\n        }, // n = 4\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x04,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x08, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith9WhenAdding4And4AndCarryFlagSetForOpcodeADCAN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xCE\r\n        }, //ADC A, n\r\n        {\r\n            0x0081,\r\n            0x04\r\n        }, // n = 4\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x04,\r\n        F = Z80.Flags.C,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x09, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith8WhenAdding4And4FromBForOpcodeADDAR",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x80\r\n        }, //ADC A, B\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x04,\r\n        B = 0x04,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x08, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith9WhenAdding4And4FromBAndCarryFlagSetForOpcodeADCAR",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x88\r\n        }, //ADC A, B\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x04,\r\n        B = 0x04,\r\n        F = Z80.Flags.C,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x09, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith10WhenAdding4And6LocationPointedToByHLForOpcodeADDAHL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x86\r\n        }, //ADD A, (HL)\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x06\r\n        }, // \u003C- (HL)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x04,\r\n        H = 0x08,\r\n        L = 0xFF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0A, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith11WhenAdding4And6LocationPointedToByHLAndCarryFlagSetForOpcodeADCAHL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x8E\r\n        }, //ADC A, (HL)\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x06\r\n        }, // \u003C- (HL)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x04,\r\n        H = 0x08,\r\n        L = 0xFF,\r\n        F = Z80.Flags.C,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0B, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith10WhenAdding4And6LocationPointedToByIXForOpcodeADDAIXD_GivenDisPositive",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x86\r\n        }, //ADD A, (IX\u002Bd)\r\n        {\r\n            0x0082,\r\n            0x03\r\n        }, // d = 3\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // \u003C- (IX)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x06\r\n        }, // (IX\u002B3)\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x04,\r\n        IX = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0A, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith10WhenAdding4And6LocationPointedToByIYForOpcodeADDAIYD_GivenDisPositive",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x86\r\n        }, //ADD A, (IY\u002Bd)\r\n        {\r\n            0x0082,\r\n            0x03\r\n        }, // d = 3\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // \u003C- (IY)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x06\r\n        }, // (IY\u002B3)\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x04,\r\n        IY = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0A, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith11WhenAdding4And6LocationPointedToByIXwithCarrySetForOpcodeADCAIXD_GivenDisPositive",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x8E\r\n        }, //ADC A, (IX\u002Bd)\r\n        {\r\n            0x0082,\r\n            0x03\r\n        }, // d = 3\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // \u003C- (IX)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x06\r\n        }, // (IX\u002B3)\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x04,\r\n        IX = 0x08FF,\r\n        F = Z80.Flags.C,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0B, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith10WhenAdding4And6LocationPointedToByIYwithCarrySetForOpcodeADCAIXY_GivenDisPositive",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x8E\r\n        }, //ADC A, (IY\u002Bd)\r\n        {\r\n            0x0082,\r\n            0x03\r\n        }, // d = 3\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // \u003C- (IY)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x06\r\n        }, // (IX\u002B3)\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x04,\r\n        IY = 0x08FF,\r\n        F = Z80.Flags.C,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0B, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IncrementRegisterFlagsTest1",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x0C\r\n        },\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        C = 0x05,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x06, cpu.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IncrementRegisterFlagsTest2",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x14\r\n        },\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        D = 0x7F,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x80, cpu.D);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IncrementRegisterFlagsTest3",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x24\r\n        }, // INC H\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        H = 0x72,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x73, cpu.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IncrementValueAtLocationPointedToByHLFlagsTest2",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x34\r\n        },\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x0A\r\n        }, // \u003C- (HL)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x06\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        H = 0x08,\r\n        L = 0xFF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0B, program[cpu.HL]);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IncrementValueAtLocationPointedToByIXPlusDFlagsTest2",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x34\r\n        },\r\n        {\r\n            0x0082,\r\n            0x03\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // \u003C- (IX)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x0A\r\n        }, // \u003C- (IX\u002B3)\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        IX = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0B, program[(ushort)(cpu.IX \u002B 3)]);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IncrementValueAtLocationPointedToByIYPlusDFlagsTest2",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x34\r\n        },\r\n        {\r\n            0x0082,\r\n            0x03\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // \u003C- (IX)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x7F\r\n        }, // \u003C- (IX\u002B3)\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        IY = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x80, program[(ushort)(cpu.IY \u002B 3)]);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "EightBitArithmeticLogicSUBGroupShould",
    "Message": null,
    "ProjectName": "Essenbee.Z80.Tests",
    "Methods": [
      {
        "Name": "FlagTestOnSubtraction1",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x3E\r\n        }, // LD A, 0xFE\r\n        {\r\n            0x0081,\r\n            0xFE\r\n        }, // SUB 0xFD\r\n        {\r\n            0x0082,\r\n            0xD6\r\n        },\r\n        {\r\n            0x0083,\r\n            0xFD\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    cpu.Step();\r\n    Assert.Equal(0x01, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "FlagTestOnSubtraction2",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x3E\r\n        }, // LD A, -127\r\n        {\r\n            0x0081,\r\n            0x81\r\n        }, // SUB 127\r\n        {\r\n            0x0082,\r\n            0xD6\r\n        },\r\n        {\r\n            0x0083,\r\n            0x7F\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    cpu.Step();\r\n    Assert.Equal(0x02, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N); // Subtraction set\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H); // Half-carry set\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P); // Overflow set\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWithThreeWhenSubtracting8And5ForOpcodeSUBAN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xD6\r\n        }, // SUB A, n\r\n        {\r\n            0x0081,\r\n            0x05\r\n        }, // n = 5\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x08,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x03, cpu.A);\r\n    sbyte signedResult = (sbyte)cpu.A;\r\n    Assert.Equal(3, signedResult);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N); // Set due to a subtraction\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWithNegative6WhenSubtracting6And12ForOpcodeSUBAN",
        "Body": "{\r\n    // ======================================\r\n    // Testing a negative result: 6 - 12 = -6\r\n    // ======================================\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xD6\r\n        }, // SUB A, n\r\n        {\r\n            0x0081,\r\n            0x0C\r\n        }, // n = 12\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x06,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xFA, cpu.A); // FA = 1111 10101 = -6 in 2s complement\r\n    sbyte signedResult = (sbyte)cpu.A;\r\n    Assert.Equal(-6, signedResult);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N); // Set due to a subtraction\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S); // Sign set\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H); // Half-carry set\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry set\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWithZeroWhenSubtractingZeroFromZeroForOpcodeSUBAN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xD6\r\n        }, // SUB A, n\r\n        {\r\n            0x0081,\r\n            0x00\r\n        }, // n = 0\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x00, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N); // Set due to a subtraction\r\n    Assert.True((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith129WhenSubtracting2From131ForOpcodeSUBAN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xD6\r\n        }, // SUB A, n\r\n        {\r\n            0x0081,\r\n            0x02\r\n        }, // n = 2\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x83,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x81, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N); // Set due to a subtraction\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWithZeroWhenSubtracting129From129ForOpcodeSUBAN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xD6\r\n        }, // SUB A, n\r\n        {\r\n            0x0081,\r\n            0x81\r\n        }, // n = 129\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x81,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x00, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWithTwoWhenSubtracting8And5AndCarryBitSetForOpcodeSBCAN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDE\r\n        }, // SBC A, n\r\n        {\r\n            0x0081,\r\n            0x05\r\n        }, // n = 5\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x08,\r\n        F = Z80.Flags.C,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x02, cpu.A);\r\n    sbyte signedResult = (sbyte)cpu.A;\r\n    Assert.Equal(2, signedResult);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N); // Set due to a subtraction\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWithNegative7WhenSubtracting6And12AndCarryFlagSetForOpcodeSBCAN",
        "Body": "{\r\n    // ======================================\r\n    // Testing a negative result: 6 - 12 - 1 = -6\r\n    // ======================================\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDE\r\n        }, // SBC A, n\r\n        {\r\n            0x0081,\r\n            0x0C\r\n        }, // n = 12\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x06,\r\n        F = Z80.Flags.C,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xF9, cpu.A);\r\n    sbyte signedResult = (sbyte)cpu.A;\r\n    Assert.Equal(-7, signedResult);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N); // Set due to a subtraction\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWithZeroWhenSubtractingOneFromTwoAndCarryFlagSetForOpcodeSBCAN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDE\r\n        }, // SUB A, n\r\n        {\r\n            0x0081,\r\n            0x01\r\n        }, // n = 1\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x02,\r\n        F = Z80.Flags.C,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x00, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N); // Set due to a subtraction\r\n    Assert.True((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith128WhenSubtracting2From131AndCarryFlagSetForOpcodeSBCAN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDE\r\n        }, // SUB A, n\r\n        {\r\n            0x0081,\r\n            0x02\r\n        }, // n = 2\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x83,\r\n        F = Z80.Flags.C,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x80, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N); // Set due to a subtraction\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith8WhenSubtracting12And4FromBForOpcodeSUBAR",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x90\r\n        }, // SUB A, B\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0C,\r\n        B = 0x04,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x08, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith7WhenSubtracting4FromBAndCarryFlagSetForOpcodeSBCAR",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x98\r\n        }, //SBC A, B\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0C,\r\n        B = 0x04,\r\n        F = Z80.Flags.C,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x07, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith10WhenSubtracting4FromLocationPointedToByHLForOpcodeSUBAHL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x96\r\n        }, // SUB A, (HL)\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x04\r\n        }, // \u003C- (HL)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0E,\r\n        H = 0x08,\r\n        L = 0xFF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0A, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith9WhenSubtracting4AndLocationPointedToByHLAndCarryFlagSetForOpcodeSBCAHL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x9E\r\n        }, // SBC A, (HL)\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x04\r\n        }, // \u003C- (HL)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0E,\r\n        H = 0x08,\r\n        L = 0xFF,\r\n        F = Z80.Flags.C,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x09, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith6WhenSubtractingLocationPointedToByIXFrom10ForOpcodeSUBAIXD_GivenDisNegative",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x96\r\n        }, // SUB A, (IX\u002Bd)\r\n        {\r\n            0x0082,\r\n            0xFE\r\n        }, // d = -2\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x04\r\n        }, // (IX-2)\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // \u003C- (IX)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0A,\r\n        IX = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x06, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith10WhenSubtracting4FromLocationPointedToByIYForOpcodeSUBAIYD_GivenDisPositive",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x96\r\n        }, // SUB A, (IY\u002Bd)\r\n        {\r\n            0x0082,\r\n            0x03\r\n        }, // d = 3\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // \u003C- (IY)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x04\r\n        }, // (IY\u002B3)\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0E,\r\n        IY = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0A, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith5WhenSubtractingLocationPointedToByIXFrom10ForOpcodeSBCAIXD_GivenDisNegative",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x9E\r\n        }, // SBC A, (IX\u002Bd)\r\n        {\r\n            0x0082,\r\n            0xFE\r\n        }, // d = -2\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x04\r\n        }, // (IX-2)\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // \u003C- (IX)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0A,\r\n        IX = 0x08FF,\r\n        F = Z80.Flags.C,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x05, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAWith9WhenSubtracting4FromLocationPointedToByIYForOpcodeSBCAHL_GivenDisPositive",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x9E\r\n        }, // SBC A, (IY\u002Bd)\r\n        {\r\n            0x0082,\r\n            0x03\r\n        }, // d = 3\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // \u003C- (IY)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x04\r\n        }, // (IY\u002B3)\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0E,\r\n        IY = 0x08FF,\r\n        F = Z80.Flags.C,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x09, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecrementRegisterFlagsTest1",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x0D\r\n        },\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        C = 0x05,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x04, cpu.C);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecrementRegisterFlagsTest2",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x15\r\n        },\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        D = 0x80,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x7F, cpu.D);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecrementValueAtLocationPointedToByHLFlagsTest",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x35\r\n        },\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x0A\r\n        }, // \u003C- (HL)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x06\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        H = 0x08,\r\n        L = 0xFF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x09, program[cpu.HL]);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecrementValueAtLocationPointedToByIXPlusDFlagsTest",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x35\r\n        },\r\n        {\r\n            0x0082,\r\n            0x03\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // \u003C- (IX)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x0A\r\n        }, // \u003C- (IX\u002B3)\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        IX = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x09, program[(ushort)(cpu.IX \u002B 3)]);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecrementValueAtLocationPointedToByIYPlusDFlagsTest",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x35\r\n        },\r\n        {\r\n            0x0082,\r\n            0x03\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // \u003C- (IX)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x80\r\n        }, // \u003C- (IX\u002B3)\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        IY = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x7F, program[(ushort)(cpu.IY \u002B 3)]);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "EightBitLoadGroupShould",
    "Message": null,
    "ProjectName": "Essenbee.Z80.Tests",
    "Methods": [
      {
        "Name": "LoadAfromBwhenOperationIsLDBA",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    // Reading RAM will fetch opcode 0x47, which is LD B,A\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E.Ignored, A\u003Cbool\u003E.Ignored)).Returns\u003Cbyte\u003E(0x47);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0F,\r\n        B = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0F, cpu.B);\r\n    Assert.Equal(cpu.A, cpu.B);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadBfromAwhenOperationIsLDAB",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    // Reading RAM will fetch opcode 0x78, which is LD A,B\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E.Ignored, A\u003Cbool\u003E.Ignored)).Returns\u003Cbyte\u003E(0x78);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        B = 0x0F,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0F, cpu.A);\r\n    Assert.Equal(cpu.B, cpu.A);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NoOpwhenOperationIsLDAA",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    // Reading RAM will fetch opcode 0x7F, which is LD A,A\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E.Ignored, A\u003Cbool\u003E.Ignored)).Returns\u003Cbyte\u003E(0x7F);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x03,\r\n        B = 0x0F,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x03, cpu.A);\r\n    Assert.Equal(0x0F, cpu.B);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAwithValueWhenOperationIsLDAn",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x3E\r\n        },\r\n        {\r\n            0x0081,\r\n            0x02\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    // Load 2 into register A, which starts out having a value of 3...\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x03,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x02, cpu.A);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadHwithValueWhenOperationIsLDHn",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x26\r\n        },\r\n        {\r\n            0x0081,\r\n            0x1E\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    // Load 1E into register A, which starts out having a value of 3...\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x03,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x1E, cpu.H);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAwithValueAtMemoryLocationinHLwhenOperationIsLDAHL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x7E\r\n        },\r\n        {\r\n            0x0081,\r\n            0x02\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FF,\r\n            0x08\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n    };\r\n    // Reading RAM will fetch opcode 0x7E, which is LD A, (HL);\r\n    // the operand 0x08 is stored in the location pointed to by HL (0x08FF)...\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x03,\r\n        H = 0x08,\r\n        L = 0xFF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x08, cpu.A);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAwithValueAtMemoryLocationinIXpludDwhenOperationIsLDRIXD_GivenDisZero",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x7E\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x15\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x08\r\n        }, // IX\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x05\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x03,\r\n        IX = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x08, cpu.A);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAwithValueAtMemoryLocationinIXpludDwhenOperationIsLDRIXD_GivenDisPositive",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x7E\r\n        },\r\n        {\r\n            0x0082,\r\n            0x03\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x15\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x08\r\n        }, // IX\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x05\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x03,\r\n        IX = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x05, cpu.A);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAwithValueAtMemoryLocationinIXpludDwhenOperationIsLDRIXD_GivenDisNegative",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x7E\r\n        },\r\n        {\r\n            0x0082,\r\n            0xFF\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x15\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x08\r\n        }, // IX\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x05\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x03,\r\n        IX = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x15, cpu.A);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAwithValueAtMemoryLocationinIXpludDwhenOperationIsLDRIYD_GivenDisZero",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x7E\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x15\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x08\r\n        }, // IY\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x05\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x03,\r\n        IY = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x08, cpu.A);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAwithValueAtMemoryLocationinIXpludDwhenOperationIsLDRIYD_GivenDisPositive",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x7E\r\n        },\r\n        {\r\n            0x0082,\r\n            0x03\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x15\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x08\r\n        }, // IY\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x05\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x03,\r\n        IY = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x05, cpu.A);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAwithValueAtMemoryLocationinIXpludDwhenOperationIsLDRIYD_GivenDisNegative",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x7E\r\n        },\r\n        {\r\n            0x0082,\r\n            0xFF\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x15\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x08\r\n        }, // IY\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x05\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x03,\r\n        IY = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x15, cpu.A);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadMemoryLocationPointedToByHLwithValueInAccumulator",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x77\r\n        },\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // (HL)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    // Load the value in register A (0x11), into the memory location pointed to by (HL)...\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x11,\r\n        H = 0x08,\r\n        L = 0xFF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x11, program[0x08FF]);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadMemoryLocationPointedToByIXplusDwithValueInRegister_GivenDisPositive",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x77\r\n        },\r\n        {\r\n            0x0082,\r\n            0x03\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // (IX)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        }, // \u003C- d = \u002B3\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0F,\r\n        IX = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0F, program[0x08FF \u002B 0x03]);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadMemoryLocationPointedToByIXplusDwithValueInRegister_GivenDisNegative",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x77\r\n        },\r\n        {\r\n            0x0082,\r\n            0xFE\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        }, // \u003C- d = -2\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // (IX)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0F,\r\n        IX = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0F, program[0x08FF - 2]);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadMemoryLocationPointedToByIYplusDwithValueInRegister_GivenDisPositive",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x77\r\n        },\r\n        {\r\n            0x0082,\r\n            0x03\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // (IY)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        }, // \u003C- d = \u002B3\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0F,\r\n        IY = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0F, program[0x08FF \u002B 0x03]);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadMemoryLocationPointedToByIYplusDwithValueInRegister_GivenDisNegative",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x77\r\n        },\r\n        {\r\n            0x0082,\r\n            0xFE\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        }, // \u003C- d = -2\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // (IY)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0F,\r\n        IY = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0F, program[0x08FF - 2]);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadMemoryLocationPointedToByHLwithValueN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x36\r\n        },\r\n        {\r\n            0x0081,\r\n            0xA6\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // (HL)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x11,\r\n        H = 0x08,\r\n        L = 0xFF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xA6, program[0x08FF]);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadMemoryLocationPointedToByIXplusDwithValueN_GivenDisPositive",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x36\r\n        },\r\n        {\r\n            0x0082,\r\n            0x03\r\n        },\r\n        {\r\n            0x0083,\r\n            0xAA\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // (IX)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        }, // \u003C- d = \u002B3\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0F,\r\n        IX = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xAA, program[0x08FF \u002B 0x03]);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadMemoryLocationPointedToByIXplusDwithValueN_GivenDisNegative",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x36\r\n        },\r\n        {\r\n            0x0082,\r\n            0xFE\r\n        },\r\n        {\r\n            0x0083,\r\n            0xBB\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        }, // \u003C- d = -2\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // (IX)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0F,\r\n        IX = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xBB, program[0x08FF - 2]);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadMemoryLocationPointedToByIYplusDwithValueN_GivenDisPositive",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x36\r\n        },\r\n        {\r\n            0x0082,\r\n            0x03\r\n        },\r\n        {\r\n            0x0083,\r\n            0xAA\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // (IY)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        }, // \u003C- d = \u002B3\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0F,\r\n        IY = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xAA, program[0x08FF \u002B 0x03]);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadMemoryLocationPointedToByIYplusDwithValueN_GivenDisNegative",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x36\r\n        },\r\n        {\r\n            0x0082,\r\n            0xFE\r\n        },\r\n        {\r\n            0x0083,\r\n            0xBB\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        }, // \u003C- d = -2\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // (IY)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0F,\r\n        IY = 0x08FF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xBB, program[0x08FF - 2]);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAccumulatorWithValueInLocationPointedToByBC",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x0A\r\n        },\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x1C\r\n        }, // (BC)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0F,\r\n        B = 0x08,\r\n        C = 0xFF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x1C, cpu.A);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAccumulatorWithValueInLocationPointedToByDE",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x1A\r\n        },\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x1C\r\n        }, // (DE)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0F,\r\n        D = 0x08,\r\n        E = 0xFF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x1C, cpu.A);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAccumulatorWithValueInLocationPointedToByNN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x3A\r\n        },\r\n        {\r\n            0x0081,\r\n            0xFF\r\n        },\r\n        {\r\n            0x0082,\r\n            0x08\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x1C\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0F,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x1C, cpu.A);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadMemoryLocationPointedToByBCwithValueInAccumulator",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x02\r\n        },\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // (BC)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    // Load the value in register A (0x11), into the memory location pointed to by (BC)...\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x11,\r\n        B = 0x08,\r\n        C = 0xFF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x11, program[0x08FF]);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadMemoryLocationPointedToByDEwithValueInAccumulator",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x12\r\n        },\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // (DE)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    // Load the value in register A (0x11), into the memory location pointed to by (DE)...\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x11,\r\n        D = 0x08,\r\n        E = 0xFF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x11, program[0x08FF]);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadMemoryLocationPointedToByNNwithValueInAccumulator",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x32\r\n        },\r\n        {\r\n            0x0081,\r\n            0xFF\r\n        },\r\n        {\r\n            0x0082,\r\n            0x08\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // (nn)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    // Load the value in register A (0x11), into the memory location pointed to by (DE)...\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x11,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x11, program[0x08FF]);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAfromIwhenOperationIsLDAI_GivenIisPositive",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        },\r\n        {\r\n            0x0081,\r\n            0x57\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0F,\r\n        I = 0x17,\r\n        IFF2 = true,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x17, cpu.I);\r\n    Assert.Equal(cpu.A, cpu.I);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAfromIwhenOperationIsLDAI_GivenIisNegative",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        },\r\n        {\r\n            0x0081,\r\n            0x57\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0F,\r\n        I = 0xFA,\r\n        IFF2 = true,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xFA, cpu.I);\r\n    Assert.Equal(cpu.A, cpu.I);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAfromIwhenOperationIsLDAI_GivenIisZero",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        },\r\n        {\r\n            0x0081,\r\n            0x57\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0F,\r\n        I = 0x00,\r\n        IFF2 = true,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x00, cpu.I);\r\n    Assert.Equal(cpu.A, cpu.I);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAfromRwhenOperationIsLDAR_GivenRisPositive",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        },\r\n        {\r\n            0x0081,\r\n            0x5F\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0F,\r\n        R = 0x17,\r\n        IFF2 = true,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x19, cpu.R);\r\n    Assert.Equal(cpu.A, cpu.R);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAfromRwhenOperationIsLDAR_GivenRisNegative",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        },\r\n        {\r\n            0x0081,\r\n            0x5F\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0F,\r\n        R = 0xFA,\r\n        IFF2 = true,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xFC, cpu.R);\r\n    Assert.Equal(cpu.A, cpu.R);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadAfromRwhenOperationIsLDAR_GivenRisZero",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        },\r\n        {\r\n            0x0081,\r\n            0x5F\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x0F,\r\n        R = 0x00,\r\n        IFF2 = true,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x02, cpu.R);\r\n    Assert.Equal(cpu.A, cpu.R);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadIfromA",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        },\r\n        {\r\n            0x0081,\r\n            0x47\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x17,\r\n        I = 0x00,\r\n        IFF2 = true,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x17, cpu.A);\r\n    Assert.Equal(0x17, cpu.I);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadRfromA",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        },\r\n        {\r\n            0x0081,\r\n            0x4F\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x17,\r\n        R = 0x00,\r\n        IFF2 = true,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x17, cpu.A);\r\n    Assert.Equal(0x17, cpu.R);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "EightBitLogicGroupShould",
    "Message": null,
    "ProjectName": "Essenbee.Z80.Tests",
    "Methods": [
      {
        "Name": "AndAccumulatorWithRegisterB",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xA0\r\n        }, // AND B\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0xC3,\r\n        B = 0x7B,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x43, cpu.A); // 011000011 \u0026 01111011 = 01000011\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AndAccumulatorWithByteAtLocationPointedToByHL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xA6\r\n        }, // AND (HL)\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x7A\r\n        }, // \u003C- (HL)\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0xC3,\r\n        H = 0x09,\r\n        L = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x42, cpu.A); // 11000011 \u0026 01111010 = 01000010\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AndAccumulatorWithByte",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xE6\r\n        }, // AND n\r\n        {\r\n            0x0081,\r\n            0x7A\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0xC3,\r\n        B = 0x7B,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x42, cpu.A); // 011000011 \u0026 01111010 = 01000010\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AndAccumulatorWithByteAtLocationPointedToByIXPlusD",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        }, // AND (IX\u002B3)\r\n        {\r\n            0x0081,\r\n            0xA6\r\n        },\r\n        {\r\n            0x0082,\r\n            0x03\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        }, // \u003C- (IX)\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x7A\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0xC3,\r\n        IX = 0x0900,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x42, cpu.A); // 11000011 \u0026 01111010 = 01000010\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AndAccumulatorWithByteAtLocationPointedToByIYPlusD",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        }, // AND (IY\u002B3)\r\n        {\r\n            0x0081,\r\n            0xA6\r\n        },\r\n        {\r\n            0x0082,\r\n            0x03\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        }, // \u003C- (IY)\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x7A\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0xC3,\r\n        IY = 0x0900,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x42, cpu.A); // 11000011 \u0026 01111010 = 01000010\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrAccumulatorWithRegisterB",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xB0\r\n        }, // OR B\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x48,\r\n        B = 0x12,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x5A, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrAccumulatorWithByteAtLocationPointedToByHL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xB6\r\n        }, // OR (HL)\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x12\r\n        }, // \u003C- (HL)\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x48,\r\n        H = 0x09,\r\n        L = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x5A, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrAccumulatorWithByte",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xF6\r\n        }, // OR n\r\n        {\r\n            0x0081,\r\n            0x12\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x48,\r\n        B = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x5A, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrAccumulatorWithByteAtLocationPointedToByIXPlusD",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        }, // OR (IX\u002B3)\r\n        {\r\n            0x0081,\r\n            0xB6\r\n        },\r\n        {\r\n            0x0082,\r\n            0x03\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        }, // \u003C- (IX)\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x12\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x48,\r\n        IX = 0x0900,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x5A, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "OrAccumulatorWithByteAtLocationPointedToByIYPlusD",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        }, // OR (IY\u002B3)\r\n        {\r\n            0x0081,\r\n            0xB6\r\n        },\r\n        {\r\n            0x0082,\r\n            0x03\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        }, // \u003C- (IY)\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x12\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x48,\r\n        IY = 0x0900,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x5A, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XorAccumulatorWithRegisterB",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xA8\r\n        }, // XOR B\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x96,\r\n        B = 0x5D,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xCB, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XorAccumulatorWithByteAtLocationPointedToByHL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xAE\r\n        }, // XOR (HL)\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x5D\r\n        }, // \u003C- (HL)\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x96,\r\n        H = 0x09,\r\n        L = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xCB, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XorAccumulatorWithByte",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xEE\r\n        }, // XOR n\r\n        {\r\n            0x0081,\r\n            0x5D\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x96,\r\n        B = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xCB, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XorAccumulatorWithByteAtLocationPointedToByIXPlusD",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        }, // XOR (IX\u002B3)\r\n        {\r\n            0x0081,\r\n            0xAE\r\n        },\r\n        {\r\n            0x0082,\r\n            0x03\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        }, // \u003C- (IX)\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x5D\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x96,\r\n        IX = 0x0900,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xCB, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XorAccumulatorWithByteAtLocationPointedToByIYPlusD",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        }, // XOR (IY\u002B3)\r\n        {\r\n            0x0081,\r\n            0xAE\r\n        },\r\n        {\r\n            0x0082,\r\n            0x03\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        }, // \u003C- (IY)\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x5D\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x96,\r\n        IY = 0x0900,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xCB, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "XorAccumulatorWithItselfZeroesAccumulator",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xAF\r\n        }, // XOR A - a 1-byte way of loading A with zero\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x42,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x00, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "ExchangeShould",
    "Message": null,
    "ProjectName": "Essenbee.Z80.Tests",
    "Methods": [
      {
        "Name": "SwapDEandHL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xEB\r\n        }, // EX DE,HL\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        D = 0x11,\r\n        E = 0x22,\r\n        H = 0x33,\r\n        L = 0x44,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x3344, cpu.DE);\r\n    Assert.Equal(0x1122, cpu.HL);\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SwapAFandAFPrime",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x08\r\n        }, // EX AF,AF\u0027\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x11,\r\n        F = (Flags)0x22,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0000, cpu.AF);\r\n    Assert.Equal(0x1122, cpu.AF1);\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SwapRegistersWithEXX",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xD9\r\n        }, // EXX\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        B = 0x11,\r\n        C = 0x22,\r\n        D = 0x12,\r\n        E = 0x23,\r\n        H = 0x14,\r\n        L = 0x24,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0000, cpu.BC);\r\n    Assert.Equal(0x1122, cpu.BC1);\r\n    Assert.Equal(0x0000, cpu.DE);\r\n    Assert.Equal(0x1223, cpu.DE1);\r\n    Assert.Equal(0x0000, cpu.HL);\r\n    Assert.Equal(0x1424, cpu.HL1);\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SwapLocationPointedToBySPwithHLforEXSPHL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xE3\r\n        }, // EX (SP),HL\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x8855,\r\n            0x00\r\n        },\r\n        {\r\n            0x8856,\r\n            0x11\r\n        },\r\n        {\r\n            0x8857,\r\n            0x22\r\n        },\r\n        {\r\n            0x8858,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        H = 0x70,\r\n        L = 0x12,\r\n        SP = 0x8856,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x2211, cpu.HL);\r\n    Assert.Equal(0x12, program[0x8856]);\r\n    Assert.Equal(0x70, program[0x8857]);\r\n    Assert.Equal(0x8856, cpu.SP);\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SwapLocationPointedToBySPwithIXforEXSPIX",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        }, // EX (SP),IX\r\n        {\r\n            0x0081,\r\n            0xE3\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x8855,\r\n            0x00\r\n        },\r\n        {\r\n            0x8856,\r\n            0x11\r\n        },\r\n        {\r\n            0x8857,\r\n            0x22\r\n        },\r\n        {\r\n            0x8858,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        IX = 0x7012,\r\n        SP = 0x8856,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x2211, cpu.IX);\r\n    Assert.Equal(0x12, program[0x8856]);\r\n    Assert.Equal(0x70, program[0x8857]);\r\n    Assert.Equal(0x8856, cpu.SP);\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SwapLocationPointedToBySPwithIYforEXSPIY",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        }, // EX (SP),IY\r\n        {\r\n            0x0081,\r\n            0xE3\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x8855,\r\n            0x00\r\n        },\r\n        {\r\n            0x8856,\r\n            0x11\r\n        },\r\n        {\r\n            0x8857,\r\n            0x22\r\n        },\r\n        {\r\n            0x8858,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        IY = 0x7012,\r\n        SP = 0x8856,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x2211, cpu.IY);\r\n    Assert.Equal(0x12, program[0x8856]);\r\n    Assert.Equal(0x70, program[0x8857]);\r\n    Assert.Equal(0x8856, cpu.SP);\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "FlagsShould",
    "Message": null,
    "ProjectName": "Essenbee.Z80.Tests",
    "Methods": [
      {
        "Name": "InitiallyHaveAllFlagsNotSet",
        "Body": "{\r\n    _flagRegister = 0x00;\r\n    Assert.False((_flagRegister \u0026 Flags.C) == Flags.C);\r\n    Assert.False((_flagRegister \u0026 Flags.N) == Flags.N);\r\n    Assert.False((_flagRegister \u0026 Flags.P) == Flags.P);\r\n    Assert.False((_flagRegister \u0026 Flags.X) == Flags.X);\r\n    Assert.False((_flagRegister \u0026 Flags.H) == Flags.H);\r\n    Assert.False((_flagRegister \u0026 Flags.U) == Flags.U);\r\n    Assert.False((_flagRegister \u0026 Flags.Z) == Flags.Z);\r\n    Assert.False((_flagRegister \u0026 Flags.S) == Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SetCarryFlagOnly",
        "Body": "{\r\n    _flagRegister = 0x00;\r\n    SetFlag(Flags.C, true);\r\n    Assert.True((_flagRegister \u0026 Flags.C) == Flags.C);\r\n    Assert.False((_flagRegister \u0026 Flags.N) == Flags.N);\r\n    Assert.False((_flagRegister \u0026 Flags.P) == Flags.P);\r\n    Assert.False((_flagRegister \u0026 Flags.X) == Flags.X);\r\n    Assert.False((_flagRegister \u0026 Flags.H) == Flags.H);\r\n    Assert.False((_flagRegister \u0026 Flags.U) == Flags.U);\r\n    Assert.False((_flagRegister \u0026 Flags.Z) == Flags.Z);\r\n    Assert.False((_flagRegister \u0026 Flags.S) == Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SetCarryAndSignFlagOnly",
        "Body": "{\r\n    _flagRegister = 0x00;\r\n    SetFlag(Flags.C, true);\r\n    SetFlag(Flags.S, true);\r\n    Assert.True((_flagRegister \u0026 Flags.C) == Flags.C);\r\n    Assert.False((_flagRegister \u0026 Flags.N) == Flags.N);\r\n    Assert.False((_flagRegister \u0026 Flags.P) == Flags.P);\r\n    Assert.False((_flagRegister \u0026 Flags.X) == Flags.X);\r\n    Assert.False((_flagRegister \u0026 Flags.H) == Flags.H);\r\n    Assert.False((_flagRegister \u0026 Flags.U) == Flags.U);\r\n    Assert.False((_flagRegister \u0026 Flags.Z) == Flags.Z);\r\n    Assert.True((_flagRegister \u0026 Flags.S) == Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UnSetZeroFlagOnly",
        "Body": "{\r\n    _flagRegister = Flags.C | Flags.N | Flags.P | Flags.H | Flags.Z | Flags.S;\r\n    SetFlag(Flags.Z, false);\r\n    Assert.True((_flagRegister \u0026 Flags.C) == Flags.C);\r\n    Assert.True((_flagRegister \u0026 Flags.N) == Flags.N);\r\n    Assert.True((_flagRegister \u0026 Flags.P) == Flags.P);\r\n    Assert.False((_flagRegister \u0026 Flags.X) == Flags.X);\r\n    Assert.True((_flagRegister \u0026 Flags.H) == Flags.H);\r\n    Assert.False((_flagRegister \u0026 Flags.U) == Flags.U);\r\n    Assert.False((_flagRegister \u0026 Flags.Z) == Flags.Z);\r\n    Assert.True((_flagRegister \u0026 Flags.S) == Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "GeneralControlGroupShould",
    "Message": null,
    "ProjectName": "Essenbee.Z80.Tests",
    "Methods": [
      {
        "Name": "ProduceOnesComplementOfAccumulatorForCPL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x2F\r\n        }, // CPL\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0b01010101,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b10101010, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N); // Set\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H); // Set\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ProduceTwosComplementOfAccumulatorForNEG",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        }, // NEG\r\n        {\r\n            0x0081,\r\n            0x44\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0b10011000,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b01101000, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N); // Set\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ComplementCarryFlag",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x3F\r\n        }, // CCF\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        F = (Flags)0b00000001,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SetCarryFlag",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x37\r\n        }, // SCF\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        F = (Flags)0b00000000,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SetCarryFlagUndocumentedFlags1",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x37\r\n        }, // SCF\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        F = (Flags)0b1111_1111,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.True(cpu.A == 0x00);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SetCarryFlagUndocumentedFlags2",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x37\r\n        }, // SCF\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0xFF,\r\n        F = (Flags)0b0000_0000,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.True(cpu.A == 0xFF);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SetCarryFlagUndocumentedFlags3",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x37\r\n        }, // SCF\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0xFF,\r\n        F = (Flags)0b1111_1111,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.True(cpu.A == 0xFF);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    ;\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DisableInterruptByResettingIFF",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xF3\r\n        }, // DI\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.False(cpu.IFF1);\r\n    Assert.False(cpu.IFF2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "EnableInterruptBySettingIFF",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFB\r\n        }, // EI\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.True(cpu.IFF1);\r\n    Assert.True(cpu.IFF2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SetInterruptMode0",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        }, // IM 0\r\n        {\r\n            0x0081,\r\n            0x46\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.True(cpu.InterruptMode == InterruptMode.Mode0);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SetInterruptMode1",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        }, // IM 1\r\n        {\r\n            0x0081,\r\n            0x56\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.True(cpu.InterruptMode == InterruptMode.Mode1);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SetInterruptMode2",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        }, // IM 2\r\n        {\r\n            0x0081,\r\n            0x5E\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.True(cpu.InterruptMode == InterruptMode.Mode2);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "HexFileReaderTests",
    "Message": null,
    "ProjectName": "Essenbee.Z80.Tests",
    "Methods": [
      {
        "Name": "ReadSimpleHexFileWithOnlySingleDataRecord",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    // Routine #1 - 58 T-Cycles\r\n    // .ORG   0080h\r\n    //\r\n    // LD A,05h\r\n    // LD   B,0Ah\r\n    // ADD A, B\r\n    // ADD A, A\r\n    // LD C,0Fh\r\n    // SUB C\r\n    // LD H,08h\r\n    // LD   L,0FFh\r\n    // LD(HL),A\r\n    // NOP\r\n    var ram = HexFileReader.Read(\u0022../../../HexFiles/Arithmetic1.hex\u0022);\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E ram[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        B = 0x00,\r\n        C = 0x00,\r\n        H = 0x00,\r\n        L = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    for (int i = 0; i \u003C 10; i\u002B\u002B)\r\n    {\r\n        cpu.Step();\r\n    }\r\n\r\n    Assert.Equal(0x0F, ram[0x08FF]);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        ram[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "InputOutputShould",
    "Message": null,
    "ProjectName": "Essenbee.Z80.Tests",
    "Methods": [
      {
        "Name": "ReadBtyeFromPortForINA",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDB\r\n        }, // IN A,(\u002601)\r\n        {\r\n            0x0081,\r\n            0x01\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x0000,\r\n            0x00\r\n        },\r\n        {\r\n            0x0001,\r\n            0x7B\r\n        },\r\n        {\r\n            0x0002,\r\n            0x00\r\n        },\r\n        {\r\n            0x0003,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.ReadPeripheral(A\u003Cushort\u003E._)).ReturnsLazily((ushort addr) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x7B, cpu.A);\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "IsSupportedShould",
    "Message": null,
    "ProjectName": "Essenbee.Z80.Tests",
    "Methods": [
      {
        "Name": "ReturnTrueForNOP",
        "Body": "{\r\n    var cpu = new Z80();\r\n    var isSupported = cpu.IsOpCodeSupported(\u002200\u0022);\r\n    Assert.True(isSupported);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ReturnTrueForDD09",
        "Body": "{\r\n    var cpu = new Z80();\r\n    var isSupported = cpu.IsOpCodeSupported(\u0022dd09\u0022);\r\n    Assert.True(isSupported);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ReturnTrueForDD70",
        "Body": "{\r\n    var cpu = new Z80();\r\n    var isSupported = cpu.IsOpCodeSupported(\u0022DD70\u0022);\r\n    Assert.True(isSupported);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ReturnTrueForDDCB06",
        "Body": "{\r\n    var cpu = new Z80();\r\n    // DDCB instructions are in the format DDCB{displacement}{opcode}\r\n    var isSupported = cpu.IsOpCodeSupported(\u0022DDCB0206\u0022);\r\n    Assert.True(isSupported);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ReturnTrueForFDCBO206",
        "Body": "{\r\n    var cpu = new Z80();\r\n    // FDCB instructions are in the format FDCB{displacement}{opcode}\r\n    var isSupported = cpu.IsOpCodeSupported(\u0022FDCB0206\u0022);\r\n    Assert.True(isSupported);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ReturnTrueForFDCB06",
        "Body": "{\r\n    var cpu = new Z80();\r\n    // FDCB instructions are in the format FDCB{opcode} in FUSE tester\r\n    var isSupported = cpu.IsOpCodeSupported(\u0022fdcb06\u0022);\r\n    Assert.True(isSupported);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ReturnFalseForDD00",
        "Body": "{\r\n    var cpu = new Z80();\r\n    var isSupported = cpu.IsOpCodeSupported(\u0022DD00\u0022);\r\n    Assert.False(isSupported);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ReturnFalseForED",
        "Body": "{\r\n    var cpu = new Z80();\r\n    var isSupported = cpu.IsOpCodeSupported(\u0022ED\u0022);\r\n    Assert.False(isSupported);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "JumpGroupShould",
    "Message": null,
    "ProjectName": "Essenbee.Z80.Tests",
    "Methods": [
      {
        "Name": "LoadProgramCounterWithAddressForJPNN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xC3\r\n        }, // JP 0191h\r\n        {\r\n            0x0081,\r\n            0x91\r\n        },\r\n        {\r\n            0x0082,\r\n            0x01\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        }, // \u003C- jump here\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0191, cpu.PC);\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "JumpWhenCarryFlagSetForJPCCNN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x37\r\n        }, // SCF\r\n        {\r\n            0x0081,\r\n            0xDA\r\n        }, // JP C, 0191h\r\n        {\r\n            0x0082,\r\n            0x91\r\n        },\r\n        {\r\n            0x0083,\r\n            0x01\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0085,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        }, // \u003C- jump here\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    cpu.Step();\r\n    Assert.Equal(0x0191, cpu.PC);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NotJumpWhenCarryFlagNotSetForJPCCNN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDA\r\n        }, // JP C, 0191h\r\n        {\r\n            0x0081,\r\n            0x91\r\n        },\r\n        {\r\n            0x0082,\r\n            0x01\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        }, // \u003C- jump here\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.NotEqual(0x0191, cpu.PC);\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "JumpWhenOddParityForJPCCNN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xE2\r\n        }, // JP C, 0191h\r\n        {\r\n            0x0081,\r\n            0x91\r\n        },\r\n        {\r\n            0x0082,\r\n            0x01\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        }, // \u003C- jump here\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        F = (Flags)0b00000000,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0191, cpu.PC);\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NotJumpWhenEvenParityForJPCCNN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xEA\r\n        }, // JP C, 0191h\r\n        {\r\n            0x0081,\r\n            0x91\r\n        },\r\n        {\r\n            0x0082,\r\n            0x01\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        }, // \u003C- jump here\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        F = (Flags)0b00000100,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0191, cpu.PC);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "JumpForwardFourForJRPositiveSix",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x18\r\n        }, // JR $\u002B6\r\n        {\r\n            0x0081,\r\n            0x04\r\n        }, // Assembler with compensate for PC incrementing twice\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0085,\r\n            0x00\r\n        },\r\n        {\r\n            0x0086,\r\n            0x00\r\n        }, // \u003C- jump here\r\n        {\r\n            0x0087,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x086, cpu.PC);\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "JumpBackFourForJRNegativeFour",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x007B,\r\n            0x00\r\n        },\r\n        {\r\n            0x007C,\r\n            0x00\r\n        }, // \u003C- jump here\r\n        {\r\n            0x007D,\r\n            0x00\r\n        },\r\n        {\r\n            0x007E,\r\n            0x00\r\n        },\r\n        {\r\n            0x007F,\r\n            0x00\r\n        },\r\n        {\r\n            0x0080,\r\n            0x18\r\n        }, // JR $-4\r\n        {\r\n            0x0081,\r\n            0xFA\r\n        }, // Assembler with compensate for PC incrementing twice\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0085,\r\n            0x00\r\n        },\r\n        {\r\n            0x0086,\r\n            0x00\r\n        },\r\n        {\r\n            0x0087,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x007C, cpu.PC);\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "JumpForwardFourForJRCPositiveSix_CarrySet",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x37\r\n        }, // SCF\r\n        {\r\n            0x0081,\r\n            0x38\r\n        }, // JR C,$\u002B6\r\n        {\r\n            0x0082,\r\n            0x04\r\n        }, // Assembler with compensate for PC incrementing twice\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0085,\r\n            0x00\r\n        },\r\n        {\r\n            0x0086,\r\n            0x00\r\n        },\r\n        {\r\n            0x0087,\r\n            0x00\r\n        }, // \u003C- jump here\r\n        {\r\n            0x0088,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    cpu.Step();\r\n    Assert.Equal(0x087, cpu.PC);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DoNotJumpForwardFourForJRCPositiveSix_CarryNotSet",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x38\r\n        }, // JR C $\u002B6\r\n        {\r\n            0x0081,\r\n            0x04\r\n        }, // Assembler with compensate for PC incrementing twice\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0085,\r\n            0x00\r\n        },\r\n        {\r\n            0x0086,\r\n            0x00\r\n        },\r\n        {\r\n            0x0087,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x082, cpu.PC);\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DoNotJumpForwardFourForJRNCPositiveSix_CarrySet",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x37\r\n        }, // SCF\r\n        {\r\n            0x0081,\r\n            0x30\r\n        }, // JR NC,$\u002B6\r\n        {\r\n            0x0082,\r\n            0x04\r\n        }, // Assembler with compensate for PC incrementing twice\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0085,\r\n            0x00\r\n        },\r\n        {\r\n            0x0086,\r\n            0x00\r\n        },\r\n        {\r\n            0x0087,\r\n            0x00\r\n        },\r\n        {\r\n            0x0088,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    cpu.Step();\r\n    Assert.Equal(0x083, cpu.PC);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "JumpForwardFourForJRNCPositiveSix_CarryNotSet",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x30\r\n        }, // JR NC $\u002B6\r\n        {\r\n            0x0081,\r\n            0x04\r\n        }, // Assembler with compensate for PC incrementing twice\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0085,\r\n            0x00\r\n        },\r\n        {\r\n            0x0086,\r\n            0x00\r\n        }, // \u003C- jump here\r\n        {\r\n            0x0087,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x086, cpu.PC);\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "JumpBackFourForDJNZ_WhenNotZero",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x007C,\r\n            0x00\r\n        }, // \u003C- jump here\r\n        {\r\n            0x007D,\r\n            0x00\r\n        },\r\n        {\r\n            0x007E,\r\n            0x00\r\n        },\r\n        {\r\n            0x007F,\r\n            0x00\r\n        },\r\n        {\r\n            0x0080,\r\n            0x10\r\n        }, // DJNZ $-4\r\n        {\r\n            0x0081,\r\n            0xFA\r\n        }, // Assembler with compensate for PC incrementing twice\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0085,\r\n            0x00\r\n        },\r\n        {\r\n            0x0086,\r\n            0x00\r\n        },\r\n        {\r\n            0x0087,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        B = 0x05,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x07C, cpu.PC);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "NotJumpBackFourForDJNZ_WhenZero",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x007C,\r\n            0x00\r\n        }, // \u003C- jump here\r\n        {\r\n            0x007D,\r\n            0x00\r\n        },\r\n        {\r\n            0x007E,\r\n            0x00\r\n        },\r\n        {\r\n            0x007F,\r\n            0x00\r\n        },\r\n        {\r\n            0x0080,\r\n            0x10\r\n        }, // DJNZ $-4\r\n        {\r\n            0x0081,\r\n            0xFA\r\n        }, // Assembler with compensate for PC incrementing twice\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0085,\r\n            0x00\r\n        },\r\n        {\r\n            0x0086,\r\n            0x00\r\n        },\r\n        {\r\n            0x0087,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        B = 0x01,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x082, cpu.PC);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "JumpForwardFourForJRZPositiveSix_ZeroSet",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x28\r\n        }, // JR Z $\u002B6\r\n        {\r\n            0x0081,\r\n            0x04\r\n        }, // Assembler with compensate for PC incrementing twice\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0085,\r\n            0x00\r\n        },\r\n        {\r\n            0x0086,\r\n            0x00\r\n        }, // \u003C- jump here\r\n        {\r\n            0x0087,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.F = (Flags)0b01000000; // Set Z flag\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x086, cpu.PC);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "JumpForwardFourForJRNZPositiveSix_NotZeroSet",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x20\r\n        }, // JR NZ $\u002B6\r\n        {\r\n            0x0081,\r\n            0x04\r\n        }, // Assembler with compensate for PC incrementing twice\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0085,\r\n            0x00\r\n        },\r\n        {\r\n            0x0086,\r\n            0x00\r\n        }, // \u003C- jump here\r\n        {\r\n            0x0087,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.F = (Flags)0b00000000; // Reset Z flag\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x086, cpu.PC);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "JumpToHL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xE9\r\n        }, // JR HL\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0085,\r\n            0x00\r\n        },\r\n        {\r\n            0x0086,\r\n            0x00\r\n        }, // \u003C- jump here\r\n        {\r\n            0x0087,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        H = 0x00,\r\n        L = 0x86,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x086, cpu.PC);\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "JumpToIX",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        }, // JR IX\r\n        {\r\n            0x0081,\r\n            0xE9\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0085,\r\n            0x00\r\n        },\r\n        {\r\n            0x0086,\r\n            0x00\r\n        }, // \u003C- jump here\r\n        {\r\n            0x0087,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        IX = 0x0086,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x086, cpu.PC);\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "JumpToIY",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        }, // JR IY\r\n        {\r\n            0x0081,\r\n            0xE9\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0085,\r\n            0x00\r\n        },\r\n        {\r\n            0x0086,\r\n            0x00\r\n        }, // \u003C- jump here\r\n        {\r\n            0x0087,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        IY = 0x0086,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x086, cpu.PC);\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "RotateAndShiftGroupShould",
    "Message": null,
    "ProjectName": "Essenbee.Z80.Tests",
    "Methods": [
      {
        "Name": "UpdateAccumulatorCorrectlyForRLCA",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x07\r\n        }, // RLCA\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0b10001000,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b00010001, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag contains 1\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateAccumulatorCorrectlyForRLA",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x17\r\n        }, // RLA\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0b01110110,\r\n        F = Z80.Flags.C,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b11101101, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag contains 0\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateAccumulatorCorrectlyForRRCA",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x0F\r\n        }, // RRCA\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0b00010001,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b10001000, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag contains 1\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateAccumulatorCorrectlyForRRA",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x1F\r\n        }, // RRA\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0b11100001,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b01110000, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag contains 1\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateRegisterCorrectlyForRLCC",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xCB\r\n        }, // RLC C\r\n        {\r\n            0x0081,\r\n            0x01\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        C = 0b10001000,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b00010001, cpu.C);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag contains 1\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateLocationContentsCorrectlyForRLCHL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xCB\r\n        }, // RLC (HL)\r\n        {\r\n            0x0081,\r\n            0x06\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0b10001000\r\n        }, // \u003C- (HL)\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        H = 0x01,\r\n        L = 0x91,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b00010001, program[cpu.HL]);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag contains 1\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateLocationContentsCorrectlyForRLCIXD",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        }, // RLC (IX\u002B3)\r\n        {\r\n            0x0081,\r\n            0xCB\r\n        },\r\n        {\r\n            0x0082,\r\n            0x03\r\n        },\r\n        {\r\n            0x0083,\r\n            0x06\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        }, // \u003C- (IX)\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n        {\r\n            0x0193,\r\n            0x00\r\n        },\r\n        {\r\n            0x0194,\r\n            0b10001000\r\n        },\r\n        {\r\n            0x0195,\r\n            0x00\r\n        },\r\n        {\r\n            0x0196,\r\n            0x00\r\n        },\r\n        {\r\n            0x0197,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        IX = 0x0191,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b00010001, program[0x0194]);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag contains 1\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateLocationContentsCorrectlyForRLCIYD",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        }, // RLC (IY\u002B3)\r\n        {\r\n            0x0081,\r\n            0xCB\r\n        },\r\n        {\r\n            0x0082,\r\n            0x03\r\n        },\r\n        {\r\n            0x0083,\r\n            0x06\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        }, // \u003C- (IX)\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n        {\r\n            0x0193,\r\n            0x00\r\n        },\r\n        {\r\n            0x0194,\r\n            0b10001000\r\n        },\r\n        {\r\n            0x0195,\r\n            0x00\r\n        },\r\n        {\r\n            0x0196,\r\n            0x00\r\n        },\r\n        {\r\n            0x0197,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        IY = 0x0191,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b00010001, program[0x0194]);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag contains 1\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateRegisterCorrectlyForRLB",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xCB\r\n        }, // RL B\r\n        {\r\n            0x0081,\r\n            0x10\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        B = 0b10001111,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b00011110, cpu.B);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag contains 1\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateLocationContentsCorrectlyForRLHL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xCB\r\n        }, // RL (HL)\r\n        {\r\n            0x0081,\r\n            0x16\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0b10001111\r\n        }, // \u003C- (HL)\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        H = 0x01,\r\n        L = 0x91,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b00011110, program[cpu.HL]);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag contains 1\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdatesRegisterCorrectlyWhenSLAR",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xCB\r\n        }, // SLA L\r\n        {\r\n            0x0081,\r\n            0x25\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        L = 0b10110001,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b01100010, cpu.L);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag is set\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdatesLocationPointedToByHLCorrectlyWhenSLAHL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xCB\r\n        }, // SLA (HL)\r\n        {\r\n            0x0081,\r\n            0x26\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0b01011001\r\n        }, // \u003C- (HL)\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        H = 0x01,\r\n        L = 0x91,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b10110010, program[cpu.HL]);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag is not set\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdatesRegisterCorrectlyWhenSRLR",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xCB\r\n        }, // SRL D\r\n        {\r\n            0x0081,\r\n            0x3A\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        D = 0b10110001,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b01011000, cpu.D);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag is set\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdatesLocationPointedToByHLCorrectlyWhenSRLHL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xCB\r\n        }, // SRL (HL)\r\n        {\r\n            0x0081,\r\n            0x3E\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0b01011001\r\n        }, // \u003C- (HL)\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        H = 0x01,\r\n        L = 0x91,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b00101100, program[cpu.HL]);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag is set\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateLocationContentsCorrectlyForRLIXD",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        }, // RL (IX\u002B2)\r\n        {\r\n            0x0081,\r\n            0xCB\r\n        },\r\n        {\r\n            0x0082,\r\n            0x02\r\n        },\r\n        {\r\n            0x0083,\r\n            0x16\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x018F,\r\n            0x00\r\n        }, // IX\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0b10001111\r\n        }, // \u003C- (IX\u002B2)\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        IX = 0x018F,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b00011110, program[(ushort)(cpu.IX \u002B 2)]);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag contains 1\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateLocationContentsCorrectlyForRLIYD",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        }, // RL (IY\u002B2)\r\n        {\r\n            0x0081,\r\n            0xCB\r\n        },\r\n        {\r\n            0x0082,\r\n            0x02\r\n        },\r\n        {\r\n            0x0083,\r\n            0x16\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x018F,\r\n            0x00\r\n        }, // IY\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0b10001111\r\n        }, // \u003C- (IY\u002B2)\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        IY = 0x018F,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b00011110, program[(ushort)(cpu.IY \u002B 2)]);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag contains 1\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateRegisterCorrectlyForRRCR",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xCB\r\n        }, // RRC A\r\n        {\r\n            0x0081,\r\n            0x0F\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0b00110001,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b10011000, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag contains 1\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateLocationCorrectlyForRRCHL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xCB\r\n        }, // RRC (HL)\r\n        {\r\n            0x0081,\r\n            0x0E\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0b00110001\r\n        }, // \u003C- (HL)\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        H = 0x01,\r\n        L = 0x91,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b10011000, program[cpu.HL]);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag contains 1\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateLocationContentsCorrectlyForRRCIXD",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        }, // RRC (IX\u002B2)\r\n        {\r\n            0x0081,\r\n            0xCB\r\n        },\r\n        {\r\n            0x0082,\r\n            0x02\r\n        },\r\n        {\r\n            0x0083,\r\n            0x0E\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x018F,\r\n            0x00\r\n        }, // IX\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0b00110001\r\n        }, // \u003C- (IX\u002B2)\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        IX = 0x018F,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b10011000, program[(ushort)(cpu.IX \u002B 2)]);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag contains 1\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateLocationContentsCorrectlyForRRCIYD",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        }, // RRC (IY\u002B2)\r\n        {\r\n            0x0081,\r\n            0xCB\r\n        },\r\n        {\r\n            0x0082,\r\n            0x02\r\n        },\r\n        {\r\n            0x0083,\r\n            0x0E\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x018F,\r\n            0x00\r\n        }, // IY\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0b00110001\r\n        }, // \u003C- (IY\u002B2)\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        IY = 0x018F,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b10011000, program[(ushort)(cpu.IY \u002B 2)]);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag contains 1\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    ;\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateRegisterCorrectlyForRRR",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xCB\r\n        }, // RR A\r\n        {\r\n            0x0081,\r\n            0x1F\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0b11011101,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b01101110, cpu.A);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag contains 1\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateLocationCorrectlyForRRHL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x37\r\n        }, // SCF\r\n        {\r\n            0x0081,\r\n            0xCB\r\n        }, // RR (HL)\r\n        {\r\n            0x0082,\r\n            0x1E\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0b11011101\r\n        }, // \u003C- (HL)\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        H = 0x01,\r\n        L = 0x91,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    cpu.Step();\r\n    Assert.Equal(0b11101110, program[cpu.HL]);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag contains 1\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateLocationContentsCorrectlyForRRIXD",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        }, // RR (IX\u002B2)\r\n        {\r\n            0x0081,\r\n            0xCB\r\n        },\r\n        {\r\n            0x0082,\r\n            0x02\r\n        },\r\n        {\r\n            0x0083,\r\n            0x1E\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x018F,\r\n            0x00\r\n        }, // IX\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0b11011101\r\n        }, // \u003C- (IX\u002B2)\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        IX = 0x018F,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b01101110, program[(ushort)(cpu.IX \u002B 2)]);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag contains 1\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateLocationContentsCorrectlyForRRIYD",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        }, // RR (IY\u002B2)\r\n        {\r\n            0x0081,\r\n            0xCB\r\n        },\r\n        {\r\n            0x0082,\r\n            0x02\r\n        },\r\n        {\r\n            0x0083,\r\n            0x1E\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x018F,\r\n            0x00\r\n        }, // IY\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0b11011101\r\n        }, // \u003C- (IY\u002B2)\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        IY = 0x018F,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b01101110, program[(ushort)(cpu.IY \u002B 2)]);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag contains 1\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdatesLocationCorrectlyWhenSLAIXD",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        }, // SLA (IX\u002B1)\r\n        {\r\n            0x0081,\r\n            0xCB\r\n        },\r\n        {\r\n            0x0082,\r\n            0x01\r\n        },\r\n        {\r\n            0x0083,\r\n            0x26\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        }, // \u003C- (IX)\r\n        {\r\n            0x0191,\r\n            0b01011001\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        IX = 0x0190,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b10110010, program[(ushort)(cpu.IX \u002B 1)]);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag is not set\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdatesLocationCorrectlyWhenSLAIYD",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        }, // SLA (IY\u002B1)\r\n        {\r\n            0x0081,\r\n            0xCB\r\n        },\r\n        {\r\n            0x0082,\r\n            0x01\r\n        },\r\n        {\r\n            0x0083,\r\n            0x26\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        }, // \u003C- (IY)\r\n        {\r\n            0x0191,\r\n            0b01011001\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        IY = 0x0190,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b10110010, program[(ushort)(cpu.IY \u002B 1)]);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag is not set\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdatesLocationCorrectlyWhenSRLIXD",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        }, // SRL (IX\u002B1)\r\n        {\r\n            0x0081,\r\n            0xCB\r\n        },\r\n        {\r\n            0x0082,\r\n            0x01\r\n        },\r\n        {\r\n            0x0083,\r\n            0x3E\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        }, // \u003C- (IX)\r\n        {\r\n            0x0191,\r\n            0b01011001\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        IX = 0x0190,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b00101100, program[(ushort)(cpu.IX \u002B 1)]);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag is set\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdatesLocationCorrectlyWhenSRLIYD",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        }, // SRL (IY\u002B1)\r\n        {\r\n            0x0081,\r\n            0xCB\r\n        },\r\n        {\r\n            0x0082,\r\n            0x01\r\n        },\r\n        {\r\n            0x0083,\r\n            0x3E\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        }, // \u003C- (IY)\r\n        {\r\n            0x0191,\r\n            0b01011001\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        IY = 0x0190,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b00101100, program[(ushort)(cpu.IY \u002B 1)]);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag is set\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateRegisterCorrectlyForSRAR",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xCB\r\n        }, // SRA A\r\n        {\r\n            0x0081,\r\n            0x2F\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0b10111000,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b11011100, cpu.A);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag contains 0\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateLocationCorrectlyForSRAHL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xCB\r\n        }, // SRA (HL)\r\n        {\r\n            0x0081,\r\n            0x2E\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0b10111000\r\n        }, // \u003C- (HL)\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        H = 0x01,\r\n        L = 0x91,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b11011100, program[cpu.HL]);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag contains 0\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateLocationCorrectlyForSRAIXD",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        }, // SRA (IX\u002B1)\r\n        {\r\n            0x0081,\r\n            0xCB\r\n        },\r\n        {\r\n            0x0082,\r\n            0x01\r\n        },\r\n        {\r\n            0x0083,\r\n            0x2E\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        }, // \u003C- (IX)\r\n        {\r\n            0x0191,\r\n            0b10111000\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        IX = 0x0190,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b11011100, program[(ushort)(cpu.IX \u002B 1)]);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag contains 0\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "UpdateLocationCorrectlyForSRAIYD",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        }, // SRA (IY\u002B1)\r\n        {\r\n            0x0081,\r\n            0xCB\r\n        },\r\n        {\r\n            0x0082,\r\n            0x01\r\n        },\r\n        {\r\n            0x0083,\r\n            0x2E\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        }, // \u003C- (IY)\r\n        {\r\n            0x0191,\r\n            0b10111000\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        IY = 0x0190,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b11011100, program[(ushort)(cpu.IY \u002B 1)]);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C); // Carry flag contains 0\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AccumulatorAndLocationCorrectAfterRLD",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        }, // RLD\r\n        {\r\n            0x0081,\r\n            0x6F\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0b0011_0001\r\n        }, // \u003C- (HL)\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0b0111_1010,\r\n        H = 0x01,\r\n        L = 0x91,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b0111_0011, cpu.A);\r\n    Assert.Equal(0b0001_1010, program[cpu.HL]);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AccumulatorAndLocationCorrectAfterRRD",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        }, // RRD\r\n        {\r\n            0x0081,\r\n            0x67\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0b0010_0000\r\n        }, // \u003C- (HL)\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0b1000_0100,\r\n        H = 0x01,\r\n        L = 0x91,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0b1000_0000, cpu.A);\r\n    Assert.Equal(0b0100_0010, program[cpu.HL]);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SixteenBitArithmeticLogicGroupShould",
    "Message": null,
    "ProjectName": "Essenbee.Z80.Tests",
    "Methods": [
      {
        "Name": "AddHLandBCforADDHLBC",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x09\r\n        }, // ADD HL,BC\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        H = 0x42,\r\n        L = 0x42,\r\n        B = 0x11,\r\n        C = 0x11,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x5353, cpu.HL);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddHLandBCforADDHLBC2",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x09\r\n        }, // ADD HL,BC\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        H = 0xEE,\r\n        L = 0x00,\r\n        B = 0x20,\r\n        C = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0E00, cpu.HL);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddHLandBCforADDHLBC3",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x09\r\n        }, // ADD HL,BC\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        H = 0x01,\r\n        L = 0xFF,\r\n        B = 0x20,\r\n        C = 0xFF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x22FE, cpu.HL);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddWithCarryHLandBCforADCHLBC",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        }, // ADC HL,BC\r\n        {\r\n            0x0081,\r\n            0x4A\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        H = 0x42,\r\n        L = 0x42,\r\n        B = 0x11,\r\n        C = 0x11,\r\n        F = Z80.Flags.C,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x5354, cpu.HL);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddCarryWithHLandBCforADCHLBC2",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        }, // ADC HL,BC\r\n        {\r\n            0x0081,\r\n            0x4A\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        H = 0xEE,\r\n        L = 0x00,\r\n        B = 0x20,\r\n        C = 0x00,\r\n        F = Z80.Flags.C,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0E01, cpu.HL);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddCarryWithHLandBCforADCHLBC3",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        }, // ADC HL,BC\r\n        {\r\n            0x0081,\r\n            0x4A\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        H = 0x01,\r\n        L = 0xFF,\r\n        B = 0x20,\r\n        C = 0xFF,\r\n        F = Z80.Flags.C,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x22FF, cpu.HL);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SubtractHLandHLforSBCHLHL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        }, // SBC HL,HL\r\n        {\r\n            0x0081,\r\n            0x62\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        H = 0x99,\r\n        L = 0x99,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0000, cpu.HL);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "SubtractCarryWithHLandBCforSBCHLBC",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        }, // SBC HL,BC\r\n        {\r\n            0x0081,\r\n            0x42\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        H = 0x99,\r\n        L = 0x99,\r\n        B = 0x11,\r\n        C = 0x11,\r\n        F = Z80.Flags.C,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x8887, cpu.HL);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddHLandBCforADDCHLBC4",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x09\r\n        }, // ADD HL,BC\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        H = 0x00,\r\n        L = 0x01,\r\n        B = 0xFF,\r\n        C = 0xFF,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0000, cpu.HL);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddIXandBCforADDIXPP",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        }, // ADD IX,BC\r\n        {\r\n            0x0081,\r\n            0x09\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        IX = 0x0333,\r\n        B = 0x55,\r\n        C = 0x55,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x5888, cpu.IX);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "AddIYandBCforADDIYPP",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        }, // ADD IY,BC\r\n        {\r\n            0x0081,\r\n            0x09\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        IY = 0x0333,\r\n        B = 0x55,\r\n        C = 0x55,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x5888, cpu.IY);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IncrementDEforINCSS",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x13\r\n        }, // INC DE\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        D = 0x55,\r\n        E = 0x55,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x5556, cpu.DE);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecrementDEforDECSS",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x1B\r\n        }, // DEC DE\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        D = 0x55,\r\n        E = 0x55,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x5554, cpu.DE);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IncrementIXforINCIX",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        }, // INC IX\r\n        {\r\n            0x0081,\r\n            0x23\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        IX = 0x5555,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x5556, cpu.IX);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecrementIXforDECIX",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        }, // DEC IX\r\n        {\r\n            0x0081,\r\n            0x2B\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        IX = 0x5555,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x5554, cpu.IX);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "IncrementIYforINCIY",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        }, // INC IY\r\n        {\r\n            0x0081,\r\n            0x23\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        IY = 0x5555,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x5556, cpu.IY);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "DecrementIYforDECIY",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        }, // DEC IY\r\n        {\r\n            0x0081,\r\n            0x2B\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        {\r\n            0x0190,\r\n            0x00\r\n        },\r\n        {\r\n            0x0191,\r\n            0x00\r\n        },\r\n        {\r\n            0x0192,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        IY = 0x5555,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x5554, cpu.IY);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "SixteenBitLoadGroupShould",
    "Message": null,
    "ProjectName": "Essenbee.Z80.Tests",
    "Methods": [
      {
        "Name": "LoadBCwithNN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x01\r\n        },\r\n        {\r\n            0x0081,\r\n            0xCC\r\n        },\r\n        {\r\n            0x0082,\r\n            0xAA\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        B = 0x00,\r\n        C = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xAACC, cpu.BC);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadDEwithNN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x11\r\n        },\r\n        {\r\n            0x0081,\r\n            0xCC\r\n        },\r\n        {\r\n            0x0082,\r\n            0xAA\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        D = 0x00,\r\n        E = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xAACC, cpu.DE);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadHLwithNN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x21\r\n        },\r\n        {\r\n            0x0081,\r\n            0xCC\r\n        },\r\n        {\r\n            0x0082,\r\n            0xAA\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        H = 0x00,\r\n        L = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xAACC, cpu.HL);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadSPwithNN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x31\r\n        },\r\n        {\r\n            0x0081,\r\n            0xCC\r\n        },\r\n        {\r\n            0x0082,\r\n            0xAA\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        SP = 0x0000,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xAACC, cpu.SP);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadIXwithNN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x21\r\n        },\r\n        {\r\n            0x0082,\r\n            0xCC\r\n        },\r\n        {\r\n            0x0083,\r\n            0xAA\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        IX = 0x0000,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xAACC, cpu.IX);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadIYwithNN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x21\r\n        },\r\n        {\r\n            0x0082,\r\n            0xCC\r\n        },\r\n        {\r\n            0x0083,\r\n            0xAA\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        IY = 0x0000,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xAACC, cpu.IY);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadHLwith16BitOperandPointedToByAddressNN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x2A\r\n        },\r\n        {\r\n            0x0081,\r\n            0xFF\r\n        },\r\n        {\r\n            0x0082,\r\n            0x08\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0xCC\r\n        }, // (nn)\r\n        {\r\n            0x0900,\r\n            0xAA\r\n        }, // (nn \u002B 1)\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        H = 0x00,\r\n        L = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xAACC, cpu.HL);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadBCwith16BitOperandPointedToByAddressNN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        },\r\n        {\r\n            0x0081,\r\n            0x4B\r\n        },\r\n        {\r\n            0x0082,\r\n            0xFF\r\n        },\r\n        {\r\n            0x0083,\r\n            0x08\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0xCC\r\n        }, // (nn)\r\n        {\r\n            0x0900,\r\n            0xAA\r\n        }, // (nn \u002B 1)\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        B = 0x00,\r\n        C = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xAACC, cpu.BC);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadDEwith16BitOperandPointedToByAddressNN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        },\r\n        {\r\n            0x0081,\r\n            0x5B\r\n        },\r\n        {\r\n            0x0082,\r\n            0xFF\r\n        },\r\n        {\r\n            0x0083,\r\n            0x08\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0xCC\r\n        }, // (nn)\r\n        {\r\n            0x0900,\r\n            0xAA\r\n        }, // (nn \u002B 1)\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        D = 0x00,\r\n        E = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xAACC, cpu.DE);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadHLwith16BitOperandPointedToByAddressNN2",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        },\r\n        {\r\n            0x0081,\r\n            0x6B\r\n        },\r\n        {\r\n            0x0082,\r\n            0xFF\r\n        },\r\n        {\r\n            0x0083,\r\n            0x08\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0xCC\r\n        }, // (nn)\r\n        {\r\n            0x0900,\r\n            0xAA\r\n        }, // (nn \u002B 1)\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        H = 0x00,\r\n        L = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xAACC, cpu.HL);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadSPwith16BitOperandPointedToByAddressNN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        },\r\n        {\r\n            0x0081,\r\n            0x7B\r\n        },\r\n        {\r\n            0x0082,\r\n            0xFF\r\n        },\r\n        {\r\n            0x0083,\r\n            0x08\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0xCC\r\n        }, // (nn)\r\n        {\r\n            0x0900,\r\n            0xAA\r\n        }, // (nn \u002B 1)\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        SP = 0x0000,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xAACC, cpu.SP);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadIXwith16BitOperandPointedToByAddressNN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x2A\r\n        },\r\n        {\r\n            0x0082,\r\n            0xFF\r\n        },\r\n        {\r\n            0x0083,\r\n            0x08\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0xCC\r\n        }, // (nn)\r\n        {\r\n            0x0900,\r\n            0xAA\r\n        }, // (nn \u002B 1)\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        IX = 0x0000,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xAACC, cpu.IX);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadIYwith16BitOperandPointedToByAddressNN",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x2A\r\n        },\r\n        {\r\n            0x0082,\r\n            0xFF\r\n        },\r\n        {\r\n            0x0083,\r\n            0x08\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0xCC\r\n        }, // (nn)\r\n        {\r\n            0x0900,\r\n            0xAA\r\n        }, // (nn \u002B 1)\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        IY = 0x0000,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xAACC, cpu.IY);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadNNwith16BitOperandFromHL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0x22\r\n        },\r\n        {\r\n            0x0081,\r\n            0xFF\r\n        },\r\n        {\r\n            0x0082,\r\n            0x08\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // (nn)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        }, // (nn \u002B 1)\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        H = 0xAA,\r\n        L = 0xCC,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xCC, program[0x08FF]);\r\n    Assert.Equal(0xAA, program[0x08FF \u002B 1]);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadNNwith16BitOperandFromBC",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        },\r\n        {\r\n            0x0081,\r\n            0x43\r\n        },\r\n        {\r\n            0x0082,\r\n            0xFF\r\n        },\r\n        {\r\n            0x0083,\r\n            0x08\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // (nn)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        }, // (nn \u002B 1)\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        B = 0xAA,\r\n        C = 0xCC,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xCC, program[0x08FF]);\r\n    Assert.Equal(0xAA, program[0x08FF \u002B 1]);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadNNwith16BitOperandFromDE",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        },\r\n        {\r\n            0x0081,\r\n            0x53\r\n        },\r\n        {\r\n            0x0082,\r\n            0xFF\r\n        },\r\n        {\r\n            0x0083,\r\n            0x08\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // (nn)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        }, // (nn \u002B 1)\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        D = 0xAA,\r\n        E = 0xCC,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xCC, program[0x08FF]);\r\n    Assert.Equal(0xAA, program[0x08FF \u002B 1]);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadNNwith16BitOperandFromHL2",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        },\r\n        {\r\n            0x0081,\r\n            0x63\r\n        },\r\n        {\r\n            0x0082,\r\n            0xFF\r\n        },\r\n        {\r\n            0x0083,\r\n            0x08\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // (nn)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        }, // (nn \u002B 1)\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        H = 0xAA,\r\n        L = 0xCC,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xCC, program[0x08FF]);\r\n    Assert.Equal(0xAA, program[0x08FF \u002B 1]);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadNNwith16BitOperandFromSP",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xED\r\n        },\r\n        {\r\n            0x0081,\r\n            0x73\r\n        },\r\n        {\r\n            0x0082,\r\n            0xFF\r\n        },\r\n        {\r\n            0x0083,\r\n            0x08\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // (nn)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        }, // (nn \u002B 1)\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        SP = 0xAACC,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xCC, program[0x08FF]);\r\n    Assert.Equal(0xAA, program[0x08FF \u002B 1]);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadNNwith16BitOperandFromIX",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x22\r\n        },\r\n        {\r\n            0x0082,\r\n            0xFF\r\n        },\r\n        {\r\n            0x0083,\r\n            0x08\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // (nn)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        }, // (nn \u002B 1)\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        IX = 0xAACC,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xCC, program[0x08FF]);\r\n    Assert.Equal(0xAA, program[0x08FF \u002B 1]);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadNNwith16BitOperandFromIY",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        },\r\n        {\r\n            0x0081,\r\n            0x22\r\n        },\r\n        {\r\n            0x0082,\r\n            0xFF\r\n        },\r\n        {\r\n            0x0083,\r\n            0x08\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Data\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        }, // (nn)\r\n        {\r\n            0x0900,\r\n            0x00\r\n        }, // (nn \u002B 1)\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        },\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        IY = 0xAACC,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xCC, program[0x08FF]);\r\n    Assert.Equal(0xAA, program[0x08FF \u002B 1]);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadSPwithHL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xF9\r\n        },\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        SP = 0x0000,\r\n        H = 0xAA,\r\n        L = 0xCC,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xAACC, cpu.HL);\r\n    Assert.Equal(0xAACC, cpu.SP);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadSPwithIX",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        },\r\n        {\r\n            0x0081,\r\n            0xF9\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        SP = 0x0000,\r\n        IX = 0xAACC,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xAACC, cpu.IX);\r\n    Assert.Equal(0xAACC, cpu.SP);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LoadSPwithIY",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        },\r\n        {\r\n            0x0081,\r\n            0xF9\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        SP = 0x0000,\r\n        IY = 0xAACC,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0xAACC, cpu.IY);\r\n    Assert.Equal(0xAACC, cpu.SP);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PushBC",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xC5\r\n        },\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Stack\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        }, // \u003C-- SP\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        SP = 0x0905,\r\n        B = 0x10,\r\n        C = 0x11,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0903, cpu.SP);\r\n    Assert.Equal(0x10, program[(ushort)(cpu.SP \u002B 1)]);\r\n    Assert.Equal(0x11, program[(ushort)(cpu.SP)]);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PushDE",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xD5\r\n        },\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Stack\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        }, // \u003C-- SP\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        SP = 0x0905,\r\n        D = 0x10,\r\n        E = 0x11,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0903, cpu.SP);\r\n    Assert.Equal(0x10, program[(ushort)(cpu.SP \u002B 1)]);\r\n    Assert.Equal(0x11, program[(ushort)(cpu.SP)]);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PushHL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xE5\r\n        },\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Stack\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        }, // \u003C-- SP\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        SP = 0x0905,\r\n        H = 0x10,\r\n        L = 0x11,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0903, cpu.SP);\r\n    Assert.Equal(0x10, program[(ushort)(cpu.SP \u002B 1)]);\r\n    Assert.Equal(0x11, program[(ushort)(cpu.SP)]);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PushAF",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xF5\r\n        },\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Stack\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        }, // \u003C-- SP\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        SP = 0x0905,\r\n        A = 0x10,\r\n        F = (Flags)0x11,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0903, cpu.SP);\r\n    Assert.Equal(0x10, program[(ushort)(cpu.SP \u002B 1)]);\r\n    Assert.Equal(0x11, program[(ushort)(cpu.SP)]);\r\n    // No affect on Condition Flags\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PushIX",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        },\r\n        {\r\n            0x0081,\r\n            0xE5\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Stack\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        }, // \u003C-- SP\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        SP = 0x0905,\r\n        IX = 0x1011,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0903, cpu.SP);\r\n    Assert.Equal(0x10, program[(ushort)(cpu.SP \u002B 1)]);\r\n    Assert.Equal(0x11, program[(ushort)(cpu.SP)]);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PushIY",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        },\r\n        {\r\n            0x0081,\r\n            0xE5\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Stack\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        }, // \u003C-- SP\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        SP = 0x0905,\r\n        IY = 0x1011,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0903, cpu.SP);\r\n    Assert.Equal(0x10, program[(ushort)(cpu.SP \u002B 1)]);\r\n    Assert.Equal(0x11, program[(ushort)(cpu.SP)]);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PopBC",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xC1\r\n        },\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Stack\r\n        {\r\n            0x0FFB,\r\n            0x00\r\n        },\r\n        {\r\n            0x0FFC,\r\n            0x00\r\n        },\r\n        {\r\n            0x0FFD,\r\n            0x00\r\n        },\r\n        {\r\n            0x0FFE,\r\n            0x00\r\n        },\r\n        {\r\n            0x0FFF,\r\n            0x00\r\n        },\r\n        {\r\n            0x1000,\r\n            0x55\r\n        }, // \u003C- SP\r\n        {\r\n            0x1001,\r\n            0x33\r\n        },\r\n        {\r\n            0x1002,\r\n            0x00\r\n        },\r\n        {\r\n            0x1003,\r\n            0x00\r\n        },\r\n        {\r\n            0x1004,\r\n            0x00\r\n        },\r\n        {\r\n            0x1005,\r\n            0x00\r\n        },\r\n        {\r\n            0x1006,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        SP = 0x1000,\r\n        B = 0x00,\r\n        C = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x1002, cpu.SP);\r\n    Assert.Equal(0x3355, cpu.BC);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PopDE",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xD1\r\n        },\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Stack\r\n        {\r\n            0x0FFB,\r\n            0x00\r\n        },\r\n        {\r\n            0x0FFC,\r\n            0x00\r\n        },\r\n        {\r\n            0x0FFD,\r\n            0x00\r\n        },\r\n        {\r\n            0x0FFE,\r\n            0x00\r\n        },\r\n        {\r\n            0x0FFF,\r\n            0x00\r\n        },\r\n        {\r\n            0x1000,\r\n            0x55\r\n        }, // \u003C- SP\r\n        {\r\n            0x1001,\r\n            0x33\r\n        },\r\n        {\r\n            0x1002,\r\n            0x00\r\n        },\r\n        {\r\n            0x1003,\r\n            0x00\r\n        },\r\n        {\r\n            0x1004,\r\n            0x00\r\n        },\r\n        {\r\n            0x1005,\r\n            0x00\r\n        },\r\n        {\r\n            0x1006,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        SP = 0x1000,\r\n        D = 0x00,\r\n        E = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x1002, cpu.SP);\r\n    Assert.Equal(0x3355, cpu.DE);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PopHL",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xE1\r\n        },\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Stack\r\n        {\r\n            0x0FFB,\r\n            0x00\r\n        },\r\n        {\r\n            0x0FFC,\r\n            0x00\r\n        },\r\n        {\r\n            0x0FFD,\r\n            0x00\r\n        },\r\n        {\r\n            0x0FFE,\r\n            0x00\r\n        },\r\n        {\r\n            0x0FFF,\r\n            0x00\r\n        },\r\n        {\r\n            0x1000,\r\n            0x55\r\n        }, // \u003C- SP\r\n        {\r\n            0x1001,\r\n            0x33\r\n        },\r\n        {\r\n            0x1002,\r\n            0x00\r\n        },\r\n        {\r\n            0x1003,\r\n            0x00\r\n        },\r\n        {\r\n            0x1004,\r\n            0x00\r\n        },\r\n        {\r\n            0x1005,\r\n            0x00\r\n        },\r\n        {\r\n            0x1006,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        SP = 0x1000,\r\n        H = 0x00,\r\n        L = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x1002, cpu.SP);\r\n    Assert.Equal(0x3355, cpu.HL);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PopAF",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xF1\r\n        },\r\n        {\r\n            0x0081,\r\n            0x00\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Stack\r\n        {\r\n            0x0FFB,\r\n            0x00\r\n        },\r\n        {\r\n            0x0FFC,\r\n            0x00\r\n        },\r\n        {\r\n            0x0FFD,\r\n            0x00\r\n        },\r\n        {\r\n            0x0FFE,\r\n            0x00\r\n        },\r\n        {\r\n            0x0FFF,\r\n            0x00\r\n        },\r\n        {\r\n            0x1000,\r\n            0x55\r\n        }, // \u003C- SP\r\n        {\r\n            0x1001,\r\n            0x33\r\n        },\r\n        {\r\n            0x1002,\r\n            0x00\r\n        },\r\n        {\r\n            0x1003,\r\n            0x00\r\n        },\r\n        {\r\n            0x1004,\r\n            0x00\r\n        },\r\n        {\r\n            0x1005,\r\n            0x00\r\n        },\r\n        {\r\n            0x1006,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        SP = 0x1000,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x1002, cpu.SP);\r\n    Assert.Equal(0x33, cpu.A);\r\n    Assert.Equal(0x55, (byte)cpu.F);\r\n    // Condition Flags = 01010101\r\n    Assert.True((cpu.F \u0026 Z80.Flags.C) == Z80.Flags.C);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.N) == Z80.Flags.N);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.P) == Z80.Flags.P);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.X) == Z80.Flags.X);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.H) == Z80.Flags.H);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.U) == Z80.Flags.U);\r\n    Assert.True((cpu.F \u0026 Z80.Flags.Z) == Z80.Flags.Z);\r\n    Assert.False((cpu.F \u0026 Z80.Flags.S) == Z80.Flags.S);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PopIX",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        },\r\n        {\r\n            0x0081,\r\n            0xE1\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Stack\r\n        {\r\n            0x0FFB,\r\n            0x00\r\n        },\r\n        {\r\n            0x0FFC,\r\n            0x00\r\n        },\r\n        {\r\n            0x0FFD,\r\n            0x00\r\n        },\r\n        {\r\n            0x0FFE,\r\n            0x00\r\n        },\r\n        {\r\n            0x0FFF,\r\n            0x00\r\n        },\r\n        {\r\n            0x1000,\r\n            0x55\r\n        }, // \u003C- SP\r\n        {\r\n            0x1001,\r\n            0x33\r\n        },\r\n        {\r\n            0x1002,\r\n            0x00\r\n        },\r\n        {\r\n            0x1003,\r\n            0x00\r\n        },\r\n        {\r\n            0x1004,\r\n            0x00\r\n        },\r\n        {\r\n            0x1005,\r\n            0x00\r\n        },\r\n        {\r\n            0x1006,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        SP = 0x1000,\r\n        IX = 0x0000,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x1002, cpu.SP);\r\n    Assert.Equal(0x3355, cpu.IX);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PopIY",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xFD\r\n        },\r\n        {\r\n            0x0081,\r\n            0xE1\r\n        },\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Stack\r\n        {\r\n            0x0FFB,\r\n            0x00\r\n        },\r\n        {\r\n            0x0FFC,\r\n            0x00\r\n        },\r\n        {\r\n            0x0FFD,\r\n            0x00\r\n        },\r\n        {\r\n            0x0FFE,\r\n            0x00\r\n        },\r\n        {\r\n            0x0FFF,\r\n            0x00\r\n        },\r\n        {\r\n            0x1000,\r\n            0x55\r\n        }, // \u003C- SP\r\n        {\r\n            0x1001,\r\n            0x33\r\n        },\r\n        {\r\n            0x1002,\r\n            0x00\r\n        },\r\n        {\r\n            0x1003,\r\n            0x00\r\n        },\r\n        {\r\n            0x1004,\r\n            0x00\r\n        },\r\n        {\r\n            0x1005,\r\n            0x00\r\n        },\r\n        {\r\n            0x1006,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        SP = 0x1000,\r\n        IY = 0x0000,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x1002, cpu.SP);\r\n    Assert.Equal(0x3355, cpu.IY);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "PushThenPop",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xC5\r\n        }, // PUSH BC\r\n        {\r\n            0x0081,\r\n            0xC1\r\n        }, // POP BC\r\n        {\r\n            0x0082,\r\n            0x00\r\n        },\r\n        {\r\n            0x0083,\r\n            0x00\r\n        },\r\n        {\r\n            0x0084,\r\n            0x00\r\n        },\r\n        // Stack\r\n        {\r\n            0x08FB,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FC,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FD,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FE,\r\n            0x00\r\n        },\r\n        {\r\n            0x08FF,\r\n            0x00\r\n        },\r\n        {\r\n            0x0900,\r\n            0x00\r\n        },\r\n        {\r\n            0x0901,\r\n            0x00\r\n        },\r\n        {\r\n            0x0902,\r\n            0x00\r\n        },\r\n        {\r\n            0x0903,\r\n            0x00\r\n        },\r\n        {\r\n            0x0904,\r\n            0x00\r\n        },\r\n        {\r\n            0x0905,\r\n            0x00\r\n        }, // \u003C-- SP\r\n        {\r\n            0x0906,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        SP = 0x0905,\r\n        B = 0x10,\r\n        C = 0x11,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    cpu.Step();\r\n    Assert.Equal(0x0903, cpu.SP);\r\n    Assert.Equal(0x10, program[(ushort)(cpu.SP \u002B 1)]);\r\n    Assert.Equal(0x11, program[(ushort)(cpu.SP)]);\r\n    // Clear BC\r\n    cpu.B = 0x00;\r\n    cpu.C = 0x00;\r\n    cpu.Step();\r\n    Assert.Equal(0x0905, cpu.SP);\r\n    Assert.Equal(0x1011, cpu.BC);\r\n    // No affect on Condition Flags\r\n    FlagsUnchanged(cpu);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        program[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "Name": "Z80EmulatorShould",
    "Message": null,
    "ProjectName": "Essenbee.Z80.Tests",
    "Methods": [
      {
        "Name": "PassAllValidationTests",
        "Body": "{\r\n    var tester = new FuseTester();\r\n    var results = tester.RunTests();\r\n    Debug.WriteLine($\u0022Passing tests = {results.Passing.Count}\u0022);\r\n    Debug.WriteLine($\u0022Failing tests = {results.Failing.Count}\u0022);\r\n    Debug.WriteLine($\u0022Opcodes not implemented = {results.NotImplemented.Count}\u0022);\r\n    Assert.Empty(results.Failing);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteArithmeticTestRoutine1Successfully",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    //\u0060 Arithmetic Test Routine #1 - 10 instructions\r\n    //\u0060 Filename: Arithmetic1.hex\r\n    //\u0060\r\n    //\u0060 0080                          .ORG   0080h\r\n    //\u0060\r\n    //\u0060 0080   3E 05                  LD A,05h\r\n    //\u0060 0082   06 0A                  LD B,0Ah\r\n    //\u0060 0084   80                     ADD A,B\r\n    //\u0060 0085   87                     ADD A,A\r\n    //\u0060 0086   0E 0F                  LD C,0Fh\r\n    //\u0060 0088   91                     SUB C\r\n    //\u0060 0089   26 08                  LD H,08h\r\n    //\u0060 008B   2E FF                  LD L,0FFh\r\n    //\u0060 008D   77                     LD (HL),A\r\n    //\u0060 008E   00                     NOP\r\n    var ram = HexFileReader.Read(\u0022../../../HexFiles/Arithmetic1.hex\u0022);\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E ram[addr]);\r\n    A.CallTo(() =\u003E fakeBus.Write(A\u003Cushort\u003E._, A\u003Cbyte\u003E._)).Invokes((ushort addr, byte data) =\u003E UpdateMemory(addr, data));\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        B = 0x00,\r\n        C = 0x00,\r\n        H = 0x00,\r\n        L = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    // Run 10 instructions\r\n    for (int i = 0; i \u003C 10; i\u002B\u002B)\r\n    {\r\n        cpu.Step();\r\n        Debug.WriteLine($\u0022A = {cpu.A} B = {cpu.B} C = {cpu.C} H = {cpu.H} L = {cpu.L}\u0022);\r\n    }\r\n\r\n    Assert.Equal(0x0F, ram[0x08FF]);\r\n    void UpdateMemory(ushort addr, byte data)\r\n    {\r\n        ram[addr] = data;\r\n    }\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteEightBitMultiplicationRoutineSuccessfully",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    //\u0060 Arithmetic Test Routine #2\r\n    //\u0060 Filename: Multiplication.hex\r\n    //\u0060\r\n    //\u0060 8000                          .ORG   8000h\r\n    //\u0060\r\n    //\u00608000   01 15 00               LD BC,21\r\n    //\u00608003   06 08                  LD B,8\r\n    //\u00608005   11 2A 00               LD DE,42\r\n    //\u00608008   16 00                  LD D,0\r\n    //\u0060800A   21 00 00               LD HL,0\r\n    //\u0060800D   CB 39         MULTI:   SRL C; LSB in Carry Flag\r\n    //\u0060800F   30 01                  JR NC, NOADD\r\n    //\u00608011   19                     ADD HL, DE\r\n    //\u00608012   CB 23        NOADD:    SLA E\r\n    //\u00608014   CB 12                  RL D\r\n    //\u00608016   05                     DEC B\r\n    //\u00608017   C2 0D 80               JP NZ, MULTI\r\n    var ram = HexFileReader.Read(\u0022../../../HexFiles/Multiplication.hex\u0022);\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E ram[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        B = 0x00,\r\n        C = 0x00,\r\n        H = 0x00,\r\n        L = 0x00,\r\n        PC = 0x8000\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    while (cpu.PC \u003C 0x8020)\r\n    {\r\n        cpu.Step();\r\n    }\r\n\r\n    Assert.Equal(0x0372, cpu.HL);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "ExecuteEightBitMultiplication2RoutineSuccessfully",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    //\u0060 Arithmetic Test Routine #3\r\n    //\u0060 Filename: Multiplication2.hex\r\n    //\u0060\r\n    //\u0060 8000                          .ORG   8000h\r\n    //\u0060\r\n    //\u00608000   01 15 00               LD BC,21\r\n    //\u00608003   06 08                  LD B,8\r\n    //\u00608005   11 2A 00               LD DE,42\r\n    //\u00608008   16 00                  LD D,0\r\n    //\u0060800A   21 00 00               LD HL,0\r\n    //\u0060800D   CB 39         MULTI:   SRL C; LSB in Carry Flag\r\n    //\u0060800F   30 01                  JR NC, NOADD\r\n    //\u00608011   19                     ADD HL, DE\r\n    //\u00608012   CB 23        NOADD:    SLA E\r\n    //\u00608014   CB 12                  RL D\r\n    //\u00608016   10 F5                  DJNZ   MULTI\r\n    var ram = HexFileReader.Read(\u0022../../../HexFiles/Multiplication2.hex\u0022);\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E ram[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        B = 0x00,\r\n        C = 0x00,\r\n        H = 0x00,\r\n        L = 0x00,\r\n        PC = 0x8000\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    while (cpu.PC \u003C 0x8018)\r\n    {\r\n        cpu.Step();\r\n    }\r\n\r\n    Assert.Equal(0x0372, cpu.HL);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "HandleStrayOpCodes2",
        "Body": "{\r\n    var fakeBus = A.Fake\u003CIBus\u003E();\r\n    var program = new Dictionary\u003Cushort, byte\u003E\r\n    {\r\n        // Program Code\r\n        {\r\n            0x0080,\r\n            0xDD\r\n        },\r\n        {\r\n            0x0081,\r\n            0xDD\r\n        },\r\n        {\r\n            0x0082,\r\n            0xDD\r\n        },\r\n        {\r\n            0x0083,\r\n            0xFD\r\n        },\r\n        {\r\n            0x0084,\r\n            0xDD\r\n        }, // LD IX \u00261000\r\n        {\r\n            0x0085,\r\n            0x21\r\n        },\r\n        {\r\n            0x0086,\r\n            0x00\r\n        },\r\n        {\r\n            0x0087,\r\n            0x10\r\n        },\r\n        {\r\n            0x0088,\r\n            0x00\r\n        },\r\n    };\r\n    A.CallTo(() =\u003E fakeBus.Read(A\u003Cushort\u003E._, A\u003Cbool\u003E._)).ReturnsLazily((ushort addr, bool ro) =\u003E program[addr]);\r\n    var cpu = new Z80()\r\n    {\r\n        A = 0x00,\r\n        IX = 0x00,\r\n        PC = 0x0080\r\n    };\r\n    cpu.ConnectToBus(fakeBus);\r\n    while (cpu.PC \u003C 0x0088)\r\n    {\r\n        cpu.Step();\r\n    }\r\n\r\n    Assert.Equal(0x1000, cpu.IX);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Found"
          },
          {
            "Name": "InappropriateAssertionsTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "Name": "LackOfCohesion",
        "Body": null,
        "Smells": [
          {
            "Name": "LackOfCohesion",
            "Status": "Not Found"
          }
        ]
      }
    ]
  }
]