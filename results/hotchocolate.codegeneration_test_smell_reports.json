[
  {
    "Name": "Neo4JCodeGeneratorTests",
    "Message": null,
    "Methods": [
      {
        "Name": "Works",
        "Body": "{\r\n    // Arrange\r\n    DocumentNode? doc = Utf8GraphQLParser.Parse(@\u0022\n                type Movie @typeName(name: \u0022\u0022Foo\u0022\u0022, pluralName: \u0022\u0022Bars\u0022\u0022) {\n                  title: String\n                  year: Int\n                  imdbRating: Float\n                  baz: Baz\n                  quox: String\n                }\n\n                type Actor {\n                  name: String\n                }\n\n                type Baz {\n                  foo: String\n                }\n\n                # settings would be annotated to the schema and translate directly into schema options\n                schema\n                  @paging(kind: NONE)\n                  @filtering\n                  @sorting\n                {\n                  query: Query\n                }\u0022);\r\n    var docs = new List\u003CDocumentNode\u003E()\r\n    {\r\n        doc\r\n    };\r\n    var context = new CodeGeneratorContext(\u0022MyNeo4J\u0022, \u0022Neo4JDatabase\u0022, \u0022CompanyName.Neo4J\u0022, docs);\r\n    // Act\r\n    CodeGenerationResult? result = new Neo4JCodeGenerator().Generate(context);\r\n    // Assert\r\n    Snapshot.Match(result);\r\n}",
        "Smells": [
          {
            "Name": "EmptyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConditionalTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "CyclomaticComplexityTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ExpectedExceptionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "AssertionRouletteTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "UnknownTestSmell",
            "Status": "Found"
          },
          {
            "Name": "RedundantPrintTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SleepyTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "IgnoreTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "RedundantAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "DuplicateAssertionTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "MagicNumberTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EagerTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "BoolInAssertEqualSmell",
            "Status": "Not Found"
          },
          {
            "Name": "EqualInAssertSmell",
            "Status": "Not Found"
          },
          {
            "Name": "SensitiveEqualitySmell",
            "Status": "Not Found"
          },
          {
            "Name": "ConstructorInitializationTestSmell",
            "Status": "Not Found"
          },
          {
            "Name": "ObscureInLineSetUpSmell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  }
]